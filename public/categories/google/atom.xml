<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google | OJ's perspective]]></title>
  <link href="http://buffered.io/categories/google/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2013-12-28T12:48:10+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Issue with Google Reader]]></title>
    <link href="http://buffered.io/posts/issue-with-google-reader/"/>
    <updated>2010-11-26T09:58:00+10:00</updated>
    <id>http://buffered.io/posts/issue-with-google-reader</id>
    <content type="html"><![CDATA[<p>For some reason Google Reader has failed to update and include my latest <a href="/posts/webmachine-erlydtl-and-riak-part-3/">Web Development in Erlang</a> post. This is rather odd as every other RSS reader I have tested (including the one built-in to MS Outlook) has managed to parse and handle the post just fine. I have attempted to get in touch with the GReader team but I haven&rsquo;t had any luck so far in getting them to respond.</p>

<p>Those of you who are using Google Reader and are interested in this post, please point your browser in <a href="/posts/webmachine-erlydtl-and-riak-part-3/">this direction</a>.</p>

<p>Apologies for the issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Future is Erlang]]></title>
    <link href="http://buffered.io/posts/the-future-is-erlang/"/>
    <updated>2009-10-31T20:28:00+10:00</updated>
    <id>http://buffered.io/posts/the-future-is-erlang</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2009/10/erlang.png" alt="erlang" title="erlang" style="float:left;margin-right:5px;margin-bottom:5px;" />For quite a while I&rsquo;ve been using my spare cycles to chew over a problem. This problem is not one that hasn&rsquo;t been solved before, but one that I feel can be solved in a much better way. From the bit of research that I&rsquo;ve done, I can see at least three areas which can be improved on dramatically. So I&rsquo;ve decided, after a long period of deliberation, to go ahead and build my solution and release it to the world as a service!</p>

<p>I know, this kind of thing happens thousands of times a day. Some arbitrary geek decided to build the next killer app and expects to make a crapload of cash out of it. While that would be nice, the ultimate goal isn&rsquo;t the cash. The goal for me is to build something that gets used, and for me to begin to master an area of technology that I&rsquo;ve had a quiet passion for for a long period of time now.</p>

<p>My plan is simple. While learning the technologies that I will be using I&rsquo;ll be building another application and blogging about it so that all of you can learn with me. Meanwhile, I shall use my learnings to build this other application at the same time.</p>

<p>The final result should be a series of posts which help other people learn the technology stack, give better coverage and visibility to languages and technologies that a lot of the geek world doesn&rsquo;t know about (and really should!), and for me to carve myself a bit of a niche here on the East coast of Ozland. I am hoping to be able to consult my services out to other businesses as a result.</p>

<p>For those that are interested in following along, here is the full tech stack and toolset that I&rsquo;ll be using:</p>

<ul>
<li><a href="http://erlang.org/" title="Erlang">Erlang</a> - A fantastic cross-platform functional programming language that has some amazing features.</li>
<li><a href="http://bitbucket.org/justin/webmachine/" title="Webmachine HTTP toolkit">Webmachine</a> - A HTTP toolkit which sits on top of <a href="http://code.google.com/p/mochiweb/" title="Mochiweb">Mochiweb</a> that makes it easy to build well-behaved HTTP applications.</li>
<li><a href="http://nitrogenproject.com/" title="Nitrogen Framework">Nitrogen</a> - An Erlang-based framework that makes it easy to build websites.</li>
<li><a href="http://riak.basho.com/" title="Riak">Riak</a> or <a href="http://couchdb.apache.org/" title="CouchDB">CouchDB</a> - Both of these amazing pieces of tech are potential candidates for the back-end storage. I'm not yet sure which one I'll go with.</li>
<li><a href="http://jquery.com/" title="jQuery">jQuery</a> - A great JavaScript library for the front-end.</li>
<li><a href="http://vim.org/" title="VIM text editor">VIM</a> - My favourite text editor :)</li>
<li><a href="http://www.xubuntu.org/" title="Xubuntu">Xubuntu</a> - Ubuntu <a href="http://ubuntu.com/" title="Ubuntu 9.10">Karmic Koala</a> with <a href="http://www.xfce.org/" title="XFCE">XFCE</a> as the window manager.</li>
<li><a href="http://mercurial-scm.org/" title="Mercurial SCM">Mercurial</a> - My favourite version control system.</li>
<li><a href="http://trac.edgewall.org/" title="The Trac Project">Trac</a> - A project tracking tool.</li>
<li><a href="http://www.virtualbox.org/" title="VirtualBox">VirtualBox</a> - My choice for virtualisation. I tend to run Windows 7 as my primary OS, so most of my dev will be in a VM. When I get my desktop machine back up and running (with all three monitors!) it'll most likely multiboot Win 7 and Xubuntu.
<li><a href="http://wave.google.com/" title="Google Wave">Google Wave</a> - I'll be using this for communications with some really switched on people in the Erlang community who have kindly offered to help me with questions and whatnot specific to some of the areas of tech I've mentioned above.</li>
</ul>


<p>During the course of my blogging/learning I&rsquo;ll be focussing on Webmachine, Riak/CouchDB, Erlang and Nitrogen. All the other tools will probably get mentioned along the way, but the primary goal is to focus on these things.</p>

<p>I&rsquo;m really excited! I&rsquo;m currently in the process of documenting my goals and the design for the main application. Once that&rsquo;s done, I&rsquo;ll get started with the fun stuff. I&rsquo;ve got a lot to do and it should be a fun ride. I hope you enjoy following along!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Interesting Little Problem]]></title>
    <link href="http://buffered.io/posts/an-interesting-little-problem/"/>
    <updated>2008-06-14T20:39:00+10:00</updated>
    <id>http://buffered.io/posts/an-interesting-little-problem</id>
    <content type="html"><![CDATA[<p>This post was inspired by a recent interview question that was posted over at <a href="http://www.fsharp.it/posts/google-interview-question-product-of-other-elements-in-an-array-in-on/" title="Fsharp.it">fsharp.it</a>. It&rsquo;s one of those neat little questions which looks really simple on the surface but is quite tricky.</p>

<!--more-->


<p>The question apparently originates from an interview that someone had with Google, and goes something like this:<blockquote><p>
There is an array A[N] of N integers. You have to compose an array Output[N] such that Output[i] will be equal to the product of all the elements of A[] except A[i].</p>

<p>Example:
&nbsp;&nbsp;&nbsp;&nbsp;INPUT:[4, 3, 2, 1, 2]
&nbsp;&nbsp;&nbsp;&nbsp;OUTPUT:[12, 16, 24, 48, 24]</p>

<p><strong>Note:</strong> Solve it <em>without</em> the division operator and in O(n).
</p></blockquote>
Since I had a spare 10 minutes, I decided to give it a shot &hellip; in Haskell.</p>

<p>I&rsquo;ll cut to the chase, here&rsquo;s the source to my solution:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">vals</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">vals</span> <span class="ow">=</span> <span class="p">[</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">answers</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">answers</span> <span class="ow">=</span> <span class="p">[</span> <span class="n">front</span> <span class="o">!!</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">back</span> <span class="o">!!</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="n">length</span> <span class="n">vals</span><span class="p">]</span> <span class="p">]</span>
</span><span class='line'>  <span class="kr">where</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">front</span> <span class="ow">=</span> <span class="n">scanl1</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">temp</span>
</span><span class='line'><span class="nf">back</span> <span class="ow">=</span> <span class="n">scanr1</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">temp</span>
</span><span class='line'><span class="nf">temp</span> <span class="ow">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">++</span> <span class="n">vals</span> <span class="o">++</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I&rsquo;m hoping that this is quite self-explanatory. But in case it&rsquo;s not, I&rsquo;ll cover some of the gory bits.</p>

<p>The core of the problem is coming up with a way of determining the value of the product of numbers from the start of the list up to a given index, and to do the same at the other end of the list from that given index.</p>

<p>I thought that the easiest way would be to create two lists: both of them containing the compounded products of the numbers in the list, but each of them in different directions. To generate those lists, I thought that I&rsquo;d add the value of 1 to the list, both at the start and at the end, as it would allow me to do two things:<ol><li>Generate the lists using the <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v%3Ascanl1" title="scanl1">scanl1</a> and scanr1 functions.</li><li>Index into the list using a counter that&rsquo;s based on the size of the original values without having to worry about going past the bounds of the list.</li></ol>Yup, quite lazy, but very handy.</p>

<p>Here&rsquo;s the output when I execute <em>answers</em> in <a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci.html" title="GHCi">GHCi</a>:</p>

<pre><code>Prelude&gt; :l google.hs
[1 of 1] Compiling Main             ( google.hs, interpreted )
Ok, modules loaded: Main.
*Main&gt; answers
[12,16,24,48,24]
*Main&gt;
</code></pre>

<p>Problem solved in O(n). Neato! After feeling rather chuffed with myself I thought I&rsquo;d go back to Fsharp.it and check out the answer posted there. The principle was similar, but the implementation listed was a little longer.</p>

<p>So I thought I&rsquo;d have a go at writing up my solution using F#. It didn&rsquo;t seem like a stretch until I realised how little of the language I know (I&rsquo;m currently reading through <a href="http://www.amazon.com/Expert-F-Experts-Voice-Net/dp/1590598504" title="Expert F#">Expert F#</a>, but I&rsquo;m still far from being one myself). Here&rsquo;s what I came up with:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">light</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">vals</span> <span class="o">=</span> <span class="o">[</span> <span class="mi">4</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">2</span><span class="o">;</span> <span class="mi">1</span><span class="o">;</span> <span class="mi">2</span><span class="o">;</span> <span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">mul</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span><span class='line'><span class="k">let</span> <span class="o">(++)</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">append</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">answers</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">++</span> <span class="n">vals</span> <span class="o">++</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">front</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">scan1_left</span> <span class="n">mul</span> <span class="n">temp</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">to_array</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">back</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">scan1_right</span> <span class="n">mul</span> <span class="n">temp</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">to_array</span>
</span><span class='line'>  <span class="n">seq</span> <span class="o">{</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="o">[</span><span class="mi">1</span> <span class="o">..</span> <span class="n">vals</span><span class="o">.</span><span class="nc">Length</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;&gt;</span> <span class="n">front</span><span class="o">.[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="n">back</span><span class="o">.[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A few things you might notice:<ol><li>My syntax highlighter plugin doesn&rsquo;t currently support F# :)</li><li>I use a similar method to the Haskell solution, but ended up having to convert the <em>front</em> and <em>back</em> lists to arrays. The reason was because I need to be able to index into the resulting integer set, and I can&rsquo;t do that with lists (if I&rsquo;m wrong, please let me know!)</li><li>I defined a function called <em>mul</em> which does a simple multiplication. I wanted to pass <em>(<em>)</em> as the first parameter to the scan1_</em> functions, but the interpreter took that as the start of a comment instead! So I had to resort to a dodgey hack. If you know a way around this, please let me know.</li><li>I wrote my own (++) operator because I didn&rsquo;t want to have to write List.append more than once :)</li></ol>
In other words, my F# version smells like n00b. I&rsquo;m sure there are so many better ways to implement this using the built-in features of the language and supporting libraries, but I&rsquo;m yet to get to the level when I can write it. I&rsquo;d love for someone to show me how :)</p>

<p>I did enjoy having a dabble with F# for the first time in ages, though I have to admit I much prefer using <a href="http://www.vim.org/" title="VIM">VIM</a> and <a href="http://research.microsoft.com/fsharp/manual/compiler.aspx" title="F# Interactive">fsi.exe</a> instead of <a href="http://msdn.microsoft.com/en-us/vstudio/default.aspx" title="Visual Studio">Visual Studio</a> and the <a href="http://blogs.msdn.com/dsyme/archive/posts/534925.aspx" title="A Taste of F# Interactive in Visual Studio">interactive F# add-in</a>.</p>

<p>As always, feedback and criticism welcomed (and needed).</p>

<h2>Update</h2>


<p>After some great feedback (see below), I&rsquo;ve come to realise that the !! operator in Haskell is actually O(n) itself. Hence it was a bad choice for inclusion. Back to the drawing board for me!</p>

<p>Here are a couple of submitted Haskell solutions.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="n">by</span> <span class="n">lf</span>
</span><span class='line'><span class="nf">scanm</span> <span class="n">f</span> <span class="n">z</span> <span class="n">xs</span> <span class="ow">=</span> <span class="n">zipWith</span> <span class="n">f</span> <span class="p">(</span><span class="n">scanl</span> <span class="n">f</span> <span class="n">z</span> <span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">tail</span> <span class="o">$</span> <span class="n">scanr</span> <span class="n">f</span> <span class="n">z</span> <span class="n">xs</span><span class="p">)</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="n">print</span> <span class="o">$</span> <span class="n">scanm</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="mi">1</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="n">by</span> <span class="kt">Henning</span>
</span><span class='line'><span class="nf">answers</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class='line'><span class="nf">answers</span> <span class="n">vals</span> <span class="ow">=</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">front</span> <span class="p">(</span><span class="n">drop</span> <span class="mi">1</span> <span class="n">back</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kr">where</span>
</span><span class='line'><span class="nf">front</span> <span class="ow">=</span> <span class="n">scanl</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="mi">1</span> <span class="n">vals</span>
</span><span class='line'><span class="nf">back</span> <span class="ow">=</span> <span class="n">scanr</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="mi">1</span> <span class="n">vals</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="n">by</span> <span class="n">desp</span>
</span><span class='line'><span class="nf">problem</span> <span class="n">input</span> <span class="ow">=</span> <span class="n">zipWith</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">front</span> <span class="n">back</span> <span class="kr">where</span>
</span><span class='line'>  <span class="n">front</span> <span class="ow">=</span> <span class="n">init</span> <span class="p">(</span><span class="n">scanl</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="mi">1</span> <span class="n">input</span><span class="p">)</span>
</span><span class='line'>  <span class="n">back</span> <span class="ow">=</span> <span class="n">tail</span> <span class="p">(</span><span class="n">scanr</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="mi">1</span> <span class="n">input</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="n">by</span> <span class="n">foobar</span>
</span><span class='line'><span class="nf">foo</span> <span class="kt">[]</span> <span class="kr">_</span> <span class="ow">=</span> <span class="p">(</span><span class="kt">[]</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nf">foo</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">=</span> <span class="kr">let</span> <span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foo</span> <span class="n">xs</span> <span class="p">(</span><span class="n">acc</span><span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>             <span class="kr">in</span> <span class="p">((</span><span class="n">m</span><span class="o">*</span><span class="n">acc</span><span class="p">)</span><span class="kt">:</span><span class="n">l</span> <span class="p">,</span> <span class="n">m</span><span class="o">*</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thanks for the submissions guys :) Sorry for not including the imperative versions in the update.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preview Feeds in Google Reader]]></title>
    <link href="http://buffered.io/posts/preview-feeds-in-google-reader/"/>
    <updated>2008-05-25T09:51:00+10:00</updated>
    <id>http://buffered.io/posts/preview-feeds-in-google-reader</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s another reason why I find <a href="http://reader.google.com/" title="Google Reader">Google Reader</a> a excellent choice for reading your RSS feeds.</p>

<p>Most of us have a collection of feeds that contain similar subject matter. As a geek, <em>most</em> of my feeds are geek-related. As a geek who likes to stay up to speed, I also like to know what other blogs and feeds are good to read.</p>

<p>This is where Google Reader&rsquo;s <strong>Top Recommendations</strong> come in. Google do a great job of throwing other feeds in your face that you might like to read based on the kind of stuff that you&rsquo;ve already subscribed to.</p>

<!--more-->


<p><a href="http://buffered.io/uploads/2008/05/reader_recommendations.png" rel="lightbox[rec_reader]" title="Recommended feeds"><img src="http://buffered.io/uploads/2008/05/reader_recommendations.png" alt="A shortlist of recommended feeds" title="Recommended feeds" width="300" height="205" class="aligncenter size-medium wp-image-361" /></a></p>

<p>As you can see, it lists a few blogs that are of a similar nature to those that you read and gives you the option to view them. When you click on the <em>View all &gt;&gt;</em> button, you&rsquo;re presented with a rather extensive list:</p>

<p><a href="http://buffered.io/uploads/2008/05/reader_rec_list.png" title="Detail list of recommended feeds" rel="lightbox[rec_reader]"><img src="http://buffered.io/uploads/2008/05/reader_rec_list.png" alt="Detail list of recommended feeds" title="Detail list of recommended feeds" width="300" height="205" class="aligncenter size-medium wp-image-362" /></a></p>

<p>This next bit is something I really like. When I see a feed that I might be interested in (after weighing up how active the blog is and how many subscribers there are), I can click on the feed to preview it without having to subscribe to it first! Check it out:</p>

<p><a href="http://buffered.io/uploads/2008/05/reader_rec_preview.png" rel="lightbox[rec_reader]" title="Feed preview"><img src="http://buffered.io/uploads/2008/05/reader_rec_preview.png" alt="Feed preview" title="Feed preview" width="300" height="205" class="aligncenter size-medium wp-image-360" /></a></p>

<p>You can browse through the feed and interact with it as if it was part of your subscription list already. If you see some articles that take your fancy and the content appeals to you, you can easily subscribe by clicking on the profoundly obvious <em>Subscribe</em> button. If I don&rsquo;t like it, I can go back to the list, and I can even click on the &ldquo;No thanks&rdquo; link next to the feed so that it doesn&rsquo;t appear in my recommended list again.</p>

<p>Too easy. This is exactly the kind of &ldquo;ease of use&rdquo; feature that I want from my RSS reader. I&rsquo;m sure a couple of other readers would provide similar features, but the simplicity of this really blows my skirt up.</p>

<p>+1 Google Reader (again).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Google App that Sucks]]></title>
    <link href="http://buffered.io/posts/a-google-app-that-sucks/"/>
    <updated>2007-12-25T16:29:00+10:00</updated>
    <id>http://buffered.io/posts/a-google-app-that-sucks</id>
    <content type="html"><![CDATA[<p><a href="http://labs.google.com/" title="Google Labs">Google Labs</a> has a history of releasing some pretty amazing bits of software. <a href="http://earth.google.com/" title="Google Earth">Google Earth</a>, <a href="http://mail.google.com/" title="Google Mail">Google Mail</a>, <a href="http://reader.google.com/" title="Google Reader">Google Reader</a>, <a href="http://analytics.google.com/" title="Google Analytics">Google Analytics</a>, <a href="http://maps.google.com/" title="Google Maps">Google Maps</a> and <a href="http://docs.google.com/" title="Google Docs">Google Docs</a> are just a few of the graduates! It&rsquo;s an impressive list to say the least. All of those applications do a fantastic job. I&rsquo;m a huge fan of all of them and use them all regularly. So, Google, <a href="http://en.wikipedia.org/wiki/WTF">WTF</a> happened to <a href="http://talk.google.com/" title="Google Talk">Google Talk</a>?!</p>

<!--more-->


<p>When GTalk was first released it was fantastic. It was simple, slick and quick. It even had built-in <a href="http://en.wikipedia.org/wiki/Voice_over_IP" title="Voice over IP">VOIP</a> support, and the quality was extremely impressive. I decided that this would be my IM of choice, and the one that I would try to get my friends and family to use.</p>

<p>The problem is that, other than a few really minor updates since its first release, GTalk&rsquo;s development has been stagnant. What appeared to be a really promising start to a new <a href="http://en.wikipedia.org/wiki/Instant_messaging_client" title="IM Client">IM client</a> has now become a non-advancing app that just takes up space on my hard drive. The development seems to have stalled. The quality of the voice hasn&rsquo;t improved. The features of the client haven&rsquo;t changed or increased. There has been absolutely <em>nothing</em> worthy added to GTalk for as long as I can remember.</p>

<p>In my view, GTalk is in dire need of the following features/improvements:<ul><li><strong>A new interface.</strong> When it first came out, the lean client was something that was a pleasure to use. It&rsquo;s now in need of a makeover. A fresh look would do it the world of good.</li><li><strong>Tabbed chats.</strong> This is actually the reason why I use <a href="http://www.pidgin.im/" title="Pidgin">Pidgin</a> instead of the GTalk client these days. Not just that, but the Pidgin client is a lot more feature rich (shame it doesn&rsquo;t support GTalk VOIP).</li><li><strong>More emoticons.</strong> &lsquo;nuff said.</li><li><strong>Webcam support.</strong> How can they have not added webcam support by now? I know there&rsquo;s a plugin out there made by a third-party developer that provides it, but it should be part of the core. People don&rsquo;t want to have to search for plugins to get this functionality, it should just work out of the box.</li><li><strong>Encrypted chats.</strong> I want to be able to encrypt my conversations. Not because I&rsquo;m talking about anything dodgey, but because I don&rsquo;t want my chats logged and data-mined without my permission.</li><li><strong>Cross-platform support.</strong> Why are there no versions for Linux or Mac? Even though I might not personally use them, I have friends who do! Let&rsquo;s give them a fair go too.</li></u>So I&rsquo;ve now removed my GTalk install. I&rsquo;ll continue to use Pidgin for standard IM (tabbed chats, encryption plugins, cross-platform, multi-protocol), and I&rsquo;ll use <a href="http://www.skype.com/" title="Skype">Skype</a> for voice and video chats (voice <em>and</em> video out of the box, encryption, cross-platform). Until the GTalk team finally throw a bit of effort into their product it won&rsquo;t be making another appearance on my desktop.</p>

<p>PS. Merry Christmas everyone :)</p>
]]></content>
  </entry>
  
</feed>
