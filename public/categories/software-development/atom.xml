<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Development | OJ's rants]]></title>
  <link href="http://buffered.io/categories/software-development/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2012-02-15T21:21:25+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redirects with Webmachine]]></title>
    <link href="http://buffered.io/posts/redirects-with-webmachine/"/>
    <updated>2012-02-15T19:10:00+10:00</updated>
    <id>http://buffered.io/posts/redirects-with-webmachine</id>
    <content type="html"><![CDATA[<p><a href="http://webmachine.basho.com/" title="Webmachine">Webmachine</a> is currently my favourite tool for building websites. I've been lucky enough to use it on a few things now, some commercially some personally. While working on my <a href="http://buffered.io/series/web-development-with-erlang/" title="Web development with Erlang">Erlang web development series</a> I had to handle the case where URLs redirected to other URLs. I found some basic documentation on this but wasn't able to find a canonical example of how to do it.</p>

<p>After a big of digging through blog posts and speaking to people on IRC I figured out how it was done. The goal of this post is to show how it's done for 301 (permanent) and 307 (temporary) redirects.</p>

<!--more-->


<p>You're probably already aware that Webmachine's goal is to make easy to build <em>well behaved HTTP applications</em>. It does this by enforcing a workflow which guides you through the HTTP process. Your job, as the developer, is to build <strong>resources</strong> which override certain behaviours depending on what you want to achieve.</p>

<p>In order to get your resource to return the appropriate redirect error codes, you need to provide custom implementations of three of four functions. Two of them are common to both 301 and 307 redirects, the developer must choose between the other two depending on the type of redirect required.</p>

<h2><code>resource_exists</code></h2>

<p>This function is the first of the functions that is called by the Webmachine pipeline and expects the results in the standard format of <code>{&lt;result&gt;, ReqData, State}</code>. The <code>&lt;result&gt;</code> needs to be a boolean atom (ie. <code>true</code> or <code>false</code>). The default behaviour of this function returns <code>{true, ReqData, State}</code>. To start off the process of redirecting, this function needs to tell Webmachine that the resource doesn't exist by instead returning <code>{false, ReqData, State}</code>.</p>

<p>{% codeblock lang:erlang %}
resource_exists(ReqData, State) ->
  {false, ReqData, State}.
{% endcodeblock %}</p>

<h2><code>previously_existed</code></h2>

<p>This function tells Webmachine if the resource had, for some reason, existed in the past. The return value of this function takes the same format as the <code>resource_exists</code> function, but the default behaviour returns <code>{false, ReqData, State}</code> which tells Webmachine that the resource never existed. This results in a 404 (not found) error being returned to the caller.</p>

<p>This isn't the behaviour we want, so instead we need to override the function and instead return <code>{true, ReqData, State}</code>.</p>

<p>{% codeblock lang:erlang %}
previously_existed(ReqData, State) ->
  {true, ReqData, State}.
{% endcodeblock %}</p>

<h2><code>moved_temporarily</code> - for 307 redirects</h2>

<p>If you're looking to get a 307 redirect, you need to override this function. The default return value of this function is the same as <code>previously_existed</code> which isn't going to give us what we need. Instead we need to tell Webmachine that there is another URL which should be used instead. We do this by returning <code>{{ "{" }}{true, &lt;URL&gt;}, ReqData, State}</code>. The URL that is returned is what Webmachine will pass back to the user along with the 307 redirect code.</p>

<p>{% codeblock lang:erlang %}
moved_temporarily(ReqData, State) ->
  {{ "{" }}{true, "http://buffered.io"}, ReqData, State}.
{% endcodeblock %}</p>

<p>Do not override this function if you're looking to do a permanent redirect.</p>

<p>This is what happens if you hit a resource with this behaviour using <a href="http://curl.haxx.se/" title="cURL">cURL</a>.</p>

<pre><code>oj@air ~/ $ curl -v http://localhost:8000/temporary
* About to connect() to localhost port 8000 (#0)
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8000 (#0)
&gt; GET /temporary HTTP/1.1
&gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
&gt; Host: localhost:8000
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 307 Temporary Redirect
&lt; Server: MochiWeb/1.1 WebMachine/1.9.0 (someone had painted it blue)
&lt; Location: http://buffered.io/
&lt; Date: Wed, 15 Feb 2012 09:05:16 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
</code></pre>

<h2><code>moved_permanently</code> - for 301 redirects</h2>

<p>If you're aiming to deliver a 301 redirect then this is the function you should override. Again the default return value is the same as <code>previously_existed</code> (just like <code>moved_temporarily</code>) and we need to override it with the same detail as in <code>moved_temporarily</code>).</p>

<p>{% codeblock lang:erlang %}
moved_permanently(ReqData, State) ->
  {{ "{" }}{true, "http://buffered.io"}, ReqData, State}.
{% endcodeblock %}</p>

<p>Do not override this function if you're looking to do a temporary redirect.</p>

<p>This is what happens if you hit a resource with this behaviour using <a href="http://curl.haxx.se/" title="cURL">cURL</a>.</p>

<pre><code>oj@air ~/code/riak $ curl -v http://localhost:8000/permanent
* About to connect() to localhost port 8000 (#0)
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8000 (#0)
&gt; GET /permanent HTTP/1.1
&gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
&gt; Host: localhost:8000
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 301 Moved Permanently
&lt; Server: MochiWeb/1.1 WebMachine/1.9.0 (someone had painted it blue)
&lt; Location: http://buffered.io/
&lt; Date: Wed, 15 Feb 2012 09:09:03 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
</code></pre>

<h2>That's all folks</h2>

<p>For once it's short and sweet. I hope you find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Tools List - 2012]]></title>
    <link href="http://buffered.io/posts/my-tools-list-2012/"/>
    <updated>2012-01-31T20:13:00+10:00</updated>
    <id>http://buffered.io/posts/my-tools-list-2012</id>
    <content type="html"><![CDATA[<p>The topic of tools is often a hot one amongst developers and every year
we see an influx of blog posts where people rant and rave about which
ones they love the most, and why.</p>

<p>Far be it from me to stay out of such a discussion!</p>

<p>Here is a list of the tools that I use as of the end of January 2012. Some are simply noteworthy.
Others are very handy and while I would get by without them they would
be missed. Some of these <strong>I simply cannot live without</strong>. I'm not going
to bother with ratings. I won't go into frameworks or the like which
make their way into my code, instead I am focussing on those tools which
help me do the coding and which aid me in my general computer usage.</p>

<p>Some of these tools are platform-specific, but many can be used across
different platforms.</p>

<!--more-->


<h2>VIM</h2>

<p>Author: <a href="http://www.moolenaar.net/">Bram Moolenaar</a> --
Homepage: <a href="http://www.vim.org/">http://www.vim.org/</a></p>

<p>Yes I'm getting the religious war out of the way immediately.</p>

<p>Without a doubt, your editor is the most important tool in your toolbox.
If you haven't yet mastered your own editor you are seriously doing
yourself a disservice. For me, VIM is by far the best editor I have ever
used. Why? Well...</p>

<p>When it comes to coding I spend most of my <em>editing</em> code rather than
writing it. That could be because I'm a terrible code, it could be
that coding is mostly editing with a bit of straight, rawhide
development along the way. As a result I find that the most common
things that I do when coding are:</p>

<ul>
<li>Moving around the source files.</li>
<li>Searching for text.</li>
<li>Repeating edits that are the same or similar.</li>
<li>As much as I hate to say it, cutting and pasting (think "moving code
around" rather than "duplicating code").</li>
<li>Performing edits of a very specific coding nature. Examples are
replacing a function's argument list, deleting the content of
a function, renaming, refactoring, etc.</li>
</ul>


<p>I think that many other developers will have similar experiences.</p>

<p>The first question I get when I start to explain my position is:
<em>"So why is it that you prefer to use VIM for this when there are so
many tools out there that can help you do all of the above?"</em> More often
that not this comes from the .NET developers I know. These guys know
that I spend most of my time (at least at the moment) writing .NET
applications. As a result, I spend a lot of time in <a href="http://www.microsoft.com/visualstudio/">Visual Studio</a>.</p>

<p>So if I have Visual Studio handy I also have a plethora of plug-ins, such
as <a href="http://www.jetbrains.com/rsharper">ReSharper</a>, which can help with refactoring, moving code around,
etc. Why not use them? The answer is pretty simple: I don't want to tie
myself to a tool (or set of tools) that is tied to one language or
platform.</p>

<p>I love to code in other languages such as <a href="http://www.erlang.org/">Erlang</a>, <a href="http://www.haskell.org/">Haskell</a> and <a href="http://research.microsoft.com/fsharp">F#</a>. I have
no choice but to write <a href="http://en.wikipedia.org/wiki/JavaScript">Javascript</a> but I also use <a href="http://coffeescript.org/">Coffeescript</a>
and have played with the likes of <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> and <a href="http://clojure.org/">Clojure</a>. I use these
languages on <a href="http://windows.microsoft.com/">three</a> <a href="http://kernel.org/">different</a> <a href="http://www.apple.com/macosx/">platforms</a>.</p>

<p>I want the same editing experience, the same shortcuts, the same layout
and the same colour scheme regardless of language or platform. Visual
Studio can not give me that (nor will it down the track).</p>

<p>As well as this, the likes of Visual Studio and ReSharper tend to cost
a fair bit of cash. VIM does not, it's free.</p>

<p>I could have chosen one of a number of editors -- including <a href="http://www.gnu.org/s/emacs">Emacs</a>,
<a href="http://notepad-plus-plus.org/">Notepad++</a>, <a href="http://macromates.com/">TextMate</a>, <a href="http://www.sublimetext.com/">SublimeText</a> and more -- but after
experimenting with each and every one, VIM was a standout performer
thanks to...</p>

<p><strong>Command mode</strong> - having the ability to <em>remain in command mode</em> without
the need to hold a modifier key (such as CTRL) is brilliant. It feels
much friendlier on the hands and does a great job of reducing strain and
the likelihood of RSI. You can do way more with fewer keystrokes and
often you don't even have to move your fingers from the home row.</p>

<p>A common argument against VIM is the learning curve. Yes, it might
initially feel very odd and you will no doubt feel <em>less</em> productive
when you first start using it. After a surprisingly short period of
time, you will start to see the benefits and you'll wonder why you
haven't invested the time to learn this earlier.</p>

<p>VIM is also incredibly extensible. There are a ridiculous number of
[plug-ins and scripts][VimPlugins] available which do all kinds of crazy
things. There are syntax-highlighters for almost any language you can
think of, way too many to list here in full. I would like to mention
a few stand-outs. They are <a href="https://github.com/tpope/pathogen">Pathogen</a>, <a href="https://github.com/Lokaltog/vim-easymotion">EasyMotion</a>, <a href="https://github.com/scrooloose/nerdtree">NERDTree</a>,
<a href="https://wincent.com/products/command-t">CommandT</a>, <a href="http://www.vim.org/scripts/script.php?script_id=3619">BufferGator</a>, <a href="https://github.com/tpope/vim-fugitive">Fugitive</a>, <a href="https://github.com/ervandew/supertab">SuperTab</a>, <a href="https://github.com/tpope/vim-surround">Surround</a>,
<a href="https://github.com/msanders/snipmate.vim">SnipMate</a>, <a href="http://www.vim.org/scripts/script.php?script_id=1234">Yankring</a> and <a href="https://github.com/tpope/vim-repeat">Repeat</a>.</p>

<p>I've also recently found out about the <a href="https://github.com/carlhuda/janus">Janus</a> setup (thanks <a href="http://www.shiftperception.com/">Dan</a>) which provides
many of these plug-ins out of the box in a handy-to-use script. It
doesn't work too well on windows, and there's a bit of effort to get it
to work, but it's worth it. It even brings to the table many of the
plug-ins that I have listed above without the need to go and install them
separately.</p>

<p>To be frank, anyone who is serious about writing code should be using an
editor like this. If not VIM, then look at <a href="http://www.gnu.org/s/emacs">Emacs</a>, <a href="http://macromates.com/">TextMate</a> or
<a href="http://www.sublimetext.com/">SublimeText</a> as they are great contenders. But if you can stick at it
long enough, I think you'll find the rewards of using VIM are much
better than you would otherwise believe.</p>

<p>There, I've said my piece. Time to move on!</p>

<h2>ViEmu</h2>

<p>Author: <a href="http://jonbho.net/">Jon Beltran de Heredia</a> --
Homepage: <a href="http://www.viemu.com/">http://www.viemu.com/</a></p>

<p>Wait a minute, didn't we just finish the VIM section? Yes we did, but
this tool, while related, is worth a mention by itself. ViEmu is
a plug-in for Visual Studio that makes the editor behave <em>like</em> VIM.
Unfortunately, due to a few reasons including the constraints put in
place by Visual Studio, it isn't a complete implementation of VIM.
Despite this, it's well worth paying for. I couldn't possibly go back to
using Visual Studio without it.</p>

<p>There is an alternative, <a href="http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329">VsVim</a>, which is free but it doesn't have
the command coverage that ViEmu does, nor does it perform as well in
many cases. It's enough to get you going, but if you're serious about
your VIMming in Visual Studio then get yourself a copy of ViEmu.</p>

<h2>UnxUtils</h2>

<p>Author: Not sure! --
Homepage: <a href="http://sourceforge.net/projects/unxutils/">http://sourceforge.net/projects/unxutils/</a></p>

<p>UnxUtils is just a set of Win32 ports of the GNU tools. I can't do
without
the likes of <a href="http://en.wikipedia.org/wiki/Sed">sed</a>, <a href="http://en.wikipedia.org/wiki/Grep">grep</a>, <a href="http://en.wikipedia.org/wiki/AWK">awk</a>, <a href="http://en.wikipedia.org/wiki/Which_(Unix)">which</a> etc from the command
line, nor can I bear using the likes of <code>dir</code> instead of <code>ls</code>. While
Windows does come with a subset of these (often with different names)
they aren't as easy to use nor do they have the coverage that you get
with the tools that come with *nix distributions.</p>

<p>On a new system I always download these and put them in my <code>%PATH%</code>.
Very handy!</p>

<h2>Mercurial</h2>

<p>Author: <a href="http://mercurial.selenic.com/wiki/mpm">Matt Mackall</a> and others --
Homepage: <a href="http://hg-scm.org/">http://hg-scm.org/</a></p>

<p>This was the first <a href="http://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a> that I was exposed to and I still love it.
It's a fantastic version control system and one that I often use for my
own projects. Mercurial is one of those tools that many people use,
particularly in the Open Source community.</p>

<p>I'd recommend downloading and install the command-line client and
nothing more. The GUI tools are "nice", but they're slow, and nowhere
near as easy to use as the CLI. Get used to the CLI and you'll be amazed
and how fast you can get things done.</p>

<p>If you use Open Source tools, you'll find that this is an absolute must
along with ...</p>

<h2>Git</h2>

<p>Author: <a href="http://torvalds-family.blogspot.com">Linus Torvalds</a> and others --
Homepage: <a href="http://git-scm.org/">http://git-scm.org/</a></p>

<p>As a long-term Mercurial user I found myself wondering why I would
bother using Git. Over time it became clear to me that learning it was
important. It has fast become the de-facto DVCS and I think this is
largely because of <a href="https://github.com/">Github</a>.</p>

<p>Git's command-line is a bit esoteric but incredibly powerful.
Mercurial's is probably a bit more intuitive to use and easier to
digest, particularly if you're used to using <a href="http://subversion.tigris.org/">Subversion</a>. To show
a crass example of how one can perceive the difference between the two,
here's an example (made up) of how you may make a cappuccino:</p>

<pre><code># with git
git drink --hot --infusion=coffee-beans --with-grind --milk=frothed --no-sugar

# with hg
hg cappuccino
</code></pre>

<p>I hope you get the point. Git is really powerful and super-configurable.
Mercurial is intuitive and easily covers most common use-cases with
commands that make sense.</p>

<p>Git's branching model is a bit different to that of Mercurial, and I have to
admit that I prefer it. Git is now my DVCS of choice, though this
wouldn't have been the case in the early days thanks to the woeful
Windows support.</p>

<p>Git, like Mercurial, is so common amongst Open Source enthusiasts that
you really don't have a choice but to install it. It's certainly worth
having and using. If you're building any application, even if it's
a small home project, you should be using a DVCS like Git.</p>

<h2>Rebar</h2>

<p>Author: <a href="http://twitter.com/dizzyco">Dave Smith</a> from <a href="http://www.basho.com/">Basho</a> --
Homepage: <a href="https://github.com/basho/rebar">https://github.com/basho/rebar</a></p>

<p>This is by far the best tool in my <a href="http://www.erlang.org/">Erlang</a> box. It's a fast Erlang
build tool with some great options, such as file generation from
templates, running of unit tests and management of dependencies. It's
Open Source too!</p>

<p>Get it. Use it.</p>

<h2>Dropbox</h2>

<p>Homepage: <a href="http://www.dropbox.com/">http://www.dropbox.com/</a></p>

<p>I think this is another really common developer tool, but can easily be
used by people who aren't developers. For me, this tool has its worth in
the ease in which files just magically appear on all the machines which
you use. I don't think I'm too different from other developers in that
I have quite a few machines around the house that I use frequently. I am
also on-site with clients and often want access to certain things that
I don't want to share out on the open web with the rest of the world.
Dropbox is awesome for this.</p>

<p>I recently discovered another contender called <a href="https://www.insynchq.com/">InSync</a> which uses
<a href="http://docs.google.com/">Google Docs</a> as a backing store, but for me it doesn't quite have the
appeal of Dropbox.</p>

<p>Cross platform. Quick. Easy. Free for 2GB of space. Very cool.</p>

<h2>WinRAR</h2>

<p>Homepage: <a href="http://www.rarlab.com/">http://www.rarlab.com/</a></p>

<p>Yes, that's right, I paid for WinRAR and I love it. It's still my
archiver of choice after many years of use. It's easy, has great
integration with the Windows shell, and RAR compression is really quite
good.</p>

<p>Yes, there are other options out there now that are free and handle all
kinds of compression algorithms -- <a href="http://www.7-zip.org/">7zip</a> is the first that comes to
mind -- but I find that I like the way I can interact with WinRAR both
graphically and via the command-line. I have no reason nor desire to
move away from WinRAR. I highly recommend it.</p>

<h2>Diffmerge</h2>

<p>Author: <a href="http://www.sourcegear.com/">Sourcegear</a> --
Homepage: <a href="http://www.sourcegear.com/diffmerge/index.html">http://www.sourcegear.com/diffmerge/index.html</a></p>

<p>This is a free-to-use diff and merge tool. It works on Windows, Mac and
Linux and does a fantastic job of understanding the differences in
files. It's hard to believe that a tool this good can be free.</p>

<p>Many people continue to pay for and use <a href="http://www.scootersoftware.com/">BeyondCompare</a> but I can't
see any reason to move away from Diffmerge. If you're looking for
a great tool to help understand the changes in your code-base, look no
further!</p>

<h2>Alfred</h2>

<p>Homepage: <a href="http://www.alfredapp.com/">http://www.alfredapp.com/</a></p>

<p>Alfred is a simple productivity tool for Mac OSX. It's a combined
application launcher, file finder, application automation tool and web
integrator. Think <a href="http://www.launchy.net/">Launchy</a> on steroids and add a nicer UI.</p>

<p>It's free and it's really good. You can also pay for a <a href="http://www.alfredapp.com/powerpack/">Powerpack</a> that
gives you even more functionality for the tidy sub of just &pound;15.</p>

<h2>ttytter</h2>

<p>Author: <a href="http://www.floodgap.com/">Cameron Kaiser</a> --
Homepage: <a href="http://www.floodgap.com/software/ttytter/">http://www.floodgap.com/software/ttytter/</a></p>

<p>No it's not a development tool, but my life of coding is influenced by
those who I speak to on Twitter, and hence the tools that I use to
interact with it are worth a mention.</p>

<p>This is another great tool for the command-line monkeys. ttytter is a fully
functional Twitter client that runs in the console. It supports hashtag
searches, @mentions, direct messages with full colour-coding. It's
really easy to use and a greatly way to keep the noise down in your
Twitter feed. You can even filter out crap that you don't want to see.</p>

<p>It's a great tool (written in <a href="http://www.perl.org/">Perl</a>!), but doesn't work in Windows.</p>

<h2>KeePassX</h2>

<p>Author: <a href="http://sourceforge.net/project/memberlist.php?group_id=166631">KeePassX team</a> --
Homepage: <a href="http://www.keepassx.org/">http://www.keepassx.org/</a></p>

<p>Hands up if you have thousands of accounts across the Internet. Keep you
hands up if you often (or always) use the same password for all of those
things.</p>

<p>If you still have you hand up, you need a slap. Password management is
actually quite a serious issue. Using the same password on many accounts
can open to you up to all kinds of attacks from the naughty people. All
it takes it for one of your accounts to be compromised and your password
extracted. The rest of your accounts are now owned.</p>

<p>There is no guarantee that the site you're signing up for uses the likes
of <a href="http://en.wikipedia.org/wiki/Secure_Sockets_Layer">SSL</a> or behind the scenes is doing a good job of managing your
password. To protect yourself you should instead generate large
passwords, ones that you don't have a hope of remembering, ones that
attackers will need quantum computers to crack. Also, having different
passwords to each of your accounts means that if one is compromised the
rest of them are still safe.</p>

<p>I use KeePassX to generate and manage these passwords. I secure my
password file with a brutally long password that I have no problems remembering.
This file is synced across my machines using
Dropbox so that I have access to my passwords wherever and whenever I need it.</p>

<p>It's a great utility and serves me really well. Get serious about your
password management and use something like KeePassX to help you do it.</p>

<h2>Octopress</h2>

<p>Author: <a href="http://brandonmathis.com/">Brandon Mathis</a> --
Homepage: <a href="http://octopress.org/">http://octopress.org/</a></p>

<p>This is what I use to write and publish my <a href="http://buffered.io/">blog</a>.
Previous I had used <a href="http://www.wordpress.com/">Wordpress</a> and had moved on to <a href="http://www.blogofile.com/">Blogofile</a> at
some point last year.</p>

<p>What I had realised was that my workflow for blogging wasn't really one
that fit with the likes of the mainstream tools like Wordpress. The
editing experience was painful, amongst other things. I came to realise
that a blog is in fact a static site with a few comments. Thanks to
<a href="http://www.disqus.com/">Disqus</a> the comment problem has been outsourced, so really the only
content I had was static. This is a good thing as handling static sites
is not only easier, but it means the server does less work and is less
likely to be attackable.</p>

<p>I moved over to Octopress over the holiday period of 2011/2012 and so
far I love it. I write all my posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, I push changes to
a <a href="https://github.com/">Github</a> repository and I publish a new version of my site with
a single command. It's a joy.</p>

<p>Octopress makes this all really easy and has built-in support for
themes, Github Pages and has a bunch of plug-ins that give you a great
looking and highly functional site out of the box.</p>

<p>I highly recommend it.</p>

<h1>That's all!</h1>

<p>Look at this list it's clear that I don't really rely on much. That
which I do rely on is often free or relatively low-cost. These tools are
what make me feel really productive and comfortable in front of the
machine. I hope that this has in some way inspired you to try a few new
things out, or at least write your own mini-list to praise that which
makes you the developer you are.</p>

<p>Bring on the comments, suggestions and flames.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reviews - They're all You need]]></title>
    <link href="http://buffered.io/posts/reviews-theyre-all-you-need/"/>
    <updated>2012-01-18T07:11:00+10:00</updated>
    <id>http://buffered.io/posts/reviews-theyre-all-you-need</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2012/01/pair-programming.jpg" rel="lightbox"><img src="http://buffered.io/uploads/2012/01/pair-programming.jpg" style="float:left;margin-right:5px;margin-bottom:5px;" width="200" /></a>I can clearly remember the first time I got involved in an Agile project -- it was back in 2004, it was in London and in the finance industry (insurance to be exact). When I joined the project the team was small though over time it become much bigger.</p>

<p>While on that gig I met and worked with a few of the nicest and best devs that I've worked with (<a href="https://twitter.com/#!/robertthegrey" title="Robert @ Twitter">RobG</a>, <a href="https://twitter.com/#!/thenapoleon" title="Yoann @ Twitter">Yoann</a> and <a href="https://twitter.com/#!/RockThunderUK" title="Paul @ Twitter">The Chief</a>).</p>

<p>It was an exciting project. We were using <a href="http://www.extremeprogramming.org/" title="Extreme Programming">XP</a> in very much its purest sense, right from the beginning. We always paired up to do our programming, we created stories, we estimated our points using a point system that wasn't tied to hours but instead was relative. We had mini-retrospectives, continuous integration, unit tests and more. For 2004, that was pretty good.</p>

<p>Since then I've worked on quite a few other Agile projects and over time, I have come to believe a few of the absolute purest views on Agile aren't necessarily the best.</p>

<!--more-->


<p>Any Agile practitioner will say "You should use the process that works well for your team" and while that's true they tend not to mean things like pair programming and unit testing which are considered an absolute must. The topic I'm interested in for the purpose of this post is <strong>pair programming</strong>.</p>

<h2>Does Pair Programming Work?</h2>

<p>Well does it? It's a hard question to answer given its generalised nature. It sounds clichéd, and I guess to a point it is, but the answer is both yes and no. I don't mean that in the same way that most people will mean it. I don't mean that it might work in some teams but not in others. What I mean is that it works when approaching a particular kind of problem but not for others.</p>

<p>To add another generalisation, it works well in cases where the problem is quite difficult, or requires one or more difficult and hand-coded algorithms to solve. The type of problem where the possibility of getting it <em>drastically</em> wrong is a perfect candidate.</p>

<p>Drastically wrong is subjective, but I think we all know what I mean by it.</p>

<p>Some might argue that pair programming isn't required even in this case, and perhaps they are right, but I don't think so. Yes, you can have a design session where you get people together and talk about the options for implementation, nut out of a few of the details, etc. You can take the value from the discussion and, as the developer, dive into your dark little world of editing and bash out what you think was the design that everyone else had discussed. The result is usually vastly different to what the rest of the collective thought was going to be implemented.</p>

<p>Pair programming here helps. It helps make sure that one person isn't skewed or biased, keeps discussion going around the problem and forces the developers to think more while they're writing the code. Each key design decision is shared across two brains and (in theory) a better design will result.</p>

<p>That's where pair programming fits. Anything <em>less</em> than that and I can't help but feel that it's overhead. It's a burden. It doesn't add enough value to justify its cost.</p>

<p>To be direct, yes I am saying that <em>pair programming is a waste of time and resources for anything less than the mind-boggling problems</em>. This assertion does come with a few assumptions:</p>

<ol>
<li>There are no junior members who may need mentoring.</li>
<li>All members of the development team are competent.</li>
<li>There is enough trust between the team members that each developer will not only <em>not</em> produce a pile of rubbish, but will also put their hands up if they feel they're getting into something which requires input from the other minds in the room.</li>
</ol>


<p>If any of those assumptions is false then pair programming may have to come into play, or not! Point #2 interests me a little more than the others. If someone isn't competent then it doesn't matter if you do pair programming with them. What tends to happen is the competent person ends up doing everything while the numpty sits there playing a rather passive role, checking Facebook on their phone.</p>

<h2>If PP doesn't work, what should we do?</h2>

<p>I found the answer to this question in 2008 when I joined a team of people working on a system here in Brisbane. This project, like the one I mentioned before, had people who really knew what they were doing ... I think! (in no particular order: <a href="https://twitter.com/#!/josephcooney" title="Joseph @ Twitter">JoCo</a>, <a href="https://twitter.com/#!/secretGeek" title="Leon @ Twitter">Mr B</a>, <a href="https://twitter.com/#!/joelpob" title="Joel @ Twitter">Joel</a>, <a href="https://twitter.com/#!/rhysparry" title="Rhys @ Twitter">Rhys</a>). I worked with these guys for nearly a year without really doing any pair programming at all.</p>

<p>Fast forward to now. I am again working with Leon, Rhys and Joel. I am again using the process that was used back then in 2008. I am again amazed at the quality of the output compared to so many other projects where pair programming was used to a very large extent. Not only that, the speed at which things are getting done is also pretty amazing. I am sure this is partly down to the developers themselves, but I think the lack of pair programming allows the team to be really productive.</p>

<p>So what are we doing instead?</p>

<p>Simply: Test Reviews and Code Reviews.</p>

<p>A developer works on a story by himself. During the course of development, the developer often shouts out to the rest of the team for advice on a given issue. They talk to the business owner to get clarification on the issues inside the requirements, the conversation is positive and constant. If the problem is really difficult, two of the guys will pair up and bash it out, but this proving to be a rarity.</p>

<p>At the end of development, prior to pushing any changes to the server, the developer must have one of the testers perform a test review of the work that has been done. When that has passed, a developer must do a full code review of what has been produced for that story.</p>

<h2>It doesn't sound any different!</h2>

<p>It might not appear to be different, but it is <em>very</em> different.</p>

<p><a href="https://twitter.com/#!/rhysparry" title="Rhys @ Twitter">Rhys</a> is our resident technical tester. In fact, he's a developer dressed up in tester's clothing. He has an incredibly sharp mind and an uncanny ability to find issues and break stuff. The number of times I have had my ass saved by Rhys prior to pushing my <del>shit</del> code to the central source repository is astounding. In all my time doing development, this one thing by itself has proved to catch more issues than anything else (including unit testing, automated testing, smoke testing and regression testing).</p>

<p>Testers have intimate knowledge of the requirements. They have experience with the system. They are aware of dependencies in business process that you are not. These factors, along with many others, are what make testers a great point of call prior to your commits.</p>

<p>It might be unfair to assume that every team has a technical testing resource that is the calibre of Rhys, but to put it bluntly <strong>your team should have one</strong>. Before passing your code on to the rest of the team it's your duty to make sure it is as unbroken as possible. Test reviews have proved to be the most effective thing in accomplishing this.</p>

<h2>Back it up with a proper code review</h2>

<p>That's right, not just any code review, but a <em>proper</em> one. One that requires you to go through your own code in quite a bit of detail. One that forces you to justify your design decisions. One that makes you critically analyse the legacy that you've just created.</p>

<p>Anyone who has gone through this process with a colleague of any reasonable quality will know that:</p>

<ul>
<li>... any time you cover off a bit of code that isn't that nice you get nervous before you even talk about it.</li>
<li>... the code you wrote that you knew was sub-par is going to be picked up.</li>
<li>... any stupidity that you failed to see will be thrown back in your face (in a positive way of course).</li>
<li>... even the most subtle things can prove to be important and a good code review will often demonstrate why.</li>
</ul>


<p>In short, you know that you'll get owned if you try to get away with something that you knew, deep down, wasn't good enough in the first place.</p>

<p>As someone who conducts code reviews for other people in the team, you'll not only learn about other people's styles, flaws and strong points, you'll also cover off areas of the system that you would otherwise <em>have absolutley no idea about</em>. This is the kind of knowledge sharing that you would get doing pair programming, but I think it's more effective because you're not dragged through the whole design and development process from the start, and you tend to be more interested when the discussion of the detail is condensed.</p>

<p>And let's face it, being critical of someone else's code is something we all enjoy, and we're much more likely to pay attention during a code review than we are being a <a href="http://effectif.com/agile/pair-programming/be-a-better-navigator" title="Pair Programming Navigator">navigator</a> during a pair programming session.</p>

<h2>Bring it on</h2>

<p>Disagree? Feel free to let me know in the comments.
Think I'm full of shit? Feel free to let me know in the comments.
Anything else? Feel free to let me know in the comments.</p>

<p>I'm keen to hear what you all do, how you do it, and why you think it's better or worse. In particular, do those of you who do pair programming at least <em>most</em> of the time believe that it is adding enough value to justify the cost? Do you feel better for it?</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC 2, Random Sign-offs and TempData Loss]]></title>
    <link href="http://buffered.io/posts/asp-net-mvc-2-random-sign-offs-and-tempdata-loss/"/>
    <updated>2010-10-06T08:39:00+10:00</updated>
    <id>http://buffered.io/posts/asp-net-mvc-2-random-sign-offs-and-tempdata-loss</id>
    <content type="html"><![CDATA[<p><a title="MVC" href="http://buffered.io/uploads/2010/10/mvc.png" rel="lightbox[contentadvisor]"><img style="margin-left: 5px; margin-bottom: 5px; float: right;" src="http://buffered.io/uploads/2010/10/mvc.png" alt="MVC" width="150" /></a>In the last few days I've been working on resolving issues in a production system which runs on <a title="What is ASP.NET MVC" href="http://www.asp.net/mvc/whatisaspmvc">ASP.NET MVC 2</a>. Most of the issues were actually really easy to resolve and the team of developers were able to fix them and deploy to production without too many problems.</p>

<p>Unfortunately, as always, there was one problem in particular that had us scratching our heads and was causing some of us to lose sleep. All over the Internet there were posts of people describing similar symptoms yet none of them revealed a solid answer.</p>

<p>The purpose of this post is to document the issue and the resolution in it's entirety. It's in story form rather than reference form because that's how I felt like writing it :)</p>

<!--more-->


<h2>The Issue</h2>

<p>First of all, the percentage of users that were experiencing this problem was relatively low, less than 1 in every 400. This is low enough to indicate that we were going to have one hell of a time finding the issue.</p>

<p>So what was the issue?</p>

<p>The <strong>entry-point</strong> to the site was the <strong>sign-in</strong> page. This is the first page that the user sees. In short, users would sign in to the site and be presented with the landing page in the authenticated area of the site. As soon as they attempted to click on <em>any</em> link inside the authenticated area they were <strong>immediately sent back to the sign-in page</strong>.</p>

<h2>The Investigation</h2>

<p>After adding some more logging functionality to the application and talking to one of our users, we were able to see some really odd behaviour. The user would sign-in, again they were presented with their landing page. Before the user clicked on anything else, we could see that the system had recorded that the browser had <strong>already invoked the sign-off functionality</strong>.</p>

<p>Not good. Thankfully our logging was able to point the finger at a particular action on the site which was causing the user to be signed off. For business and security reasons, the sign-in page had some code that detected if the user was already signed in and, if so, would immediately sign them off. The main driver was to prevent users from <em>thinking</em> that they had signed off from the application and then walk away without realising that their session was still available.</p>

<p>This didn't make sense. The user was clearly not returning to the sign-in page, but for some reason the system thought they were and hence was signing them off.</p>

<p>Emulating this at the office was proving to be impossible. We weren't able to reproduce it in <em>any</em> of our environments, and according to our help desk, none of the users claimed to be using any tools, plug-ins or add-ins which may be interfering with their sessions.</p>

<p>We searched the <a href="http://google.com/">usual</a> <a href="http://stackoverflow.com/">haunts</a> for answers, but none came up. A post here and there would get our hopes up, but we would eventually have them dashed after realising that the resolution mentioned was something that was already place. Some of the common suggestions are:</p>

<ul>
<li>Make sure that the <a title="Machine Key Explained" href="http://msdn.microsoft.com/en-us/library/ff649308.aspx#paght000007_machinekeyexplained">machine key</a> is the same across all sites in the web farm.</li>
<li>Make sure that the <a title="ASP.NET &amp; IIS Website Load Balancing" href="http://knol.google.com/k/kishore-gorjala/asp-net-iis-website-load-balancing/3jdbfde3g5y2c/3#">IIS site identifier</a> is the same across all sites in the web farm.</li>
<li>Make sure that the cookie path was set to <code>/</code> instead of having a sub-path like <code>/mysite</code>.</li>
<li>Make sure that the user's browser was accepting cookies.</li>
</ul>


<p>While point 4 was indeed a problem for some users, it wasn't the golden bullet we were looking for.</p>

<p>We spun the wheels for a few days trying to come up with potential reasons why this could be the case. One of the developers suggested that it could be an issue with applications that operate as download accelerators. This application might scrape the screen when the user has signed in, and in an effort to pre-cache the next potential click it <a title="HTTP Request Methods" href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">GET</a>s each link that it finds on screen. It turns out that this wasn't, nor couldn't, be the issue: we were not including any links to the sign-on page anywhere in the authenticated area of the site.</p>

<h2>The First Shot</h2>

<p>We decided to take a shot in the dark and remove the functionality from the sign-in page which logs the users off. Instead, we present them with a notice which tells them that they are already signed-in. After deploying to production, our users were able to sign in! We were leaping for joy, though frustrated because we didn't know why this was a problem in the first place.</p>

<p>Our joy was short-lived. The application itself provides a series of wizards that the user can utilise to perform certain tasks. <em>All</em> of the users who had problems signing in were having unexpected errors shown when using the wizards. Something was still amiss.</p>

<p>We were at a loss. So we decided to call in the cavalry: our poor users.</p>

<h2>The Site Visit</h2>

<p>We got in contact with one user, a lady who had been completely unable to interact with the site since its release, and she graciously accepted our request to pay her a visit and allow us to witness the failure in action. This proved to be a <strong>very</strong> good move as you'll soon see.</p>

<p>After the initial meet and greet, I was given access to our client's network. At first, I wanted to plug my own personal laptop in to the network to see if I could reproduce the problem without having to touch the client's machine. It wasn't to be, as  everything worked perfectly for me.</p>

<p>I requested access to the client's machine and fired up her browser of choice (<a title="Internet Explorer" href="http://www.microsoft.com/windows/internet-explorer/default.aspx">yuck</a>). As soon as I hit the site, I was presented with a dialog asking for a password. Here is what it looked like:</p>

<p><a title="The Content Advisor Prompt" href="http://buffered.io/uploads/2010/10/content-advisor-prompt.png" rel="lightbox[contentadvisor]"><img style="margin-right: 5px; margin-bottom: 5px; float: left;" src="http://buffered.io/uploads/2010/10/content-advisor-prompt.png" alt="The Content Advisor Prompt" width="250" /></a>I had never seen this before, so I asked the client what it was. Her response:</p>

<blockquote><p>Oh, that's the content advisor that my husband set up. We have that enabled on all our computers so that only me and my husband can get to certain websites.</blockquote></p></blockquote>

<p><a title="Microsoft Content Advisor" href="http://www.microsoft.com/windows/ie/using/howto/security/contentadv/config.mspx">Content Advisor</a>? Why had I never heard of this before? After literally <em>years</em> of building production websites, I had never once encountered this beast. Yet here it was in front of me on screen, like a smart-arse teenager giving me the bird, and according to the dates on some of the articles on the web it has been around for quite a few years.</p>

<p>I proceeded to sign in to the site and attempt to perform an action using the wizard. As expected, it failed miserably. I then asked the client to disable the Content Advisor to see if it made any difference.</p>

<p>It did. The site performed <em>flawlessly</em>.</p>

<h2>The Resolution</h2>

<p>So the Content Advisor was causing problems. But how? What was it doing behind the scenes that was preventing our users from getting the quality experience that we'd worked so hard to deliver?</p>

<p>Now that we had knowledge of the content advisor our queries to the Interwebs resulting in more revealing posts, such as one posted on <a title="IE's Content Advisor, PICS Ratings and the ASP.NET Flakey of the Day" href="http://www.hanselman.com/blog/IEsContentAdvisorPICSRatingsAndTheASPNETFlakeyOfTheDay.aspx">Scott Hanselman's blog</a>. Here are some key bits of information from that post:</p>

<blockquote><p>... when Content Advisor is OFF, the interaction looks like this:<br/></p>

<p>HTTP GET /somefile.aspx<br/>
RESPONSE 200<br/>
HTTP GET /somethingelse.aspx (we did a javascript.open)<br/>
RESPONSE 302 getthisfile.aspx<br/>
HTTP GET getthisfile.aspx<br/>
RESPONSE 200<br/></p>

<p>But when <strong>Content Advisor is ON</strong>, we see this:<br/></p>

<p>HTTP GET /somefile.aspx<br/>
RESPONSE 200<br/>
HTTP GET /somethingelse.aspx (we did a javascript.open)<br/>
<strong>HTTP GET /<br/>
RESPONSE 200</strong><br/>
RESPONSE 302 getthisfile.aspx<br/>
HTTP GET getthisfile.aspx<br/>
RESPONSE 200<br/></p>

<p>...<br/></p>

<p>When the Content Advisor is ON, Internet Explorer will request '/' from a site anytime a new window is opened.</p></blockquote>

<p>As we can see from the above quote, the Content Advisor hits the root of the site on the user's behalf in an effort to scrape <a title="Platform for Internet Content Selection" href="http://en.wikipedia.org/wiki/Platform_for_Internet_Content_Selection">PICS</a> information about the website.</p>

<p>According to the last point in the above quote, this will happen any time a new window is opened. Unfortunately for us, it goes deeper than that: <strong>the Content Advisor makes the browser request <code>/</code> every single time an action is invoked if it can't find sufficient PICS information for the current URL</strong>.</p>

<p>Yes, it's shit, but that's the way it works.</p>

<p>So any users which have the Content Advisor turned on will actually be hitting the site twice for every GET action they perform. This explains why the users were being signed off! Our sign-off code was being executed behind the scenes without the users being aware of it.</p>

<p>But why was it causing unexpected errors when clients were using the wizard? To answer that, we need to know about a little feature of MVC called <a title="TempData @ you've been HAACKED" href="http://haacked.com/tags/TempData/default.aspx">TempData</a>.</p>

<p>For those who don't want to click the above link, TempData is a feature of ASP.NET MVC which allows information to be persisted across post-backs to the server. A classic example is when URI <code>/Foo</code> gets invoked, and the action results in a redirect to <code>/Bar</code>. But <code>/Bar</code> requires some data that got sent to <code>/Foo</code>, so the <code>/Foo</code> action stores that data in the TempData dictionary which allows <code>/Bar</code> to get access to it during processing. It's a nifty feature, and one that we use extensively.</p>

<p>The key piece of information to remember about TempData is that it <em>only persists data across a single post-back</em>. That means that if you post back to the server once, TempData is lost unless the target action <strong>explicitly requests for it to stick around</strong>.</p>

<p>This is the deal-breaker. If <code>/Bar</code> assumes that TempData contains information from <code>/Foo</code> when it fires up then <code>/Bar</code> is going to break if the information is <em>not</em> there. Why would it not be there if a redirect happened? That's right, the f$%#ing Content Advisor!</p>

<p>It turns out that every time the Content Advisor hits the root of the site, TempData is cleared. This is obvious in hindsight because the root URI is an <a title="ASP.NET MVC Controller Overview" href="http://www.asp.net/mvc/tutorials/asp-net-mvc-controller-overview-cs">action</a> just like any other anywhere in the whole site. That action gets invoked through the same means and comes with the same caveats ... including that of TempData getting cleared unless we ask it not to. So the chain of events looked like this:</p>

<ul>
<li>User invokes a wizard via a simple click.</li>
<li>Request is set to the server for<code>/Foo</code></li>
<li><code>/Foo</code> gets executed and stores information, <code>Baz</code>, in TempData so that the next step in the wizard, <code>/Bar</code>, can get access to it.</li>
<li><code>/Foo</code> returns page content to the user.</li>
<li>The browser receives the page content from the <code>/Foo</code> action and the Content Advisor notices a lack of PICS information in the HTTP headers and META tags.</li>
<li>The Content Advisor forces the browser to make a request to <code>/</code> in an attempt to find the missing PICS information.</li>
<li>The root site action is hit and it renders the sign-on page content.</li>
<li>At the end of page content generation, the TempData dictionary notices that no requests have been made to retain any of the information across another call, and hence <strong>all of the TempData information is lost</strong>, including <code>Baz</code>.</li>
<li>The user click's "Next" in the wizard, which causes the browser to invoke the <code>/Bar</code> action on the server.</li>
<li>The server invokes <code>/Bar</code> and the first thing it does is attempt to pull <code>Baz</code> out of TempData. <code>Baz</code> ends up being null.</li>
<li>Game over, Red Rover.</li>
</ul>


<p>There are quite a few issues that were highlighted as a result, but the key one is this: <em>you can't assume that your users aren't using some form of Content Advisor which is hitting your server with unexpected requests</em>. In our case, the resolution was simple. We just had to add a couple of lines to our root action:</p>

<p>{% codeblock lang:csharp %}
public ActionResult SignOn()
{
  if(Request.IsAuthenticated)
  {</p>

<pre><code>// force the TempData dicionary to keep hold
// of the information it has in case this
// action is being hit by a Content Advisor.
TempData.Keep();
</code></pre>

<p>  }
  // rest of the action code
  // ...
  return View(...);
}
{% endcodeblock %}</p>

<h2>Conclusion</h2>

<p>The first question you might ask is: why didn't you just add PICS data to your site to prevent the Content Advisors from behaving that way? The short answer is that you can't guarantee that the Content Advisors will adhere to the "rules", especially given that there don't appear to be any.</p>

<p><a title="Platform for Internet Content Selection" href="http://en.wikipedia.org/wiki/Platform_for_Internet_Content_Selection">PICS</a> has already been replaced with <a title="Protocol for Web Description Resources" href="http://en.wikipedia.org/wiki/POWDER">POWDER</a>. But POWDER doesn't appear to be used anywhere, and there's very little information around on it. Attempting to support all possible half-baked standards would result in serving up a great deal more content for the sake of a very small subset of users who actually use Content Advisors. It made much more sense to just persist TempData across one more call.</p>

<p>Bear in mind that while the Content Advisor is built-in to the Internet Options area in Windows, it's not specific to Internet Explorer. Both Chrome and Safari are affected by the Content Advisor if it is enabled!</p>

<p>So for anyone out there who is building, or has built, a public-facing website using ASP.NET MVC please bear this in mind. Keep an eye on your TempData usage, make sure that your root action persists your TempData if required, and avoid having that same action sign off your users.</p>

<p>I hope this helps someone :) Comments and feedback greatly appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BFPG June Meetup]]></title>
    <link href="http://buffered.io/posts/bfpg-june-meetup/"/>
    <updated>2010-06-25T20:05:00+10:00</updated>
    <id>http://buffered.io/posts/bfpg-june-meetup</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/06/Home.png" alt="Erlang Logo" style="float:right; margin-left:5px; margin-bottom: 5px;"/>The time has come for another meeting of the Functional Programming minds! This months <a href="http://www.meetup.com/Brisbane-Functional-Programming-Group-BFG/calendar/12636552/" title="June BFPG Meetup">BFPG Meetup</a>, starting 6pm Monday 28th, is the first one at our new venue: Microsoft HQ, Waterfront Place, Brisbane. For details on the location, take a look at the <a href="http://bfpg.org/about/" title="About BFPG">BFPG about page</a>.</p>

<p><img src="http://buffered.io/uploads/2010/06/ruby.png" alt="Erlang Logo" style="float:left; margin-right:5px; margin-bottom: 5px;"/>This month we have three speakers, and I am one of them! In my talk, "Erlang - Why should you care?", I will be giving a fairly non-technical introduction to <a href="http://erlang.org/" title="Erlang">Erlang</a>. I'll be covering off the features of the language, some of its design goals and its history. I aiming to show that this language is not one that was spawned out of academia and that it has been applied in the real-world ever since its conception. If I have time, I'll also be giving a small demonstration of one of the neatest features of the technology.</p>

<p><img src="http://buffered.io/uploads/2010/06/haskell-logo-variation.png" alt="Erlang Logo" style="float:right; margin-left:5px; margin-bottom: 5px;"/>
I'll be posting the slides and demonstration code here on this blog as well as <a href="http://bfpg.org/" title="BFPG">BFPG's home</a> after the meetup has taken place.</p>

<p>Myself and my comrades, <a href="http://adams.id.au/blog/" title="Nosewheelie">Tom</a> and <a href="http://blog.tmorris.net/" title="Tony's blog">Tony</a>, will aim to provide a fun and interesting evening at our new venue. Based on the RSVPs so far, it looks like we are going to have one of the biggest turn-outs to date. This is probably due to the exposure we got during last month's <a href="http://buffered.io/posts/dave-thomas-at-yow-nights-brisbane/" title="Dave Thomas at YOW! Nights Brisbane">talk by Dave Thomas</a>. There are still plenty of spots left, so if you're keen to come along, <a href="http://www.meetup.com/Brisbane-Functional-Programming-Group-BFG/calendar/12636552/" title="Sign up for BFPG June 10">go and sign up</a>. Bring your friends, your friend's friends and your mum.</p>

<p>I hope to see you there!</p>

<hr/>


<p><strong>Update (6th July 2010):</strong> We had a fantastic turn-out of just short of 50 people (a record breaker for the group so far!). My talk seemed to be fairly well-received. No rotten tomatoes were thrown and the crowd seemed engaged through most of the talk. It felt good! I think many people wanted to see more code, but since that wasn't the focus of the talk they were a little disappointed. If people are keen for more Erlang goodness at future meetups, then I'll be happy to dive a little deeper.</p>

<p>Here's a video of my talk:</p>

<iframe src="http://player.vimeo.com/video/13566071?byline=0&amp;portrait=0&amp;color=F79942" width="512" height="384" frameborder="0"></iframe>


<p><a href="http://vimeo.com/13566071">OJ Reeves - Erlang - Why Should You Care</a>.</p>


<p>As promised, here are the slides:</p>

<ol><li><a href="https://docs.google.com/leaf?id=0B4v3XvOkiwsCZjNhZTk3OTYtZTgxNy00MjBmLWJiZmYtMzZjMzU3N2E3MDgz&hl=en&authkey=CIaRg_sF">PPTX</a></li>
<li><a href="https://docs.google.com/a/buffered.io/fileview?id=0B4v3XvOkiwsCMjlhMWRjNGItYmZkOC00ODRlLTkzYTUtOTI3ZWZhY2MxOGYx&hl=en&authkey=CM7rtpEO">PDF (Google Docs)</a></li>
<li><a href="https://docs.google.com/a/buffered.io/present/edit?id=0AYv3XvOkiwsCZGdmamd0eGNfN2dnaDh3emhw&hl=en&authkey=CJKBg-MB">PPT (Google Docs)</a></li></ol>


<p>If you have issues reading the slide deck, or would like it in another format, then please <a href="http://buffered.io/contact-me">drop me a line</a>.</p>
]]></content>
  </entry>
  
</feed>
