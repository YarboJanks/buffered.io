<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HOWTO | OJ's perspective]]></title>
  <link href="http://buffered.io/categories/howto/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2013-12-28T12:48:10+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 5]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-5/"/>
    <updated>2012-07-10T21:28:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-5</id>
    <content type="html"><![CDATA[<p><img class="right" src="/uploads/2010/09/riak-logo.png" title="&lsquo;Riak Logo&rsquo;" >Newcomers to the series should first take a look at the previous four parts of the <a href="http://buffered.io/series/web-development-with-erlang/" title="Web Development with Erlang">series</a> (<a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a>) first to make sure that you&rsquo;re up to speed. Feel free to read on if you feel comfortable with the general concepts in use.</p>

<p>When we finished <a href="/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a> we were able to authenticate users using <a href="http://twitter.com/" title="Twitter">Twitter</a> and <a href="http://oauth.net/" title="OAuth">OAuth</a>, which is great as we can delegate the responsibility of password management to an external entity.</p>

<p>Now that we know who people are, we want them to be able to do something meaningful with their accounts. That&rsquo;s what this post is all about.</p>

<!--more-->


<h2><a id="agenda"></a>Agenda</h2>

<p>So far it has been hard to see what the goal of this application is. Given the piecemeal nature of the posts it&rsquo;s hard to project that vision, especially when the content is quite code-heavy. By the end of this post, we&rsquo;ll not only have a &ldquo;proper&rdquo; web application that performs useful functions, we&rsquo;ll be able to see what this &ldquo;Code Smackdown&rdquo; thing really is all about.</p>

<p>This post is going to cover the following topics:</p>

<ol>
<li><em><a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> Secondary Indexes</em> &ndash; We&rsquo;ll be using these so that we can link code snippet submissions to the users who submitted them.</li>
<li><em><a href="http://wiki.basho.com/MapReduce.html" title="Riak Map/Reduce">Map/Reduce</a></em> &ndash; We&rsquo;re going to end up with data stored in our database and we&rsquo;re going to want to query it. Map/reduce is where it&rsquo;s at!</li>
<li><em>Form submission handling with <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a></em> &ndash; Users will be able to submit code snippet pairs to the system once they&rsquo;re logged in. They&rsquo;ll also be able to vote on submitted snippets.</li>
<li><em>Listing of submissions per-user</em> &ndash; Viewing the submissions for a given user will pull out a list from Riak using the secondary indexes and map/reduce. This will allow a user to see what snippets they&rsquo;ve submitted.</li>
<li><em>Static file serving</em> &ndash; Our new UI will require the serving of static content. There are quite a few ways to do this, one of which is using a custom Webmachine resource. While in production it&rsquo;s a great idea to use a tool like <a href="http://nginx.org/" title="Nginx">Nginx</a> for this purpose, but we&rsquo;ll go with the custom Webmachine resource just to keep things a little simpler.</li>
<li><em>Tidying up of templates/UI</em> &ndash; Now that we&rsquo;ve got some content to render, we&rsquo;ll put together some nicer templates and harness <a href="http://twitter.github.com/bootstrap/" title="Twitter Bootstrap">Twitter Bootstrap</a> to make the site a little nicer to look at. You&rsquo;ll notice that the emphasis will drop off from <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a> as we&rsquo;ll be doing more rendering of content on the client side using <a href="http://handlebarsjs.com/" title="Handlebars templating">Handlebars</a> while using <a href="http://documentcloud.github.com/backbone/" title="Backbone.js">Backbone.js</a> for logic, routing and event handling.</li>
</ol>


<p>Lots of UI work has been done for this post, but most of that work will not be discussed in detail as there&rsquo;s already enough content to get through. As always the source code is available so you can read it and play with it. You&rsquo;ll find the link at the end of the post.</p>

<p>Prior to continuing you should make sure you have the latest version of <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> installed. If you don&rsquo;t, please go and do this now (read <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> to learn how to build Riak from scratch).</p>

<p>With that &hellip; don your robe and Wizard&rsquo;s hat and let&rsquo;s begin.</p>

<h2><a id="enabling-secondary-indexes"></a>Enabling Secondary Indexes</h2>

<p>As already mentioned we&rsquo;re going to be storing data in Riak and using the <a href="http://wiki.basho.com/Secondary-Indexes.html" title="Secondary Indexes in Riak">Secondary Index</a> feature to make it easier to link data together and do certain types of queries over that data. Given this requirement the first thing we should do is enable secondary indexes on our cluster.</p>

<p>As per the <a href="http://wiki.basho.com/Secondary-Indexes.html" title="Secondary Indexes in Riak">Riak wiki entry</a> &hellip;</p>

<blockquote><p>As of version 1.0, Secondary Indexes are enabled by configuring Riak to use the
ELevelDB backend <code>riak_kv_eleveldb_backend</code>. Currently, the ELevelDB backend is the
only index-capable backend.</p></blockquote>

<p>So we need to go through our Riak development cluster configuration and make sure that our backend is set up correctly. Before continuing, make sure your cluster is no longer running:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>riak/dev <span class="nv">$ </span>dev1/bin/riak stop
</span><span class='line'>ok
</span><span class='line'>riak/dev <span class="nv">$ </span>dev2/bin/riak stop
</span><span class='line'>ok
</span><span class='line'>riak/dev <span class="nv">$ </span>dev3/bin/riak stop
</span><span class='line'>ok
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To modify all the <code>app.config</code> files easily we can run one simple command from the <code>dev</code> (the parent folder which contains all the dev Riak instances):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>riak/dev <span class="nv">$ </span>vim ./**/app.config
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will open <a href="http://www.vim.org/" title="VIM">VIM</a> with all of the <code>app.config</code> files open so that we can easily made the necessary modifications. In each of these files, find the <code>riak_kv</code> configuration section and change the backend like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/rebar.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="n">snip</span> <span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% Riak KV config</span>
</span><span class='line'><span class="p">{</span><span class="n">riak_kv</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>      <span class="c">%% Storage_backend specifies the Erlang module defining the storage</span>
</span><span class='line'>      <span class="c">%% mechanism that will be used on this node.</span>
</span><span class='line'>      <span class="p">{</span><span class="n">storage_backend</span><span class="p">,</span> <span class="n">riak_kv_eleveldb_backend</span><span class="p">},</span>
</span><span class='line'>      <span class="p">...</span> <span class="n">snip</span> <span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">]}</span>
</span><span class='line'><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="n">snip</span> <span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Done. Don&rsquo;t forget to make sure your dev cluster is running again before you continue:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>riak/dev <span class="nv">$ </span>dev1/bin/riak start
</span><span class='line'>riak/dev <span class="nv">$ </span>dev2/bin/riak start
</span><span class='line'>riak/dev <span class="nv">$ </span>dev3/bin/riak start
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2><a id="schema-design"></a>Schema Design</h2>

<p>Before we get going with any more of the implementation, we need to consider the design of the &ldquo;schema&rdquo; we&rsquo;re going to use when storing our data in Riak. We want our users to be able to:</p>

<ol>
<li>Submit snippets to the system.</li>
<li>See a list of snippets they have submitted to the system (and down the track see other lists using filters).</li>
<li>Vote for the left- or right- hand snippets to indicate which they prefer.</li>
<li>See that they have voted for a snippet before and be reminded of which one they voted for.</li>
</ol>


<p>At the centre of this data there is the <em>snippet</em>. The snippet has the following fields:</p>

<ul>
<li><code>title</code>: A simple descriptive label.</li>
<li><code>left</code>: One way of performing a function in a given language.</li>
<li><code>right</code>: Another way of performing the same function in a given language (which may not be the same as the language used for <code>left</code>).</li>
<li><code>created</code>: A date/time when the snippet was created/submitted.</li>
<li><code>key</code>: A key/ID which identifies the snippet.</li>
</ul>


<p>These fields will be stored as a blob of JSON.</p>

<p>We also need to store with the snippet an identifier for the user that submitted it. Rather than storing this with the payload, we are instead going to create a secondary index which contains this information. We can then use this index to query the store to find out the snippets a user has submitted. This index will be called <code>userid</code>.</p>

<p>In future posts we will probably include more indexes and/or fields, but for the functionality we&rsquo;re aiming to build for this post these fields are sufficient.</p>

<p>Next we need to store votes. In a typical RDMBS this problem is well-known and the solutions out there are also well-known. In a KV store this isn&rsquo;t necessarily the case. What I propose in this post is <em>a possible way</em> of solving this problem. I do not in any way claim that this is <em>the best way</em>. With this, this is what we&rsquo;re going to do&hellip;</p>

<p>A <code>vote</code> needs to keep track of who submitted it along with the snippet it was put against. It also needs to have an indication of whether the user preferred the left or right hand side of the snippet. When these votes are stored, we also want to be able to query them in such a way so that, for a given snippet, we can quickly count the number of votes and which way those votes went. This is quite important as the tallying of the votes and displaying them on screen is a key part of the idea behind the application.</p>

<p>To identify a vote the key needs to be made up of both the <code>userid</code> of the person who submitted it and the <code>key</code> of the snippet the vote. Therefore, for the <code>vote</code> bucket we&rsquo;ll create keys in the format: <em>userid-snippetkey</em></p>

<p>While this makes sense, it doesn&rsquo;t make it easy for us to figure out which votes went against which snippets. To do this, we&rsquo;ll create a secondary index on the vote which contains the snippet key. This will give us a faster way of finding votes that relate to a key while still keeping the votes separate in the bucket. We can then do a map/reduce over the index and pull out the votes.</p>

<p>Originally I had pondered the idea of having another secondary index which contained the vote direction (<code>left</code> or <code>right</code>) and doing multiple map/reduces over the data to count the items. This seemed silly to me. I didn&rsquo;t think it made sense to invoke two map/reduce jobs when I could do the same thing with one. As a result, I decided to put the direction of the vote inside the vote payload itself as this can be used during a single map/reduce job to total both <code>left</code> and <code>right</code> votes. Down the track the user is going to want to be able to look at what they&rsquo;ve voted on (as part of a history timeline), so we&rsquo;ll also add a <code>userid</code> index.</p>

<p>Finally, we are going to need to store some more meaningful information about a user for future use, so we&rsquo;ll create a <code>user</code> bucket and store some metadata for each user with their Twitter ID as the key.</p>

<p>Here&rsquo;s a visual of what we should end up with:</p>

<p><img src="/uploads/2012/07/part5-db-schema.png" title="&lsquo;CSD Schema&rsquo;" ></p>

<p>Now that we have the basics of the schema out of the way, the first thing we should do is adjust our Riak module to include the new features we&rsquo;ll need to do with secondary indexing and map/reduce.</p>

<h2><a id="handling-2i"></a>Handling 2i in csd_riak</h2>

<p>In Riak secondary indexes (2i) are stored as extra metadata alongside the Riak object. Two types of indexes are currently support: <code>integer</code> and <code>binary</code>. These index types are indicated using a naming convention, such that <code>integer</code> indexes are suffixed with <code>_int</code> and <code>binary</code> indexes are suffixed with <code>_bin</code>. Secondary indexes are stored as a key/value pair tuple inside the <code>index</code> section of the meta data.</p>

<p>So to start with let&rsquo;s define a few index-specific macros and helper functions.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">define</span><span class="p">(</span><span class="nv">INDEX_KEY</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">index</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">INDEX_SUFFIX_INT</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">int</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">INDEX_SUFFIX_BIN</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bin</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">index</span><span class="p">(</span><span class="n">int</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nb">iolist_to_binary</span><span class="p">([</span><span class="nv">Name</span><span class="p">,</span> <span class="o">?</span><span class="nv">INDEX_SUFFIX_INT</span><span class="p">]);</span>
</span><span class='line'><span class="nf">index</span><span class="p">(</span><span class="n">bin</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nb">iolist_to_binary</span><span class="p">([</span><span class="nv">Name</span><span class="p">,</span> <span class="o">?</span><span class="nv">INDEX_SUFFIX_BIN</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here the <code>index</code> function is a simple function which allows us to generate an index name based on a type and a name. This can be called like so: <code>IndexName = index(int, "userid").</code> &ndash; We&rsquo;ll make use of this in other areas, including the <code>csd_riak_mr</code> module which we&rsquo;ll cover off shortly.</p>

<p>Next we&rsquo;ll define some functions which make it easier to add indexes to Riak objects.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Meta</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">get_update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Index</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">find</span><span class="p">(</span><span class="o">?</span><span class="nv">INDEX_KEY</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">error</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">[];</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">I</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">I</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">NewIndex</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">to_list</span><span class="p">(</span><span class="nn">dict</span><span class="p">:</span><span class="nf">store</span><span class="p">(</span><span class="n">index</span><span class="p">(</span><span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">),</span> <span class="n">value</span><span class="p">(</span><span class="nv">Value</span><span class="p">),</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">from_list</span><span class="p">(</span><span class="nv">Index</span><span class="p">))),</span>
</span><span class='line'>  <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">store</span><span class="p">(</span><span class="o">?</span><span class="nv">INDEX_KEY</span><span class="p">,</span> <span class="nv">NewIndex</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_indexes</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Indexes</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Meta</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">get_update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Index</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">find</span><span class="p">(</span><span class="o">?</span><span class="nv">INDEX_KEY</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">error</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">[];</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">I</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">I</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">UpdatedIndexes</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">foldl</span><span class="p">(</span><span class="k">fun</span><span class="p">({</span><span class="nv">T</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">V</span><span class="p">},</span> <span class="nv">I</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nn">dict</span><span class="p">:</span><span class="nf">store</span><span class="p">(</span><span class="n">index</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">N</span><span class="p">),</span> <span class="n">value</span><span class="p">(</span><span class="nv">V</span><span class="p">),</span> <span class="nv">I</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="nn">dict</span><span class="p">:</span><span class="nf">from_list</span><span class="p">(</span><span class="nv">Index</span><span class="p">),</span> <span class="nv">Indexes</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">NewIndex</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">to_list</span><span class="p">(</span><span class="nv">UpdatedIndexes</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">store</span><span class="p">(</span><span class="o">?</span><span class="nv">INDEX_KEY</span><span class="p">,</span> <span class="nv">NewIndex</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Meta</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">get_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Indexes</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="o">?</span><span class="nv">INDEX_KEY</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">IndexKey</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">IndexKey</span><span class="p">,</span> <span class="nv">Indexes</span><span class="p">)),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Type</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">int</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list_to_integer</span><span class="p">(</span><span class="nv">Value</span><span class="p">);</span>
</span><span class='line'><span class="n">bin</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Value</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first function, <code>set_index</code>, is used to update a Riak object instance and include a single new index of a certain type. This function gets existing <em>update metadata</em> (different to &ldquo;normal&rdquo; metatdata in that this is what will be used to update the object when saved) and then attemps to retrieve the <code>index</code> section of that data. If found adds the new index value to the list of indexes. If it&rsquo;s not found then the new indexes is simply inserted into an empty list. This information is then written into a new Riak object via the <code>riakc:update_metadata/2</code> function.</p>

<p>This code can be called like so: <code>NewObj = csd_riak:set_index(RiakObj, int, "userid", 12345).</code></p>

<p>This code converts between lists and dictionaries because I want existing index values to be overwritten with the new values.</p>

<p>The second function, <code>set_indexes</code>, is an extended version of <code>set_index</code> in that it allows you to set more than one key at a time. Instead of a single type/name/value combination it accepts a list of tuples of <code>{type, name, value}</code>.</p>

<p>The third function, <code>get_index</code>, is a helper function which is designed to get the value of certain index. Note how this function accesses <em>existing</em> metadata via <code>get_metadata/1</code> rather than <code>get_update_metadata/1</code>. This is due to us being interested in an existing index, not in one that is about to be updated when we next save. While we&rsquo;re here, we do a converstion of the value to an integer if the index type is an integer.</p>

<p>This code can be called like so: <code>UserId = csd_riak:get_index(RiakObj, int, "userid").</code></p>

<p>Last of all you may have noticed that a couple of these functions are calling another function called <code>value/1</code>. It looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">value</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">V</span><span class="p">);</span>
</span><span class='line'><span class="nf">value</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see this is an internal function which is there to help make sure that values are in the right format when being stored as an index.</p>

<p>With the 2i interface now taken care of, let&rsquo;s take a look at what we need to do for map/reduce.</p>

<h2><a id="supporting-mapreduce"></a>Supporting Map/Reduce in csd_riak</h2>

<p>As you&rsquo;re already aware, Riak&rsquo;s map/reduce interface requires a set of <em>inputs</em>, one or more <em>map</em> phases and zero or more <em>reduce</em> phases. We could manually construct each of these components each time we want to execute a map/reduce job but that doesn&rsquo;t quite feel right to me. Instead, I prefer to have a &ldquo;usable&rdquo; module that helps construct properly-formed map/reduce jobs to reduce the risk of the caller doing the wrong thing. Callers of our modules shouldn&rsquo;t have to know about the format of Riak&rsquo;s map/reduce interface in order to use it. So we&rsquo;ll provide a helper module which wraps this up.</p>

<p>Before we look at the code, bear in mind that this module supports enough functionality to provide what is needed for the application so far. Down the track extra features will be added to support other ways of doing map/reduce, but for now they are beyond the scope of this version of the application.</p>

<p>With that, let&rsquo;s take a look at the code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_riak_mr.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_riak_mr</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#111;&amp;#106;&amp;#64;&amp;#98;&amp;#117;&amp;#102;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#101;&amp;#100;&amp;#x2e;&amp;#105;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">create</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="n">run</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">add_input_index</span><span class="o">/</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'><span class="n">add_map_js</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">add_map_js</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="n">add_map_js</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'><span class="n">add_reduce_js</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">add_reduce_js</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="n">add_reduce_js</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'><span class="n">add_reduce_sort_js</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">add_reduce_sort_js</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Private Record Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">mr</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">in_ind</span> <span class="o">=</span> <span class="n">undefined</span><span class="p">,</span>
</span><span class='line'><span class="c">%% TODO: when the need arises add support for other inputs</span>
</span><span class='line'><span class="c">%% including {bucket, key} and {bucket, key, arg}.</span>
</span><span class='line'><span class="n">phases</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Create a mew map/reduce job instance.</span>
</span><span class='line'><span class="nf">create</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nl">#mr</span><span class="p">{}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nl">#mr</span><span class="p">{</span><span class="n">in_ind</span><span class="o">=</span><span class="nv">Input</span><span class="p">,</span> <span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c">% phases are pushed in reverse, so reverse them before using them</span>
</span><span class='line'>  <span class="nv">Phases</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">reverse</span><span class="p">(</span><span class="nv">P</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">mapred</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Input</span><span class="p">,</span> <span class="nv">Phases</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Result</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Input phase for a secondary index input.</span>
</span><span class='line'><span class="nf">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">Value</span><span class="p">));</span>
</span><span class='line'><span class="nf">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">Value</span><span class="p">));</span>
</span><span class='line'><span class="nf">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">in_ind</span> <span class="o">=</span> <span class="p">{</span><span class="n">index</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">index</span><span class="p">(</span><span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">),</span> <span class="nv">Value</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Map phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true and Arg to none.</span>
</span><span class='line'><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Map phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Arg to none.</span>
</span><span class='line'><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="n">none</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Map phase from raw JS source.</span>
</span><span class='line'><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{</span><span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="nv">Arg</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">phases</span> <span class="o">=</span> <span class="p">[{</span><span class="n">map</span><span class="p">,</span> <span class="p">{</span><span class="n">jsanon</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">},</span> <span class="nv">Arg</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">}|</span><span class="nv">P</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Reduce phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true and Arg to none.</span>
</span><span class='line'><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Reduce phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true.</span>
</span><span class='line'><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="n">none</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Reduce phase from raw JS source.</span>
</span><span class='line'><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{</span><span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="nv">Arg</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">phases</span> <span class="o">=</span> <span class="p">[{</span><span class="n">reduce</span><span class="p">,</span> <span class="p">{</span><span class="n">jsanon</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">},</span> <span class="nv">Arg</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">}|</span><span class="nv">P</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Reduce sort phase using Riak&amp;rsquo;s built in sort function</span>
</span><span class='line'><span class="c">%%      using the specified comparison function written in raw JS. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true.</span>
</span><span class='line'><span class="nf">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">CompareFun</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">CompareFun</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc Creates a map/reduce Reduce sort phase using Riak&amp;rsquo;s built in sort function</span>
</span><span class='line'><span class="c">%%      using the specified comparison function written in raw JS.</span>
</span><span class='line'><span class="nf">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{</span><span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">},</span> <span class="nv">CompareFun</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">phases</span> <span class="o">=</span> <span class="p">[{</span><span class="n">reduce</span><span class="p">,</span> <span class="p">{</span><span class="n">jsfun</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;Riak.reduceSort&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;},</span> <span class="nv">CompareFun</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">}|</span><span class="nv">P</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Many of you will probably be able to digest this code without explanation. But just in case there&rsquo;s a little bit of confusion:</p>

<ul>
<li><code>#mr</code> is an internally defined record which will accumulate a set of inputs and phases to execute against riak. This is internal so that external callers are &ldquo;forced&rdquo; to use the module to construct a map/reduce job.</li>
<li>The <code>create/0</code> function simply creates an instance of a <code>#mr</code> record that the user can start to add map/reduce details to.</li>
<li>Each of the <code>add_*</code> functions is used to add an input or a phase to to a <code>#mr</code> record. For this version of the application we&rsquo;re use JavaScript for our map/reduce phases. Functions that deal with JavaScript tend to have <code>_js</code> as a suffix.</li>
<li>The <code>add_reduce_sort_js/3</code> function is one example of where we&rsquo;re using an internal Riak javascript reduce function. This function sorts elements during the reduce phase and uses a user-defined JavaScript function passed in as an argument to the phase.</li>
<li>The <code>run/2</code> function executes the map/reduce job in Riak and returns the result.</li>
</ul>


<p>This module makes use of the <code>csd_riak:index/2</code> function which helps create well-formed index names. This is used when constructing index inputs.</p>

<p>That&rsquo;s map/reduce taken care of (for now). With the guts of boilerplate Riak interaction taken care of, let&rsquo;s have a look at our approach to data storage.</p>

<h2><a id="goodby-csdcoreserver"></a>Goodbye <code>csd_core_server</code></h2>

<p>When I first started working on this application I created <code>csd_core_server</code> with the intent of using it as a bridge between the application and Riak. This module, implemented as a <a href="http://www.erlang.org/doc/man/gen_server.html" title="Erlang gen_server">gen_server</a>, would have been responsible for handling and managing a pool of connections to Riak.</p>

<p>This concern has changed given that we are now using <a href="https://github.com/OJ/pooler" title="Pooler">Pooler</a> to solve this problem for us. As a result, the idea of having a <code>gen_server</code> doesn&rsquo;t really make sense. Instead it makes more sense to have a module which handles interacting with <a href="https://github.com/OJ/pooler" title="Pooler">Pooler</a> so that other areas of the application don&rsquo;t need to know it&rsquo;s there.</p>

<p><code>csd_core_server</code> has now been removed and replaced with another module called <code>csd_db</code>. This new module is not a <code>gen_server</code>, it is simple a plain module which exposes an interface to the database.</p>

<p>Abstraction purists might argue that this is a positive as it gives us the ability to swap our database out for something else and the consumers of <code>csd_db</code> wouldn&rsquo;t even know. This might be true, but that&rsquo;s not really the goal. The goal is to put all the <a href="https://github.com/OJ/pooler" title="Pooler">Pooler</a> interaction in a single spot.</p>

<p>Rather than show the module here in its entirety, we&rsquo;ll break it up into chunks: snippets, users and votes. Each of these chunks will be looked at when we dive into storage of those individual bits of data. To give an idea of the purpose that it serves see the following diagram:</p>

<p><img src="/uploads/2012/07/part5-db-modules.png" title="&lsquo;Database Module Interaction&rsquo;" ></p>

<p>The modules on the left invoke functions on <code>csd_db</code> which then invokes functions on the respective store modules passing in an extra parameter which is a <code>RiakPid</code> so that the store modules can talk to Riak. Simple!</p>

<p>Since <code>csd_db</code> is just a helper that we&rsquo;ll be using across all modules, let&rsquo;s take a look at it first.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_db.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_db</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#x6a;&amp;#64;&amp;#98;&amp;#117;&amp;#102;&amp;#x66;&amp;#101;&amp;#x72;&amp;#x65;&amp;#100;&amp;#46;&amp;#105;&amp;#x6f;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">get_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">list_snippets</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_user</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_user</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_vote</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_vote</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">vote_count_for_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">vote_count_for_snippet</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Snippet API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_snippet_store</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_snippet_store</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">list_snippets</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_snippet_store</span><span class="p">:</span><span class="nf">list_for_user</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% User API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_user_store</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save_user</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_user_store</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Vote API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_vote</span><span class="p">(</span><span class="nv">VoteId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_vote_store</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save_vote</span><span class="p">(</span><span class="nv">Vote</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_vote_store</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nn">csd_vote_store</span><span class="p">:</span><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nn">csd_vote_store</span><span class="p">:</span><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The pattern we&rsquo;re applying should now be obvious. Each function just proxies the call to another module which takes all the source parameters plus a <code>pid</code> which can be used to talk to Riak.</p>

<p>With that out of the way, let&rsquo;s dive into what the individual modules do.</p>

<h2><a id="storing-snippets"></a>Storing Snippets</h2>

<p>Until now we&rsquo;ve only ever stored snippets and we haven&rsquo;t really done anything complicated with them. The earlier versions of our <code>csd_snippet</code> module, the one which encapsulated the snippet functionality, contained methods which covered two concerns: construction/creation of the snippet and storing/retrieval of snippets. Rather than continuing to mix concerns, we&rsquo;re going to break this module up into two: <code>csd_snippet</code> and <code>csd_snippet_store</code>. The aim is for the former to act like an API to the snippet functionality. This is the one that will be invoked from our web application. The latter will be invoked by the former in the cases where data needs to be written to or read from the data store.</p>

<p>Hopefully now you can see where this fits into the diagram shown above. <code>csd_snippet</code> is paired with <code>csd_snippet_store</code> and <code>csd_db</code> is used as a bridge between the two which provides the connections to Riak.</p>

<h3><a id="csd_snippet"></a><code>csd_snippet</code> module</h3>

<p><code>csd_snippet</code> has changed drastically since we last looked at it, so let&rsquo;s go through the module bit by bit as it currently stands.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">snippet</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="p">,</span>
</span><span class='line'><span class="n">key</span><span class="p">,</span>
</span><span class='line'><span class="n">title</span><span class="p">,</span>
</span><span class='line'><span class="n">left</span><span class="p">,</span>
</span><span class='line'><span class="n">right</span><span class="p">,</span>
</span><span class='line'><span class="n">created</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>snippet</code> record is an internal container for all the data we need when dealing with a single snippet. Some of this information is stored in Riak as part of the payload, other detail is stored as an index. More to come on this later.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_snippet</span><span class="p">(</span><span class="nv">Title</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nl">#snippet</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span> <span class="o">=</span> <span class="nv">UserId</span><span class="p">,</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">new_key</span><span class="p">(),</span>
</span><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="nv">Title</span><span class="p">,</span>
</span><span class='line'><span class="n">left</span> <span class="o">=</span> <span class="nv">Left</span><span class="p">,</span>
</span><span class='line'><span class="n">right</span> <span class="o">=</span> <span class="nv">Right</span><span class="p">,</span>
</span><span class='line'><span class="n">created</span> <span class="o">=</span> <span class="nn">csd_date</span><span class="p">:</span><span class="nf">utc_now</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>to_snippet/4</code> allows construction of snippets from basic information: <code>title</code>, <code>left</code>, <code>right</code> and <code>user_id</code>. Behind the scenes we determine the current date/time in UTC format (details of this function coming later) and store that alongside the snippet in the <code>created</code> field. We also generate a new (hopefully unique) key for the snippet at the same time.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fetch</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">fetch</span><span class="p">(</span><span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">));</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="nf">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">Snippet</span><span class="o">=</span><span class="nl">#snippet</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="nf">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">list_for_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="nf">list_snippets</span><span class="p">(</span><span class="nv">UserId</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These three functions are the &ldquo;main&rdquo; functions, so to speak. That is, the main opertions that are done with snippets are fetching, saving and listing. Each one of them simply passes the call on to <code>csd_db</code> to invoke functions on <code>csd_snippet_store</code> with a Riak connection. Details of what those functions do are coming shortly.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_user_id</span><span class="p">(</span><span class="nv">Snippet</span><span class="o">=</span><span class="nl">#snippet</span><span class="p">{},</span> <span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Snippet</span><span class="nl">#snippet</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span> <span class="o">=</span> <span class="nv">UserId</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_user_id</span><span class="p">(</span><span class="nl">#snippet</span><span class="p">{</span><span class="n">user_id</span><span class="o">=</span><span class="nv">UserId</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">UserId</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_key</span><span class="p">(</span><span class="nl">#snippet</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">Key</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Key</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_key</span><span class="p">(</span><span class="nv">Snippet</span><span class="o">=</span><span class="nl">#snippet</span><span class="p">{},</span> <span class="nv">NewKey</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Snippet</span><span class="nl">#snippet</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="nv">NewKey</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The functions listed above are basic get and set operations for certain pieces of information that live within the snippet. When storing snippets, we need to be able to set a secondary index value for <code>user_id</code> and given that the structure of the snippet is hidden to all outside of the <code>csd_snippet</code> module this function is required to expose the user&rsquo;s id.</p>

<p>At this point it might not be as obvious as to why we need to provide the ability to set a key on the snippet, but this will come clear later on when we look at <a href="#snippet-submission">snippet submission</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nl">#snippet</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="nv">L</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="nv">R</span><span class="p">,</span> <span class="n">created</span><span class="o">=</span><span class="nv">C</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Data</span> <span class="o">=</span> <span class="p">[{</span><span class="n">key</span><span class="p">,</span> <span class="nv">K</span><span class="p">},</span> <span class="p">{</span><span class="n">title</span><span class="p">,</span> <span class="nv">T</span><span class="p">},</span> <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="nv">L</span><span class="p">},</span> <span class="p">{</span><span class="n">right</span><span class="p">,</span> <span class="nv">R</span><span class="p">},</span> <span class="p">{</span><span class="n">created</span><span class="p">,</span> <span class="nv">C</span><span class="p">}],</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">Data</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Data</span> <span class="o">=</span> <span class="nn">csd_json</span><span class="p">:</span><span class="nf">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nl">#snippet</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'><span class="n">left</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'><span class="n">right</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'><span class="n">created</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">created</span><span class="p">,</span> <span class="nv">Data</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above functions are obviously used to convert snippets to and from JSON. These are used when passing snippets to the browser or for storing them in the database.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_string</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">right</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">created</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">false</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This last function exists as a helper function during conversion between Erlang proplists and JSON format and is used to highlight those values which are intended to be strings.</p>

<p>That covers off the interface to the snippet &ldquo;schema&rdquo;, but it doesn&rsquo;t show how an individual snippet ends up in the database. Let&rsquo;s take a look at the code in the storage module <code>csd_snippet_store</code>.</p>

<h3><a id="csd_snippet_store"></a><code>csd_snippet_store</code> module</h3>

<p>To start with, let&rsquo;s look at the module header including some handy defines which we&rsquo;ll need to dive into a little bit.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_snippet_store</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6f;&amp;#106;&amp;#x40;&amp;#x62;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#101;&amp;#100;&amp;#46;&amp;#x69;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">106</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x62</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x75</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">define</span><span class="p">(</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">snippet</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">USERID_INDEX</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">userid</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">LIST_MAP_JS</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">function</span><span class="p">(</span><span class="n">v</span><span class="p">){</span><span class="n">var</span> <span class="n">d</span> <span class="o">=</span> <span class="nv">Riak</span><span class="p">.</span><span class="n">mapValuesJson</span><span class="p">(</span><span class="n">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="n">return</span> <span class="p">[{</span><span class="nn">key</span><span class="p">:</span><span class="n">d</span><span class="p">.</span><span class="n">key</span><span class="p">,</span><span class="nn">title</span><span class="p">:</span><span class="n">d</span><span class="p">.</span><span class="n">title</span><span class="p">,</span><span class="nn">created</span><span class="p">:</span><span class="n">d</span><span class="p">.</span><span class="n">created</span><span class="p">}];}</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">REDUCE_SORT_JS</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">function</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">){</span><span class="n">return</span> <span class="n">a</span><span class="p">.</span><span class="n">created</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">b</span><span class="p">.</span><span class="n">created</span><span class="o">?</span><span class="mi">1</span><span class="p">:(</span><span class="n">a</span><span class="p">.</span><span class="n">created</span><span class="o">&gt;</span><span class="n">b</span><span class="p">.</span><span class="n">created</span><span class="o">?-</span><span class="mi">1</span><span class="p">:</span><span class="mi">0</span><span class="p">);}</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first two defines are obvious. The next two are much more interesting. Here we can see some JavaScript code that we&rsquo;re going to be using during map/reduce phases when searching for snippets. Given that the code above isn&rsquo;t that nice to read, let&rsquo;s expand it out to see what it&rsquo;s doing:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>LIST_MAP_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="k">return</span> <span class="p">[{</span> <span class="nx">key</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">created</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">created</span> <span class="p">}];</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Map functions in Riak take up to 3 values:</p>

<ol>
<li>The value being mapped over. If the map phase is the first of the phases then this value will be the full object pulled from Riak.</li>
<li>The key data associated with the value. This is the (optional) value that is passed in alongside the key in the input phase.</li>
<li>A value passed into the map phase which remains consistent for each value that is mapped over.</li>
</ol>


<p>In our case, we&rsquo;re only interested in the first argument, the value that is coming out of Riak. We&rsquo;re also only interested in the contents of the value itself. We use the built-in function <code>Riak.mapValuesJson</code> to pull out the value as JSON. From that value we&rsquo;re only interested in the <code>key</code>, the <code>title</code> and the <code>created</code> properties. The map function much produce a list of values, so we return this new JSON object wrapped in a list.</p>

<p>It&rsquo;s not yet obvious, though it will be, but this is the function that will be used when we list all of the snippets that a single user has submitted. Next up is the reduce phase:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>REDUCE_SORT_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">created</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">created</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">created</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">created</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Those of you familiar with Riak will have noticed that this function doesn&rsquo;t look like a typical reduce function. In Riak the reduce phase functions have the same signature as map functions. The function shown above does not fit this description.</p>

<p>In our reduce phase for listing a user&rsquo;s snippets, we&rsquo;re only interested in sorting the snippets by the date in which they were submitted (most recent first). The function above takes two snippets and returns the result of the comparison based on the date. This function is used in conjunction with another built-in function, <code>Riak.reduceSort</code>. We pass in our sort comparison to the reduce phase as the argument to the phase and the built-in will execute it for each required comparison to make the resulting list of values ordered correctly.</p>

<p>With that out of the way, let&rsquo;s take a look at the first of the Erlang functions which fetches a single snippet based on its key.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">save</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">list_for_user</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">SnippetJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">get_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="n">int</span><span class="p">,</span> <span class="o">?</span><span class="nv">USERID_INDEX</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">set_user_id</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)};</span>
</span><span class='line'><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first thing you&rsquo;ll notice is that the first parameter to the function is the <code>RiakPid</code> which we will use to talk to Riak. The second parameter is the <code>Key</code> (identifier) of the snippet. The function calls <code>csd_riak:fetch</code> which attempts to pull a Riak object out of Riak using the key as the id for the object to read.</p>

<p>If that succeeds then a valid Riak object is returned. This contains all the detail of the object as it is stored in Riak including meta data. At this point we&rsquo;re only interested in two things:</p>

<ol>
<li>The value stored in the object (which should be the snippet data in JSON format).</li>
<li>The value of the <code>user_id</code> index which identifies the person who created the snippet.</li>
</ol>


<p>These two values are pulled from the Riak object and are used to construct a valid snippet instance which is then returned to the caller.</p>

<p>We&rsquo;re also interested in listing snippets for a given user, so let&rsquo;s take a look at the code for that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">list_for_user</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">MR1</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_input_index</span><span class="p">(</span><span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">create</span><span class="p">(),</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="n">int</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;?</span><span class="nv">USERID_INDEX</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">MR2</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR1</span><span class="p">,</span> <span class="o">?</span><span class="nv">LIST_MAP_JS</span><span class="p">,</span> <span class="n">false</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR3</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR2</span><span class="p">,</span> <span class="o">?</span><span class="nv">REDUCE_SORT_JS</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">Result</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">MR3</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="nv">List</span><span class="p">}]}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">List</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[]}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Result</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here&rsquo;s where we are first using our new map/reduce module to help construct a valid map/reduce job which pulls out the list of snippets. The first line of the function is specifying that we&rsquo;re interested in all values in <code>?BUCKET</code> (the snippet bucket) which have an <code>int</code> index called <code>?USERID_INDEX</code> (the index of the submitting user&rsquo;s id) that is the same as the specified <code>UserId</code> passed into the function. We then take this job and add a JavaScript map phase where we pass in the <code>?LIST_MAP_JS</code> (details of which we have just seen above). Notice that we pass in <code>false</code> as the last parameter as we&rsquo;re not interested in returning the results of this phase from the query, we just want those values passed to the next phase.</p>

<p>The last of the phases is a JavaScript reduce phase that uses Riak&rsquo;s sorting functionality. We pass in <code>?REDUCE_SORT_JS</code> which causes the sort to happen in reverse chronological order.</p>

<p>With our map/reduce constructed, we execute this in Riak and check the result. The first thing to note is that we&rsquo;re currently not checking for errors. Right now we want the process to crash should an error occur. Later in the series we&rsquo;ll be looking a bit more at error handling, but for the purpose of this post it&rsquo;s out of scope.</p>

<p>The two patterns we do check for cover the two cases that may arise in normal use. When the map/reduce job runs and succeeds, the result will be in the format: <code>{ok, [{&lt;phase number&gt;, &lt;results&gt;}]}</code>. Phase numbers are zero-based. The list that is returned will only contain the results that we asked Riak to keep.</p>

<p>Given these conditions we can see that if the map/reduce job runs and extracts results, we can expect to see a list with one element in it which is the result of the reduce phase. Matching this to <code>{ok, [{1, List}]}</code> gives us direct access to the results in the <code>List</code> value.</p>

<p>If, however, there isn&rsquo;t any data in Riak that matches the query Riak will return no results for the phase. Hence we also need to match against this case, <code>{ok, []}</code>, and return an empty list which implies that there aren&rsquo;t any entries.</p>

<p>Now that listing snippets for the user is done, let&rsquo;s look at the save functionality.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">get_key</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">update</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">persist</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">notfound</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">create</span><span class="p">(</span><span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">persist</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">persist</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">get_user_id</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UpdatedRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">set_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="n">int</span><span class="p">,</span> <span class="o">?</span><span class="nv">USERID_INDEX</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UpdatedRiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let&rsquo;s start by looking at the <code>persist</code> function as this is invoked in two spots inside the <code>save</code> function. As you can see when the snippet is persisted we take the id of the user who submitted it and add a new index to the Riak object which contains this value. We then push the object into the store. Easy peasy!</p>

<p>The <code>save</code> function is also quite self-explanatory. It first attempts to fetch an existing object from Riak using the snippet&rsquo;s key as the identifier. If the value exists, this value is updated with the new snippet information. If it doesn&rsquo;t exist, a new Riak object is created. Both of these code paths call the <code>persist</code> function to finish the job of storing the snippet.</p>

<p>We&rsquo;re done! That&rsquo;s the full story of snippet storage. Let&rsquo;s launch the application and play with storing snippets.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>snippet storage in action </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="sc">$ </span><span class="n">make</span> <span class="n">webstart</span>
</span><span class='line'><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="n">snip</span> <span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">S</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">to_snippet</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">The</span> <span class="nv">Basics</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">12345</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">snippet</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">AIUWiw</span><span class="o">==</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">The</span> <span class="nv">Basics</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="s">&quot;int x = 1;&quot;</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;2012-06-05T21:28:20.314Z&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">S</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">snippet</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">AIUWiw</span><span class="o">==</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">The</span> <span class="nv">Basics</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="s">&quot;int x = 1;&quot;</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;2012-06-05T21:28:20.314Z&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">AIUWiw</span><span class="o">==</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">snippet</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">AIUWiw</span><span class="o">==</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">The</span> <span class="nv">Basics</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="s">&quot;int x = 1;&quot;</span><span class="p">,</span><span class="s">&quot;2012-06-05T21:28:20.314Z&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One thing you&rsquo;ll notice here is that we&rsquo;ve added a snippet for a user with an Id of <code>12345</code>. This user <em>does not exist</em> in Riak. In Riak you can add an index for a particular value but there is no way of adding the equivalent of a foreign key in the RDBMS world.</p>

<p>While we&rsquo;re here, let&rsquo;s see what Riak gives is when we talk directly to it via curl:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>snippet storage in action </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://127.0.0.1:8091/riak/snippet/AIUWiw==&quot;</span>&gt;http://127.0.0.1:8091/riak/snippet/AIUWiw<span class="o">==</span>&lt;/a&gt;
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>X-Riak-Vclock: a85hYGBgzGDKBVIcMRuuc/nPTpqdwZTImMfK8Our00m+LAA<span class="o">=</span>
</span><span class='line'>x-riak-index-userid_int: 12345
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Server: MochiWeb/1.1 WebMachine/1.9.0 <span class="o">(</span>someone had painted it blue<span class="o">)</span>
</span><span class='line'>Link: &lt;/riak/snippet&gt;; <span class="nv">rel</span><span class="o">=</span>&amp;ldquo;up&amp;rdquo;
</span><span class='line'>Last-Modified: Tue, 05 Jun 2012 21:28:26 GMT
</span><span class='line'>ETag: &amp;ldquo;5E5aOqpuUZa30DpSVytdn7&amp;rdquo;
</span><span class='line'>Date: Tue, 05 Jun 2012 21:37:09 GMT
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Content-Length: 117&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">{</span>&amp;ldquo;key&amp;rdquo;:&amp;ldquo;AIUWiw<span class="o">==</span>&amp;rdquo;,&amp;ldquo;title&amp;rdquo;:&amp;ldquo;The Basics&amp;rdquo;,&amp;ldquo;left&amp;rdquo;:&amp;ldquo;var <span class="nv">x</span> <span class="o">=</span> 1;&amp;rdquo;,&amp;ldquo;right&amp;rdquo;:&amp;ldquo;int <span class="nv">x</span> <span class="o">=</span> 1;&amp;rdquo;,&amp;ldquo;created&amp;rdquo;:&amp;ldquo;2012-06-05T21:28:20.314Z&amp;rdquo;<span class="o">}</span>% &lt;br/&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see that the detail we&rsquo;re getting matches that which we pulled straight out of our application, including the <code>X-riak-index-userid_int</code> header which contains the Id of the user the submitted the snippet.</p>

<p>Everything looks in order. Next let&rsquo;s handle storage of votes.</p>

<h2><a id="storing-votes"></a>Storing Votes</h2>

<p>Storage of a snippet is a great thing, but it is ultimatley meaningless of people can&rsquo;t indicate which one they prefer. What we need to be able to do is provide the ability to vote so that users of the site can see which side of the snippet users feel is the best.</p>

<p>We&rsquo;ve already discussed the approach that we&rsquo;re going to take. Let&rsquo;s dive into the code.</p>

<h3><a id="csd_vote"></a><code>csd_vote</code> module</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_vote</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#114;&amp;#101;&amp;#100;&amp;#46;&amp;#105;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">106</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x75</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">to_vote</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'><span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">save</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">get_user_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">get_which</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">get_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">get_id</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">to_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">from_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">get_snippet_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">random_votes</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">vote</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="p">,</span>
</span><span class='line'><span class="n">snippet_id</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span><span class="p">,</span>
</span><span class='line'><span class="n">time</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">left</span><span class="p">,</span>
</span><span class='line'><span class="n">right</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we can see that we&rsquo;re following a similar pattern to what we did with snippets. We have an internal <code>vote</code> record which indicates which user submitted the vote, which snippet the vote is for, which side of the snippet they voted for (<code>"left"</code> or <code>"right"</code>) and a timestamp. Hopefully there&rsquo;s nothing in here that will surprise anyone.</p>

<p>The next record, <code>count</code>, is a little more interesting. It will make more sense after we see where it is used, but in short the purpose of this record is to group the results of a map/reduce job which counts the number of votes for a given snippet and which side the votes were for. If the search is conducted by a known (ie. logged-in user) the record will also indicate which side of the snippet they voted for (if any).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_vote</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="o">=</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">left</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">to_vote_inner</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">);</span>
</span><span class='line'><span class="nf">to_vote</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="o">=</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">right</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">to_vote_inner</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>to_vote</code> is a simple function that is used to create an instance of a vote. The interface of this function is designed to stop callers from submitting vote for anything other than <code>"left"</code> or <code>"right"</code>, as this wouldn&rsquo;t make sense to the system. This function calls an internal version which is defined a bit later on.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">}}</span> <span class="o">=</span> <span class="nn">csd_db</span><span class="p">:</span><span class="nf">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#count</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nv">L</span><span class="p">,</span>
</span><span class='line'><span class="n">right</span> <span class="o">=</span> <span class="nv">R</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">,</span> <span class="nv">W</span><span class="p">}}</span> <span class="o">=</span> <span class="nn">csd_db</span><span class="p">:</span><span class="nf">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#count</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nv">L</span><span class="p">,</span>
</span><span class='line'><span class="n">right</span> <span class="o">=</span> <span class="nv">R</span><span class="p">,</span>
</span><span class='line'><span class="n">which</span> <span class="o">=</span> <span class="nv">W</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These two functions are the magic that makes the vote counting tick. They both essentially do the same thing but for one small difference. The first, <code>count_for_snippet/1</code> takes a single parameter which is the Id of the snippet. It make a call to the <code>csd_db</code> module to kick off a map/reduce job in Riak. The result is a pair of values, <code>{L, R}</code>, where <code>L</code> is the total number of votes for the left side of the snippet and <code>R</code> is the total number for the right side. This search is done outside of the context of a known user. The result of a call to this function is a record which doesn&rsquo;t have a meaningful value for the <code>which</code> record member.</p>

<p>The second function, <code>count_for_snippet/2</code>, is the same as the first except that it also takes the identifier of the user that is conducting the search. This version of the function also calls a counterpart in <code>csd_db</code>, but the result is different in that it also contains the side of the snippet which that particular user voted for. This <code>which</code> value will be either <code>"left"</code>, <code>"right"</code> or <code>""</code>. If it&rsquo;s <code>""</code> then that indicates that the user hasn&rsquo;t voted on this snippet.</p>

<p>Next up we have the standard serialisation functions.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">time</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="nv">W</span><span class="p">,</span> <span class="n">snippet_id</span><span class="o">=</span><span class="nv">S</span><span class="p">,</span> <span class="n">user_id</span><span class="o">=</span><span class="nv">U</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="nf">to_json</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">time</span><span class="p">,</span> <span class="nv">T</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">U</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet_id</span><span class="p">,</span> <span class="nv">S</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">which</span><span class="p">,</span> <span class="nv">W</span><span class="p">}],</span>
</span><span class='line'><span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nl">#count</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="nv">L</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="nv">R</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="nv">W</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="nf">to_json</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="nv">L</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">right</span><span class="p">,</span> <span class="nv">R</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">which</span><span class="p">,</span> <span class="nv">W</span><span class="p">}],</span>
</span><span class='line'><span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By now these functions should be self-explanatory, so we&rsquo;ll kick on to something more interesting.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fetch</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="nf">get_vote</span><span class="p">(</span><span class="n">get_id</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">Vote</span><span class="o">=</span><span class="nl">#vote</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="nf">save_vote</span><span class="p">(</span><span class="nv">Vote</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_user_id</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">user_id</span><span class="o">=</span><span class="nv">U</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">U</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_which</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">which</span><span class="o">=</span><span class="nv">W</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">W</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_snippet_id</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">snippet_id</span><span class="o">=</span><span class="nv">S</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">S</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_id</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">user_id</span><span class="o">=</span><span class="nv">U</span><span class="p">,</span> <span class="n">snippet_id</span><span class="o">=</span><span class="nv">S</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">get_id</span><span class="p">(</span><span class="nv">U</span><span class="p">,</span> <span class="nv">S</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_id</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nb">iolist_to_binary</span><span class="p">([</span><span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">UserId</span><span class="p">),</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">SnippetId</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The functions are also rather rudimentary and fit the usual pattern that we&rsquo;re applying across our application. The one thing to note here is that a vote doesn&rsquo;t have its own identifer that is generated. Instead, the key that is used to identify a vote in the <code>vote</code> bucket is a combination of the user&rsquo;s Id and the snippet&rsquo;s Id.</p>

<p>At this point the requirement for the accessor functions won&rsquo;t be clear. Keep them in mind, we&rsquo;ll cover them off a bit later when we look at the code that&rsquo;s closer to the UI.</p>

<p>Next up here&rsquo;s a typical deserialisation function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">List</span> <span class="o">=</span> <span class="nn">csd_json</span><span class="p">:</span><span class="nf">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nl">#vote</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">time</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'><span class="n">user_id</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'><span class="n">snippet_id</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">snippet_id</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'><span class="n">which</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">which</span><span class="p">,</span> <span class="nv">List</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Nothing too stellar here either. After converting the JSON back into a proplist, we&rsquo;re just poking the the values into our <code>vote</code> record.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">random_votes</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">NumVotes</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">random</span><span class="p">:</span><span class="nf">seed</span><span class="p">(</span><span class="nn">erlang</span><span class="p">:</span><span class="nf">now</span><span class="p">()),</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nv">Which</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">random</span><span class="p">:</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">99999999</span><span class="p">)</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="k">of</span>
</span><span class='line'>      <span class="mi">0</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s">&quot;left&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s">&quot;right&quot;</span>
</span><span class='line'>    <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">V</span> <span class="o">=</span> <span class="n">to_vote</span><span class="p">(</span><span class="nn">random</span><span class="p">:</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">99999999</span><span class="p">),</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">),</span>
</span><span class='line'>    <span class="n">save</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NumVotes</span><span class="p">)),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">ok</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>random_votes</code> function is something that I decided to put in to simulate larger numbers of votes. Given that the system isn&rsquo;t live, I wanted to be able to generate votes for a given snippet so that I could see the affect on the UI. Leaving this function in makes sense for the benefit of my awesome reader(s) so they can see the effect themselves. Ultimately it doesn&rsquo;t belong in the <em>production</em> version.</p>

<p>Now for the last two functions in the module.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_vote_inner</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nl">#vote</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_id</span> <span class="o">=</span> <span class="nv">UserId</span><span class="p">,</span>
</span><span class='line'><span class="n">snippet_id</span> <span class="o">=</span> <span class="nv">SnippetId</span><span class="p">,</span>
</span><span class='line'><span class="n">time</span> <span class="o">=</span> <span class="nn">csd_date</span><span class="p">:</span><span class="nf">utc_now</span><span class="p">(),</span>
</span><span class='line'><span class="n">which</span> <span class="o">=</span> <span class="nv">Which</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_string</span><span class="p">(</span><span class="n">time</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">which</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">snippet_id</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">false</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>to_vote_inner</code> is a simple function called by <code>to_vote</code> at the top of the module. It&rsquo;s there just to reduce code duplication. <code>is_string</code> is the classic helper function which tells the JSON serialiser/deserialiser which values are strings and which aren&rsquo;t.</p>

<p>We&rsquo;re done with the handling module, next we need to dive into how these are stored.</p>

<h3><a id="csd_vote_store"></a><code>csd_vote_store</code> module</h3>

<p>This module follows the same pattern as the snippet storage module. Let&rsquo;s take a look at the code, starting with the defines. This is where we start to get into more interesting map/reduce jobs.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_vote_store</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#x3a;&amp;#x6f;&amp;#x6a;&amp;#64;&amp;#x62;&amp;#x75;&amp;#102;&amp;#x66;&amp;#x65;&amp;#114;&amp;#x65;&amp;#x64;&amp;#46;&amp;#105;&amp;#x6f;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">define</span><span class="p">(</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">vote</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">SNIPPET_INDEX</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">snippetid</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">USER_INDEX</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">userid</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">COUNT_VOTE_MAP_JS</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">function</span><span class="p">(</span><span class="n">v</span><span class="p">){</span><span class="n">var</span> <span class="n">d</span><span class="o">=</span><span class="nv">Riak</span><span class="p">.</span><span class="n">mapValuesJson</span><span class="p">(</span><span class="n">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">which</span><span class="o">===</span><span class="err">\</span><span class="s">&quot;left</span><span class="err">\</span><span class="s">&amp;rdquo;){return[[1,0]];}return[[0,1]];}&amp;ldquo;&gt;&gt;).</span>
</span><span class='line'><span class="s">-define(COUNT_VOTE_RED_JS, &amp;lt;&amp;lt;&quot;</span><span class="n">function</span><span class="p">(</span><span class="n">vals</span><span class="p">,</span><span class="n">arg</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="n">vals</span><span class="p">.</span><span class="nb">length</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="n">return</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]];}</span><span class="n">return</span><span class="p">[</span><span class="n">vals</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">v</span><span class="p">){</span><span class="n">return</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]];})];}</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">COUNT_VOTE_USER_MAP_JS</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">function</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">a</span><span class="p">){</span><span class="n">var</span> <span class="n">d</span><span class="o">=</span><span class="nv">Riak</span><span class="p">.</span><span class="n">mapValuesJson</span><span class="p">(</span><span class="n">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span><span class="n">var</span> <span class="n">which</span><span class="o">=</span><span class="n">d</span><span class="p">.</span><span class="n">user_id</span><span class="o">===</span><span class="n">a</span><span class="o">?</span><span class="n">d</span><span class="p">.</span><span class="nn">which</span><span class="p">:</span><span class="err">\&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="err">\&amp;</span><span class="n">ldquo</span><span class="p">;;</span><span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">which</span><span class="o">===</span><span class="err">\</span><span class="s">&quot;left</span><span class="err">\</span><span class="s">&amp;rdquo;){return[[1,0,which]];}return[[0,1,which]];}&amp;ldquo;&gt;&gt;).</span>
</span><span class='line'><span class="s">-define(COUNT_VOTE_USER_RED_JS, &amp;lt;&amp;lt;&quot;</span><span class="n">function</span><span class="p">(</span><span class="n">vals</span><span class="p">,</span><span class="n">arg</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="n">vals</span><span class="p">.</span><span class="nb">length</span><span class="o">===</span><span class="mi">0</span><span class="p">){</span><span class="n">return</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">\&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="err">\&amp;</span><span class="n">ldquo</span><span class="p">;]];}</span><span class="n">return</span><span class="p">[</span><span class="n">vals</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">v</span><span class="p">){</span><span class="n">return</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nb">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="n">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]];})];}</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first few &mdash; <code>BUCKET</code>, <code>SNIPPET_INDEX</code> and <code>USER_INDEX</code> &mdash; speak for themselves and probably don&rsquo;t need explanation. The rest of them do. These are all JavaScript map/reduce job phases condensed into single strings. Let&rsquo;s expand them out.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>COUNT_VOTE_MAP_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">which</span> <span class="o">===</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">left</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]];</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As the name of the snippet suggests, this is the map phase of the job which performs a count. The first line of this function is extracting the value of the JSON object out of the Riak object as we have done in the past in other phases. Remember that each vote contains a value which indicates which side of the snippet the vote counts towards. This function checks to see which side a given vote and returns two values. Each value that is parsed in this map phase will result in either <code>[[1, 0]]</code> or <code>[[0, 1]]</code>. We&rsquo;ll see how this is useful after taking a look at the reduce phase.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>COUNT_VOTE_RED_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">vals</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">vals</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]];</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">[</span><span class="nx">vals</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When this reduce phase is run we check the existing list of values from any previous reductions and if there aren&rsquo;t any we default to <code>[[0, 0]]</code>. This acts as the seed for our accumulation of values. Otherwise, we reduce across all the values that are given, which will come in the form <code>[[L0, R0], [L1, R1], ... [Ln, Rn]]</code>. During our reduction we simply add the two values in the arrays together based on index, resulting in us totalling both the number of <code>left</code> and <code>right</code> votes at the same time. We return the result again as another array of values.</p>

<p>When the reduce is finished we end up with a single nested array in the form <code>[[L, R]]</code> where <code>L</code> is the total number of votes cast for the <code>left</code> side and <code>R</code> is the total for the <code>right</code>.</p>

<p>With these two phases we now have a map/reduce job which is able to tally up all the votes for a given snippet and tell is which side was voted for.</p>

<p>Next up is a bit of boilerplate with the vote fetch function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">save</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">VoteJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Vote</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">from_json</span><span class="p">(</span><span class="nv">VoteJson</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">};</span>
</span><span class='line'><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There shouldn&rsquo;t be anything new about this fetch function at this stage. It&rsquo;s the same as what we&rsquo;ve done for the snippet loader, but specific to votes. Let&rsquo;s take a look at something a little more interesting.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">MR1</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_input_index</span><span class="p">(</span><span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">create</span><span class="p">(),</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="n">bin</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;?</span><span class="nv">SNIPPET_INDEX</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">MR2</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR1</span><span class="p">,</span> <span class="o">?</span><span class="nv">COUNT_VOTE_MAP_JS</span><span class="p">,</span> <span class="n">false</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR3</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR2</span><span class="p">,</span> <span class="o">?</span><span class="nv">COUNT_VOTE_RED_JS</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">MR3</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="p">[[</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">]]}]}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">}};</span>
</span><span class='line'><span class="nv">Error</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Error</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the first line of the function we are creating a new map/reduce job. This job is passed into the <code>add_input_index</code> function which adds an input to the job with an index. This index is a <em>binary</em> index (<code>bin</code>) called <code>?SNIPPET_INDEX</code> and we&rsquo;re passing in the value of <code>SnippetId</code> which will tell Riak to pull out all vote entries that have a secondary index which contains the key of the snippet.</p>

<p>We then add another phase to this job that contains the javascript function that maps over the votes and counts them. Here we&rsquo;re not interested in pulling the results of the phase so we&rsquo;re passing in <code>false</code> in as the last parameter. Finally we add our last phase, which is the reduce phase that counts up all the votes.</p>

<p>Upon executing the map/reduce job we there are a number of possible results. Just like we saw with the map/reduce job in the <code>snippet</code> module, we are able to pattern match directly against the exact format of the result because we are only expecting a single phase result.</p>

<p>If the result comes out in this format we just return a tuple that contains the counts for the <code>left</code> and <code>right</code> sections. If not, we just return whatever it was that came out of Riak (which should be an error).</p>

<p>Next we&rsquo;ll see a very similar function with a very slight difference.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">MR1</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_input_index</span><span class="p">(</span><span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">create</span><span class="p">(),</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="n">bin</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;?</span><span class="nv">SNIPPET_INDEX</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">MR2</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR1</span><span class="p">,</span> <span class="o">?</span><span class="nv">COUNT_VOTE_USER_MAP_JS</span><span class="p">,</span> <span class="n">false</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR3</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR2</span><span class="p">,</span> <span class="o">?</span><span class="nv">COUNT_VOTE_USER_RED_JS</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="nf">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">MR3</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="p">[[</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">Which</span><span class="p">]]}]}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">Which</span><span class="p">}};</span>
</span><span class='line'><span class="nv">Error</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Error</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This function differs from the previous <code>count_for_snippet</code> only in that it accepts another parameter, <code>UserId</code>, which indicates the Id of the user initiating the query. The phases are included in the same way, but the functions invoked are <code>UserId</code>-aware. The result varies from before in that it returns another parameter in the reduce phase result, <code>Which</code>. This value indicates which side the user voted for, if at all.</p>

<p>Lastly, we&rsquo;re back to a bit more boilerplate.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">VoteId</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">get_id</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">get_user_id</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SnippetId</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">get_snippet_id</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_</span><span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="s">&quot;User has already voted on this snippet.&quot;</span><span class="p">};</span>
</span><span class='line'><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">notfound</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">create</span><span class="p">(</span><span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">,</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">Vote</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">Indexes</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">bin</span><span class="p">,</span> <span class="o">?</span><span class="nv">SNIPPET_INDEX</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">int</span><span class="p">,</span> <span class="o">?</span><span class="nv">USER_INDEX</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">set_indexes</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Indexes</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here you can see the indexes being added when the item is being saved. Those indexes are the most important part, otherwise the vote won&rsquo;t be counted.</p>

<p>The only other thing that is really worth mentioning here is there is validation that the user hasn&rsquo;t already voted for a given snippet. My design choice here was to make it so that people can&rsquo;t change their mind. I reserve the right to change <em>my</em> mind on this design later.</p>

<p>Let&rsquo;s save a vote and execute a map/reduce job to find votes to make sure our functionality works.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">V</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">to_vote</span><span class="p">(</span><span class="mi">12345</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">ABCDE</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">left</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">{</span><span class="n">vote</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">ABCDE</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">left</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">2012</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">02</span><span class="nv">T09</span><span class="p">:</span><span class="mi">37</span><span class="p">:</span><span class="mi">21</span><span class="p">.</span><span class="mi">332</span><span class="nv">Z</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">V</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">vote</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">ABCDE</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">left</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>      <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;2012-07-02T09:37:21.332Z&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">count_for_snippet</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">ABCDE</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">count</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">}}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">count_for_snippet</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">ABCDE</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">12345</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">count</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">left</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Excellent. We can see that storage is working and that when we do map/reduce with and without the <code>UserId</code> specified we get the expected results.</p>

<p>That&rsquo;s votes done. The last thing we&rsquo;re going to store is a bit of user information.</p>

<h2><a id="storing-users"></a>Storing Users</h2>

<p>At this point in the game we&rsquo;re not interesting in too much stuff with respect to the user. We&rsquo;re putting this in place now because down the track we will be storing more. To start with we&rsquo;re just going to track the user&rsquo;s Twitter name, their Twitter ID (which we&rsquo;ll use as their ID in our system too) and the date in which they joined CSD.</p>

<h3><a id="csd_user"></a><code>csd_user</code> module</h3>

<p>This should be routine by now. Let&rsquo;s take a look at the file as a whole.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_user</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#x3a;&amp;#x6f;&amp;#x6a;&amp;#64;&amp;#x62;&amp;#x75;&amp;#102;&amp;#102;&amp;#101;&amp;#114;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#x69;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">get_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">get_name</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">fetch</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">save</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">to_user</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">from_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">to_json</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'><span class="n">name</span><span class="p">,</span>
</span><span class='line'><span class="n">joined</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_user</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nl">#user</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="nv">Name</span><span class="p">,</span>
</span><span class='line'><span class="n">id</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'><span class="n">joined</span> <span class="o">=</span> <span class="nn">csd_date</span><span class="p">:</span><span class="nf">utc_now</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_id</span><span class="p">(</span><span class="nl">#user</span><span class="p">{</span><span class="n">id</span><span class="o">=</span><span class="nv">Id</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Id</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_name</span><span class="p">(</span><span class="nl">#user</span><span class="p">{</span><span class="n">name</span><span class="o">=</span><span class="nv">Name</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Name</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fetch</span><span class="p">(</span><span class="nv">Id</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="nf">get_user</span><span class="p">(</span><span class="nv">Id</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">User</span><span class="o">=</span><span class="nl">#user</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="nf">save_user</span><span class="p">(</span><span class="nv">User</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nl">#user</span><span class="p">{</span><span class="n">name</span><span class="o">=</span><span class="nv">N</span><span class="p">,</span> <span class="n">id</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="n">joined</span><span class="o">=</span><span class="nv">J</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="nf">to_json</span><span class="p">([{</span><span class="n">name</span><span class="p">,</span> <span class="nv">N</span><span class="p">},</span> <span class="p">{</span><span class="n">id</span><span class="p">,</span> <span class="nv">T</span><span class="p">},</span> <span class="p">{</span><span class="n">joined</span><span class="p">,</span> <span class="nv">J</span><span class="p">}],</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_json</span><span class="p">(</span><span class="nv">UserJson</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">User</span> <span class="o">=</span> <span class="nn">csd_json</span><span class="p">:</span><span class="nf">from_json</span><span class="p">(</span><span class="nv">UserJson</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nl">#user</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="nv">User</span><span class="p">),</span>
</span><span class='line'><span class="n">name</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nv">User</span><span class="p">),</span>
</span><span class='line'><span class="n">joined</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Internal Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_string</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">joined</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">false</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This entire module fits the pattern that we have already applied to both the <code>snippet</code> and <code>vote</code> functionality. Rather than waste more characters in this post I&rsquo;m going to assume that you guys are able to digest this without any explanation. Ping me a comment below if you get stuck.</p>

<p>So what does the storage bit look like?</p>

<h3><a id="csd_user_store"></a><code>csd_user_store</code> module</h3>

<p>It looks like this!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_user_store.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_user_store</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#101;&amp;#114;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#105;&amp;#x6f;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">define</span><span class="p">(</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">user</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">save</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">UserId</span><span class="p">));</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">UserId</span><span class="p">));</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">UserJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">User</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="nf">from_json</span><span class="p">(</span><span class="nv">UserJson</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">};</span>
</span><span class='line'><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">IntId</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="nf">get_id</span><span class="p">(</span><span class="nv">User</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c">% Id is int, so we need to conver to a binary</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">IntId</span><span class="p">)),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_</span><span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="c">% user already exists, we don&#39;t need to save anything.</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">};</span>
</span><span class='line'><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">notfound</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">create</span><span class="p">(</span><span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">,</span> <span class="nn">csd_user</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">User</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>User management is really easy at this stage. We&rsquo;re doing basic store and retrieve operations without any real complexity. After seeing the <code>vote</code> and <code>snippet</code> functionality I&rsquo;m fairly certain that you&rsquo;ll be more than comfortable with this code.</p>

<p>For brevity I&rsquo;m going to skip going through a sample of storing/retrieving users via the Erlang shell and move on to something completely new. But first&hellip;</p>

<h2><a id="take-a-breath"></a>Take a Breath</h2>

<p>Phew! That was quite a bit to take in. Thanks for reading this far. Posts this long do take a bit of effort to get through. If you&rsquo;re not scared yet you should be as we&rsquo;ve now only covered the back-end stuff. We&rsquo;ve still got the Webmachine end to deal with. There&rsquo;s a bit to cover here as too, so fill that glass back up, do some Pilates and when you&rsquo;re refreshed come back and dive into the next section.</p>

<p>Ready? Good. Here we go.</p>

<h2><a id="save-user-on-login"></a>Saving User on Login</h2>

<p>Now that we have the ability to store the details of a user the first thing we&rsquo;re going to do is make a call to this new functionality when a user signs in successfully. For that we need to edit the <code>csd_web_callback_resource</code> module in the <code>csd_web</code> application. This is the module that is invoked when Twitter responds via OAuth. For the most part the module is the same, except for one function which looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_callback_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">moved_temporarily</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">ReqToken</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_qs_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_token</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">ReqTokenSecret</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_qs_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_token_secret</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Verifier</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_qs_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_verifier</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">ReqData</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="nf">verify_access</span><span class="p">(</span><span class="nv">ReqToken</span><span class="p">,</span> <span class="nv">ReqTokenSecret</span><span class="p">,</span> <span class="nv">Verifier</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserInfoJson</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="nf">get_current_user_info</span><span class="p">(</span><span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="nf">decode</span><span class="p">(</span><span class="nv">UserInfoJson</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">id</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserName</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">screen_name</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">User</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="nf">to_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">),</span>   <span class="c">%% &amp;mdash; new functionality</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">User</span><span class="p">),</span>               <span class="c">%% &amp;mdash; new functionality&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c">% TODO: error handlng for when things don&amp;rsquo;t go to plan</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nn">conf</span><span class="p">:</span><span class="nf">get_val</span><span class="p">(</span><span class="n">urimap</span><span class="p">,</span> <span class="n">home</span><span class="p">)},</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The two new lines are highlighted with comments. You can see we&rsquo;re just creating a new user record by specifying the id and password, and then persisting this to Riak through the <code>csd_user</code> module. Simple stuff! User details will now be persisted when the user successfully signs in. We&rsquo;re not yet handling the case where the user decides not to sign in, or if the process fails, but we&rsquo;ll get to that in a future post.</p>

<h2><a id="post-sign-in"></a>Post Sign-In</h2>

<p>To briefly recap, when a user hits our site for the first time want to ask them to sign in. Once they have done so, we know who they are and we want to show a different view. the <code>moved_temporarily</code> function above redirects them back to this page after a successful sign in. Given that we have the ability to find out who they are, we need to respond differently on the home page view. When a recognised user signs in we&rsquo;re going to show them a landing page with a list of the snippets that they have submitted. To do this, we&rsquo;re going to need to know their Twitter Id, as that&rsquo;s what we&rsquo;re using to identify the owner of a snippet.</p>

<p>We need to make a very slight adjustment to our main <code>csd_web_resource</code> module so that we extract the user&rsquo;s Id at the same time as their name.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Content</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>       <span class="c">%% -- this is what we changed</span>
</span><span class='line'>  <span class="nn">csd_view</span><span class="p">:</span><span class="nf">home</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">);</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nn">csd_view</span><span class="p">:</span><span class="nf">home</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the [last post][Part4] we had already stored a few details about the user in their auth cookie, but we were only extracting their name. To get their Id as well we just needed to change our pattern match from <code>{_, Name, _, _}</code> to <code>{UserId, Name, _, _}</code>. We then pass this extra detail into the call to <code>csd_view:home</code> so that we can utilise that down the track. This new parameter needs to be handled by <code>csd_view</code> so let&rsquo;s take a look at the changes there.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_view.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">home</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Params</span> <span class="o">=</span> <span class="p">[{</span><span class="n">logged_in</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">},</span> <span class="p">{</span><span class="n">user_name</span><span class="p">,</span> <span class="nv">Name</span><span class="p">}],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">home_dtl</span><span class="p">:</span><span class="nf">render</span><span class="p">(</span><span class="nv">Params</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Content</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The only difference here is that we&rsquo;re now passing <code>{user_id, UserId}</code> down to the template renderer as well as other detail. This means the view can do something useful with it. We&rsquo;ll go over that a bit later when we cover off the UI, but for now let&rsquo;s take a look at what happens when the user&rsquo;s &ldquo;profile&rdquo; page is rendered.</p>

<h2><a id="user-profile"></a>User Profile</h2>

<p>The user profile page is what is displayed when the user signs in or comes back to the site while their cookie is still valid. This page contains a list of snippets that the user submitted listed in reverse chronological order. As a sneak preview, this is what we&rsquo;re striving for:</p>

<p><img src="/uploads/2012/07/part5-user-profile.png" title="&lsquo;User profile page&rsquo;" ></p>

<p>Please excuse my obvious test data, but you should get the idea. Each snippet listed on the page is shown as a link which gives the user direct access to the page specific to that snippet. So let&rsquo;s take a look at the resource code which provides the data for this view. This is an entirely new module called <code>csd_web_user_detail_resource</code>.</p>

<p>I&rsquo;ve trimmed out some of the usual cruft for brevity and am showing just the interesting bits. The full source is available on Github and linked at the bottom of the post.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Types</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="n">to_json</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Types</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Why is this interesting? Because the resource will only serve JSON. The JSON is accessed via Ajax in the view and rendered in a custom template in the browser. More on this detail a bit later.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">PathInfo</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">path_info</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">}</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">PathInfo</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c">% We need to render a username, but don&amp;rsquo;t hit the DB</span>
</span><span class='line'>  <span class="c">% if the user is the same as the one looking at the</span>
</span><span class='line'>  <span class="c">% page.</span>
</span><span class='line'>  <span class="nv">UserName</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">Name</span><span class="p">;</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserInfo</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nb">list_to_binary</span><span class="p">(</span><span class="nn">csd_user</span><span class="p">:</span><span class="nf">get_name</span><span class="p">(</span><span class="nv">UserInfo</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Snippets</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">list_for_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserData</span> <span class="o">=</span> <span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">user_name</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippets</span><span class="p">,</span> <span class="nv">Snippets</span><span class="p">}</span>
</span><span class='line'><span class="p">]},</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">Json</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="nf">encode</span><span class="p">(</span><span class="nv">UserData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here you can see that we&rsquo;re getting the id of the user from the URI. From the browser we&rsquo;re hitting this resource via a URI which takes the form of <code>/userdetail/&lt;user-id&gt;</code>, so we access the request data and pull the id out from the path information.</p>

<p>The next bit of code needs a bit of background information. When a user views a profile page the goal was to render the user&rsquo;s name on screen. If a user goes to their own profile page it makes more sense to not render the user&rsquo;s name but instead make it more personal. To do this we pass in the Twitter name of the current user as well as the user that is being viewed back to the JavaScript that made the call to the resource. If those values are the same then the view can be rendered differently.</p>

<p>As a result there was a need to find out who is viewing the page. So what we do is access the authentication information in the request and directly pattern match against the <code>UserId</code> that we pulled from the URI. If we get a match, then we return the name of the current user directly. This means that we can avoid going to the database as we already know the name, but if the user being viewed is different we go to Riak to pull out the name of the user.</p>

<p>Once we have the user name, we then list all the snippets for the user and combine those two bits information into a blob of JSON before returning this to the browser.</p>

<p>So now that the browser has the payload it can render the view that we saw above, including links to the snippets. What happens when a snippet is viewed? Let&rsquo;s a look now.</p>

<h2><a id="snippet-view"></a>Snippet View</h2>

<p>Snippet viewing is the most interesting part of the site so far (in my opinion). So before we dive into the code, let&rsquo;s see what it looks like when we open a snippet.</p>

<p><img src="/uploads/2012/07/part5-snippet-view.png" title="&lsquo;The Snippet View&rsquo;" ></p>

<p>Hopefully this screenshot will finally give you a vivid image as to what this application is all about. A snippet has two sides which do similar things in slightly different wants. Votes are cast by the users of the site to indicate which option they prefer. At the bottom you can see the current tally of votes, the side with the most votes is rendered in green and the side with the least is rendered in red. Both sides are rendered in blue if the the vote count is even.</p>

<p>When a user has voted for a given snippet, the view changes to look like this:</p>

<p><img src="/uploads/2012/07/part5-voted-snippet-view.png" title="&lsquo;The Voted Snippet View&rsquo;" ></p>

<p>When the user returns to the same snippet down the track, the view looks like this:</p>

<p><img src="/uploads/2012/07/part5-voted-snippet-view-return.png" title="&lsquo;The Voted Snippet View on return&rsquo;" ></p>

<p>While we&rsquo;re at it, let&rsquo;s take a look at the view when a user is <em>not</em> signed in:</p>

<p><img src="/uploads/2012/07/part5-snippet-unknown-user.png" title="&lsquo;The Voted Snippet View on return&rsquo;" ></p>

<p>As you can see there are a few things going on here:</p>

<ol>
<li>The main content of the snippet has to be loaded.</li>
<li>The count of votes for the snippet has to be loaded.</li>
<li>If the user is not logged in, show the vote count without any buttons which allow the user to vote.</li>
<li>If the user is logged in and hasn&rsquo;t yet voted, show the vote buttons.</li>
<li>Otherwise show the vote buttons.</li>
<li>When the user votes, post a vote to the server, show a confirmation message and update the vote count on screen. When the vote count is updated, the numbers should reflect any additional votes that have been cast while the user has been viewing the page.</li>
</ol>


<p>Let&rsquo;s see what the snippet loading resource looks like (again, with boring stuff ommitted).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Types</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="n">to_json</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Types</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Like before we&rsquo;re only providing JSON versions of the content. The client is responsible for the generation and handling of markup.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">PathInfo</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">path_info</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">}</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">find</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">PathInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Count</span><span class="p">}</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">);</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">Json</span> <span class="o">=</span> <span class="nb">iolist_to_binary</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="s">&quot;{</span><span class="se">\&quot;</span><span class="s">snippet</span><span class="se">\&quot;</span><span class="s">:&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="s">&quot;,</span><span class="se">\&quot;</span><span class="s">count</span><span class="se">\&quot;</span><span class="s">:&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">Count</span><span class="p">),</span>
</span><span class='line'>  <span class="s">&quot;}&quot;</span>
</span><span class='line'><span class="p">]),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">{</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first part of this function is doing the same thing as with the user profile page. It&rsquo;s getting the Id of the snippet being viewed from the URI, which is in the form <code>/snippet/&lt;snippet-id&gt;</code>. Once this has been extracted, the body of the snippet is pulled out of Riak.</p>

<p>After this we then take a look to see if the user is logged in via the auth cookie. If the user is logged in we invoke the vote counting functionality with the <code>UserId</code> as a parameter so that the map/reduce job can find which side they voted for. If the user isn&rsquo;t known, then the other version of the vote count is executed which doesn&rsquo;t rely on the user&rsquo;s Id.</p>

<p>When these two bits of information have been pulled from Riak we combine them (in a rather rudimentary fashion) into a blob of JSON and return that to the client.</p>

<p>Again it&rsquo;s worth noting that we aren&rsquo;t handling the case where the snippet isn&rsquo;t found (ie. returning a [404][Http404]). We&rsquo;ll be covering this off in a future blog post.</p>

<p>From this blob of JSON the client-side code is able to infer quite a bit and can update the display to show the appropriate views depending on the state of the user and the votes. So how exactly do we handle the submission of a vote? Let&rsquo;s look at that now.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_vote_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_data</span> <span class="o">=</span> <span class="n">undefined</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">POST</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When processing vote submissions we use the user information in more that one of the Webmachine overloads, so rather than pull it out of the auth cookie each time we store it in the <code>State</code> blob that is threaded through each of the functions we overload. The above code declares the record that we&rsquo;re using and shows that for each request we create a new one when the resource is initialised.</p>

<p>The other take-away from this bit of code is that we only accept <code>POST</code>s.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_vote_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_authorized</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserData</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">user_data</span><span class="o">=</span><span class="nv">UserData</span><span class="p">}};</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Given that we&rsquo;re processing the submission of votes we require that the user is signed in. If a non-authorised request comes in we want to return a [401][Http401]. If the user is signed in, we allow the processing to continue but we also store the user data in <code>State</code> so that it can be used in <code>process_post</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_vote_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">process_post</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{</span><span class="n">user_data</span><span class="o">=</span><span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">}})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">FormData</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="nf">parse_qs</span><span class="p">(</span><span class="nn">wrq</span><span class="p">:</span><span class="nf">req_body</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">SnippetId</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">snippet</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Which</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">which</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Vote</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">to_vote</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Count</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Json</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">Count</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_header</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">Content</span><span class="o">-</span><span class="n">type</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">application</span><span class="o">/</span><span class="n">json</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_body</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first thing you&rsquo;ll notice here is that <code>process_post</code> requires a pattern-match against valid <code>user_data</code> to extract the <code>UserId</code>. If it doesn&rsquo;t match the process will crash. This is ok because we shouldn&rsquo;t ever reach this function unless the user is authorised anyway.</p>

<p>The body of the function is made up of a few simple steps. We parse out the content of the <code>POST</code> using <code>parse_qs</code> from Mochiweb&rsquo;s <code>mochiweb_util</code> module and then from that we extract <code>"snippet"</code> and <code>"which"</code> values which indicate the key of the snippet and the side of the snippet the user voted for (respectively). A new vote is then created using the extract form information and the <code>UserId</code> pulled from the authentication cookie.</p>

<p>This new vote is then pushed into Riak via <code>csd_vote:save</code>. You&rsquo;ll notice we&rsquo;re not interested in the content of the result other than making sure that it succeeded (ie. the first part of the return tuple is <code>ok</code>).</p>

<p>To facilitate the requirement that after voting the UI should be not only refreshed with that user&rsquo;s vote it should also contain any other votes that have been cast while the user has been on the page, we make a call to get the count of votes for the snippet. This is what we pass back to the UI so that it can be displayed.</p>

<p>When I first came across the <code>process_post</code> overload in Webmachine I was a little bit confused as to why the return value of the function wasn&rsquo;t the same as others like <code>to_html</code> or <code>to_json</code>. You&rsquo;ll notice that this function instead returns <code>true</code> to indicate that the <code>POST</code> has been processesd, but the setting of the content type and the body is done in a different way. It does actually make sense given that processing posts doesn&rsquo;t fit the same flow as with, say, a <code>GET</code>. The content type that is returned could be anything (including nothing). In our case we&rsquo;re returning JSON, so we use the <code>wrq</code> API to set the content of the response.</p>

<p>When done, we pass in the new request information as part of the return value and Webmachine does the rest. On the client side, the vote submission response is handled by the JavaScript and the vote count is updated inline (with a little animated effect, which I&rsquo;ll show you shortly).</p>

<p>We are now able to submit votes to snippets. That&rsquo;s all well and good, but we need to be able submit snippets before we can vote on them. Let&rsquo;s look at that process now.</p>

<h2><a id="snippet-submission"></a>Code Snippet Submission</h2>

<p>The first thing to note here is that we&rsquo;re going to use a different resource to handle submissions. This is because we want to keep our code clean. Given that we&rsquo;re also going to be handling POSTs on a URI <em>without</em> a snippet key, we can easily handle this in our URI dispatch without having to resort to using guards.</p>

<p>Let&rsquo;s wade through the important bits of <code>csd_web_snippet_submit_resource</code> now.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">user_data</span> <span class="o">=</span> <span class="n">undefined</span><span class="p">,</span>
</span><span class='line'><span class="n">key</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_authorized</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserData</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">user_data</span><span class="o">=</span><span class="nv">UserData</span><span class="p">}};</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When processing snippet submissions there are a few details we need to keep track of along the way. Firstly we need to make sure that the request is authorised, but we&rsquo;ll also need to use that User&rsquo;s information when creating the snippet so rather than process the authorisation cookie twice, we&rsquo;ll carry the detail along as part of the request state.</p>

<p>Secondly we&rsquo;re going to need to create a key for the new snippet since we&rsquo;re handling posts. In a true RESTful fashion, we should return the location of the new snippet in the <code>Location</code> response header. Given that this key is used in two Webmachine overloads we&rsquo;ll keep track of the key as well.</p>

<p>Moving on!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">content_types_accepted</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Types</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&quot;application/x-www-form-urlencoded&quot;</span><span class="p">,</span> <span class="n">process_form</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Types</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">POST</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">post_is_create</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Those of you more familiar with Webmachine will note that when processing posts you don&rsquo;t actually have to override the <code>content_types_accepted</code> function and can instead simply provide an implementation of <code>process_post</code>. This is fine for when you&rsquo;re not interested in creating resources. But if you are interested in creation of resources, as we are, then we need to take a different path through Webmachine&rsquo;s state machine by implementing <code>post_is_create</code> and returning <code>true</code> as the result. We also need to define a function, which we call <code>process_form</code>, which can be invoked for form posts.</p>

<p>Given that we&rsquo;ve returned <code>true</code> from <code>post_is_create</code>, we also need to provide an implementation for <code>create_path</code>, like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">create_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">new_key</span><span class="p">(),</span>
</span><span class='line'>  <span class="nv">Path</span> <span class="o">=</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">snippet</span><span class="o">/</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">++</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">Key</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Path</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">Key</span><span class="p">}}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here you can see that we&rsquo;re generating a new key for the snippet data. We generate a new path, which will contain the location of the new snippet once created, and we also save the key in <code>State</code> so that it can be used later.</p>

<p>Finally, all we need to do is implement <code>process_form</code> which pulls the form apart and stores the snippet data in Riak.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">process_form</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c">% get the detail from the form</span>
</span><span class='line'>  <span class="nv">FormData</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="nf">parse_qs</span><span class="p">(</span><span class="nn">wrq</span><span class="p">:</span><span class="nf">req_body</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="n">to_snippet</span><span class="p">(</span><span class="nv">FormData</span><span class="p">,</span> <span class="nv">State</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">SavedSnippet</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">get_key</span><span class="p">(</span><span class="nv">SavedSnippet</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c">% Return the key of the snippet as the payload</span>
</span><span class='line'>  <span class="nv">NewBody</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_body</span><span class="p">(</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_header</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">Content</span><span class="o">-</span><span class="n">type</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">text</span><span class="o">/</span><span class="n">plain</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">NewBody</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_snippet</span><span class="p">(</span><span class="nv">FormData</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">Key</span><span class="p">,</span> <span class="n">user_data</span><span class="o">=</span><span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">_}})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Title</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">title</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Left</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">left</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Right</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">right</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">to_snippet</span><span class="p">(</span><span class="nv">Title</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">set_key</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">,</span> <span class="nv">Key</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Processing the form is just the same as when we did it for votes. We tease the form apart into a dictionary and call our own <code>to_snippet</code> function which accesses the dictionary to get the important bits of the snippet detail. At the same time, it utilises the key and the Id of the user to create a proper snippet object, which is returned to the caller.</p>

<p>Once this has been done, the snippet is pushed into Riak and we return the new key of the snippet in plain text format back to the client. The reason I chose this approach was so that the JavaScript on the client could simply redirect to a URI based on that key. JSON parsing on the client isn&rsquo;t needed as a result.</p>

<p>With that done, we&rsquo;re down to the last resource modification before we wire up dispatches and cover the UI.</p>

<h2><a id="logging-off"></a>Logging off</h2>

<p>This isn&rsquo;t part of the core workflow but it&rsquo;s a nice feature to have as it makes the site feel a little more rounded/polished. We want users to be able to sign off if they want to. We need to be able to handle a <code>POST</code> without a body, and remove the user&rsquo;s authentication information cookie by forcing it to expire.</p>

<p>Firstly we need to make this slight adjustment in the <code>cookie</code> module like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">remove_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">store_auth_cookie</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="nf">quote_plus</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">store_auth_cookie</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="mi">3600</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="o">?</span><span class="nv">AUTH_EXPIRY_DAYS</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">store_auth_cookie</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Expiry</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Options</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c">%{domain, &quot;codesmackdown.com&quot;},</span>
</span><span class='line'><span class="p">{</span><span class="n">max_age</span><span class="p">,</span> <span class="nv">Expiry</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">http_only</span><span class="p">,</span> <span class="n">true</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">],</span>
</span><span class='line'>  <span class="nv">CookieHeader</span> <span class="o">=</span> <span class="nn">mochiweb_cookies</span><span class="p">:</span><span class="nf">cookie</span><span class="p">(</span><span class="o">?</span><span class="nv">AUTH_COOKIE</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Options</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">wrq</span><span class="p">:</span><span class="nf">merge_resp_headers</span><span class="p">([</span><span class="nv">CookieHeader</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We&rsquo;ve created a helper function, <code>store_auth_cookie</code>, which does as it says. It stores an auth cookie in the response based on the given <code>Value</code> of the cookie and the <code>Expiry</code>. This used to be part of the <code>store_auth</code> function, but we&rsquo;ve pulled it out into a method that can be reused. The <code>store_auth</code> function now calls this function when creating the authentication cookie like we used to. We also make a call via the <code>remove_auth</code> function, which sets the body of the token to a blank string and sets the expiry to -1 which forces the cookie to expire immediately when it hits the browser.</p>

<p>With this out of the way, we need to expose a resource which invokes it. Here it is without the boring bits included.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_logoff_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">POST</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">process_post</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">remove_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Simple right? Handle a <code>POST</code> in the usual fashion and remove the authentication token during processing. It doesnt' get easier than that.</p>

<h2><a id="serving-static-content"></a>Serving Static Content</h2>

<p>We&rsquo;re now at a point where we&rsquo;re going to be serving up some content straight from disk. This includes CSS files, JavaScript source files and HTML templates. There are a large number of ways in which we can do this.</p>

<p>For the sake of this blog series we&rsquo;re going to keep this functionality within the application. If this application were to make it to production, this approach wouldn&rsquo;t be used. As great as Webmachine is, serving static content at break-neck speeds isn&rsquo;t one of its strong points. Instead it would be better to use something which is good at this kind of thing. <a href="http://nginx.org/" title="Nginx">Nginx</a> is a good example, but there are many others.</p>

<p>The static file serving resource is not something that I wrote (though I&rsquo;ve tweaked it a bit). I blatantly purloined it from somewhere on the web (quite a while ago I might add) and I can no longer find a reference to it. If anyone out there recognises it, please let me know and I shall give proper kudos/credit to the original author.</p>

<p>This resource works, but I say again it&rsquo;s not something that should be used in production.  Here it is in its entirety.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_static_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web_static_resource</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#111;&amp;#x6a;&amp;#x40;&amp;#98;&amp;#x75;&amp;#102;&amp;#x66;&amp;#101;&amp;#x72;&amp;#101;&amp;#100;&amp;#46;&amp;#105;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x62</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x75</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="n">allowed_methods</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">resource_exists</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">content_types_provided</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">provide_content</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">file_exists</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Required Includes</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">include_lib</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">webmachine</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">webmachine</span><span class="p">.</span><span class="n">hrl</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kernel</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">file</span><span class="p">.</span><span class="n">hrl</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% Record definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="p">{</span><span class="n">docroot</span><span class="p">,</span> <span class="n">fullpath</span><span class="p">,</span> <span class="n">fileinfo</span><span class="p">,</span> <span class="n">response_body</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([</span><span class="nv">ContentDir</span><span class="p">])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">App</span><span class="p">}</span><span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="nf">get_application</span><span class="p">(),</span>
</span><span class='line'>  <span class="nv">PrivDir</span> <span class="o">=</span> <span class="nn">code</span><span class="p">:</span><span class="nf">priv_dir</span><span class="p">(</span><span class="nv">App</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SourceDir</span> <span class="o">=</span> <span class="nn">filename</span><span class="p">:</span><span class="nf">join</span><span class="p">([</span><span class="nv">PrivDir</span><span class="p">,</span> <span class="nv">ContentDir</span><span class="p">]),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#context</span><span class="p">{</span><span class="n">docroot</span><span class="o">=</span><span class="nv">SourceDir</span><span class="p">}}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">HEAD</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">GET</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Path</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">disp_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Mime</span> <span class="o">=</span> <span class="nn">webmachine_util</span><span class="p">:</span><span class="nf">guess_mime</span><span class="p">(</span><span class="nv">Path</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{[{</span><span class="nv">Mime</span><span class="p">,</span> <span class="n">provide_content</span><span class="p">}],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">provide_content</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c">% if returns {true, NewContext} then NewContext has response_body</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Context</span><span class="nl">#context.response_body</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">undefined</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">file_exists</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">disp_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">))</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">FullPath</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span> <span class="o">=</span> <span class="nn">file</span><span class="p">:</span><span class="nf">read_file</span><span class="p">(</span><span class="nv">FullPath</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="nl">#context</span><span class="p">{</span><span class="n">response_body</span><span class="o">=</span><span class="nv">Value</span><span class="p">}};</span>
</span><span class='line'>    <span class="n">false</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="p">_</span><span class="nv">Body</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Context</span><span class="nl">#context.response_body</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">file_exists</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nv">Path</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">FullPath</span> <span class="o">=</span> <span class="n">get_full_path</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nv">Path</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">filelib</span><span class="p">:</span><span class="nf">is_regular</span><span class="p">(</span><span class="nn">filename</span><span class="p">:</span><span class="nf">absname</span><span class="p">(</span><span class="nv">FullPath</span><span class="p">))</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">FullPath</span><span class="p">};</span>
</span><span class='line'><span class="n">false</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_full_path</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nv">Path</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Root</span> <span class="o">=</span> <span class="nv">Context</span><span class="nl">#context.docroot</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="nf">safe_relative_path</span><span class="p">(</span><span class="nv">Path</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">undefined</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">undefined</span><span class="p">;</span>
</span><span class='line'><span class="nv">RelPath</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">FullPath</span> <span class="o">=</span> <span class="nn">filename</span><span class="p">:</span><span class="nf">join</span><span class="p">([</span><span class="nv">Root</span><span class="p">,</span> <span class="nv">RelPath</span><span class="p">]),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">filelib</span><span class="p">:</span><span class="nf">is_dir</span><span class="p">(</span><span class="nv">FullPath</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="nn">filename</span><span class="p">:</span><span class="nf">join</span><span class="p">([</span><span class="nv">FullPath</span><span class="p">,</span> <span class="s">&quot;index.html&quot;</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">false</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">FullPath</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">Result</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There&rsquo;s a lot here to cover, but most of it could be understood quit easily by following the code path.</p>

<p>To sum it up this is how it works. The resource is configured in the dispatch list and in that list a location is specified as a parameter. This location is the folder in which the files will be located. This value is passed into the <code>init</code> function so that the resource knows the root folder to search the files for.</p>

<p>When a request is made the resource attempts to guess the [MIME][] type based on the file extension using a built-in Mochiweb function. It then attempts to load the file from disk and if found it returns the file content as the body of the response.</p>

<p>With that out of the way, now is the perfect time to wire in all the new resources in the dispatch list.</p>

<h2><a id="updating-dispatch"></a>Updating Dispatch</h2>

<p>We need to modify our <code>app.config</code> which contains our dispatch list so that it correctly routes all the URIs to the appropriate resources. Let&rsquo;s take a look at the updated list</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">web</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="c">% ... snip ...</span>
</span><span class='line'>      <span class="p">{</span><span class="n">dispatch</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;css&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/css&quot;</span><span class="p">]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;js&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/js&quot;</span><span class="p">]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;views&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/views&quot;</span><span class="p">]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;img&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/img&quot;</span><span class="p">]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">],</span> <span class="n">csd_web_snippet_submit_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;vote&quot;</span><span class="p">],</span> <span class="n">csd_web_vote_submit_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;userdetail&quot;</span><span class="p">,</span> <span class="n">user_id</span><span class="p">],</span> <span class="n">csd_web_user_detail_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;logoff&quot;</span><span class="p">],</span> <span class="n">csd_web_logoff_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">],</span> <span class="n">csd_web_request_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;callback&quot;</span><span class="p">],</span> <span class="n">csd_web_callback_resource</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip; snip &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first entry is as it was before, as are the last two. There are 4 routes which use <code>csd_web_static_resource</code> to handle different URIs that point to static files on disk. This allows us to have URIs like <code>"/js/csd.js"</code> and <code>"css/site.css"</code> without us having to add another path (such as <code>"/static/js/csd.js"</code> to each). All our static content has been placed under the <code>apps/csd_web/priv/</code> and each of the static routes is relative to this folder.</p>

<p>The rest of the routes map directly to handlers based on a common-sense URI which should now make sense based on what we&rsquo;ve implemented in this post.</p>

<p>All that we have left to discuss is the new, fandangled user interface.</p>

<h2><a href="user-interface"></a>User Interface</h2>

<p>I stand by what I said on Twitter..</p>

<blockquote><p>The problem with Twitter bootstrap is that everything
now looks like Twitter bootstrap.</p></blockquote>

<p>Despite this, I&rsquo;m using Twitter bootstrap for the UI because I&rsquo;m terrible at design and this was the easiest thing to use which makes me look non-terrible (though I&rsquo;m sure I may have managed to make bootstrap terrible too).</p>

<p>The goal of this series is to cover server-side programming of web applications using an Erlang technology stack. Heavy user-interface development is beyond the scope for this already lengthy blog post, so I won&rsquo;t be diving into the implementation. What I will say is:</p>

<ol>
<li>The front-end is quite JavaScript heavy and uses <a href="http://documentcloud.github.com/backbone/" title="Backbone.js">Backbone.js</a> to handle routing, models and view rendering.</li>
<li>URIs make use of the hashtag quite a bit so that links can still be used to access particular snippets directly.</li>
<li>For client-side template rendering I&rsquo;m using <a href="http://handlebarsjs.com/" title="Handlebars templating">Handlebars</a> which gives me really simple and relatively quick JavaScript template management.</li>
<li>Handlebar templates are loaded via ajax calls as required.</li>
<li><a href="http://www.jquery.com/" title="jQuery">jQuery</a> is used heavily. What a surprise.</li>
</ol>


<p>So with all this in mind, and with the <a href="https://github.com/OJ/csd/tree/Part5-20120830/apps/csd_web/priv/www/static" title="User Interface Source">source of the UI readily available</a> for your review, check out the application in action via this little video. It shows the sign-in process, user profile view, adding of new snippets and voting on existing snippets.</p>

<p>Feel free to go to <a href="http://vimeo.com/45499170">Vimeo</a> and watch it full screen.</p>

<iframe src="http://player.vimeo.com/video/45499170" width="500" height="331" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/45499170">Code Smackdown</a> from <a href="http://vimeo.com/thecolonial">OJ Reeves</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>

<p>That should finally give you an idea of what we&rsquo;re trying to achieve. It&rsquo;s far from perfect and there&rsquo;s plenty more to be done which will see us through another number of parts in this series.</p>

<h2><a id="known-issues"></a>Known Issues</h2>

<p>In the interest of keeping it real it&rsquo;s worth highlighting a few things that we need to address as we progress through development.</p>

<ul>
<li>Some IDs that are generated might come out with slashes in them. When this happens the site is unable to render the page for the snippet. The easy solution to this is to replace all slashes with something else but that&rsquo;s not really what I&rsquo;d like to do. In a future post we&rsquo;re going to revamp the ID generation part of the application to use something a little more sensible (learning opportunities there for everyone, most of all me).</li>
<li>I was recently contacted by a nice bloke by the name of <em>Juan Felipe Garcia Catalan</em> who had done me the honour of following <a href="/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a> in fine detail. He had decided to try the implementation OAuth with another provider an found that it didn&rsquo;t work. It appears that Twitter&rsquo;s OAuth functions slightly differently. A future post will address this problem so that the OAuth integration works with other OAuth providers too. Thank you Juan for letting me know!</li>
<li>The sign in process doesn&rsquo;t handle cases where OAuth fails or the user says &ldquo;no&rdquo; to signing in.</li>
<li>In general, handling failures isn&rsquo;t covered. This will happen over the course of future posts.</li>
</ul>


<h2><a id="finished"></a>Finished!</h2>

<p>This post, to date, is the longest one I&rsquo;ve written. Thanks for sticking with me. I hope you&rsquo;ve learned something or at least enjoyed reading. Please let me know in the comments if I&rsquo;ve made any mistakes. If you have ideas on how to better implement anything I&rsquo;m all ears and would love to hear them. Feel free to point out my crappy typos, grammar issues etc as well.</p>

<p>Thanks again. Until next time!</p>

<p><strong>Note:</strong> The code for Part 5 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part5-20120830" title="Source code for Part 5">Github</a>.</p>

<p>Other parts in this series: <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 4]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4/"/>
    <updated>2012-02-15T20:50:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4</id>
    <content type="html"><![CDATA[<p><img class="left" src="/uploads/2010/09/riak-logo.png" title="&lsquo;Riak Logo&rsquo;" >For those of you who are new to the series, you may want to check out <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a> and <a href="/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a> before reading this post. It will help give you some context as well as introduce you to some of the jargon and technology that I&rsquo;m using. If you&rsquo;ve already read then, or don&rsquo;t want to, then please read on!</p>

<p>Upon finishing <a href="/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a> of the series we were finally able to read data from <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> and see it appear in our web page. This was the first stage in seeing a full end-to-end web application functioning. Of course there is still a great deal to do!</p>

<!--more-->


<h2>Agenda</h2>

<p>In this post we&rsquo;re going to hit a few points of pain:</p>

<ol>
<li>Another slight refactor! We need to manage Riak connections in a smarter way, so we&rsquo;ll do that first.</li>
<li>We&rsquo;ll be dealing with more configuration so we&rsquo;ll change the way our application deals with configuration so that it&rsquo;s all in the one spot and a little easier to manage.</li>
<li>Add the ability for users to sign in. To keep this simple and avoid the need for users to manage yet another login, we&rsquo;re going to use <a href="http://oauth.net/" title="OAuth">OAuth</a> and let people sign in with their <a href="http://twitter.com/" title="Twitter">Twitter</a> accounts.</li>
<li>Store a cookie in the user&rsquo;s browser which contains identifying information and an encrypted set of OAuth tokens.</li>
</ol>


<p>There&rsquo;s little Riak-specific work going on this post as we&rsquo;re focusing on front-end user management. Other than a bit of refactoring the Riak code remains the same as in Part 3. In Part 5 (coming soon) we&rsquo;ll be writing snippets to Riak and associating them to users who have logged into the application via Twitter.</p>

<p><strong>NOTE</strong>: I&rsquo;ll no longer be using <code>localhost</code> in URLs and will instead be using the loopback address, <code>127.0.0.1</code>. The main reason is because we&rsquo;ll be interacting with Twitter which requires a &ldquo;proper&rdquo; address to be used when setting up. A secondary reason is the use of cookies. If I accidentally leave <code>localhost</code> somewhere in the post (or in the images) please let me know.</p>

<p>Again, be warned, this post is a bit of a whopper! So get yourself a drink and get comfortable. Here we go&hellip;</p>

<h2>Another Slight Refactor</h2>

<p>Now that we&rsquo;re at the stage where Riak is going to get used more often we need to do a better job of handling and managing the connections to the cluster. Ideally we should pool a bunch of connections and reuse them across different requests. This reduces the overhead of creating and destroying connections all the time. Initially we&rsquo;re going to make use of Seth&rsquo;s <a href="https://github.com/seth/pooler" title="Pooler">Pooler</a> application (with a slight modification) to handle the pooling of Riak connections for us.</p>

<h3>Fixing HAProxy</h3>

<p>So now that we have a plan to pool connections, the first thing we need to fix is our load-balancer&rsquo;s configuration. At the moment we have configured <a href="http://haproxy.1wt.eu/" title="HAProxy">HAProxy</a> with the following settings:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dev.haproxy.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;now <span class="nb">set </span>the default settings <span class="k">for </span>each sub-section&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;defaults
</span><span class='line'>  .
</span><span class='line'>  .
</span><span class='line'>  <span class="c"># specify some timeouts (all in milliseconds)</span>
</span><span class='line'>  timeout connect 5000
</span><span class='line'>  timeout client 50000
</span><span class='line'>  timeout server 50000
</span><span class='line'>  .
</span><span class='line'>  .
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see we&rsquo;ve forced the timeout of connections which means that every connection that is made to the proxy will be killed off when it has been inactive for a long enough period of time. If you were paying attention to the output in the application console window you&rsquo;d have seen something like this appear after making a request:</p>

<pre><code>=ERROR REPORT==== 13-Aug-2011::20:52:01 ===
** Generic server &lt;0.99.0&gt; terminating 
** Last message in was {tcp_closed,#Port&lt;0.2266&gt;}
** When Server state == {state,"127.0.0.1",8080,false,false,undefined,
                               undefined,
                               {[],[]},
                               1,[],infinity,100}
** Reason for termination == 
** disconnected

=CRASH REPORT==== 13-Aug-2011::20:52:01 ===
  crasher:
    initial call: riakc_pb_socket:init/1
    pid: &lt;0.99.0&gt;
    registered_name: []
    exception exit: disconnected
      in function  gen_server:terminate/6
    ancestors: [csd_core_server,csd_core_sup,&lt;0.52.0&gt;]
    messages: []
    links: [&lt;0.54.0&gt;]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 377
    stack_size: 24
    reductions: 911
  neighbours:
    neighbour: [{pid,&lt;0.54.0&gt;},
                  {registered_name,csd_core_server},
                  {initial_call,{csd_core_server,init,['Argument__1']}},
                  {current_function,{gen_server,loop,6}},
                  {ancestors,[csd_core_sup,&lt;0.52.0&gt;]},
                  {messages,[]},
                  {links,[&lt;0.53.0&gt;,&lt;0.99.0&gt;]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,987},
                  {stack_size,9},
                  {reductions,370}]

=SUPERVISOR REPORT==== 13-Aug-2011::20:52:01 ===
     Supervisor: {local,csd_core_sup}
     Context:    child_terminated
     Reason:     disconnected
     Offender:   [{pid,&lt;0.54.0&gt;},
                  {name,csd_core_server},
                  {mfargs,{csd_core_server,start_link,[]}},
                  {restart_type,permanent},
                  {shutdown,5000},
                  {child_type,worker}]


=PROGRESS REPORT==== 13-Aug-2011::20:52:01 ===
          supervisor: {local,csd_core_sup}
             started: [{pid,&lt;0.104.0&gt;},
                       {name,csd_core_server},
                       {mfargs,{csd_core_server,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,5000},
                       {child_type,worker}]
</code></pre>

<p>This is paired up with the following output from the HAProxy console:</p>

<pre><code>00000010:riaks.srvcls[0009:000a]
00000010:riaks.clicls[0009:000a]
00000010:riaks.closed[0009:000a]
0000000e:webmachines.srvcls[0006:0007]
0000000e:webmachines.clicls[0006:0007]
0000000e:webmachines.closed[0006:0007]
</code></pre>

<p>These logs from the console clearly indicate that HAProxy is doing exactly what we&rsquo;ve told it to do. It&rsquo;s killing off the connections after a period of time.</p>

<p>For a connection pool this is not a good idea. Therefore we need to modify this configuration so that it doesn&rsquo;t kill off connections. Thankfully this is a very simple thing to do! We delete the lines that force <code>client</code> and <code>server</code> timeouts (I&rsquo;m commenting the lines out to make it obvious which ones you need to remove):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dev.haproxy.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;now <span class="nb">set </span>the default settings <span class="k">for </span>each sub-section&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;defaults
</span><span class='line'>  .
</span><span class='line'>  .
</span><span class='line'>  <span class="c"># specify some timeouts (all in milliseconds)</span>
</span><span class='line'>  timeout connect 5000
</span><span class='line'>  <span class="c">#timeout client 50000</span>
</span><span class='line'>  <span class="c">#timeout server 50000</span>
</span><span class='line'>  .
</span><span class='line'>  .
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After making this change to the configuration, HAProxy will no longer kill off the connections. Therefore it&rsquo;s up to us to manage them.</p>

<h3>Connection Pooling</h3>

<p>Given that it is <em>not</em> one of the goals of this series to demonstrate how to create a connection pooling application in Erlang, we&rsquo;re going to use an application that&rsquo;s already out there to do it for us. This application is called <a href="https://github.com/seth/pooler" title="Pooler">Pooler</a>. Out of the box this application does Erlang process pooling, and given that our Riak connections are each Erlang processes, this suits us perfectly.</p>

<p>One thing that I didn&rsquo;t like about the interface to Pooler was that it relied on the caller managing the lifetime of the connection. As a result, I made a small change to the interface in my own <a href="https://github.com/OJ/pooler" title="OJ's Pooler fork">fork</a> which I think helps keep things a little cleaner. This application will be making use of this fork.</p>

<p>First up, we need to add another dependency in our <code>rebar.config</code> file which will pull this application in from Github at a dependency.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">mochiweb</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/mochi/mochiweb&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">riakc</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/riak-erlang-client&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">pooler</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/pooler&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Build the application so that the dependency is pulled and built:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oj@hitchens ~/code/csd <span class="nv">$ </span>make&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   &amp;hellip; snip &amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Pulling pooler from <span class="o">{</span>git,&amp;ldquo;git://github.com/OJ/pooler&amp;rdquo;,&amp;ldquo;HEAD&amp;rdquo;<span class="o">}</span>
</span><span class='line'>Cloning into pooler&amp;hellip;
</span><span class='line'><span class="o">==</span>&gt; pooler <span class="o">(</span>get-deps<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   &amp;hellip; snip &amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">==</span>&gt; pooler <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'>Compiled src/pooler_app.erl
</span><span class='line'>Compiled src/pooler_pooled_worker_sup.erl
</span><span class='line'>Compiled src/pooler_pool_sup.erl
</span><span class='line'>Compiled src/pooler_sup.erl
</span><span class='line'>Compiled src/pooler.erl&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   &amp;hellip; snip &amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next we need to take the scalpel to <code>csd_core</code>. When we first created this application, it was intended to manage all of the interaction with Riak and to manage the intricacies of dealing with snippets and other objects without exposing Riak&rsquo;s inner workings to the <code>csd_web</code> application. To do this we put a <a href="http://www.erlang.org/doc/man/gen_server.html" title="gen_server">gen_server</a> in place, called <code>csd_core_server</code>, which handled the incoming requests. It internally established connections to Riak and used them without destroying them.</p>

<p>For now, we&rsquo;ll be keeping this <code>gen_server</code> in place but we&rsquo;re going to make some modifications to it:</p>

<ol>
<li>We&rsquo;ll start and stop <code>pooler</code> when our <code>csd_core</code> application starts and stops.</li>
<li>We&rsquo;ll change the way configuration is managed and add the configuration for <code>pooler</code>.</li>
<li>We&rsquo;ll be removing the code that establishes the connections.</li>
<li>We&rsquo;ll pass the calls through to Riak using the new <code>pooler</code> application.</li>
</ol>


<p>Let&rsquo;s get to it.</p>

<h4>Starting and Stopping Pooler</h4>

<p>Given that we&rsquo;re using <code>pooler</code> the first thing we need to do is make sure that it loads and runs when <code>csd_core</code> fires up. To do this, we need to modify <code>csd_core.erl</code> so that it looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_core.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x6f;&amp;#x6a;&amp;#64;&amp;#x62;&amp;#117;&amp;#102;&amp;#x66;&amp;#101;&amp;#114;&amp;#x65;&amp;#x64;&amp;#46;&amp;#105;&amp;#111;&quot;&gt;&amp;#x6f;&amp;#x6a;&amp;#x40;&amp;#98;&amp;#117;&amp;#102;&amp;#102;&amp;#101;&amp;#x72;&amp;#101;&amp;#100;&amp;#x2e;&amp;#105;&amp;#x6f;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2011 OJ Reeves&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc csd_core startup code&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#x40;&amp;#98;&amp;#117;&amp;#102;&amp;#x66;&amp;#101;&amp;#x72;&amp;#101;&amp;#x64;&amp;#46;&amp;#x69;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x62</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ensure_started</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="nv">App</span><span class="p">}}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ok</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec start_link() &amp;ndash;&gt; {ok,Pid::pid()}</span>
</span><span class='line'><span class="c">%% @doc Starts the app for inclusion in a supervisor tree</span>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'><span class="nn">csd_core_sup</span><span class="p">:</span><span class="nf">start_link</span><span class="p">().</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec start() &amp;ndash;&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Start the csd_core server.</span>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec stop() &amp;ndash;&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Stop the csd_core server.</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Res</span> <span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">csd_core</span><span class="p">),</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">pooler</span><span class="p">),</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'><span class="nv">Res</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @private</span>
</span><span class='line'><span class="nf">start_common</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'><span class="nf">ensure_started</span><span class="p">(</span><span class="n">pooler</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code will start and stop the <code>pooler</code> application along with our application. Exactly what we need!</p>

<h4>Fixing Configuration</h4>

<p>Our rudimentary configuration module, <code>csd_riak_config.erl</code>, is now obsolete. We&rsquo;re going to remove it and replace it with something a little more complicated which will not only make it easier to handle configuration using Erlang&rsquo;s built-in <a href="http://www.erlang.org/doc/man/config.html" title="Erlang configuration">configuration</a> handling, but we&rsquo;ll add some code which will make it easier to access configuration both in development <em>and</em> once the application has been deployed.</p>

<p>Let&rsquo;s start by creating a new file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">pooler</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">pools</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;haproxy&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">max_count</span><span class="p">,</span> <span class="mi">30</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">init_count</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">start_mfa</span><span class="p">,</span> <span class="p">{</span><span class="n">riakc_pb_socket</span><span class="p">,</span> <span class="n">start_link</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">]}}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>pooler</code> is smart enough to pool connections across multiple nodes. This is quite a nifty feature, but not one that we&rsquo;re making use of because we have HAProxy in place. Therefore, the configuration above is telling Pooler to use just one single node/pool (ie. the proxy), to create 5 connections and to allow up to 30 to be created if required.</p>

<p>The last parameter in the configuration, <code>start_mfa</code>, tells <code>pooler</code> which module, function and arguments to invoke to create the Erlang process from. In our case we want it to create a pool of Riak client connections, hence why we&rsquo;ve specified the <code>start_link</code> function in the <code>riakc_pb_socket</code> module.</p>

<p>Next we modify our <code>Makefile</code> so that when we invoke <code>make webstart</code> the configuration is properly included:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.PHONY: deps&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;REBAR<span class="o">=</span>&lt;code&gt;which rebar <span class="o">||</span> ./rebar&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;all: deps compile&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;compile:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@<span class="k">$(</span>REBAR<span class="k">)</span> compile
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;app:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@<span class="k">$(</span>REBAR<span class="k">)</span> compile <span class="nv">skip_deps</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;deps:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@<span class="k">$(</span>REBAR<span class="k">)</span> get-deps
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clean:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@<span class="k">$(</span>REBAR<span class="k">)</span> clean
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;distclean: clean&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@<span class="k">$(</span>REBAR<span class="k">)</span> delete-deps
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;test: app&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@<span class="k">$(</span>REBAR<span class="k">)</span> eunit <span class="nv">skip_deps</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;webstart: app&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;exec erl -pa <span class="k">$(</span>PWD<span class="k">)</span>/apps/*/ebin -pa <span class="k">$(</span>PWD<span class="k">)</span>/deps/*/ebin -boot start_sasl -config <span class="k">$(</span>PWD<span class="k">)</span>/apps/csd_core/priv/app.config -s reloader -s csd_core -s csd_web
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;proxystart:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@haproxy -f dev.haproxy.conf
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point we are able to build and run the application just as we were before. The first thing you&rsquo;ll notice is that the HAProxy console immediately registers 5 new connections:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0000004:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>0006 from <span class="o">[</span>127.0.0.1:34536<span class="o">]</span>
</span><span class='line'>00000005:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>0008 from <span class="o">[</span>127.0.0.1:58770<span class="o">]</span>
</span><span class='line'>00000006:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>000a from <span class="o">[</span>127.0.0.1:44734<span class="o">]</span>
</span><span class='line'>00000007:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>000c from <span class="o">[</span>127.0.0.1:33874<span class="o">]</span>
</span><span class='line'>00000008:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>000e from <span class="o">[</span>127.0.0.1:35815<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is evidence that <code>pooler</code> is doing its job and starting with 5 connections. Now that we have this in place, let&rsquo;s get rid of the old configuration:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oj@hitchens ~/code/csd <span class="nv">$ </span>rm apps/csd_core/src/csd_riak_config.erl
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That was easy! We now need to remove any references to this module, thankfully the only module that used was <code>csd_core_server.erl</code>, and that&rsquo;s the one we&rsquo;re going to fix up now. After removing references to the configuration, removing connection creation and replacing it with calls to <code>pooler</code>, <code>csd_core_server</code> now looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_core_server.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_core_server</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_server</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">SERVER</span><span class="p">,</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">get_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% gen_server Function Exports</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_call</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_cast</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">terminate</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">code_change</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">start_link</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="nf">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="o">?</span><span class="nv">SERVER</span><span class="p">},</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="nf">call</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="nf">call</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;</span>
</span><span class='line'><span class="c">%% gen_server Function Definitions</span>
</span><span class='line'><span class="c">%% &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">handle_call</span><span class="p">({</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">SavedSnippet</span> <span class="o">=</span> <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">SavedSnippet</span><span class="p">,</span> <span class="nv">State</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">handle_call</span><span class="p">({</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">pooler</span><span class="p">:</span><span class="nf">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">,</span> <span class="nv">State</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">handle_call</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Request</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">From</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="n">ok</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">handle_cast</span><span class="p">(_</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">handle_info</span><span class="p">(_</span><span class="nv">Info</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">terminate</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Reason</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">code_change</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">OldVsn</span><span class="p">,</span> <span class="nv">State</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Extra</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here you can see we&rsquo;re making use of the <a href="https://github.com/OJ/pooler/blob/master/src/pooler.erl#L125" title="use_member">pooler:use_member</a> function to easily wrap up the management of the connection&rsquo;s usage lifetime. All traces of the old configuration are gone. We can now rebuild the application using <code>make</code>, fire it up using <code>make webstart</code> and hit the <a href="http://127.0.0.1/snippet/B41kUQ==">same page</a> as before resulting in the same content appearing on screen.</p>

<p>We have now successfully removed the old configuration and connection handling code, and we&rsquo;ve replaced it with <code>pooler</code> to handle a pool of connections to the Riak proxy. The last part of our refactor is around configuration for the front-end web application.</p>

<h2>Rewiring Configuration</h2>

<p>Our configuration is going to get more complicated, so to make sure that we&rsquo;re able to better handle and manage it we&rsquo;re going to set up a similar structure to what we had set up in the <code>csd_core</code> application (in the previous section). The first thing we&rsquo;re going to change is the way that the <strong>Webmachine</strong> routes are loaded. Right now, they&rsquo;re stored in <code>apps/tr_web/priv/dispatch.conf</code>. This configuration belongs alongside others, so we&rsquo;ll move that to an <code>app.config</code> file and re-jig the code to load it from there.</p>

<p>First up, rename the file:</p>

<pre><code>oj@air ~/code/csd/apps/csd_web/priv $ mv dispatch.conf app.config
</code></pre>

<p>Now let&rsquo;s edit it so that it takes the appropriate format:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">sasl</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">sasl_error_logger</span><span class="p">,</span> <span class="p">{</span><span class="n">file</span><span class="p">,</span> <span class="s">&quot;log/sasl-error.log&quot;</span><span class="p">}},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">errlog_type</span><span class="p">,</span> <span class="n">error</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error_logger_mf_dir</span><span class="p">,</span> <span class="s">&quot;log/sasl&quot;</span><span class="p">},</span>      <span class="c">% Log directory</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error_logger_mf_maxbytes</span><span class="p">,</span> <span class="mi">10485760</span><span class="p">},</span>   <span class="c">% 10 MB max file size</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error_logger_mf_maxfiles</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>           <span class="c">% 5 files max</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">web</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ip</span><span class="p">,</span> <span class="s">&quot;0.0.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">port</span><span class="p">,</span> <span class="mi">8000</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">log_dir</span><span class="p">,</span> <span class="s">&quot;priv/log&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">dispatch</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>          <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A few things to note here:</p>

<ol>
<li>I&rsquo;ve included the <code>sasl</code> configuration for later tweaking.</li>
<li>the <code>csd_web</code> section is named that way so that it is matches the application name. This makes the auto-wiring work.</li>
<li>The Webmachine configuration for application is now in a subsection called <code>web</code>. Inside this section is the original <code>dispatch</code> that we had in our old <code>dispatch.conf</code>. This configuration sections takes the <em>exact</em> form that Webmachine expects when we start its process in our supervisor.</li>
</ol>


<p>At this point we need to go and fiddle with the way Webmachine loads its configuration so that it picks up these details. We&rsquo;ll start by defining a helper which will make it easy to get access to configuration for the <code>csd_web</code> application.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/conf.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">conf</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">get_section</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">get_section</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_val</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">get_val</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_section</span><span class="p">(</span><span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">get_section</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="n">undefined</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_section</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Default</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="nf">get_env</span><span class="p">(</span><span class="n">csd_web</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">V</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">;</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">Default</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_val</span><span class="p">(</span><span class="nv">SectionName</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">get_val</span><span class="p">(</span><span class="nv">SectionName</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="n">undefined</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_val</span><span class="p">(</span><span class="nv">SectionName</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Default</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="nf">get_env</span><span class="p">(</span><span class="n">csd_web</span><span class="p">,</span> <span class="nv">SectionName</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Section</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Section</span><span class="p">,</span> <span class="nv">Default</span><span class="p">);</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">Default</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Configuration helpers are now in place, let&rsquo;s fix the Webmachine loader in <code>csd_web_sup.erl</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_sup.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip; %</span>
</span><span class='line'><span class="c">%% @spec init([]) &amp;ndash;&gt; SupervisorTree</span>
</span><span class='line'><span class="c">%% @doc supervisor callback.</span>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">WebConfig</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="nf">get_section</span><span class="p">(</span><span class="n">web</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Web</span> <span class="o">=</span> <span class="p">{</span><span class="n">webmachine_mochiweb</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">webmachine_mochiweb</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="p">[</span><span class="nv">WebConfig</span><span class="p">]},</span>
</span><span class='line'><span class="n">permanent</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="n">worker</span><span class="p">,</span> <span class="n">dynamic</span><span class="p">},</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nv">Processes</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Web</span><span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">one_for_one</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="nv">Processes</span><span class="p">}</span> <span class="p">}.</span>
</span><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip; %</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This little snippet delegates the responsibility of all Webmachine-related stuff to the <code>app.config</code> file. Let&rsquo;s include this in our <code>Makefile</code> when we start our application.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Makefile (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>webstart: app&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;exec erl -pa <span class="k">$(</span>PWD<span class="k">)</span>/apps/*/ebin -pa <span class="k">$(</span>PWD<span class="k">)</span>/deps/*/ebin -boot start_sasl -config <span class="k">$(</span>PWD<span class="k">)</span>/apps/csd_web/priv/app.config -config <span class="k">$(</span>PWD<span class="k">)</span>/apps/csd_core/priv/app.config -s reloader -s csd_core -s csd_web
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>All we&rsquo;ve done here is add another <code>-config</code> parameter and pointed it at the new <code>app.config</code> file in the <code>csd_web/src</code> folder. Fire up the application and it <em>should</em> behave exactly as it did before.</p>

<p>Now that we have our configuration tweaked we have finalised the last of the refactoring tasks (at least for now). It&rsquo;s now time to start designing our user login functionality.</p>

<h2>Handling User Logins</h2>

<p>Handling logins isn&rsquo;t necessarily as simple as it looks. Remember, <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a> is not a Web application framework, it&rsquo;s a feature-rich tool which helps us build well-behaving RESTful HTTP applications. The idea of a &ldquo;session&rdquo; is a (leaky) abstraction that web developers have added to web applications to aid in preventing users from having to manually sign in each time they want to access a resource. This abstraction tends to be handled through cookies.</p>

<p>We&rsquo;ll be doing the same, but given that we don&rsquo;t have anything in place at all we&rsquo;re going to have to come up with our own method for handling authentication of the user via cookies.</p>

<p>Bearing in mind that we&rsquo;ll be making use of Twitter, via OAuth, to deal with the process of authentication, the login process will consist of the following steps:</p>

<ol>
<li>The user clicks a &ldquo;login via Twitter&rdquo; button.</li>
<li>The server handles the request and negotiates a <a href="http://oauth.net/core/1.0/#auth_step1" title="Request tokens">request token</a> with Twitter using OAuth.</li>
<li>The application redirects the user to Twitter on a special URL which contains OAuth request information.</li>
<li>The user is asked to sign in to Twitter, if they haven&rsquo;t already during the course of their browser session.</li>
<li>Twitter then confirms that the user does intend to sign-in to Code Smackdown using their Twitter credentials, and redirects the user back to the application.</li>
<li>If the user approves the process, the application is handed a verification token which is then used to generate an OAuth <a href="http://oauth.net/core/1.0/#auth_step3" title="Access tokens">access token</a> with Twitter. This access token is what is used to allow the user to easily sign in to the application from this point onward.</li>
</ol>


<p>Prepare yourself, you&rsquo;re about to learn how to do OAuth in Erlang! But before we can do that, we need to register our application with Twitter.</p>

<h3>Creating a new Twitter Application</h3>

<p>Start by browsing to the <a href="https://dev.twitter.com/apps/new" title="New Twitter Application">Twitter application registration page</a> and signing in with your Twitter account credentials. You&rsquo;ll be taken to a page where you can enter the details of the application. Set the <strong>Callback URL</strong> to <code>http://127.0.0.1:4000/oauth/callback</code> for now. This points the Twitter redirect traffic back to localhost which will make things easy during development. When it comes time to deploy the application to production you can change this to the proper callback address.</p>

<p><img src="/uploads/2012/02/twitter-app-create.png" title="Twitter app creation" alt="Creating an application in Twitter" /></p>

<p>Once you&rsquo;ve filled out the details you&rsquo;ll being presented with a standard set of OAuth-related bits which we&rsquo;ll be using down the track. I&rsquo;ll of course be using my own registered application name (Code Smackdown) along with the keys. Given these keys are specific to my application and should be kept secret I will not be making them part of the source (sorry).</p>

<p>Once you&rsquo;re registered, we&rsquo;re ready to take the OAuth configuration information from Twitter and plug it into our own configuration. Re-open <code>csd_web/priv/app.config</code> and create a new section called <code>twitter</code> under the <code>csd_web</code> section and add the following</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip; %</span>
</span><span class='line'>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'>  <span class="c">% ... snip ... %</span>
</span><span class='line'>  <span class="p">{</span><span class="n">twitter</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">consumer_key</span><span class="p">,</span> <span class="s">&quot;&amp;lt; your application&#39;s key goes here &amp;gt;&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">consumer_secret</span><span class="p">,</span> <span class="s">&quot;&amp;lt; your application&#39;s secret goes here &amp;gt;&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">request_token_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/oauth/request_token&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">access_token_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/oauth/access_token&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">authenticate_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/oauth/authenticate&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">current_user_info_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/account/verify_credentials.json&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip; %</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first two values come straight from Twitter and would have been given to you upon registering your application. The rest are URLs that we&rsquo;ll be using later on when doing the OAuth handshake.</p>

<p>Now that we&rsquo;ve got our configuration locked in we can get started on managing the requests. For this we need to understand how OAuth actually works.</p>

<p>A deep-dive into the ins and outs of OAuth is beyond the scope of this article. I recommend having a read of <a href="http://www.slideshare.net/leahculver/oauth-open-api-authentication" title="OAuth overview">this presentation on OAuth</a> which gives a good overview. The rest of this article will fill the gaps as to how it all works.</p>

<h3>Implementing OAuth</h3>

<p>Using OAuth requires us to invoke HTTP requests to Twitter. We could go through the pain of doing this manually, but instead we&rsquo;re going to use another Open Source utility which has the ability to handle this for us.</p>

<p><a href="https://github.com/tim/erlang-oauth" title="erlang-oauth">erlang-oauth</a> is an Erlang application which makes it easy to deal with OAuth requests and is ideal for what we need to do. Given that it will be a dependency on our application we need it to work nicely with rebar. Out of the box this isn&rsquo;t the case, so I have made a <a href="https://github.com/OJ/erlang-oauth/tree/rebarise" title="erlang-oauth rebar fork">fork</a> with a topic branch that has rebar-friendliness in it. We&rsquo;ll use this fork and branch in our application.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">oauth</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/erlang-oauth&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">branch</span><span class="p">,</span> <span class="s">&quot;rebarise&quot;</span><span class="p">}}},</span>
</span><span class='line'><span class="p">{</span><span class="n">webmachine</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/webmachine&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">erlydtl</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/erlydtl.git&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>erlang-oauth</code> application requires <code>ssl</code> and <code>public_key</code> applications to be running for it to function properly, so we need to kick those applications off during start-up. We can do that by editing <code>csd_web.erl</code> like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#x75;&amp;#102;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#100;&amp;#46;&amp;#x69;&amp;#x6f;&quot;&gt;&amp;#111;&amp;#106;&amp;#x40;&amp;#98;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#114;&amp;#101;&amp;#100;&amp;#46;&amp;#x69;&amp;#111;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc csd_web startup code&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">csd_web</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#x6a;&amp;#64;&amp;#x62;&amp;#117;&amp;#x66;&amp;#x66;&amp;#101;&amp;#x72;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#105;&amp;#x6f;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x75</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">114</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ensure_started</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ok</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="nv">App</span><span class="p">}}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ok</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec start_link() &amp;ndash;&gt; {ok,Pid::pid()}</span>
</span><span class='line'><span class="c">%% @doc Starts the app for inclusion in a supervisor tree</span>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'>  <span class="nn">csd_web_sup</span><span class="p">:</span><span class="nf">start_link</span><span class="p">().</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec start() &amp;ndash;&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Start the csd_web server.</span>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="n">csd_web</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec stop() &amp;ndash;&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Stop the csd_web server.</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Res</span> <span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">csd_web</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">webmachine</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">mochiweb</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">public_key</span><span class="p">),</span> <span class="c">% stop new dependency</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">ssl</span><span class="p">),</span>        <span class="c">% stop new dependency</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">inets</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Res</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">start_common</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">inets</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">public_key</span><span class="p">),</span> <span class="c">% start new dependency</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">ssl</span><span class="p">),</span>        <span class="c">% start new dependency</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">mochiweb</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="nf">set_env</span><span class="p">(</span><span class="n">webmachine</span><span class="p">,</span> <span class="n">webmachine_logger_module</span><span class="p">,</span> <span class="n">webmachine_logger</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">webmachine</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Interacting with Twitter now becomes quite simple. To handle talking to Twitter we&rsquo;ll create a new module, called <code>twitter.erl</code>, that does the dirty work. Let&rsquo;s take a look at the code then we&rsquo;ll walk through it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/twitter.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#x40;&amp;#x62;&amp;#x75;&amp;#102;&amp;#102;&amp;#x65;&amp;#114;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#x69;&amp;#111;&quot;&gt;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#117;&amp;#102;&amp;#102;&amp;#x65;&amp;#114;&amp;#x65;&amp;#100;&amp;#46;&amp;#x69;&amp;#111;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">twitter</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#111;&amp;#x6a;&amp;#x40;&amp;#x62;&amp;#x75;&amp;#102;&amp;#x66;&amp;#101;&amp;#x72;&amp;#x65;&amp;#x64;&amp;#46;&amp;#x69;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">106</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x62</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">request_access</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">verify_access</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">get_current_user_info</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">request_access</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">TwitterConf</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="nf">get_section</span><span class="p">(</span><span class="n">twitter</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RequestTokenUrl</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">request_token_url</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RequestResponse</span><span class="p">}</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">RequestTokenUrl</span><span class="p">,</span> <span class="p">[],</span> <span class="n">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">RequestParams</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nf">params_decode</span><span class="p">(</span><span class="nv">RequestResponse</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RequestToken</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nf">token</span><span class="p">(</span><span class="nv">RequestParams</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AuthenticateUrl</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">authenticate_url</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nn">oauth</span><span class="p">:</span><span class="nf">uri</span><span class="p">(</span><span class="nv">AuthenticateUrl</span><span class="p">,</span> <span class="p">[{</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_token</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">RequestToken</span><span class="p">}])}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">verify_access</span><span class="p">(</span><span class="nv">RequestToken</span><span class="p">,</span> <span class="nv">RequestTokenSecret</span><span class="p">,</span> <span class="nv">Verifier</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">TwitterConf</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="nf">get_section</span><span class="p">(</span><span class="n">twitter</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessTokenUrl</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">access_token_url</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessResponse</span><span class="p">}</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">AccessTokenUrl</span><span class="p">,</span> <span class="p">[{</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_verifier</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">Verifier</span><span class="p">}],</span> <span class="n">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">),</span> <span class="nv">RequestToken</span><span class="p">,</span> <span class="nv">RequestTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessParams</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nf">params_decode</span><span class="p">(</span><span class="nv">AccessResponse</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessToken</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nf">token</span><span class="p">(</span><span class="nv">AccessParams</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessTokenSecret</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nf">token_secret</span><span class="p">(</span><span class="nv">AccessParams</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_current_user_info</span><span class="p">(</span><span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">call_json_service</span><span class="p">(</span><span class="n">current_user_info_url</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% Extract a oauth-formatted consumer tuple from the given Twitter configuration.</span>
</span><span class='line'><span class="nf">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">ConsumerKey</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">consumer_key</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">ConsumerSecret</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">consumer_secret</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">ConsumerKey</span><span class="p">,</span> <span class="nv">ConsumerSecret</span><span class="p">,</span> <span class="n">hmac_sha1</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% Invoke a call to a JSON service on Twitter.</span>
</span><span class='line'><span class="nf">call_json_service</span><span class="p">(</span><span class="nv">UrlKey</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">TwitterConf</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="nf">get_section</span><span class="p">(</span><span class="n">twitter</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Url</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">UrlKey</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Response</span><span class="p">}</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">Url</span><span class="p">,</span> <span class="p">[],</span> <span class="n">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">),</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Version</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">OK</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;},</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Headers</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}</span> <span class="o">=</span> <span class="nv">Response</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This might seem like a lot but there isn&rsquo;t much to it. Here&rsquo;s the run-down:</p>

<ul>
<li><p><code>request_access</code>: This function is what handles the first step in the OAuth negotiation process. It starts by loading the <code>twitter</code> configuration from our <code>app.config</code> file. The <code>twitter</code> section contains all the URLs we need to talk to Twitter</p>

<p>First we need to get hole of a <em>request token</em>, which is an identifier for an authorisation request that Twitter generates when we first start talking OAuth. We get the <code>request_token_url</code> from the configuration and we connect to Twitter, using <code>oauth:get</code> to kick the process off. Note the use of the <code>consumer</code> function, which simply takes our local <code>twitter</code> configuration and populates an <code>erlang-oauth</code>-friendly tuple with the details required to make OAuth requests on behalf of our application. This tuple contains our <em>consumer key</em>, the <em>consumer secret</em> and the signature method to use. We will always be using <code>hmac_sha1</code> as that&rsquo;s what Twitter currently requires.</p>

<p>Twitter reponds with a payload which includes the generated request token. We take that request token out of the payload and generate an Authentication URL. This URL contains information about the request that we started in the previous steps, along with the <code>authenticate_url</code> value loaded from configuration. If you remember back to our configuration you&rsquo;ll see that this <code>authenticate_url</code> is one that Twitter told us to use when we first registered our application and it resolves to <code>https://twitter.com/oauth/authenticate</code>.</p>

<p>This URL is returned to the caller and the calling code should redirect the user to this URL so that they can authenticate themselves with Twitter.</p></li>
<li><p><code>verify_access</code>: This function is what is called after the use has authenticated themselves with Twitter. The function expects both the <em>request token</em> and <em>request token secret</em> so that the result of the request can be validated with Twitter. Twitter also generates a &ldquo;verifier&rdquo; value as part of it&rsquo;s authentication process, and this value is what is passed in via the <code>Verifier</code> parameter.</p>

<p>After getting hold of the Twitter configuration an <em>access token</em> URL is generated. This URL contains all the information required to turn the <em>request token</em> into an <em>access token</em>. Once generated, this URL is then accessed via <code>erlang-oauth</code> and the payload that comes back from Twitter contains both the <em>access token</em> and the <em>access token secret</em>. Both of these are required from this point on to make requests to Twitter on behalf of the user.</p></li>
<li><p><code>get_current_user_info</code>: This is a small helper function which calls to Twitter via <code>erlang-oauth</code> and extracts the user details for the user. The payload contains the usual Twitter profile stuff such as Twitter ID, username, bio, tweet count, etc.</p></li>
</ul>


<p>Before we take a look at the Webmachine resource that will invoke this functionality, let&rsquo;s take a look at what we&rsquo;ll need to do with the tokens once we&rsquo;ve got them.</p>

<p>For now, we are only going to store them, encrypted, in the user&rsquo;s cookie which we&rsquo;ll send down to the browser. This isn&rsquo;t &ldquo;best practice&rdquo; when it comes to storage of this kind of information, but for the sake of this blog post it will suffice. Later in the series we&rsquo;ll be doing more with this information and most likely removing some of the information from the cookie.</p>

<p>With this in mind, we need something that is able to write to and read from the user&rsquo;s cookies during a request. This module needs to be able to verify that a user&rsquo;s cookie is valid and that it hasn&rsquo;t expired. When writing and reading the module must also handle the encryption of the sensitive information.</p>

<p>Let&rsquo;s create this new module, called <code>cookie.erl</code>, inside <code>csd_web</code>. I&rsquo;ll break it up into it&rsquo;s functions so you can see what it&rsquo;s doing.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#105;&amp;#x6f;&quot;&gt;&amp;#x6f;&amp;#x6a;&amp;#x40;&amp;#x62;&amp;#117;&amp;#x66;&amp;#102;&amp;#101;&amp;#x72;&amp;#101;&amp;#100;&amp;#46;&amp;#x69;&amp;#x6f;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">cookie</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#58;&amp;#111;&amp;#x6a;&amp;#x40;&amp;#98;&amp;#117;&amp;#x66;&amp;#102;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#100;&amp;#46;&amp;#105;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x62</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">load_auth</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">store_auth</span><span class="o">/</span><span class="mi">5</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">define</span><span class="p">(</span><span class="nv">AUTH_COOKIE</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="nv">CodeSmackdown</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="nv">Auth</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">AUTH_SALT</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">27</span><span class="n">ed2d041cdb4b8b2702</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">AUTH_SECRET</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">2</span><span class="n">d0431cd9bda5ba4b98271edcb2e7102</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">AUTH_EXPIRY_DAYS</span><span class="p">,</span> <span class="mi">7</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">ENC_IV</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">207</span><span class="p">,</span><span class="mi">94</span><span class="p">,</span><span class="mi">217</span><span class="p">,</span><span class="mi">158</span><span class="p">,</span><span class="mi">198</span><span class="p">,</span><span class="mi">63</span><span class="p">,</span><span class="mi">132</span><span class="p">,</span><span class="mi">205</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">187</span><span class="p">,</span><span class="mi">246</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">122</span><span class="p">,</span><span class="mi">250</span><span class="p">,</span><span class="mi">33</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">ENC_KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">110</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">121</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">235</span><span class="p">,</span><span class="mi">159</span><span class="p">,</span><span class="mi">77</span><span class="p">,</span><span class="mi">154</span><span class="p">,</span><span class="mi">160</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">210</span><span class="p">,</span><span class="mi">204</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">26</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">86</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">71</span><span class="p">,</span><span class="mi">61</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">66</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">116</span><span class="p">,</span><span class="mi">93</span><span class="p">,</span><span class="mi">204</span><span class="p">,</span><span class="mi">99</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ignoring the usual headers/setup for the module, we can see a stack of defines. They are:</p>

<ul>
<li><code>AUTH_COOKIE</code>: This is the name of the cookie that will live in the browser. If you use a cookie editor you&rsquo;ll see this name appear as the name of the cookie once it&rsquo;s written.</li>
<li><code>AUTH_SALT</code>: This is a bunch of characters that will be used as a <a href="http://en.wikipedia.org/wiki/Salt_(cryptography)" title="Salt (crypto)">salt</a> for when we&rsquo;re generating the <a href="http://en.wikipedia.org/wiki/HMAC" title="HMAC">SHA MAC</a> from the user&rsquo;s cookie information.</li>
<li><code>AUTH_SECRET</code>: This is the key we&rsquo;ll be using when creating a <a href="http://en.wikipedia.org/wiki/HMAC" title="HMAC">SHA MAC</a> from the data we&rsquo;ll be pushing into the cookie. This is to make sure that the cookie hasn&rsquo;t been tampered with.</li>
<li><code>AUTH_EXPIRY_DAYS</code>: This is the number of days that the cookie is valid for.</li>
<li><code>ENC_IV</code>: This is the initialisation vector used when encrypting/decrypting the data in the cookie.</li>
<li><code>ENC_KEY</code>: This is the key that&rsquo;s used for encrypting/decrypting data that&rsquo;s in the cookie.</li>
</ul>


<p>Pretty simple stuff. Now let&rsquo;s take a look at a function that does something interesting.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_cookie_value</span><span class="p">(</span><span class="o">?</span><span class="nv">AUTH_COOKIE</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">undefined</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">no_cookie</span><span class="p">};</span>
</span><span class='line'><span class="nv">V</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">Val</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="nf">unquote</span><span class="p">(</span><span class="nv">V</span><span class="p">),</span>
</span><span class='line'>  <span class="n">decode</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>load_auth</code> is a function which attempts to load authentication information from the cookies stored in the <code>ReqData</code> parameter. <code>ReqData</code> is the <a href="http://wiki.basho.com/Webmachine-Request.html" title="Request data">request data</a> that comes from Webmachine. As you can see, the function attempts to read the cookie value from the request data using Webmachine&rsquo;s <a href="http://wiki.basho.com/Webmachine-Request.html" title="Request data">wrq</a> module. If it fails <code>undefined</code> is returned and we know that no cookie has been set. If a value is read, we munge the data into something usable and then attempt to decode it using the <code>decode</code> function explained further down.</p>

<p>This function returns either <code>{ok, &lt;Cookie Information&gt;}</code> or <code>{error, &lt;Reason&gt;}</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="nf">quote_plus</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">Options</span> <span class="o">=</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c">%{domain, &quot;codesmackdown.com&quot;},</span>
</span><span class='line'><span class="p">{</span><span class="n">max_age</span><span class="p">,</span> <span class="mi">3600</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="o">?</span><span class="nv">AUTH_EXPIRY_DAYS</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">http_only</span><span class="p">,</span> <span class="n">true</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">],</span>
</span><span class='line'>  <span class="nv">CookieHeader</span> <span class="o">=</span> <span class="nn">mochiweb_cookies</span><span class="p">:</span><span class="nf">cookie</span><span class="p">(</span><span class="o">?</span><span class="nv">AUTH_COOKIE</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Options</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">wrq</span><span class="p">:</span><span class="nf">merge_resp_headers</span><span class="p">([</span><span class="nv">CookieHeader</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>store_auth</code> is the opposite to <code>load_auth</code> as it writes the user&rsquo;s information and token data to a cookie. The parameters to this function are:</p>

<ul>
<li><code>ReqData</code>: Webmachine&rsquo;s request data.</li>
<li><code>Id</code>: The user&rsquo;s Twitter ID. We&rsquo;ll be using this as a key later on to retrieve information from Riak.</li>
<li><code>Name</code>: The user&rsquo;s Twitter user name. We&rsquo;ll use this purely for display.</li>
<li><code>Token</code> and <code>TokenSecret</code>: Token information for making OAuth requests on behalf of this user.</li>
</ul>


<p>The first thing we do is call <code>encode</code> and pass in the last four arguments. This gives us an encrypted blob which we can store in a cookie. We then put down some basic information inside <code>Options</code>, including the expiry date. We then use <code>mochiweb_cookies</code> to generate a cookie with the name (<code>AUTH_COOKIE</code>), value and options.</p>

<p>Lastly we take the generated cookie header and merge that with the headers that already part of <code>ReqData</code> and produce a new request data object which is returned to the caller.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">encode</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">SecretInfo</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">({</span><span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">}),</span>
</span><span class='line'>  <span class="nv">CookieValue</span> <span class="o">=</span> <span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="n">get_expiry</span><span class="p">(),</span> <span class="nv">SecretInfo</span><span class="p">},</span>
</span><span class='line'>  <span class="nn">base64</span><span class="p">:</span><span class="nf">encode</span><span class="p">(</span><span class="nb">term_to_binary</span><span class="p">({</span><span class="nv">CookieValue</span><span class="p">,</span> <span class="o">?</span><span class="nv">AUTH_SALT</span><span class="p">,</span> <span class="nn">crypto</span><span class="p">:</span><span class="nf">sha_mac</span><span class="p">(</span><span class="o">?</span><span class="nv">AUTH_SECRET</span><span class="p">,</span> <span class="nb">term_to_binary</span><span class="p">([</span><span class="nv">CookieValue</span><span class="p">,</span> <span class="o">?</span><span class="nv">AUTH_SALT</span><span class="p">]))})).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>encode</code> function is rather self-explanatory. We start by encrypting the OAuth token information, we then generate a tuple which includes all the data we want to keep, convert it to binary and <a href="http://en.wikipedia.org/wiki/Base64" title="Base64">base64</a> encode it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">decode</span><span class="p">(</span><span class="nv">CookieValue</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Value</span><span class="o">=</span><span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Expire</span><span class="p">,</span> <span class="nv">SecretInfo</span><span class="p">},</span> <span class="nv">Salt</span><span class="p">,</span> <span class="nv">Sign</span><span class="p">}</span> <span class="o">=</span> <span class="nb">binary_to_term</span><span class="p">(</span><span class="nn">base64</span><span class="p">:</span><span class="nf">decode</span><span class="p">(</span><span class="nv">CookieValue</span><span class="p">)),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">crypto</span><span class="p">:</span><span class="nf">sha_mac</span><span class="p">(</span><span class="o">?</span><span class="nv">AUTH_SECRET</span><span class="p">,</span> <span class="nb">term_to_binary</span><span class="p">([</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">Salt</span><span class="p">]))</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Sign</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Expire</span> <span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="nn">calendar</span><span class="p">:</span><span class="nf">local_time</span><span class="p">()</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="p">{</span><span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">}</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="nv">SecretInfo</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">}};</span>
</span><span class='line'>    <span class="n">false</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">expired</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">invalid</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>decode</code> function does a little more than its counterpart as there&rsquo;s validation built-in as well as decrypting. Firstly we do the inverse of the final steps of the <code>encode</code> function in that we base64 decode the data into binary and convert the resulting binary back to Erlang terms. We then break this value up into its components.</p>

<p>We then validate that the cookie hasn&rsquo;t been tampered with by calculating the <a href="http://en.wikipedia.org/wiki/HMAC" title="HMAC">SHA MAC</a> of the data that was retrieved. If this value doesn&rsquo;t match what is expected we indicate that the value is invalid. If the value is valid, we then make sure that the internal cookie value hasn&rsquo;t expired. If it hasn&rsquo;t, we return <code>{ok, &lt;data&gt;}</code>.</p>

<p>The rest of the functions are easy to understand, so here they are for the sake of completeness without explanation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">get_expiry</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Date</span><span class="p">,</span> <span class="nv">Time</span><span class="p">}</span> <span class="o">=</span> <span class="nn">calendar</span><span class="p">:</span><span class="nf">local_time</span><span class="p">(),</span>
</span><span class='line'>  <span class="nv">NewDate</span> <span class="o">=</span> <span class="nn">calendar</span><span class="p">:</span><span class="nf">gregorian_days_to_date</span><span class="p">(</span><span class="nn">calendar</span><span class="p">:</span><span class="nf">date_to_gregorian_days</span><span class="p">(</span><span class="nv">Date</span><span class="p">)</span> <span class="o">+</span> <span class="o">?</span><span class="nv">AUTH_EXPIRY_DAYS</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">NewDate</span><span class="p">,</span> <span class="nv">Time</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">encrypt</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">crypto</span><span class="p">:</span><span class="nf">aes_ctr_encrypt</span><span class="p">(</span><span class="o">?</span><span class="nv">ENC_KEY</span><span class="p">,</span> <span class="o">?</span><span class="nv">ENC_IV</span><span class="p">,</span> <span class="nb">term_to_binary</span><span class="p">([</span><span class="nv">Value</span><span class="p">,</span> <span class="o">?</span><span class="nv">AUTH_SALT</span><span class="p">])).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">decrypt</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">V</span><span class="p">,</span> <span class="o">?</span><span class="nv">AUTH_SALT</span><span class="p">]</span> <span class="o">=</span> <span class="nb">binary_to_term</span><span class="p">(</span><span class="nn">crypto</span><span class="p">:</span><span class="nf">aes_ctr_decrypt</span><span class="p">(</span><span class="o">?</span><span class="nv">ENC_KEY</span><span class="p">,</span> <span class="o">?</span><span class="nv">ENC_IV</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Phew! Now that&rsquo;s out of the way we have some back-end glue which we can use to perform some more interesting tasks. One thing that we really need to do is update the landing page template with something more meaningful than what we have now.</p>

<p>We&rsquo;ll start making use of <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a>&rsquo;s hierarchical templates and implement a base template which our other templates will also make use of. Here it is in all its simplicity:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/templates/base.dtl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>Code Smackdown - {% block page_title %}{% endblock %}<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot; type=&quot;text/javascript&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>script src=&quot;http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js&quot; type=&quot;text/javascript&quot;<span class="ni">&amp;gt;&amp;lt;</span>/script<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>{% block body_content %}{% endblock %}
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this template we&rsquo;ve included a couple of Javascript files that we&rsquo;ll be using later on as well as setting up a basic HTML5 page. <code>page_title</code> and <code>body_content</code> are the two sections that child templates can populate with their own content.</p>

<p>With that, let&rsquo;s go ahead and modify our default template so that it has something a little more meaninful in it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/templates/home.dtl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>% extends <span class="ni">&amp;lsquo;</span>base.dtl<span class="ni">&amp;rsquo;</span> %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>% block page_title %}Landing Page% endblock %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>% block body_content %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>h1<span class="ni">&amp;gt;</span>Welcome to Code Smackdown<span class="ni">&amp;lt;</span>/h1<span class="ni">&amp;gt;</span>
</span><span class='line'>{% if logged_in %}
</span><span class='line'><span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>Welcome back {{ user_name }}.<span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
</span><span class='line'>{% else %}
</span><span class='line'><span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>We require you to sign in via Twitter<span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;&amp;lt;</span>a href=&quot;{{ logon_url }}&quot; title=&quot;Sign in with Twitter&quot;<span class="ni">&amp;gt;&amp;lt;</span>img src=&quot;http://si0.twimg.com/images/dev/buttons/sign-in-with-twitter-d.png&quot;/<span class="ni">&amp;gt;&amp;lt;</span>/a<span class="ni">&amp;gt;&amp;lt;</span>p<span class="ni">&amp;gt;</span>
</span><span class='line'>{% endif %}
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Nothing sinister going on here, but there are a couple of things worth noting. The template now looks for a field called <code>logged_in</code>, and if it&rsquo;s <code>true</code> it renders a paragraph which contains the value in the <code>user_name</code> field. If the <code>logged_in</code> flag is false a link is provided which points to <code>logon_url</code> which ultimately points the user at the Twitter OAuth entry page.</p>

<p>We&rsquo;ll need to pass these values in when we render the template. Let&rsquo;s have a look at the changed section of <code>csd_web_resource</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip; %</span>
</span><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Content</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{_,</span> <span class="nv">Name</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nn">csd_view</span><span class="p">:</span><span class="nf">home</span><span class="p">(</span><span class="nv">Name</span><span class="p">);</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nn">csd_view</span><span class="p">:</span><span class="nf">home</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip; %</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Yes this is quite a bit different to before. We are calling into our <code>cookie</code> module to find out if the user is logged in. If they are logged on we call <code>csd_view:home</code> with a single parameter <code>Name</code>, if they&rsquo;re not logged on the same function is called without any parameters.</p>

<p>The <code>csd_view</code> module is new and was created to abstract the idea of template rendering. All the ErlyDTL handling happens in <code>csd_view</code>. Let&rsquo;s take a look at it now.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_view.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#x40;&amp;#98;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#101;&amp;#x72;&amp;#x65;&amp;#x64;&amp;#x2e;&amp;#x69;&amp;#111;&quot;&gt;&amp;#x6f;&amp;#x6a;&amp;#x40;&amp;#98;&amp;#117;&amp;#102;&amp;#102;&amp;#101;&amp;#x72;&amp;#101;&amp;#x64;&amp;#46;&amp;#105;&amp;#111;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">csd_view</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6f;&amp;#106;&amp;#x40;&amp;#x62;&amp;#117;&amp;#102;&amp;#102;&amp;#x65;&amp;#x72;&amp;#101;&amp;#100;&amp;#46;&amp;#105;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">106</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">home</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">home</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">home</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Params</span> <span class="o">=</span> <span class="p">[{</span><span class="n">logged_in</span><span class="p">,</span> <span class="n">false</span><span class="p">},</span> <span class="p">{</span><span class="n">logon_url</span><span class="p">,</span> <span class="nn">conf</span><span class="p">:</span><span class="nf">get_val</span><span class="p">(</span><span class="n">urimap</span><span class="p">,</span> <span class="n">twitter_logon</span><span class="p">)}],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">home_dtl</span><span class="p">:</span><span class="nf">render</span><span class="p">(</span><span class="nv">Params</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Content</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">home</span><span class="p">(</span><span class="nv">Name</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Params</span> <span class="o">=</span> <span class="p">[{</span><span class="n">logged_in</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">user_name</span><span class="p">,</span> <span class="nv">Name</span><span class="p">}],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">home_dtl</span><span class="p">:</span><span class="nf">render</span><span class="p">(</span><span class="nv">Params</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Content</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we can see the two functions called <code>home</code> which were invoked in the <code>csd_web_resource</code> module. Most of this module is simple and uninteresting except for the use of <code>conf:get_val</code>. Templates need to know about paths when generating URLs in the markup. In our case, we&rsquo;re rendering links which point to internal routes which are specified in the dispatch list. Rather than hard-code URLs in the templates I decided to create another section in the <code>app.config</code> called <code>urimap</code>. The goal is to have an easy-to-access location for addresses which lives alongside the routes so that the maintainer of the application can update both at the same time should something need to change. Here&rsquo;s what the new section looks like.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% &amp;hellip; snip &amp;hellip; %</span>
</span><span class='line'>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'>  <span class="c">% ... snip ... %</span>
</span><span class='line'>  <span class="p">{</span><span class="n">urimap</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">home</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">twitter_logon</span><span class="p">,</span> <span class="s">&quot;/oauth/request&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c">% ... snip ... %</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Accessing a link address is as simple as running <code>conf:get_val(urimap, &lt;link-id&gt;)</code>.</p>

<p>At this point we can build and run the application to see what the landing page looks like. To fire up the application you&rsquo;ll need three consoles:</p>

<ol>
<li>One for Riak. Riak has to be running behind the scenes because <code>Pooler</code> will connect on start. Only one node is necessary at this point. Run: <code>/path/to/riak/dev/dev1/bin/riak start</code></li>
<li>One for HAProxy. Run: <code>make proxystart</code></li>
<li>One for the CSD application. Run: <code>make webstart</code></li>
</ol>


<p>When you browse to <a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a> you should see the following:</p>

<p><img src="/uploads/2012/02/home-loggedoff.png" title="Home - Logged Off" alt="Landing page when logged off" /></p>

<p>Clicking the link will result in an error at this point, so don&rsquo;t do it yet! We need to implement more resources, but first let&rsquo;s just stick the routes into the dispatch in preparation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">web</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="c">% ... snip ... %</span>
</span><span class='line'>    <span class="p">{</span><span class="n">dispatch</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>        <span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>        <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>        <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">],</span> <span class="n">csd_web_request_resource</span><span class="p">,</span> <span class="p">[]},</span>  <span class="c">% new route</span>
</span><span class='line'>        <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;callback&quot;</span><span class="p">],</span> <span class="n">csd_web_callback_resource</span><span class="p">,</span> <span class="p">[]}</span> <span class="c">% new route</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="c">% ... snip ... %</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Easily done. Now let&rsquo;s look at the implementation of the first handler which handles the <code>/oauth/request</code> URI, <code>csd_web_request_resource</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_request_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#111;&amp;#106;&amp;#64;&amp;#x62;&amp;#x75;&amp;#102;&amp;#x66;&amp;#101;&amp;#114;&amp;#101;&amp;#100;&amp;#x2e;&amp;#x69;&amp;#x6f;&quot;&gt;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#x75;&amp;#102;&amp;#x66;&amp;#x65;&amp;#114;&amp;#101;&amp;#100;&amp;#46;&amp;#105;&amp;#111;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">csd_web_request_resource</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#117;&amp;#102;&amp;#102;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#x69;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">106</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">114</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">resource_exists</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">previously_existed</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">moved_temporarily</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">include_lib</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">webmachine</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">webmachine</span><span class="p">.</span><span class="n">hrl</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">previously_existed</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">moved_temporarily</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Url</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="nf">request_access</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">Url</span><span class="p">},</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This module is quite lightweight, but has a little bit of magic in it that revolves around getting redirects to work. If you&rsquo;re not familiar with how 307 redirects work in Webmachine, take a quick side-glance at my <a href="http://buffered.io/posts/redirects-with-webmachine/" title="Redirects with Webmachine">Redirects with Webmachine</a> post.</p>

<p>Back? Ok. The extra line of code in the <code>moved_temporarily</code> function is where we invoke <code>twitter:request_access()</code> which goes to Twitter.com and gets a request token. The URL generated by this call is then passed back to Webmachine which will tell the caller&rsquo;s browser where to redirect to.</p>

<p>Build the app, fire up it up and click on the &ldquo;Sign in via Twitter&rdquo; button and you should see a screen that resembles this (assuming you&rsquo;re already signed in to Twitter):</p>

<p><img src="/uploads/2012/02/twitter-logon.png" title="Twitter - Logon Page" alt="Logging into CSD view Twitter" /></p>

<p>Exciting! We&rsquo;re nearly there. Don&rsquo;t click &ldquo;Sign In&rdquo; just yet because we don&rsquo;t yet have the callback set up to handle the result. Let&rsquo;s do that now. Here&rsquo;s the resource:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_callback_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#x40;&amp;#x62;&amp;#117;&amp;#102;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#105;&amp;#111;&quot;&gt;&amp;#111;&amp;#106;&amp;#64;&amp;#98;&amp;#117;&amp;#102;&amp;#x66;&amp;#101;&amp;#x72;&amp;#x65;&amp;#100;&amp;#46;&amp;#x69;&amp;#x6f;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">csd_web_callback_resource</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x6f;&amp;#x6a;&amp;#x40;&amp;#x62;&amp;#x75;&amp;#x66;&amp;#x66;&amp;#101;&amp;#x72;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#x69;&amp;#x6f;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x62</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">114</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">resource_exists</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">previously_existed</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">moved_temporarily</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">include_lib</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">webmachine</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">webmachine</span><span class="p">.</span><span class="n">hrl</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">previously_existed</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">moved_temporarily</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">handle_callback</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">handle_callback</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">ReqToken</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_qs_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_token</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">ReqTokenSecret</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_qs_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_token_secret</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Verifier</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_qs_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">oauth_verifier</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nv">ReqData</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="nf">verify_access</span><span class="p">(</span><span class="nv">ReqToken</span><span class="p">,</span> <span class="nv">ReqTokenSecret</span><span class="p">,</span> <span class="nv">Verifier</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserInfoJson</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="nf">get_current_user_info</span><span class="p">(</span><span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="nf">decode</span><span class="p">(</span><span class="nv">UserInfoJson</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">id</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserName</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">screen_name</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">cookie</span><span class="p">:</span><span class="nf">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c">% TODO: store the &amp;lsquo;session&amp;rsquo; in Riak in an ETS backend&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c">% TODO: error handlng for when things don&amp;rsquo;t go to plan</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nn">conf</span><span class="p">:</span><span class="nf">get_val</span><span class="p">(</span><span class="n">urimap</span><span class="p">,</span> <span class="n">home</span><span class="p">)},</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first few parts of this module should look familiar by now. We are overriding the <code>resource_exists</code>, <code>previously_existed</code> and <code>moved_temporarility</code> functions because we&rsquo;re going to be redirecting. For now we&rsquo;re going to assume that the user clicked &ldquo;Sign In&rdquo; and that everything went according to plan. Later on we&rsquo;ll worry about handling logon errors.</p>

<p>When <code>moved_temporarily</code> is invoked we pass responsibility off to the <code>handle_callback</code> function. Here you can see we are taking three parameters out of the query string that Twitter sent through to us. Those parameters are the <em>request token</em>, <em>request token secret</em> and the <em>verifier</em>. We take those values and pass them down to our <code>twittter</code> module to get it to verify the access with Twitter and to generate an <em>access token/access token secret</em> pair. When that comes back we have our token information and we can assume that the user has authenticated via Twitter. At this point we can &ldquo;log the user on&rdquo; by storing a cookie, but before we do that we want to get their Twitter ID and Username, so we invoke the <code>twitter:get_current_user_info</code> function, passing in the OAuth credentials, which in return gives us a blob of <a href="http://json.org/" title="JavaScript Object Notation">JSON</a> which contains the user&rsquo;s Twitter information.</p>

<p>From that we glean their ID and Username. We then store that information, along with the access token information, in a cookie using <code>cookie:store_ath</code> (which we&rsquo;ve covered previously) and we get a new request data object out as a result.</p>

<p>Now all we have to do is redirect the user back to the home page and pass on the new request data. Webmachine will take this data and push the cookie to the user&rsquo;s browser, then redirect the user to the <code>home</code> entry in the <code>urimap</code> section in <code>app.config</code>. In effect, we&rsquo;re redirected to the home page as a logged on user.</p>

<p>Ignoring the <code>TODO</code> notes (which we&rsquo;ll cover in future posts in this series), we&rsquo;ve got ourselves to the point where the application should function end-to-end. Finally.</p>

<p>Compile the application and fire it up! Let&rsquo;s take a look at what happens.</p>

<p><img src="/uploads/2012/02/home-loggedoff.png" title="Home - Logged Off" alt="Hitting the home page prior to logging on" /></p>

<p><img src="/uploads/2012/02/twitter-logon.png" title="Twitter - Logon Page" alt="Authenticating with Twitter" /></p>

<p><img src="/uploads/2012/02/home-loggedon.png" title="Home - Logged On" alt="Back home after the redirect with successful sign-on" /></p>

<h2>That&rsquo;s all &hellip; for now</h2>

<p>Thanks for reading this post. If you managed to make it this far you&rsquo;ve done well. In the next post we&rsquo;ll start to do some more meaningful things with our logged on users, such as allowing them to submit code snippets. This is where the end-to-end process becomes interesting.</p>

<p>Comments, feedback and criticisms are as welcome as always.</p>

<p><strong>Note:</strong> The code for Part 4 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part4-20120217" title="Source code for Part 4">Github</a>.</p>

<p>Other parts in this series: <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-5/" title="Webmachine, ErlyDTL and Riak - Part 5">Part 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 3]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/"/>
    <updated>2010-10-13T06:31:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/09/riak-logo.png" alt="Riak Logo" style="float:left;padding-right:5px;padding-bottom:5px;"/>For those of you who are new to the series, you may want to check out <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> and <a href="/posts/webmachine-erlydtl-and-riak-part-2/" title="Webmachine, ErlyDTL and Riak - Part 2">Part 2</a> before reading this post. It will help give you some context as well as introduce you to some of the jargon and technology that I&rsquo;m using. If you&rsquo;ve already read then, or don&rsquo;t want to, then please read on!</p>

<p>This post builds on the previous two, but not without a few little modifications. If you&rsquo;re interested in following along step by step with your own version of the code running, then get yourself a copy of <a href="https://github.com/OJ/csd/tree/Part2-20110403" title="Source code for Part 2">this changeset</a> before doing so.</p>

<p>In this post we&rsquo;re going to cover:</p>

<ol>
<li>A slight refactor of code structure to support the &ldquo;standard&rdquo; approach to building applications in Erlang using OTP.</li>
<li>Building a small set of modules to talk to <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a>.</li>
<li>Creation of some <a href="http://json.org/" title="JavaScript Object Notation">JSON</a> helper functions for reading and writing data.</li>
<li>Calling all the way from the <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a> front-end to Riak to extract data and display it in a browser using <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a> templates.</li>
</ol>


<p>There are quite a few code snippets in this post as well as output from script executions and <code>bash</code> sessions. To avoid confusion, all file listings reference the path to the file that is being modified relative to the root of the project folder.</p>

<p>Be warned, this is a <em>long</em> post :) Get yourself a <em>shmoke und a pancake</em>, a glass of your favourite beverage and put some relaxing music on (instrumental is best).</p>

<p>Are you ready? OK, here we go &hellip;</p>

<!--more-->


<h2>A Slight Refactor</h2>

<p>I was ready to embark on this third post a while back but then I sat back and thought about how I might structure things if I were using another set of technologies. Usually I would put another layer between the web tier and the back-end database cluster as opposed to having the web tier talk to the database directly. It didn&rsquo;t make sense to me that this approach would be any different in Erlang.</p>

<p>I had a chat to <a href="http://twitter.com/sj_mackenzie" title="Stewart Mackenzie on Twitter">two</a> <a href="http://twitter.com/MatthewErbs" title="Matt Erbs on Twitter">blokes</a> that I really respect to get their views, and then I fired off a question to the Basho guys (via the <a href="irc://irc.freenode.com/riak" title="Riak IRC on Freenode">#riak IRC channel</a>). The Basho lads even made the effort to respond to me via the <a href="http://lists.basho.com/pipermail/riak-users_lists.basho.com/2010-September/001984.html" title="Riak Recap">Riak Recap</a> as they weren&rsquo;t available at the time to answer me via IRC (thanks again <a href="http://twitter.com/pharkmillups" title="Mark Phillips on Twitter">Mark</a>). All three of them confirmed my thoughts. Here&rsquo;s what appeared in the recap which captures the question and response nicely:</p>

<blockquote><p>Q &mdash;&ndash; I have a Webmachine application which will be talking to Riak. I was going to put application and controller logic in that application and I am wondering if [I] should instead be creating a &ldquo;core&rdquo; OTP application with the business style logic in it and have the Webmachine app talk to that app which, in turn, talks to Riak? Is that the general approach that is taken [in Erlang applications]? (from TheColonial via #riak)</p>

<p>A &mdash;&ndash; We recommend going with the latter approach. You&rsquo;re better off to create a core app that talks to Webmachine and Riak separately.</p></blockquote>

<p>Perfect, that makes total sense. Therefore the following describes what I did to modify the code base that I had in order to support this set up. <strong>Any failure</strong> in implementation, structure or understanding is totally my own and in no way reflects on the abilities and advice of those mentioned above who took the time to offer assistance.</p>

<p>Moving on. What we want to end up with is three applications:</p>

<table cellspacing="0">
  <thead>
    <tr>
      <th style="text-align:center;">Application</th>
      <th style="text-align:center;">Structure/Responsibility</th>
      <th style="text-align:center;">Talks to</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Riak</td>
      <td>Bomb-proof data storage and replication.</td>
      <td style="text-align:center">-</td>
    </tr>
    <tr>
      <td>csd_core</td>
      <td>An OTP application that provides an API to a set of logic that deals with the transformation of data from a client through to the database. It should keep the clients ignorant of the data storage medium. It should provide business logic that would be required for any client application to be able to talk to a `csd`/Riak back-end.</td>
      <td style="text-align:center">Riak</td>
    </tr>
    <tr>
      <td>csd_web</td>
      <td>Provide a nice, web-based interface for the user to experience the goal of the Code Smackdown application.</td>
      <td style="text-align:center">csd_core</td>
    </tr>
  </tbody>
</table>


<p>Given that we&rsquo;re going to be using this structure, the &ldquo;root&rdquo; folder should actually be fairly clean without any source. Instead, each <code>csd</code>-related application should live in its own sub-folder under an <code>apps</code> folder and the root should just contain the means to build it and start it. In essence what we&rsquo;d like to see in the root folder is something like this:</p>

<pre><code>oj@spawn-link ~/blog/csd $ ls -F
apps/  dev.haproxy.conf  Makefile  proxy.sh*  rebar*  rebar.config  start.sh*
</code></pre>

<p>With that in mind, let&rsquo;s start the surgery.</p>

<h3>Moving csd to csd_web</h3>

<p>There are two ways to approach this problem. The first is to do a <strong>find and replace</strong>, making sure you cover off file names as well as module names, etc. The second is to simply <strong>recreate the web site from scratch</strong>, copy over any missing files and make any other adjustments manually that may be required.</p>

<p>I preferred the second approach, so that&rsquo;s what I did. First I recreated the web application, which is now called <code>csd_web</code> in the <code>apps</code> folder:</p>

<pre><code>oj@spawn-link ~/blog/csd $ mkdir apps &amp;&amp; cd apps
oj@spawn-link ~/blog/csd/apps $ ~/blog/webmachine/scripts/new_webmachine.sh csd_web .
==&gt; priv (create)
Writing /home/oj/blog/csd/apps/csd_web/README
Writing /home/oj/blog/csd/apps/csd_web/Makefile
Writing /home/oj/blog/csd/apps/csd_web/rebar.config
Writing /home/oj/blog/csd/apps/csd_web/rebar
Writing /home/oj/blog/csd/apps/csd_web/start.sh
Writing /home/oj/blog/csd/apps/csd_web/ebin/csd_web.app
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_app.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_sup.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_resource.erl
Writing /home/oj/blog/csd/apps/csd_web/priv/dispatch.conf
oj@spawn-link ~/blog/csd/apps $ ls -F
csd_web/
</code></pre>

<p>Next I removed a few files which weren&rsquo;t going to be needed any more. I then copied over <code>rebar.config</code>, the ErlyDTL templates and the <code>csd.app.src</code> file (which we need to modify):</p>

<pre><code>oj@spawn-link ~/blog/csd/apps $ cd csd_web
oj@spawn-link ~/blog/csd/apps/csd_web $ rm README rebar start.sh
oj@spawn-link ~/blog/csd/apps/csd_web $ cp ../../rebar.config .
oj@spawn-link ~/blog/csd/apps/csd_web $ cp -R ../../templates .
oj@spawn-link ~/blog/csd/apps/csd_web $ cp ../../src/csd.app.src ./src/csd_web.app.src
</code></pre>

<p>I then edited the <code>csd_web.app.src</code> file so that the names were updated (I tidied it up a little and added a version number too):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web.app.src </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">description</span><span class="p">,</span> <span class="s">&quot;The Webmachine component of the Code Smackdown application.&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">vsn</span><span class="p">,</span> <span class="s">&quot;0.0.1&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">modules</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'><span class="p">{</span><span class="n">registered</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'><span class="p">{</span><span class="n">applications</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="n">kernel</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stdlib</span><span class="p">,</span>
</span><span class='line'>    <span class="n">crypto</span><span class="p">,</span>
</span><span class='line'>    <span class="n">mochiweb</span><span class="p">,</span>
</span><span class='line'>    <span class="n">webmachine</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">mod</span><span class="p">,</span> <span class="p">{</span><span class="n">csd_web_app</span><span class="p">,</span> <span class="p">[]}},</span>
</span><span class='line'><span class="p">{</span><span class="n">env</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I then opened up <code>csd_web_resource.erl</code> and made it look like the original <code>csd_resource.erl</code> so that it called the ErlyDTL template:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web_resource</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_html</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">include_lib</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">webmachine</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">webmachine</span><span class="p">.</span><span class="n">hrl</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">sample_dtl</span><span class="p">:</span><span class="nf">render</span><span class="p">([{</span><span class="n">param</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">Slartibartfast</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;}]),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>csd_web</code> is now ready to go. To build it, we need to go back up to the root <code>csd</code> folder and adjust the <code>rebar.config</code> so that it knows to look in the <code>apps</code> sub-folder (thanks to <a href="http://twitter.com/andrewtj" title="AndrewTJ on Twitter">Andrew</a> for <a href="http://lists.basho.com/pipermail/rebar_lists.basho.com/2010-October/000246.html" title="Configuring the Rebar apps folder on Basho list">pointing this out</a>). We can also remove all the dependencies because that will be taken care of by <code>csd_web</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">apps</span><span class="o">/</span><span class="n">csd_web</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;]}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, I removed all the other left-over stuff in the root folder that wasn&rsquo;t required any more (including the startup script):</p>

<pre><code>oj@spawn-link ~/blog/csd $ rm -rf README priv src templates start.sh
</code></pre>

<p>I then modify the <code>Makefile</code> so that it does a couple of other things:</p>

<ol>
<li>Includes a target which builds just the current applications <em>without</em> building the dependencies (this will make builds much quicker most of the time).</li>
<li>Includes a target which can start the web application, essentially replacing the original startup script. This target will be dependent on the previous target so that it is always up to date when running the application.</li>
<li>Includes targets which can start/stop <code>HAproxy</code>.</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ERL ?= erl
</span><span class='line'>APP = csd&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>.PHONY: deps&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>all: deps
</span><span class='line'>  @./rebar compile&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>app:
</span><span class='line'>  @./rebar compile skip_deps=true&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>deps:
</span><span class='line'>  @./rebar get-deps&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>clean:
</span><span class='line'>  @./rebar clean&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>distclean: clean
</span><span class='line'>  @./rebar delete-deps&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>webstart: app
</span><span class='line'>  exec erl -pa $(PWD)/apps/&lt;em>/ebin -pa $(PWD)/deps/&lt;/em>/ebin -boot start_sasl -s reloader -s csd_web&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>proxystart:
</span><span class='line'>  @haproxy -f dev.haproxy.conf</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>All that is left to do is start <code>haproxy</code> and launch the application (make sure <code>Riak</code> is running first). These commands need to be done in two different terminal windows. First, start the proxy (note the use of <code>sudo</code> so that we can listen on port 80):</p>

<pre><code>oj@spawn-link ~/blog/csd $ sudo make proxystart
[2] 1935
Available polling systems :
     sepoll : pref=400,  test result OK
      epoll : pref=300,  test result OK
       poll : pref=200,  test result OK
     select : pref=150,  test result OK
Total: 4 (4 usable), will use sepoll.
Using sepoll() as the polling mechanism.
</code></pre>

<p>Then make and start the web application. We have to do a full <code>make</code> first time around so that all the dependencies are resolved:</p>

<pre><code>oj@spawn-link ~/blog/csd $ make &amp;&amp; make webstart

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::21:04:18 ===
         application: csd_web
          started_at: nonode@nohost
</code></pre>

<p>Now we should be able to hit <a href="http://localhost/" title="localhost web app">localhost</a> and see the ErlyDTL template rendered in all its awesome, black-and-white glory:</p>

<p><img src="http://buffered.io/uploads/2010/10/localhost-slartibartfast.png" /></p>

<p>Refactor complete. Now let&rsquo;s start work on our new OTP application which will be responsible for talking to Riak.</p>

<p>If you need a break, now is the time to take it! Go freshen up, take a leak and refill your glass.</p>

<p>Ready to go again? Here we go &hellip;</p>

<h3>Creating the csd_core OTP Application</h3>

<p>Creation of an OTP-compliant application is another job for <a href="http://www.basho.com/developers.html#Rebar" title="Rebar">Rebar</a> as it comes with a set of templates built-in. Unfortunately those template aren&rsquo;t 100% and hence don&rsquo;t do everything we need to do out of the box. But we shall use them as a starting point:</p>

<pre><code>oj@spawn-link ~/blog/csd $ mkdir apps/csd_core &amp;&amp; cd apps/csd_core
oj@spawn-link ~/blog/csd/apps/csd_core $ ../../rebar create-app appid=csd_core
==&gt; csd_core (create-app)
Writing src/csd_core.app.src
Writing src/csd_core_app.erl
Writing src/csd_core_sup.erl
</code></pre>

<p>We have a very simple application shell set up, but we need to do a bit more work to get it ready. First, let&rsquo;s create our base <code>csd_core.erl</code> module which is used to fire up our application. For this we will use <code>csd_web.erl</code> (the one which is part of our Webmachine application) as a template. Note that I&rsquo;ve shuffled things around and removed some things that are not relevant:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_core.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#64;&amp;#98;&amp;#x75;&amp;#x66;&amp;#102;&amp;#x65;&amp;#114;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#x69;&amp;#111;&quot;&gt;&amp;#111;&amp;#x6a;&amp;#x40;&amp;#x62;&amp;#x75;&amp;#102;&amp;#x66;&amp;#x65;&amp;#114;&amp;#x65;&amp;#100;&amp;#x2e;&amp;#105;&amp;#111;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2011 OJ Reeves&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @doc csd_core startup code&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x6f;&amp;#106;&amp;#x40;&amp;#98;&amp;#117;&amp;#x66;&amp;#102;&amp;#101;&amp;#114;&amp;#101;&amp;#100;&amp;#x2e;&amp;#105;&amp;#x6f;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x6f</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">106</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">117</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">102</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">114</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">105</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ensure_started</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="nv">App</span><span class="p">}}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ok</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec start_link() &amp;ndash;&gt; {ok,Pid::pid()}</span>
</span><span class='line'><span class="c">%% @doc Starts the app for inclusion in a supervisor tree</span>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'><span class="nn">csd_core_sup</span><span class="p">:</span><span class="nf">start_link</span><span class="p">().</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec start() &amp;ndash;&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Start the csd_core server.</span>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec stop() &amp;ndash;&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Stop the csd_core server.</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Res</span> <span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">csd_core</span><span class="p">),</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">stop</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'><span class="nv">Res</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next up, edit <code>csd_core.app.src</code> and add some application-specific information:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_core.app.src </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="n">csd_core</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">description</span><span class="p">,</span> <span class="s">&quot;Core functionality for the Code Smackdown application.&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">vsn</span><span class="p">,</span> <span class="s">&quot;0.0.1&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">registered</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'><span class="p">{</span><span class="n">applications</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="n">kernel</span><span class="p">,</span>
</span><span class='line'>    <span class="n">stdlib</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="n">mod</span><span class="p">,</span> <span class="p">{</span><span class="n">csd_core_app</span><span class="p">,</span> <span class="p">[]}},</span>
</span><span class='line'><span class="p">{</span><span class="n">env</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We know that we&rsquo;ll be talking to Riak, so we need to make sure we&rsquo;ve included the <code>riakc</code> (Riak client) dependency. Though I haven&rsquo;t yet talked about it, we&rsquo;ll also be using Mochiweb&rsquo;s <a href="https://github.com/mochi/mochiweb/blob/master/src/mochijson2.erl" title="Mochiweb's json module">mochijson2</a> module to help with handling JSON data, so we shall add this as a dependency to the application. Bear in mind this is already a dependency for the web component of the application, so we&rsquo;re not actually adding a <em>new</em> dependency to the overall application.</p>

<p>We can do this by creating a <code>rebar.config</code> in <code>apps/csd_core</code> and editing it to contain the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">mochiweb</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/mochi/mochiweb&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">tag</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">}}},</span>
</span><span class='line'><span class="p">{</span><span class="n">riakc</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/riak-erlang-client&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we need to tell <code>rebar</code> to build this new application by adjusting the <code>rebar.config</code> in the <code>csd</code> root folder:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">apps</span><span class="o">/</span><span class="n">csd_core</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">apps</span><span class="o">/</span><span class="n">csd_web</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;]}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we have enough to get the <code>csd_core</code> application started, even though it doesn&rsquo;t do anything. We just need to adjust our <code>Makefile</code> target so that it launches the <code>csd_core</code> application as well:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ERL ?= erl
</span><span class='line'>APP = csd&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>.PHONY: deps&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>all: deps
</span><span class='line'>  @./rebar compile&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>app:
</span><span class='line'>  @./rebar compile skip_deps=true&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>deps:
</span><span class='line'>  @./rebar get-deps&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>clean:
</span><span class='line'>  @./rebar clean&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>distclean: clean
</span><span class='line'>  @./rebar delete-deps&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>webstart: app
</span><span class='line'>  exec erl -pa $(PWD)/apps/*/ebin -pa $(PWD)/deps/*/ebin -boot start_sasl -s reloader -s csd_core -s csd_web&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>proxystart:
</span><span class='line'>  @haproxy -f dev.haproxy.conf</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then off we go:</p>

<pre><code>oj@spawn-link ~/blog/csd $ make webstart
==&gt; csd_core (compile)
Compiled src/csd_core_app.erl
Compiled src/csd_core_sup.erl
Compiled src/csd_core.erl

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::21:49:27 ===
         application: csd_core
          started_at: nonode@nohost

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::21:49:27 ===
         application: csd_web
          started_at: nonode@nohost
</code></pre>

<p>As you can see we now have a system which contains both <code>csd_core</code> and <code>csd_web</code>. This is great, but <code>csd_core</code> needs a lot more work. The intent for this application is to be an <a href="http://en.wikipedia.org/wiki/Open_Telecom_Platform" title="Open Telecom Platform">OTP</a> application which provides an API to the <code>csd</code> logic and back-end database. This means we&rsquo;re going to need to get ourselves a <a href="http://www.erlang.org/doc/design_principles/gen_server_concepts.html" title="gen_server behaviour">gen_server</a> set up which can handle requests from various clients. Let&rsquo;s do that next.</p>

<p>Thankfully <code>rebar</code> comes with a simple template that we can use for creating the <code>gen_server</code> behaviour, so we can invoke that from the command line and have it generate the shell for us:</p>

<pre><code>oj@spawn-link ~/blog/csd/apps/csd_core $ ../../rebar create template=simplesrv srvid=csd_core_server
==&gt; csd_core (create)
Writing src/csd_core_server.erl
</code></pre>

<p>We now have a very dumb server ready to go, to make it start with the rest of the application we have to modify <code>csd_core_sup</code>, the <a href="http://www.erlang.org/doc/design_principles/sup_princ.html" title="supervisor behaviour">supervisor</a> and tell it to fire up the server for us:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_core_sup.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_core_sup</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">behaviour</span><span class="p">(</span><span class="n">supervisor</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% API</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% Supervisor callbacks</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% Helper macro for declaring children of supervisor</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">CHILD</span><span class="p">(</span><span class="nv">I</span><span class="p">,</span> <span class="nv">Type</span><span class="p">),</span> <span class="p">{</span><span class="nv">I</span><span class="p">,</span> <span class="p">{</span><span class="nv">I</span><span class="p">,</span> <span class="n">start_link</span><span class="p">,</span> <span class="p">[]},</span> <span class="n">permanent</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="p">[</span><span class="nv">I</span><span class="p">]}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% ===================================================================</span>
</span><span class='line'><span class="c">%% API functions</span>
</span><span class='line'><span class="c">%% ===================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">start_link</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">supervisor</span><span class="p">:</span><span class="nf">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">},</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% ===================================================================</span>
</span><span class='line'><span class="c">%% Supervisor callbacks</span>
</span><span class='line'><span class="c">%% ===================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Server</span> <span class="o">=</span> <span class="o">?</span><span class="nv">CHILD</span><span class="p">(</span><span class="n">csd_core_server</span><span class="p">,</span> <span class="n">worker</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Processes</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Server</span><span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">one_for_one</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="nv">Processes</span><span class="p">}</span> <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With this in place we can now start our application again and we should see the new <code>csd_core_server</code> appear in the start-up sequence:</p>

<pre><code>oj@spawn-link ~/blog/csd $ make webstart

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::22:04:04 ===
          supervisor: {local,csd_core_sup}
             started: [{pid,&lt;0.54.0&gt;},
                       {name,csd_core_server},
                       {mfargs,{csd_core_server,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,5000},
                       {child_type,worker}]

=PROGRESS REPORT==== 4-Apr-2011::22:04:04 ===
         application: csd_core
          started_at: nonode@nohost

   ... snip ...
</code></pre>

<p>The shell and structure of our application is now in place. We are finally ready to start talking to Riak!</p>

<p>Again, now is the time to have a mini-break if you need one. Grab a <em>Shigar und a waffle</em> and a cup of English Breakfast tea.</p>

<h2>Preparing csd_core for Riak connectivity</h2>

<p>Given that this is the first look at connecting to Riak, we&rsquo;re going to have to set up a little infrastructure to support our needs. As a result, the data itself won&rsquo;t be discussed much for fear of turning this post into something way more epic than originally intended.</p>

<p>So in short, we&rsquo;re interested in storing the idea of a <em>code snippet</em>. That is an entity which contains two opposing blobs of code which are being compared. That snippet will have a title. Down the track, more information will be associated with this snippet, such as the author, along with links to a set of comments and votes. For now we&rsquo;ll just focus on storing the bare essentials of the snippet.</p>

<h3>The Snippet</h3>

<p>As far as our Erlang code is concerned, our snippet is going to be a simple list of properties that we can interact with via the <a href="http://www.erlang.org/doc/man/proplists.html" title="proplists">proplists</a> module. This keeps things really simple. To demonstrate what our snippet will look like in code, here is the function that takes a Title, and the two code blobs (called Left and Right) and returns a <code>snippet</code> instance. This code goes in a module called <code>csd_snippet</code> defined in <code>src/csd_snippet.erl</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">to_snippet</span><span class="p">(</span><span class="nv">Title</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">title</span><span class="p">,</span> <span class="nv">Title</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="nv">Left</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">right</span><span class="p">,</span> <span class="nv">Right</span><span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the first part of the tuple is the atom <code>snippet</code> which I am using to identify the layout of the contents in the second part of the tuple. Down the track we&rsquo;ll have more collections of data in the system than just snippets, and we may want to make sure that the caller doesn&rsquo;t accidentally pass in a <code>user</code>, for example, to a function expecting a <code>snippet</code>.</p>

<p>It is important at this point to note that, down the track, I will include a <code>key</code> property in all of the data objects that are pushed to Riak. This property serves as the identifier for the object in Riak and is stored alongside the rest of the data so that it is easy to relate the in-memory instance back to the stored instance. This value, if not specified, will be inserted automatically when an item is saved via the API functions in <code>csd_core</code>. More on this later.</p>

<h3>Formatting Data for Storage in Riak</h3>

<p>Riak is very flexible in that it will store whatever kind of information you give it. This is good because it means we can cater our data format to whatever needs we have.</p>

<p>In our case, the <em>easiest</em> option would be to store our Erlang terms as binary using <a href="http://www.erlang.org/doc/man/erlang.html#term_to_binary-1" title="term_to_binary">term_to_binary</a> as we wouldn&rsquo;t have to think about <em>anything</em> else. We could easily read the data using <a href="http://www.erlang.org/doc/man/erlang.html#binary_to_term-1" title="binary_to_term">binary_to_term</a>. Done.</p>

<p>This comes with a set of problems though. For example, if we wanted to <a href="http://en.wikipedia.org/wiki/MapReduce" title="map/reduce">map/reduce</a> using JavaScript we wouldn&rsquo;t find it easy to get the data into a format that we could use. Another example would be that the RESTful interface to Riak would be close to useless because <strong>any</strong> non-Erlang client would have to somehow get the data into a meaningful format to work with.</p>

<p>Instead of using binary and throwing Erlang terms straight into Riak, we&rsquo;re going to use <a href="http://json.org/" title="JavaScript Object Notation">JSON</a>. It&rsquo;s very easy to convert to and from JSON in many different languages, and it&rsquo;s very easy to read. We can also easily verify that the data is being stored correctly by querying Riak&rsquo;s RESTful interface directly using <a href="http://curl.haxx.se/" title="cURL homepage">cURL</a> or a browser.</p>

<p>In order to store data in JSON format, we&rsquo;re going to enlist the help of <a href="https://github.com/mochi/mochiweb/blob/master/src/mochijson2.erl" title="Mochiweb's json module">mochijson2</a>, a library that comes with <a href="https://github.com/mochi/mochiweb" title="Mochiweb">Mochiweb</a> that makes it a <em>lot</em> easier to deal with JSON than doing everything manually. Given that we&rsquo;re using Webmachine for the front-end (which itself relies on Mochiweb) we already have the dependency available.</p>

<p>Unfortunately we can&rsquo;t just throw our data straight at this module and have it do everything for us. <code>mochijson2</code> requires data to be in a certain format before it can encode it to JSON. When decoding <em>from</em> JSON, it converts the data into the same format. Hence, we need the ability to convert our own data format to and from this intermediate data format so that <code>mochijson2</code> can deal with it.</p>

<p>We need two functions: <code>to_json()</code> and <code>from_json()</code>, and we shall define these in a helper module called <code>csd_json</code>. This module will live in <code>csd_core</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_json.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_json</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">from_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">from_json</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">to_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_json</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nv">PropList</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">to_json</span><span class="p">(</span><span class="nv">PropList</span><span class="p">,</span> <span class="k">fun</span><span class="p">(_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nv">PropList</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nb">list_to_binary</span><span class="p">(</span><span class="nn">mochijson2</span><span class="p">:</span><span class="nf">encode</span><span class="p">(</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">PropList</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">))).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="k">fun</span><span class="p">(_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span> <span class="k">end</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">to_proplist</span><span class="p">(</span><span class="nn">mochijson2</span><span class="p">:</span><span class="nf">decode</span><span class="p">(</span><span class="nv">Json</span><span class="p">),</span> <span class="nv">IsStrFun</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;re probably wondering why each of these functions requires the <code>IsStrFun</code> parameter (if you&rsquo;re not, you&rsquo;re obviously an experienced Erlanger!). For those who don&rsquo;t know, strings in Erlang are actually lists of integers. This is fantastic as it makes it easy to manipulate strings as if they were lists, but it comes at a small price: it&rsquo;s not possible to determine the difference between a list of integers and a string.</p>

<p>Why is this important? <code>mochijson2</code> needs strings to be encoded as binaries, so we need a way to differentiate between integer lists and real strings. My original implementations of both the <code>to_json()</code> and <code>from_json()</code> functions attempted to figure out if certain fields were strings or not by looking at the content of the list. Not only was the code messy, but it wasn&rsquo;t foolproof. Instead, I made the decision to force the user to provide a callback function which will tell the JSON serialiser if the given property is a string or not. This callback takes a single parameter which is the name (in atom form) of the property and returns a boolean &mdash; <code>true</code> indicates that the value is a string, <code>false</code> otherwise.</p>

<p>In some cases we might just be happy to encode/decode every single value as a string. Hence, there is an overload to both <code>to_json()</code> and <code>from_json()</code> which caters for this case. The rest of the code which implments the conversion is listed below. Don&rsquo;t feel that you need to understand the code below, as it&rsquo;s really not the goal of this post. The full source to this module is included in the source link specified at the end of this post.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_json.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">from_proplist</span><span class="p">(</span><span class="nv">List</span><span class="o">=</span><span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">],</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_tuple</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">struct</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">from_proplist</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">List</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nf">from_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">ComplexProp</span><span class="o">=</span><span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">]},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_tuple</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span> <span class="n">from_proplist</span><span class="p">(</span><span class="nv">ComplexProp</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nf">from_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span> <span class="n">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_proplist</span><span class="p">({</span><span class="n">struct</span><span class="p">,</span> <span class="nv">PropList</span><span class="p">},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">PropList</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">to_proplist</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">PropList</span><span class="p">);</span>
</span><span class='line'><span class="nf">to_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">ComplexProp</span><span class="o">=</span><span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="p">_}},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">list_to_atom</span><span class="p">(</span><span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span> <span class="n">to_proplist</span><span class="p">(</span><span class="nv">ComplexProp</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nf">to_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">PropAtom</span> <span class="o">=</span> <span class="nb">list_to_atom</span><span class="p">(</span><span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">{</span> <span class="nv">PropAtom</span><span class="p">,</span> <span class="n">from_value</span><span class="p">(</span><span class="nv">PropAtom</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">L</span><span class="o">=</span><span class="p">[</span><span class="nv">H</span><span class="p">|_],</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">);</span>
</span><span class='line'><span class="nf">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">IsStrFun</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">L</span><span class="p">);</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">to_value</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">from_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">);</span>
</span><span class='line'><span class="nf">from_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">B</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">B</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">IsStrFun</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">B</span><span class="p">);</span>
</span><span class='line'><span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">B</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">from_value</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We are now able to read and write data to and from JSON format. Now we need to use the Riak client to push that into our Riak cluster.</p>

<h3>Setting up the Riak client</h3>

<p>Basho have done a great job of creating a protocol buffer-based client for use with Riak. The interface is really simple to use. Despite that, we shall create a module which will deal with this for us. This gives us a single point of abstraction of Riak and a place where we can add extra support for our own needs without spreading Riak-specific code all over the source base.</p>

<p>The first problem we need to resolve is: <em>what do we do with configuration?</em></p>

<p>This was a question I initially didn&rsquo;t know how to answer. After a bit of deliberation and a chat with a <a href="http://twitter.com/mononcqc" title="Ferd T-H on Twitter">respected Erlang sifu</a> (who has a <a href="http://learnyousomeerlang.com/" title="Learng you some erlang">fantastic Erlang tutorial site</a>) I decided to go with a module-based option.</p>

<p>We have our Riak cluster hidden behind the <code>haproxy</code> load balancer, and hence we have a single entry-point to connect to. If this entry-point changes, it changes for all of the clients, not just a single client. Therefore, I want the ability to manage a single set of connection information, but I want the ability to update it on the fly without having to restart the <code>csd_core</code> application. This is Erlang, after all, and modifying code and configuration on-the-fly is extremely easy. We shall abuse that.</p>

<p>We create a single module, <code>csd_riak_config.erl</code>, to contain our configuration which is referenced at start-up. It looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_riak_config.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_riak_config</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">connection_info</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">connection_info</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span> <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Pretty simple stuff. Let&rsquo;s use this functionality in our <code>gen_server</code>, and carry the configuration through from initialisation to all of the calls that will be made to the Riak server. This requires two simple modifications to the <code>csd_core_server</code> module:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_core_server.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">ConnInfo</span> <span class="o">=</span> <span class="nn">csd_riak_config</span><span class="p">:</span><span class="nf">connection_info</span><span class="p">(),</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="nf">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="o">?</span><span class="nv">SERVER</span><span class="p">},</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[</span><span class="nv">ConnInfo</span><span class="p">],</span> <span class="p">[]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([</span><span class="nv">ConnInfo</span><span class="p">])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Confiuration is now loaded and is being passed to all of our <code>gen_server</code> callbacks. Let&rsquo;s make use of it. <code>csd_snippet</code> is the entry point for all snippet-related information, and one of the things that we are going to want to be able to do is write a snippet to Riak. So let&rsquo;s create a code-path that can do that.</p>

<h4>Writing Data to Riak</h4>

<p>The first point of call for a client is the OTP interface. Let&rsquo;s create an API call and a call handler to support saving snippets in <code>csd_core_server</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_core_server.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% This is a simple function which invokes a call via the gen_sever</span>
</span><span class='line'><span class="c">%% behaviour.</span>
</span><span class='line'><span class="nf">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="nf">call</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% Handle the case where a caller wants to save a snippet to Riak. We</span>
</span><span class='line'><span class="c">%% create a connection to Riak and pass that into the snippet handler</span>
</span><span class='line'><span class="c">%% along with the snippet that needs to be saved. We return the newly</span>
</span><span class='line'><span class="c">%% saved snippet.</span>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">RiakPid</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">connect</span><span class="p">(</span><span class="nv">ConnInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SavedSnippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">SavedSnippet</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Of course, we will need to export the <code>save_snippet()</code> function if we want to be able to call it.</p>

<p>You&rsquo;ll notice that we&rsquo;re getting the connection information passed in as the state for the OTP call, and that we&rsquo;re using that to create a connection to Riak via the <code>csd_riak</code> module. We shall cover this module in just a minute, but hopefully the interface to this function should make it relatively self-explanatory.</p>

<p>You might be wondering &ldquo;Why are you creating the Riak client connection here instead of letting the <code>csd_snippet:save()</code> function do it by itself. It&rsquo;s a good question. The reason I decided to create the connection as part of OTP call rather than in the data/helper modules is because down the track there will probably be a need to do multiple interactions with Riak in a single call. If we force each of the called modules, such as <code>csd_snippet</code>, to establish their own connections then we&rsquo;d probably have <em>multiple connections to Riak being created during a single client request</em>. This isn&rsquo;t what I would like to see happen, so it made sense (in my view) to create the client connection once and reuse it across all modules that are invoked during the request.</p>

<p>With that out of the way, we need to implement the <code>save()</code> function in the <code>csd_snippet</code> module. Brace yourself:</p>

<p><span class="filename"></span>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="o">=</span><span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">,</span> <span class="n">undefined</span><span class="p">)</span> <span class="k">of</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">undefined</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">new_key</span><span class="p">(),</span>
</span><span class='line'>  <span class="nv">NewSnippetData</span> <span class="o">=</span> <span class="p">[{</span><span class="n">key</span><span class="p">,</span> <span class="nv">Key</span><span class="p">}</span> <span class="p">|</span> <span class="nv">SnippetData</span><span class="p">],</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">create</span><span class="p">(</span><span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="n">to_json_internal</span><span class="p">(</span><span class="nv">NewSnippetData</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">NewSnippetData</span><span class="p">};</span>
</span><span class='line'><span class="nv">ExistingKey</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">ExistingKey</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">update</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="n">to_json_internal</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Snippet</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On the surface this looks a little complicated, but it&rsquo;s actually very simple. As mentioned earlier in the post, we use a <code>key</code> property to store the identifier of the object in Riak. This code supports this notion. It works as follows:</p>

<ol>
<li><strong>Try to get the value of the <code>key</code> from the given list of properties.</strong></li>
<li><strong>If <em>not</em> found &hellip;</strong>

<ol>
<li>create a new key using the <code>new_key()</code> function in the <code>csd_riak</code> module (this will be covered shortly).</li>
<li>Add the <code>key</code> to the list of properties for the snippet.</li>
<li>Create a new instance of a Riak object (more on this later) which contains the details of the snippet data to be written, along with the target bucket name and the key of the snippet.</li>
<li>Save the Riak object to the Riak cluster using the specified Riak client connection (Pid), and for now assume that it succeeds.</li>
<li>Return the new set of snippet data with the snippet&rsquo;s key included.</li>
</ol>
</li>
<li><strong>If found &hellip;</strong>

<ol>
<li>Load the existing data from the Riak cluster into a Riak object.</li>
<li>Update the Riak object with the new data values passed into the function.</li>
<li>Save the Riak object <em>back</em> to the Riak cluster using the specified Riak client connection (Pid), and for now assume that it succeeds.</li>
<li>Return the snippet back to the caller as is.</li>
</ol>
</li>
</ol>


<p>It&rsquo;s fairly basic functionality which does enough to cater for our needs at this point. Through this one function, we can write new snippet instances to Riak, and we can update them too.</p>

<p>You&rsquo;ll also notice that another function is being called that hasn&rsquo;t been discussed: <code>to_snippet_internal()</code>. Rather than try to explain this, let&rsquo;s see the code as it&rsquo;s quite easy to follow:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% exported functions</span>
</span><span class='line'><span class="nf">to_json</span><span class="p">({</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">to_json_internal</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">from_json_internal</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% helper functions used internally.</span>
</span><span class='line'><span class="nf">to_json_internal</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="nf">to_json</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_json_internal</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nn">csd_json</span><span class="p">:</span><span class="nf">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">)}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_string</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">right</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">false</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see, these are helper functions which call the <code>csd_json</code> functions to serialise/deserialise to/from JSON format. The <code>is_string()</code> function is the one that is used to tell the JSON functionality which properties are strings and which are not. At the moment, all properties defined on the snippet are string properties. Bear in mind that the <code>key</code> property, which is added automatically, is <em>not</em> a string.</p>

<p>All that is left is to see how <code>csd_riak</code> deals with the underlying Riak connectivity. Prepare to be underwhelmed!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @spec connect(connection_info()) &amp;ndash;&gt; pid()</span>
</span><span class='line'><span class="c">%% @doc Create a connection to the specified Riak cluster and</span>
</span><span class='line'><span class="c">%%      return the Pid associated with the new connection.</span>
</span><span class='line'><span class="nf">connect</span><span class="p">({</span><span class="nv">IP</span><span class="p">,</span> <span class="nv">Port</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakPid</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="nv">IP</span><span class="p">,</span> <span class="nv">Port</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RiakPid</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec create(binary, binary, json) &amp;ndash;&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Create a new instance of a riak object using the</span>
</span><span class='line'><span class="c">%%      parameters given. The riak object can then be</span>
</span><span class='line'><span class="c">%%      persisted to a Riak node/cluster. This overload</span>
</span><span class='line'><span class="c">%%      assumes that the data passed in is JSON and sets</span>
</span><span class='line'><span class="c">%%      the MIME type to &amp;ldquo;application/json&amp;rdquo; for you.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">JsonData</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">create</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">JsonData</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">application</span><span class="o">/</span><span class="n">json</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec create(binary, binary, term(), string) &amp;ndash;&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Create a new instance of a riak object using the</span>
</span><span class='line'><span class="c">%%      parameters given. The riak object can then be</span>
</span><span class='line'><span class="c">%%      persisted to a Riak node/cluster. This overload</span>
</span><span class='line'><span class="c">%%      takes arbitrary data and requires the user to</span>
</span><span class='line'><span class="c">%%      specify the mime type of the data that is being</span>
</span><span class='line'><span class="c">%%      stored.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">Item</span><span class="p">,</span> <span class="nv">MimeType</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">new</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">Item</span><span class="p">,</span> <span class="nv">MimeType</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RiakObj</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec fetch(pid(), binary, binary) &amp;ndash;&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Fetches a riakc object from a Riak node/cluster</span>
</span><span class='line'><span class="c">%%      using the connection given.</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RiakObj</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec update(riakc_obj(), term()) &amp;ndash;&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Updates the stored value for a riakc object with</span>
</span><span class='line'><span class="c">%%      the new one specified.</span>
</span><span class='line'><span class="nf">update</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">NewValue</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">update_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">NewValue</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewRiakObj</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec get_value(riakc_obj()) &amp;ndash;&gt; term()</span>
</span><span class='line'><span class="c">%% @doc Retrieves the stored value from within the riakc</span>
</span><span class='line'><span class="c">%%      object.</span>
</span><span class='line'><span class="nf">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Value</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec save(pid(), riakc_obj()) &amp;ndash;&gt; {ok, riakc_obj()} | {error | Reason}</span>
</span><span class='line'><span class="c">%% @doc Saves the given riak object to the specified Riak node/cluster.</span>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nb">put</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Result</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec new_key() &amp;ndash;&gt; key()</span>
</span><span class='line'><span class="c">%% @doc Generate an close-to-unique key that can be used to identify</span>
</span><span class='line'><span class="c">%%      an object in riak. This implementation is blatantly borrowed</span>
</span><span class='line'><span class="c">%%      (purloined) from the wriaki source (thanks basho!)</span>
</span><span class='line'><span class="nf">new_key</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">{</span><span class="nv">Yr</span><span class="p">,</span> <span class="nv">Mo</span><span class="p">,</span> <span class="nv">Dy</span><span class="p">},</span> <span class="p">{</span><span class="nv">Hr</span><span class="p">,</span> <span class="nv">Mn</span><span class="p">,</span> <span class="nv">Sc</span><span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nf">universaltime</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">{</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">Now</span><span class="p">}</span> <span class="o">=</span> <span class="n">now</span><span class="p">(),</span>
</span><span class='line'>  <span class="n">new_key</span><span class="p">([</span><span class="nv">Yr</span><span class="p">,</span> <span class="nv">Mo</span><span class="p">,</span> <span class="nv">Dy</span><span class="p">,</span> <span class="nv">Hr</span><span class="p">,</span> <span class="nv">Mn</span><span class="p">,</span> <span class="nv">Sc</span><span class="p">,</span> <span class="nb">node</span><span class="p">(),</span> <span class="nv">Now</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% @spec new_key(list()) &amp;ndash;&gt; key()</span>
</span><span class='line'><span class="c">%% @doc Generate an close-to-unique key that can be used to identify</span>
</span><span class='line'><span class="c">%%      an object in riak using the given list parameter as the stuff</span>
</span><span class='line'><span class="c">%%      to hash.</span>
</span><span class='line'><span class="nf">new_key</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">Hash</span> <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">phash2</span><span class="p">(</span><span class="nv">List</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">base64</span><span class="p">:</span><span class="nf">encode</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nv">Hash</span><span class="p">:</span><span class="mi">32</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hopefully the code in this module is fairly self-explanatory. It&rsquo;s a very simple API to follow which made it very easy to build. So with this in place, let&rsquo;s fire up the application, create a new snippet and see if it lands in the Riak store:</p>

<pre><code>oj@spawn-link  ~/blog/csd $ make webstart

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::22:54:55 ===
         application: csd_web
          started_at: nonode@nohost

1&gt; Snippet = csd_snippet:to_snippet(
1&gt; "Super composition!",
1&gt; "(.^) = (.) . (.)",
1&gt; "(.^) = fmap `fmap` fmap").
{snippet,[{title,"Super composition!"},
          {left,"(.^) = (.) . (.)"},
          {right,"(.^) = fmap `fmap` fmap"}]}
2&gt; SavedSnippet = csd_core_server:save_snippet(Snippet).

PROGRESS REPORT==== 4-Apr-2011::22:57:13 ===
          supervisor: {local,inet_gethost_native_sup}
             started: [{pid,&lt;0.103.0&gt;},{mfa,{inet_gethost_native,init,[[]]}}]

=PROGRESS REPORT==== 4-Apr-2011::22:57:13 ===
          supervisor: {local,kernel_safe_sup}
             started: [{pid,&lt;0.102.0&gt;},
                       {name,inet_gethost_native_sup},
                       {mfargs,{inet_gethost_native,start_link,[]}},
                       {restart_type,temporary},
                       {shutdown,1000},
                       {child_type,worker}]
{snippet,[{key,&lt;&lt;"B41kUQ=="&gt;&gt;},
          {title,"Super composition!"},
          {left,"(.^) = (.) . (.)"},
          {right,"(.^) = fmap `fmap` fmap"}]}
</code></pre>

<p>As you can see from the above script dump, a new <code>key</code> was generated for us and stored alongside the snippet (it&rsquo;s highlighted in bold). Verifying that the data has persisted is simple. We can hit any of the Riak nodes via its web interface. Let&rsquo;s take a look at **<a href="http://localhost:8091/riak/snippet/B41kUQ==**">http://localhost:8091/riak/snippet/B41kUQ==**</a> (your URL will have a different key):</p>

<p><img src="http://buffered.io/uploads/2010/10/localhost-verify-write.png" /></p>

<p>Great stuff! For more detail, let&rsquo;s see what cURL has to say:</p>

<pre><code>oj@spawn-link ~/blog/csd/ $ curl http://localhost:8091/riak/snippet/B41kUQ== -v
* About to connect() to localhost port 8091 (#0)
*   Trying ::1... Connection refused
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8091 (#0)
&gt; GET /riak/snippet/B41kUQ== HTTP/1.1
&gt; User-Agent: curl/7.21.0 (x86_64-pc-linux-gnu) libcurl/7.21.0 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18
&gt; Host: localhost:8091
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; X-Riak-Vclock: a85hYGBgzGDKBVIsjOy7jmcwJTLmsTJ8tuc7zpcFAA==
&lt; Vary: Accept-Encoding
&lt; Server: MochiWeb/1.1 WebMachine/1.7.3 (participate in the frantic)
&lt; Link: &lt;/riak/snippet&gt;; rel="up"
&lt; Last-Modified: Mon, 04 Apr 2011 13:13:23 GMT
&lt; ETag: "6fw7c5v4IPAsf4B5hMHybc"
&lt; Date: Mon, 04 Apr 2011 13:13:36 GMT
&lt; Content-Type: application/json
&lt; Content-Length: 107
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
{"key":"B41kUQ==","title":"Super composition!","left":"(.^) = (.) . (.)","right":"(.^) = fmap `fmap` fmap"}
</code></pre>

<p>As you can see, it has not only serialised to JSON properly, but the MIME type has been set correctly as well.</p>

<p>This is all well and good, but we need our code to be able to read from Riak as well. That&rsquo;s up next.</p>

<h4>Reading Data from Riak</h4>

<p>We&rsquo;ve already covered off what happens at the bottom level when reading data from Riak (see the above code snippet for more info). To enable this functionality at the top level, we simply need to create a <code>gen_server</code> call, handle it appropriately and expose a function in the <code>csd_snippet</code> module. Let&rsquo;s start at the top level:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ndash; apps/csd_core/src/csd_core_server.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% OTP API function to get a snippet based on the key</span>
</span><span class='line'><span class="nf">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="nf">call</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% handle the call and call the functionality from csd_snippet</span>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">RiakPid</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">connect</span><span class="p">(</span><span class="nv">ConnInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code is a bit of a no-brainer. It&rsquo;s very similar to the writing code, but just a bit simpler. Let&rsquo;s see what the <code>csd_snippet:fetch()</code> function looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="o">?</span><span class="nv">BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SnippetJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="n">from_json_internal</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code just pulls a Riak object out of the back-end, extracts is value and deserialises it from JSON to our Erlang <code>proplist</code>. Very simple stuff.</p>

<p>We should be able to build this and, via the Erlang console, verify that it functions:</p>

<pre><code>3&gt; Reloading csd_core_server ... ok.
3&gt; csd_core_server:get_snippet(&lt;&lt;"B41kUQ=="&gt;&gt;).
{snippet,[{key,&lt;&lt;"B41kUQ=="&gt;&gt;},
          {title,"Super composition!"},
          {left,"(.^) = (.) . (.)"},
          {right,"(.^) = fmap `fmap` fmap"}]}
</code></pre>

<p>Works like a charm. Now, for the icing on the cake, let&rsquo;s get this rendering in a very simple template in our browser.</p>

<h3>End to End</h3>

<p>In order to gain access to our data in Riak from the web we need to create a new resource. This resource will respond to any URI of the form <code>/snippet/&lt;key&gt;</code>. We shall call this resource <code>csd_web_snippet_resource</code> and we&rsquo;ll be putting this in our web application. It looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;a href=&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#x74;&amp;#111;&amp;#58;&amp;#x6f;&amp;#x6a;&amp;#64;&amp;#x62;&amp;#117;&amp;#x66;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#101;&amp;#100;&amp;#x2e;&amp;#x69;&amp;#111;&quot;&gt;&amp;#111;&amp;#106;&amp;#64;&amp;#x62;&amp;#117;&amp;#x66;&amp;#102;&amp;#101;&amp;#x72;&amp;#101;&amp;#x64;&amp;#46;&amp;#x69;&amp;#x6f;&lt;/a&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2010 OJ Reeves</span>
</span><span class='line'><span class="c">%% @doc Webmachine resource that handles snippet-related actions&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">csd_web_snippet_resource</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nv">OJ</span> <span class="nv">Reeves</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x6f;&amp;#106;&amp;#64;&amp;#x62;&amp;#x75;&amp;#102;&amp;#x66;&amp;#x65;&amp;#x72;&amp;#101;&amp;#x64;&amp;#46;&amp;#105;&amp;#111;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x6a</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">98</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x75</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x66</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x72</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x69</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">111</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_html</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">include_lib</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">webmachine</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">webmachine</span><span class="p">.</span><span class="n">hrl</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nv">PathInfo</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">path_info</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">}</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">find</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">PathInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_core_server</span><span class="p">:</span><span class="nf">get_snippet</span><span class="p">(</span><span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">snippet_dtl</span><span class="p">:</span><span class="nf">render</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see, this code calls through to the <code>csd_core_server</code> to extract the data from the back-end. The value that is used as a key for the snippet is one that is pulled from the URI via Webmachine&rsquo;s <code>wrq:path_info()</code> function. This function extracts values from the URI based on the rules in <code>dispatch.conf</code> and provides a <a href="http://www.erlang.org/doc/man/dict.html" title="Erlang dict">dict</a> which can be used to lookup the values.</p>

<p>The code also uses a new ErlyDTL template called <code>snippet</code>. We&rsquo;d best add that to the <code>templates</code> folder:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/templates/snippet.dtl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- TODO : get the templating engine to stop ripping out the inline template code --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>h1<span class="ni">&amp;gt;</span>Snippet View<span class="ni">&amp;lt;</span>/h1<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>h2<span class="ni">&amp;gt;</span>{{ title  }}<span class="ni">&amp;lt;</span>/h2<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>Left: {{ left  }}<span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>p<span class="ni">&amp;gt;</span>Right: {{ right  }}<span class="ni">&amp;lt;</span>/p<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, we just need to adjust <code>dispatch.conf</code> to include the new route handler so that our code gets called:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>apps/csd_web/priv/dispatch.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'><span class="p">{[</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">snippet</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note how <code>key</code> is specified alongside <code>"snippet"</code>. This means that the path following <code>snippet/</code> in the URI will be associated with the <code>key</code> atom in the <code>dict</code> generated by <code>wrq:path_info()</code>.</p>

<p>We&rsquo;re ready to rock. Rebuild, then hit the right URL, **<a href="http://localhost/snippet/B41kUQ==**">http://localhost/snippet/B41kUQ==**</a> (again, your key will be different), and you should get the following:</p>

<p><img src="http://buffered.io/uploads/2010/10/webmachine-to-riak.png" /></p>

<h2>Wrapping up</h2>

<p>Thanks for sticking with me! As you can see there is a little bit of ground-work required if you&rsquo;re interested in producing some form of structure that you can reuse all over your application, but the effort is definitely worth it. Now we have something in place which we can use to store arbitrarily complex <code>proplists</code> into Riak in JSON format, we have the ability to talk to Riak (read and write), and we have a proper application structure in place which we can build on.</p>

<p>Please note that the mechanism implemented in this post is quite simple and doesn&rsquo;t cover all cases that will be required before the application is complete. In future posts, this implementation will change to support more of those cases, such as dealing with concurrent updates, handling versions, etc.</p>

<p>Many thanks to those people who took the time out of their busy schedules to review my post before I shared it with the world. Those people shall remain nameless to protect them from any mistakes made in this post (which are solely my own).</p>

<p>As always, comments and feedback is welcomed and greatly appreciated. As are suggestions on improvements, pitfalls and blatant mistakes :)</p>

<p><strong>Note:</strong> The code for Part 3 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part3-20110405" title="Source code for Part 3">Github</a>.</p>

<p>Other parts in this series: <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-2/" title="Webmachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-4/" title="Webmachine, ErlyDTL and Riak - Part 4">Part 4</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-5/" title="Webmachine, ErlyDTL and Riak - Part 5">Part 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 2]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/"/>
    <updated>2010-09-12T22:15:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/09/riak-logo.png" alt="Riak Logo" style="float:left;padding-right:5px;padding-bottom:5px;"/>In <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> of the series we covered the basics of getting the development environment up and running. We also looked at how to get a really simple ErlyDTL template rendering. If you haven&rsquo;t yet gone through Part 1, I suggest you do that now. If you have, read on!</p>

<p>There are a few reasons this series is targeting this technology stack. One of them is <strong>uptime</strong>. We&rsquo;re aiming to build a site that stays up as much as possible. Given that, one of the things that I missed in the previous post was setting up a <a href="http://en.wikipedia.org/wiki/Load_balancing_(computing)" title="Load balancing">load balancer</a>. Hence this post will attempt to fill that gap.</p>

<!--more-->


<p>Any serious web-based application will have load-balancing in play somewhere. While not essential during development, it&rsquo;s handy to have a similar set up in the hope that it exposes you to some potential issues you might face when the application reaches production.</p>

<p>There are many high-quality load-balancing solutions out there to choose from. For this series, we shall be using <a href="http://haproxy.1wt.eu/" title="HAProxy">HAProxy</a>, which is a common choice amongst developers building scalable web applications. The rest of this post will cover how to set up HAProxy, verifying that the configuration is correct and confirming that it behaves appropriately when nodes in our cluster go down.</p>

<p>Please note the goal is to demonstrate how HAProxy <em>can</em> be configured. When deploying to your production environments please make sure the configuration matches your needs.</p>

<h3>HAProxy installation</h3>

<p>Let&rsquo;s start by pulling down the latest stable version of HAProxy&rsquo;s source, extracting it and building it. Here&rsquo;s a sample log of what you should expect:</p>

<pre><code>oj@nix ~/blog $ wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.20.tar.gz

  ... snip ...

oj@nix ~/blog $ tar -xzf haproxy-1.4.20.tar.gz 

  ... snip ...
</code></pre>

<p>At this point we&rsquo;ve got the source and we&rsquo;re ready to make. HAProxy requires a parameter in order to build, and this parameter varies depending on your target system:</p>

<pre><code>oj@nix ~/blog $ cd haproxy-1.4.20
oj@nix ~/blog/haproxy-1.4.20 $ make

Due to too many reports of suboptimized setups, building without
specifying the target is no longer supported. Please specify the
target OS in the TARGET variable, in the following form:

   make TARGET=xxx

Please choose the target among the following supported list :

   linux26, linux24, linux24e, linux22, solaris
   freebsd, openbsd, cygwin, custom, generic

Use "generic" if you don't want any optimization, "custom" if you
want to precisely tweak every option, or choose the target which
matches your OS the most in order to gain the maximum performance
out of it. Please check the Makefile in case of doubts.
make: *** [all] Error 1
</code></pre>

<p>According to <a href="http://en.wikipedia.org/wiki/Uname" title="uname">uname</a>, I&rsquo;m running Linux Kernel 2.6:</p>

<pre><code>oj@nix ~/blog/haproxy-1.4.20 $ uname -r
2.6.31-21-generic
</code></pre>

<p>As a result, I&rsquo;ll be passing in <strong>linux26</strong>. Make sure you specify the correct option depending on which system you are running. We&rsquo;ll be building it <em>and</em> installing it so that it can be called from anywhere:</p>

<pre><code>oj@nix ~/blog/haproxy-1.4.20 $ make TARGET=linux26

    ... snip ...

oj@nix ~/blog/haproxy-1.4.20 $ sudo make install

   ... snip ...
</code></pre>

<p>Simple! We now need to create a configuration for HAProxy which we can use during development. Not surprisingly, HAProxy can be run as a daemon, but it can also be invoked from the command line with a configuration passed as a parameter. For our development, we&rsquo;ll be executing from the command line as this will give us feedback/output on what&rsquo;s going on.</p>

<p><strong>Note:</strong> If you&rsquo;re using Mac OSX, you can easily use brew to install haproxy with the command <code>brew install haproxy</code></p>

<p>Let&rsquo;s create a file called <code>dev.haproxy.conf</code> inside our application directory so that it can be included in our source:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dev.haproxy.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;start with the global settings which will&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;apply to all sections in the configuration.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;global
</span><span class='line'>  <span class="c"># specify the maximum connections across the board</span>
</span><span class='line'>  maxconn 2048
</span><span class='line'>  <span class="c"># enable debug output</span>
</span><span class='line'>  debug&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;now <span class="nb">set </span>the default settings <span class="k">for </span>each sub-section&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;defaults
</span><span class='line'>  <span class="c"># stick with http traffic</span>
</span><span class='line'>  mode http
</span><span class='line'>  <span class="c"># set the number of times HAProxy should attempt to</span>
</span><span class='line'>  <span class="c"># connect to the target</span>
</span><span class='line'>  retries 3
</span><span class='line'>  <span class="c"># specify the number of connections per front and</span>
</span><span class='line'>  <span class="c"># back end</span>
</span><span class='line'>  maxconn 1024
</span><span class='line'>  <span class="c"># specify some timeouts (all in milliseconds)</span>
</span><span class='line'>  timeout connect 5000&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;##### Webmachine Configuration&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;here is the first of the front-end sections.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;this is where we specify our webmachine instances.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;in our <span class="k">case </span>we start with just one instance, but&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;we can add more later&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;frontend webfarm
</span><span class='line'>  <span class="c"># listen on port 4000 across all network interfaces</span>
</span><span class='line'>  <span class="nb">bind</span> *:4000
</span><span class='line'>  <span class="c"># by default, point at our backend configuration</span>
</span><span class='line'>  <span class="c"># which lists our webmachine instances (this is</span>
</span><span class='line'>  <span class="c"># configured below in another section)</span>
</span><span class='line'>  default_backend webmachines
</span><span class='line'>  <span class="c"># indicate keep-alive</span>
</span><span class='line'>  option http-server-close
</span><span class='line'>  <span class="c"># timeouts</span>
</span><span class='line'>  timeout client 5000&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;this section indicates how the connectivity to&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;all the instances of webmachine should work.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Again, <span class="k">for </span>dev there is only one instance, but&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;in production there would be more.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;backend webmachines
</span><span class='line'>  <span class="c"># we&amp;rsquo;ll specify a round-robin configuration in</span>
</span><span class='line'>  <span class="c"># case we add nodes down the track.</span>
</span><span class='line'>  balance roundrobin
</span><span class='line'>  <span class="c"># enable the &amp;ldquo;X-Forware-For&amp;rdquo; header so that</span>
</span><span class='line'>  <span class="c"># we can see the client&amp;rsquo;s IP in Webmachine,</span>
</span><span class='line'>  <span class="c"># not just the proxy&amp;rsquo;s address</span>
</span><span class='line'>  option forwardfor
</span><span class='line'>  <span class="c"># later down the track we&amp;rsquo;ll be making the use</span>
</span><span class='line'>  <span class="c"># of cookies for various reasons. So we&amp;rsquo;ll</span>
</span><span class='line'>  <span class="c"># enable support for this while we&amp;rsquo;re here.</span>
</span><span class='line'>  cookie SERVERID insert nocache indirect
</span><span class='line'>  <span class="c"># list the servers who are to be balanced</span>
</span><span class='line'>  <span class="c"># (just the one in the case of dev)</span>
</span><span class='line'>  server Webmachine1 127.0.0.1:8000
</span><span class='line'>  <span class="c"># timeouts</span>
</span><span class='line'>  timeout server 1200000
</span><span class='line'>  timeout connect 3000&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;##### Riak Configuration&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;We are yet to touch Riak so far, but given that&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;this post is going to cover the basics of&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;connectivity, we&amp;rsquo;ll cover off the configuration&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;now so we don&amp;rsquo;t have to <span class="k">do </span>it later.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;frontend dbcluster
</span><span class='line'>  <span class="c"># We&amp;rsquo;ll be using protocol buffers to talk to</span>
</span><span class='line'>  <span class="c"># Riak, so we will change from the default mode</span>
</span><span class='line'>  <span class="c"># and use tcp instead</span>
</span><span class='line'>  mode tcp
</span><span class='line'>  <span class="c"># we&amp;rsquo;re only interested in allowing connections</span>
</span><span class='line'>  <span class="c"># from internal sources (so that we don&amp;rsquo;t expose</span>
</span><span class='line'>  <span class="c"># ourselves to the web. so we shall only listen</span>
</span><span class='line'>  <span class="c"># on an internal interface on port 8080</span>
</span><span class='line'>  <span class="nb">bind </span>127.0.0.1:8080
</span><span class='line'>  <span class="c"># Default to the riak cluster configuration</span>
</span><span class='line'>  default_backend riaks
</span><span class='line'>  <span class="c"># timeouts</span>
</span><span class='line'>  timeout client 1200000&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Here is the magic bit which load balances across&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;our four instances of riak which are clustered&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;together&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;backend riaks
</span><span class='line'>  <span class="c"># again, make sure we specify tcp instead of</span>
</span><span class='line'>  <span class="c"># the default http mode</span>
</span><span class='line'>  mode tcp
</span><span class='line'>  <span class="c"># use a standard round robin approach for load</span>
</span><span class='line'>  <span class="c"># balancing</span>
</span><span class='line'>  balance roundrobin
</span><span class='line'>  <span class="c"># timeouts</span>
</span><span class='line'>  timeout server 1200000
</span><span class='line'>  timeout connect 3000
</span><span class='line'>  <span class="c"># list the four servers as optional targets</span>
</span><span class='line'>  <span class="c"># for load balancing &amp;ndash; these are what we set</span>
</span><span class='line'>  <span class="c"># up during Part 1. Add health-checking as</span>
</span><span class='line'>  <span class="c"># well so that when nodes go down, HAProxy</span>
</span><span class='line'>  <span class="c"># can remove them from the cluster</span>
</span><span class='line'>  server Riak1 127.0.0.1:8081 check
</span><span class='line'>  server Riak2 127.0.0.1:8082 check
</span><span class='line'>  server Riak3 127.0.0.1:8083 check
</span><span class='line'>  server Riak4 127.0.0.1:8084 check
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the configuration above the <code>backend riaks</code> section has four server nodes. Each one of them has the <code>check</code> option specified. This enables health-checking on the same address and port that the server instance is bound to. If you decided that you didn&rsquo;t want to do health-checking in this manner you easily enable health-checking over HTTP, as Riak has a built-in URI which can be used to validate the state of the node. Change the <code>backend riaks</code> section in the configuration to look like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &amp;hellip; snip &amp;hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># enable HTTP health checking using the GET method</span>
</span><span class='line'>  <span class="c"># on the URI &amp;ldquo;/ping&amp;rdquo;. This URI is part of Riak and</span>
</span><span class='line'>  <span class="c"># can be used to determine if the node is up.</span>
</span><span class='line'>  <span class="c"># We specify that we want to use the GET action, and</span>
</span><span class='line'>  <span class="c"># use the URI &amp;ldquo;/ping&amp;rdquo; &amp;ndash; this is the RESTful health</span>
</span><span class='line'>  <span class="c"># check URI that comes as part of Riak.</span>
</span><span class='line'>  option httpchk GET /ping
</span><span class='line'>  <span class="c"># list the four servers as optional targets</span>
</span><span class='line'>  <span class="c"># for load balancing &amp;ndash; these are what we set</span>
</span><span class='line'>  <span class="c"># up during Part 1. Add health-checking as</span>
</span><span class='line'>  <span class="c"># well so that when nodes go down, HAProxy</span>
</span><span class='line'>  <span class="c"># can remove them from the cluster.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># change the health-check address of the node to 127.0.0.0:8091</span>
</span><span class='line'>  <span class="c"># which is the REST interface for the first Riak node</span>
</span><span class='line'>  server Riak1 127.0.0.1:8081 check addr 127.0.0.1 port 8091&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># change the health-check address of the node to 127.0.0.0:8092</span>
</span><span class='line'>  <span class="c"># which is the REST interface for the second Riak node</span>
</span><span class='line'>  server Riak2 127.0.0.1:8082 check addr 127.0.0.1 port 8092&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># change the health-check address of the node to 127.0.0.0:8093</span>
</span><span class='line'>  <span class="c"># which is the REST interface for the third Riak node</span>
</span><span class='line'>  server Riak3 127.0.0.1:8083 check addr 127.0.0.1 port 8093&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># change the health-check address of the node to 127.0.0.0:8094</span>
</span><span class='line'>  <span class="c"># which is the REST interface for the third Riak node</span>
</span><span class='line'>  server Riak4 127.0.0.1:8084 check addr 127.0.0.1 port 8094
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To make sure this is functioning correctly, we need to open two consoles and change our working directory to our <code>csd</code> application (for those who have forgotten, <code>csd</code> is the application we&rsquo;re building &ndash; it was mentioned in <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>). In console 1:</p>

<pre><code>oj@nix ~/blog/csd $ sudo haproxy -f dev.haproxy.conf -d
Available polling systems :
     sepoll : pref=400,  test result OK
      epoll : pref=300,  test result OK
       poll : pref=200,  test result OK
     select : pref=150,  test result OK
Total: 4 (4 usable), will use sepoll.
Using sepoll() as the polling mechanism.
</code></pre>

<p>This indicates that HAProxy is up and running and waiting for connections. Let&rsquo;s get Webmachine fired up in console 2:</p>

<pre><code>oj@nix ~/blog/csd $ ./start.sh

    ... snip ...

=PROGRESS REPORT==== 11-Jul-2012::23:07:27 ===
         application: csd
          started_at: nonode@nohost
</code></pre>

<p>Now Webmachine is fired up with our application running. We should be able to hit our page, this time at <a href="http://localhost/" title="localhost">localhost</a>, and see exactly what we saw at the end of <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>.</p>

<p><img src="http://buffered.io/uploads/2010/09/haproxy-validation.png" /></p>

<h3>Verification of HAProxy configuration</h3>

<p>On the surface it appears that we haven&rsquo;t broken anything. We also need to make sure that any communication with Riak that we have down the track is also functioning. So let&rsquo;s validate that now.</p>

<p>First, we have to make sure that Riak is running. If you have followed <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> already and your Riak cluster is running then you&rsquo;re good to go. If not, please read <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> for information on how to install Riak and configure it to run as a cluster of 4 nodes.</p>

<p>Next, let&rsquo;s create 4 new connections and use the <a href="https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L181" title="riakc_pb_socket:get_server_info/1">get_server_info/1</a> function to find out which node we are connected to. To do this, we&rsquo;ll need to use an Erlang console which has all the Riak dependencies ready to go. It just so happens that when we fired up our Webmachine instance, we got an Erlang console for free. Simply hit the <code>enter</code> key and you&rsquo;ll be given a prompt. Notice that when we connect to Riak using the <a href="https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L97" title="riakc_pb_socket:start_link/2">start_link/2</a> function, we are passing in the IP address and port of the load-balanced cluster instead of one of the running Riak nodes:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">113</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C1</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x64;&amp;#x65;&amp;#118;&amp;#50;&amp;#64;&amp;#49;&amp;#x32;&amp;#55;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#48;&amp;#46;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x32</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">55</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">116</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C2</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#100;&amp;#101;&amp;#x76;&amp;#x33;&amp;#x40;&amp;#x31;&amp;#50;&amp;#55;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#x30;&amp;#46;&amp;#49;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">118</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">51</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x32</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">5</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">119</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C3</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x64;&amp;#101;&amp;#x76;&amp;#x34;&amp;#x40;&amp;#x31;&amp;#50;&amp;#x37;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#49;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x34</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">7</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C4</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">122</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">8</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C4</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#58;&amp;#x64;&amp;#x65;&amp;#118;&amp;#49;&amp;#x40;&amp;#x31;&amp;#x32;&amp;#55;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#x30;&amp;#46;&amp;#49;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">118</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So we can see that the load balancer has allocated four different connections, each to a different node in the cluster. This is a good sign. So let&rsquo;s kill off one of the nodes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@nix ~/blog/riak/dev $ dev3/bin/riak stop
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In a very short period of time, you should see output in the HAProxy console which looks something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARNING] 192/231028 (33025) : Server riaks/Riak3 is DOWN, reason: Layer4 connection
</span><span class='line'>problem, info: &ldquo;Connection refused&rdquo;, check duration: 0ms. 3 active and 0 backup
</span><span class='line'>servers left. 0 sessions active, 0 requeued, 0 remaining in queue.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The load balancer noticed that the node has died. Let&rsquo;s make sure it no longer attempts to allocate connections to <code>dev3</code>. Note that we call <a href="http://www.erlang.org/documentation/doc-5.2/doc/getting_started/getting_started.html" title="Getting started">f()</a> in our console before running the same script again, as this forces the shell to forget about any existing variable bindings:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">9</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">().</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">10</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">128</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">11</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C1</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#x64;&amp;#101;&amp;#x76;&amp;#52;&amp;#x40;&amp;#x31;&amp;#x32;&amp;#55;&amp;#x2e;&amp;#x30;&amp;#46;&amp;#48;&amp;#46;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">52</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x32</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">12</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">131</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">13</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C2</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#100;&amp;#101;&amp;#x76;&amp;#49;&amp;#64;&amp;#49;&amp;#50;&amp;#55;&amp;#46;&amp;#x30;&amp;#x2e;&amp;#48;&amp;#46;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">118</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">55</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">14</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">134</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">15</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C3</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#100;&amp;#101;&amp;#x76;&amp;#x32;&amp;#64;&amp;#49;&amp;#50;&amp;#55;&amp;#x2e;&amp;#48;&amp;#46;&amp;#48;&amp;#46;&amp;#49;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">55</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">16</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C4</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">137</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">17</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C4</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x64;&amp;#101;&amp;#118;&amp;#52;&amp;#x40;&amp;#49;&amp;#50;&amp;#x37;&amp;#x2e;&amp;#48;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">52</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As we hoped, <code>dev3</code> is nowhere to be seen. Let&rsquo;s fire it up again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@nix ~/blog/riak/dev $ dev3/bin/riak start</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Note:</strong> It isn&rsquo;t necessary to tell the node to rejoin the cluster. This happens automatically. Thanks to Siculars (see comment thread) for pointing that out.</p>

<p>HAProxy&rsquo;s console will show you that it has re-established a connection to <code>dev3</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[WARNING] 192/231536 (33025) : Server riaks/Riak3 is UP, reason: Layer4 check passed,
</span><span class='line'>check duration: 0 ms. 4 active and 0 backup servers online. 0 sessions requeued, 0 total in queue.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As a final test, let&rsquo;s make sure we see that node get connections when we attempt to connect:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">18</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">().</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">19</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">141</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">20</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C1</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x64;&amp;#x65;&amp;#x76;&amp;#49;&amp;#64;&amp;#49;&amp;#x32;&amp;#x37;&amp;#x2e;&amp;#48;&amp;#x2e;&amp;#48;&amp;#x2e;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">21</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">144</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">22</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C2</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#100;&amp;#x65;&amp;#x76;&amp;#x32;&amp;#x40;&amp;#x31;&amp;#50;&amp;#x37;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#x30;&amp;#46;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">50</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x32</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">55</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">23</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">147</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">24</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C3</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#x64;&amp;#101;&amp;#118;&amp;#x33;&amp;#x40;&amp;#49;&amp;#50;&amp;#55;&amp;#46;&amp;#x30;&amp;#x2e;&amp;#48;&amp;#x2e;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="nl">#x64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x65</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">118</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x33</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">64</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x32</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">48</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">49</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">25</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C4</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">start_link</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">127</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">.</span><span class="mi">150</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">26</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nf">get_server_info</span><span class="p">(</span><span class="nv">C4</span><span class="p">).</span>                   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#100;&amp;#101;&amp;#x76;&amp;#52;&amp;#x40;&amp;#49;&amp;#x32;&amp;#x37;&amp;#x2e;&amp;#48;&amp;#46;&amp;#48;&amp;#46;&amp;#x31;&quot;</span><span class="o">&gt;</span><span class="err">&amp;#</span><span class="mi">100</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">101</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x76</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x34</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x40</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x32</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x37</span><span class="p">;</span><span class="err">&amp;#</span><span class="mi">46</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x30</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x2e</span><span class="p">;</span><span class="err">&amp;</span><span class="nl">#x31</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">},</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;1.1.2&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}]}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Wrapping up</h3>

<p>Excellent. Now that we&rsquo;ve got our load-balancer set up in development, we&rsquo;re ready to dive into connecting to Riak from our <code>csd</code> application. That will be the topic for the next post in this series.</p>

<p>As always, comments and feedback are welcome and greatly appreciated. Suggestions on improvements and pointers on mistakes would be awesome. To anyone out there who has put HAProxy into production, we would love to hear your comments on your configuration!</p>

<p><strong>Note:</strong> The code for Part 2 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part2-20110403" title="Source Code for Part 2">Github</a>.</p>

<p>Other parts in this series: <a href="/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-3/" title="Webmachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-4/" title="Webmachine, ErlyDTL and Riak - Part 4">Part 4</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-5/" title="Webmachine, ErlyDTL and Riak - Part 5">Part 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 1]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/"/>
    <updated>2010-09-01T23:29:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/09/riak-logo.png" alt="Riak Logo" style="float:left;padding-right:5px;padding-bottom:5px;"/>It has been a long time coming, but the first post is finally here! This is the first in a series of post, as <a href="/posts/the-future-is-erlang/" title="The Future is Erlang">promised a while ago</a>, covering off web development using <a href="http://erlang.org/" title="Erlang">Erlang</a>. This post is the ubiquitous &ldquo;get up and running&rdquo; post, which aims to get your environment set up so that you can dive in to development. The next post will detail how to handle a basic end-to-end web request.</p>

<p><img src="http://buffered.io/uploads/2010/09/Erlang_logo.png" width="150" style="float:right;margin-left:5px;margin-bottom:5px;"/>First up, a few things we need to be aware of before we begin:</p>

<ol>
<li>The information in this post has only been verified on Linux (<a href="http://linuxmint.com/" title="Linux Mint">Mint</a> to be exact). It <em>should</em> work just fine on Mac OSX. I&rsquo;m almost certain that it <em>won&rsquo;t</em> work on a Windows machine. So if you&rsquo;re a Windows developer, you&rsquo;ll have to wait for another post down the track which covers off how to get your environment ready to rock.</li>
<li>We&rsquo;ll be downloading, building and installing <a href="http://erlang.org/" title="Erlang">Erlang</a>, <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a>, <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> and <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a>.</li>
<li><a href="http://www.basho.com/developers.html#Rebar" title="Rebar">Rebar</a> is the tool we&rsquo;ll be using to handle builds, but I won&rsquo;t be covering it in any depth.</li>
<li>You will need the latest version of <a href="http://git-scm.com/" title="Git">Git</a> so make sure it&rsquo;s downloaded and installed before you follow this article.</li>
<li>We&rsquo;ll be doing <em>some</em> interaction with Riak via <a href="http://curl.haxx.se/" title="cURL and libcurl">curl</a>, so make sure you have it downloaded and installed as well.</li>
<li>This is intended to be a step-by-step guide targeted at those who are very new to web development in Erlang. This may not be the most ideal set up, nor the best way of doing certain things. I am hoping that those people who are more experienced than I will be able to provide feedback and guidance in areas where I am lacking.</li>
<li>Over the course of this series I&rsquo;ll be attempting to build an Erlang version of the <a href="http://bitbucket.org/OJ/codesmackdown" title="Code Smackdown">Code Smackdown</a> site that I&rsquo;ve been working on here and there with a <a href="http://secretgeek.net/" title="secretGeek">mate of mine</a>. You&rsquo;ll see that the sample application we&rsquo;re working on is called &ldquo;csd&rdquo; for obvious reasons.</li>
</ol>


<p>OK, let&rsquo;s get into it. First up, Erlang.</p>

<!--more-->


<h3>Installing Erlang R15B01</h3>

<p>Download and installation is fairly simple. Right now we&rsquo;re not worried about enabling all of the features of Erlang, such as interfacing with Java and providing support for GTK. So the boilerplate functionality is enough. Here are the steps to follow:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog $ wget &lt;a href="http://erlang.org/download/otp_src_R15B01.tar.gz">http://erlang.org/download/otp_src_R15B01.tar.gz&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog $ tar -xzf otp_src_R15B01.tar.gz
</span><span class='line'>oj@air ~/blog $ cd otp_src_R15B01/
</span><span class='line'>oj@air ~/blog/otp_src_R15B01 $ ./configure&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog/otp_src_R15B01 $ make&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog/otp_src_R15B01 $ sudo make install&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip; snip &hellip;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Done! Let&rsquo;s confirm that it has been set up correctly:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog $ erl
</span><span class='line'>Erlang R15B01 (erts-5.9.1) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Eshell V5.9.1  (abort with ^G)
</span><span class='line'>1> q().
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Excellent. Next let&rsquo;s get Riak going.</p>

<h3>Installing Riak 1.2</h3>

<p>Considering the power of the software you are about to set up, it is absolutely insane how easy it is to get it running. If any of you have tried to get <a href="http://couchdb.apache.org/" title="CouchDB">CouchDB</a> running you&rsquo;ll no doubt have experienced a few quirks and a bit of pain getting it rolling. Not so with Riak. As mentioned at the start of the article, make sure you have a recent version of <a href="http://git-scm.com/" title="Git">Git</a> installed.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog $ git clone git://github.com/basho/riak
</span><span class='line'>Cloning into riak&hellip;
</span><span class='line'>remote: Counting objects: 12989, done.
</span><span class='line'>remote: Compressing objects: 100% (4210/4210), done.
</span><span class='line'>remote: Total 12989 (delta 8494), reused 12871 (delta 8386)
</span><span class='line'>Receiving objects: 100% (12989/12989), 9.82 MiB | 168 KiB/s, done.
</span><span class='line'>Resolving deltas: 100% (8494/8494), done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog $ cd riak
</span><span class='line'>oj@air ~/blog/riak $ make&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>./rebar get-deps
</span><span class='line'>==> rel (get-deps)
</span><span class='line'>==> riak (get-deps)
</span><span class='line'>Pulling cluster_info from {git,&ldquo;git://github.com/basho/cluster_info&rdquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                           {branch,"master"}}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>Cloning into cluster_info&hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>   &hellip; sniped LOTS of stuff &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>==> rel (compile)
</span><span class='line'>==> riak (compile)
</span><span class='line'>Compiled src/etop_txt.erl</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I snipped a lot of the make output for obvious reasons. Let&rsquo;s build a few development nodes of Riak and cluster them together as indicated in the <a href="https://wiki.basho.com/display/RIAK/The+Riak+Fast+Track" title="Riak Fast Track">Riak Fast Track</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog/riak $ make devrel
</span><span class='line'>mkdir -p dev
</span><span class='line'>(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev1 overlay_vars=vars/dev1_vars.config)
</span><span class='line'>==> rel (generate)
</span><span class='line'>mkdir -p dev
</span><span class='line'>(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev2 overlay_vars=vars/dev2_vars.config)
</span><span class='line'>==> rel (generate)
</span><span class='line'>mkdir -p dev
</span><span class='line'>(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev3 overlay_vars=vars/dev3_vars.config)
</span><span class='line'>==> rel (generate)
</span><span class='line'>mkdir -p dev
</span><span class='line'>(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev4 overlay_vars=vars/dev4_vars.config)
</span><span class='line'>==> rel (generate)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog/riak $ cd dev
</span><span class='line'>oj@air ~/blog/riak/dev $ dev1/bin/riak start
</span><span class='line'>oj@air ~/blog/riak/dev $ dev2/bin/riak start
</span><span class='line'>oj@air ~/blog/riak/dev $ dev3/bin/riak start
</span><span class='line'>oj@air ~/blog/riak/dev $ dev4/bin/riak start
</span><span class='line'>oj@air ~/blog/riak/dev $ dev2/bin/riak-admin cluster join dev1
</span><span class='line'>Success: staged join request for &lsquo;&lt;a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x64;&#101;&#x76;&#50;&#x40;&#49;&#50;&#55;&#46;&#x30;&#46;&#48;&#46;&#49;">&#x64;&#x65;&#x76;&#50;&#x40;&#49;&#50;&#x37;&#x2e;&#x30;&#46;&#48;&#46;&#x31;&lt;/a>&rsquo; to dev1
</span><span class='line'>oj@air ~/blog/riak/dev $ dev3/bin/riak-admin cluster join dev1
</span><span class='line'>Success: staged join request for &lsquo;&lt;a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x64;&#x65;&#x76;&#x33;&#x40;&#x31;&#x32;&#55;&#x2e;&#x30;&#x2e;&#x30;&#46;&#49;">&#100;&#101;&#118;&#x33;&#x40;&#x31;&#x32;&#55;&#x2e;&#x30;&#46;&#x30;&#46;&#49;&lt;/a>&rsquo; to dev1
</span><span class='line'>oj@air ~/blog/riak/dev $ dev4/bin/riak-admin cluster join dev1
</span><span class='line'>Success: staged join request for &lsquo;&lt;a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#100;&#101;&#118;&#52;&#x40;&#x31;&#x32;&#55;&#46;&#x30;&#x2e;&#48;&#x2e;&#49;">&#100;&#x65;&#118;&#52;&#64;&#x31;&#50;&#x37;&#x2e;&#48;&#46;&#x30;&#46;&#x31;&lt;/a>&rsquo; to dev1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is where things are a different compared to earlier versions of Riak (&lt;= 1.1.4). Here we have just planned to set up our cluster, we haven&rsquo;t yet actually made any changes. To see the current state of the plan, we can use the new <code>cluster plan</code> command on any of the nodes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog/riak/dev $ dev1/bin/riak-admin cluster plan
</span><span class='line'>=============================== Staged Changes ================================&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>Action         Nodes(s)&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>join           &lsquo;&lt;a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#100;&#x65;&#x76;&#x32;&#x40;&#49;&#50;&#55;&#46;&#48;&#46;&#x30;&#46;&#49;">&#x64;&#x65;&#118;&#x32;&#x40;&#x31;&#x32;&#55;&#x2e;&#48;&#x2e;&#48;&#46;&#x31;&lt;/a>&rsquo;
</span><span class='line'>join           &lsquo;&lt;a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x64;&#101;&#118;&#x33;&#64;&#x31;&#x32;&#x37;&#x2e;&#x30;&#46;&#x30;&#46;&#x31;">&#100;&#x65;&#118;&#51;&#64;&#x31;&#x32;&#55;&#x2e;&#48;&#x2e;&#48;&#x2e;&#49;&lt;/a>&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>join           &lsquo;&lt;a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#100;&#101;&#118;&#x34;&#64;&#49;&#50;&#x37;&#46;&#x30;&#x2e;&#x30;&#46;&#x31;">&#x64;&#x65;&#118;&#x34;&#64;&#x31;&#50;&#55;&#46;&#48;&#46;&#48;&#x2e;&#49;&lt;/a>&rsquo;&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>NOTE: Applying these changes will result in 1 cluster transition&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h6>#&lt;/h6>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                     After cluster transition 1/1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;h6>#&lt;/h6>
</span><span class='line'>
</span><span class='line'>&lt;p>================================= Membership ==================================&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>Status     Ring    Pending    Node&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>valid     100.0%     25.0%    &lsquo;&lt;a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x64;&#x65;&#x76;&#49;&#x40;&#49;&#x32;&#55;&#46;&#48;&#x2e;&#x30;&#x2e;&#49;">&#100;&#101;&#118;&#49;&#64;&#x31;&#x32;&#55;&#46;&#x30;&#x2e;&#x30;&#46;&#x31;&lt;/a>&rsquo;
</span><span class='line'>valid       0.0%     25.0%    &lsquo;&lt;a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#100;&#x65;&#118;&#x32;&#64;&#x31;&#50;&#x37;&#46;&#x30;&#x2e;&#48;&#x2e;&#49;">&#100;&#101;&#x76;&#50;&#x40;&#49;&#50;&#55;&#46;&#x30;&#x2e;&#x30;&#x2e;&#49;&lt;/a>&rsquo;
</span><span class='line'>valid       0.0%     25.0%    &lsquo;&lt;a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x64;&#101;&#118;&#x33;&#64;&#x31;&#50;&#55;&#x2e;&#48;&#46;&#x30;&#x2e;&#x31;">&#100;&#x65;&#x76;&#x33;&#x40;&#49;&#50;&#x37;&#x2e;&#48;&#x2e;&#x30;&#x2e;&#49;&lt;/a>&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>valid       0.0%     25.0%    &lsquo;&lt;a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#100;&#101;&#x76;&#52;&#x40;&#49;&#x32;&#x37;&#x2e;&#48;&#x2e;&#x30;&#x2e;&#49;">&#100;&#x65;&#x76;&#x34;&#64;&#x31;&#x32;&#x37;&#x2e;&#x30;&#x2e;&#48;&#46;&#x31;&lt;/a>&rsquo;&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>Valid:4 / Leaving:0 / Exiting:0 / Joining:0 / Down:0&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Transfers resulting from cluster changes: 48
</span><span class='line'>  16 transfers from &lsquo;&lt;a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x64;&#101;&#x76;&#49;&#x40;&#x31;&#x32;&#55;&#46;&#48;&#x2e;&#x30;&#x2e;&#49;">&#x64;&#101;&#x76;&#49;&#x40;&#x31;&#x32;&#x37;&#x2e;&#x30;&#x2e;&#48;&#x2e;&#49;&lt;/a>&rsquo; to &lsquo;&lt;a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x64;&#101;&#118;&#x34;&#64;&#49;&#50;&#x37;&#x2e;&#x30;&#46;&#x30;&#46;&#49;">&#x64;&#x65;&#118;&#52;&#64;&#x31;&#x32;&#55;&#46;&#48;&#46;&#48;&#46;&#49;&lt;/a>&rsquo;
</span><span class='line'>  16 transfers from &lsquo;&lt;a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#x64;&#x65;&#118;&#49;&#64;&#x31;&#x32;&#x37;&#46;&#x30;&#46;&#x30;&#x2e;&#x31;">&#100;&#101;&#118;&#49;&#x40;&#49;&#50;&#x37;&#x2e;&#x30;&#46;&#x30;&#46;&#x31;&lt;/a>&rsquo; to &lsquo;&lt;a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#100;&#x65;&#118;&#x33;&#x40;&#x31;&#50;&#55;&#x2e;&#x30;&#46;&#x30;&#x2e;&#x31;">&#100;&#101;&#x76;&#x33;&#x40;&#49;&#50;&#55;&#46;&#x30;&#x2e;&#x30;&#46;&#49;&lt;/a>&rsquo;
</span><span class='line'>  16 transfers from &lsquo;&lt;a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x64;&#101;&#x76;&#49;&#x40;&#49;&#50;&#x37;&#x2e;&#x30;&#x2e;&#x30;&#x2e;&#x31;">&#100;&#x65;&#x76;&#49;&#64;&#49;&#50;&#x37;&#46;&#48;&#x2e;&#x30;&#x2e;&#49;&lt;/a>&rsquo; to &lsquo;&lt;a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#100;&#101;&#118;&#x32;&#64;&#x31;&#50;&#x37;&#46;&#x30;&#46;&#48;&#46;&#49;">&#100;&#101;&#118;&#x32;&#64;&#49;&#50;&#55;&#x2e;&#x30;&#46;&#x30;&#46;&#x31;&lt;/a>&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Isn&rsquo;t that awesome! We can plan our cluster set up before actually commiting changes. This gets a big thumbs up from me. In order to commit changes, we use <code>cluster commit</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog/riak/dev $ dev1/bin/riak-admin cluster commit
</span><span class='line'>Cluster changes committed
</span><span class='line'>oj@air ~/blog/riak/dev $ dev2/bin/riak-admin member-status
</span><span class='line'>================================= Membership ==================================&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>Status     Ring    Pending    Node&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>valid      25.0%      &mdash;      &lsquo;&lt;a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x64;&#101;&#x76;&#x31;&#x40;&#x31;&#x32;&#x37;&#x2e;&#x30;&#x2e;&#48;&#46;&#49;">&#100;&#101;&#x76;&#49;&#64;&#49;&#50;&#x37;&#46;&#48;&#x2e;&#x30;&#x2e;&#x31;&lt;/a>&rsquo;
</span><span class='line'>valid      25.0%      &mdash;      &lsquo;&lt;a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x64;&#x65;&#118;&#50;&#64;&#49;&#x32;&#55;&#46;&#48;&#x2e;&#48;&#x2e;&#x31;">&#100;&#x65;&#118;&#50;&#x40;&#49;&#x32;&#x37;&#x2e;&#x30;&#46;&#x30;&#x2e;&#49;&lt;/a>&rsquo;
</span><span class='line'>valid      25.0%      &mdash;      &lsquo;&lt;a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#x64;&#101;&#x76;&#x33;&#64;&#x31;&#50;&#x37;&#46;&#48;&#x2e;&#x30;&#46;&#x31;">&#100;&#101;&#x76;&#x33;&#x40;&#49;&#x32;&#55;&#x2e;&#48;&#x2e;&#x30;&#46;&#49;&lt;/a>&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>valid      25.0%      &mdash;      &lsquo;&lt;a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x64;&#101;&#118;&#52;&#64;&#49;&#50;&#x37;&#46;&#x30;&#x2e;&#48;&#46;&#x31;">&#x64;&#101;&#118;&#x34;&#64;&#49;&#x32;&#x37;&#46;&#x30;&#46;&#x30;&#x2e;&#x31;&lt;/a>&rsquo;&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>Valid:4 / Leaving:0 / Exiting:0 / Joining:0 / Down:0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As we can see from the output, we now have a 4-node Riak cluster up and running. Those four nodes have the following traits:</p>

<table style="border: 1px solid black; width:100%;">
  <thead>
    <tr>
      <th style="border: 1px solid black; padding: 3px;">Name</th>
      <th style="border: 1px solid black; padding: 3px;">Protobuf Port</th>
      <th style="border: 1px solid black; padding: 3px;">HTTP Port</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border: 1px solid black; padding: 3px;">dev1@127.0.0.1</td>
      <td style="border: 1px solid black; padding: 3px;">8081</td>
      <td style="border: 1px solid black; padding: 3px;">8091</td>
    </tr>
    <tr>
      <td style="border: 1px solid black; padding: 3px;">dev2@127.0.0.1</td>
      <td style="border: 1px solid black; padding: 3px;">8082</td>
      <td style="border: 1px solid black; padding: 3px;">8092</td>
    </tr>
    <tr>
      <td style="border: 1px solid black; padding: 3px;">dev3@127.0.0.1</td>
      <td style="border: 1px solid black; padding: 3px;">8083</td>
      <td style="border: 1px solid black; padding: 3px;">8093</td>
    </tr>
    <tr>
      <td style="border: 1px solid black; padding: 3px;">dev4@127.0.0.1</td>
      <td style="border: 1px solid black; padding: 3px;">8084</td>
      <td style="border: 1px solid black; padding: 3px;">8094</td>
    </tr>
  </tbody>
</table>


<p>We can talk to any of these nodes and they will replicate their data to the other nodes. Nifty! Now that we have a Riak cluster running for development, let&rsquo;s get Webmachine ready.</p>

<h3>Installing Webmachine 1.9.1</h3>

<p>Again, the process is very simple:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog $ git clone git://github.com/basho/webmachine
</span><span class='line'>Cloning into webmachine&hellip;
</span><span class='line'>remote: Counting objects: 1512, done.
</span><span class='line'>remote: Compressing objects: 100% (611/611), done.
</span><span class='line'>remote: Total 1512 (delta 957), reused 1409 (delta 869)
</span><span class='line'>Receiving objects: 100% (1512/1512), 1.32 MiB | 225 KiB/s, done.
</span><span class='line'>Resolving deltas: 100% (957/957), done.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog $ cd webmachine
</span><span class='line'>oj@air ~/blog/webmachine $ make
</span><span class='line'>==> webmachine (get-deps)
</span><span class='line'>Pulling mochiweb from {git,&ldquo;git://github.com/basho/mochiweb&rdquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                       {tag,"1.5.1-riak-1.0.x-fixes"}}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>Cloning into mochiweb&hellip;
</span><span class='line'>==> mochiweb (get-deps)
</span><span class='line'>==> mochiweb (compile)
</span><span class='line'>Compiled src/mochiweb_sup.erl&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>   &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>==> webmachine (compile)
</span><span class='line'>Compiled src/webmachine_util.erl&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>   &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Compiled src/webmachine_request.erl</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see, Webmachine sits on top of the <a href="http://github.com/mochi/mochiweb" title="Mochiweb">Mochiweb</a> web server.</p>

<p>To create our own application which sits on top of Webmachine, we can utilise the <code>new_webmachine.sh</code> script. So let&rsquo;s do that to create our Code Smackdown (csd) site:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog/webmachine $ scripts/new_webmachine.sh
</span><span class='line'>usage: new_webmachine.sh name [destdir]
</span><span class='line'>oj@air ~/blog/webmachine $ scripts/new_webmachine.sh csd ..
</span><span class='line'>==> priv (create)
</span><span class='line'>Writing /Users/oj/code/tmp/csd/README
</span><span class='line'>Writing /Users/oj/code/tmp/csd/Makefile
</span><span class='line'>Writing /Users/oj/code/tmp/csd/rebar.config
</span><span class='line'>Writing /Users/oj/code/tmp/csd/rebar
</span><span class='line'>Writing /Users/oj/code/tmp/csd/start.sh
</span><span class='line'>Writing /Users/oj/code/tmp/csd/src/csd.app.src
</span><span class='line'>Writing /Users/oj/code/tmp/csd/src/csd.erl
</span><span class='line'>Writing /Users/oj/code/tmp/csd/src/csd_app.erl
</span><span class='line'>Writing /Users/oj/code/tmp/csd/src/csd_sup.erl
</span><span class='line'>Writing /Users/oj/code/tmp/csd/src/csd_resource.erl
</span><span class='line'>Writing /Users/oj/code/tmp/csd/priv/dispatch.conf</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Webmachine generates a fully functional website out of the box. So we should be able to build it, fire it up and see it in action:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog/webmachine $ cd ../csd
</span><span class='line'>oj@air ~/blog/csd $ make
</span><span class='line'>==> csd (get-deps)
</span><span class='line'>Pulling webmachine from {git,&ldquo;git://github.com/basho/webmachine&rdquo;,&ldquo;HEAD&rdquo;}
</span><span class='line'>Cloning into webmachine&hellip;
</span><span class='line'>==> webmachine (get-deps)
</span><span class='line'>Pulling mochiweb from {git,&ldquo;git://github.com/basho/mochiweb&rdquo;,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                       {tag,"1.5.1-riak-1.0.x-fixes"}}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>Cloning into mochiweb&hellip;
</span><span class='line'>==> mochiweb (get-deps)
</span><span class='line'>==> mochiweb (compile)
</span><span class='line'>Compiled src/mochiweb_sup.erl&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>   &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Compiled src/csd_sup.erl&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog/csd $ ./start.sh
</span><span class='line'>Erlang R15B01 (erts-5.9.1) [source] [64-bit] [smp:4:4] [async-threads:0] [hipe] [kernel-poll:false]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>   &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>=PROGRESS REPORT==== 11-Jul-2012::22:31:27 ===&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>      supervisor: {local,csd_sup}
</span><span class='line'>         started: [{pid,&lt;0.75.0&gt;},
</span><span class='line'>                   {name,webmachine_mochiweb},
</span><span class='line'>                   {mfargs,
</span><span class='line'>                       {webmachine_mochiweb,start,
</span><span class='line'>                           [[{ip,"0.0.0.0"},
</span><span class='line'>                             {port,8000},
</span><span class='line'>                             {log_dir,"priv/log"},
</span><span class='line'>                             {dispatch,[{[],csd_resource,[]}]}]]}},
</span><span class='line'>                   {restart_type,permanent},
</span><span class='line'>                   {shutdown,5000},
</span><span class='line'>                   {child_type,worker}]
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>=PROGRESS REPORT==== 11-Jul-2012::22:31:27 ===&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>     application: csd
</span><span class='line'>      started_at: nonode@nohost
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The application is now up and running. As you can see from the output, our csd application has been fired up and is listening on port 8000. Let&rsquo;s fire it up in a web browser to see if it works.</p>

<p><img src="http://buffered.io/uploads/2010/09/wm_default.png"/></p>

<p>It&rsquo;s alive! We&rsquo;re almost done. Before we finish up, let&rsquo;s get set up our build to include some dependencies.</p>

<h3>Adding ErlyDTL and Riak Client Dependencies</h3>

<p>Rebar makes this bit a walk in the park (thanks <a href="http://dizzyd.com/" title="Gradual Epiphany">Dave</a>, you rock!). Just make sure you stop your Webmachine node before continuing by typing <code>q().</code> into your Erlang console.</p>

<p>The <code>rebar.config</code> file is what drives rebar&rsquo;s dependency mechanism. We need to open this file and add the entries we need to include in our application. Webmachine&rsquo;s <code>start.sh</code> script by default includes all of the dependencies on start up, so after modifying the configuration, we don&rsquo;t have to do anything else (other than use the library of course).</p>

<p>Open up <code>rebar.config</code> in your <a href="http://www.vim.org/" title="VIM">favourite editor</a>, it should look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[{</span><span class="n">webmachine</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">1</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="o">*</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nn">git</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">basho</span><span class="o">/</span><span class="n">webmachine</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">HEAD</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;}}]}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Edit the file so that it includes both ErlyDTL and the Riak Client:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%&amp;ndash;&lt;em&gt;&amp;ndash; mode: erlang &amp;ndash;&lt;/em&gt;&amp;ndash;</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">webmachine</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/webmachine&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">riakc</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/riak-erlang-client&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'><span class="p">{</span><span class="n">erlydtl</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/erlydtl.git&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You&rsquo;ll notice that the <code>erlydtl</code> reference points at my own fork of the ErlyDTL project. This is because I have made it compile cleanly with rebar so that any dependent projects are also able to be build with rebar. Feel free to use your own fork if you like, but mine is there if you can&rsquo;t be bothered :)</p>

<p>Save the file and build!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog/csd $ make
</span><span class='line'>==> mochiweb (get-deps)
</span><span class='line'>==> webmachine (get-deps)
</span><span class='line'>==> csd (get-deps)
</span><span class='line'>Pulling riakc from {git,&ldquo;git://github.com/basho/riak-erlang-client&rdquo;,&ldquo;HEAD&rdquo;}
</span><span class='line'>Cloning into riakc&hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip; snip &hellip;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Dependencies sorted. For the final part of this blog post, we&rsquo;ll include a basic ErlyDTL template and use it to render the page so we can see how it works.</p>

<h3>Rendering an ErlyDTL Template</h3>

<p>Rebar has built-in support for the compilation of ErlyDTL templates. It can be configured to behave how you want it to, but out of the box it&hellip;</p>

<ul>
<li>&hellip; looks for <code>*.dtl</code> files in the <code>./templates</code> folder</li>
<li>&hellip; compiles each of the found templates into a module called <code>filename_dtl</code> (eg. <code>base.dtl</code> becomes the module base_dtl)</li>
<li>&hellip; puts the module beam files into the <code>ebin</code> directory</li>
</ul>


<p>Very handy. Let&rsquo;s create a very simple template by creating a <code>templates</code> folder, and editing a new file in that folder called <code>sample.dtl</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>templates/sample.dtl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;&lt;body&gt;</span>Hello from inside ErlyDTL. You passed in { param }}.<span class="nt">&lt;/body&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then open up <code>src/csd_resource.erl</code> and search for the <code>to_html()</code> function. It should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/csd_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="s">&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello, new world&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Modify it to look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/csd_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">sample_dtl</span><span class="p">:</span><span class="nf">render</span><span class="p">([{</span><span class="n">param</span><span class="p">,</span> <span class="s">&quot;Slartibartfast&quot;</span><span class="p">}]),</span>
</span><span class='line'><span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For now, don&rsquo;t worry about the content of this file. I will cover this off in a future post.</p>

<p>In the past, we had to manually modify <code>ebin/csd.app</code> to include the template that we&rsquo;ve just created. Thankfully, <code>rebar</code> has been updated so that it generates the <code>ebin/csd.app</code> file from the <code>src/csd.app.src</code> file automatically when the application is built. <code>rebar</code> adds the required modules from the <code>src</code> folder <em>and</em> includes the templates from the <code>templates</code> folder. Therefore, with our template and module ready to go, all we need to do is build and run:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oj@air ~/blog/csd $ make
</span><span class='line'>==> mochiweb (get-deps)
</span><span class='line'>==> webmachine (get-deps)
</span><span class='line'>==> protobuffs (get-deps)
</span><span class='line'>==> riakc (get-deps)
</span><span class='line'>==> erlydtl (get-deps)
</span><span class='line'>==> csd (get-deps)
</span><span class='line'>==> mochiweb (compile)
</span><span class='line'>==> webmachine (compile)
</span><span class='line'>==> protobuffs (compile)
</span><span class='line'>==> riakc (compile)
</span><span class='line'>==> erlydtl (compile)
</span><span class='line'>==> csd (compile)
</span><span class='line'>Compiled src/csd_resource.erl
</span><span class='line'>Compiled templates/sample.dtl&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>oj@air ~/blog/csd $ ./start.sh
</span><span class='line'>Erlang R15B01 (erts-5.9.1) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>** Found 0 name clashes in code paths&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip; snip &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>=PROGRESS REPORT==== 11-Jul-2012::22:31:27 ===&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>     application: csd
</span><span class='line'>      started_at: nonode@nohost
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice how ErlyDTL outputs some information to indicate that no template names have clashed with any other modules.</p>

<p>The application is now running, let&rsquo;s see what it looks like:</p>

<p><img src="http://buffered.io/uploads/2010/09/wm_erlydtl.png"/></p>

<h3>The End</h3>

<p>We now have a working environment in which to do our development. In the next post, I&rsquo;ll cover some of the basics required to get Webmachine talking to Riak via <a href="http://en.wikipedia.org/wiki/Protocol_Buffers" title="Protocol Buffers">Protocol Buffers</a>.</p>

<p>Feedback and criticism welcome!</p>

<p><strong>Note:</strong> The code for Part 1 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part1-20110403" title="Source Code for Part 1">Github</a>.</p>

<p>Other parts in this series: <a href="/posts/webmachine-erlydtl-and-riak-part-2/" title="Webmachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-3/" title="Webmachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-4/" title="Webmachine, ErlyDTL and Riak - Part 4">Part 4</a>, <a href="/posts/webmachine-erlydtl-and-riak-part-5/" title="Webmachine, ErlyDTL and Riak - Part 5">Part 5</a></p>
]]></content>
  </entry>
  
</feed>
