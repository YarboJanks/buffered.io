<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | OJ's rants]]></title>
  <link href="http://buffered.io/categories/c-/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2012-08-26T16:47:20+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CorrugatedIron Update - v0.1.1]]></title>
    <link href="http://buffered.io/posts/corrugatediron-update-v0-1-1/"/>
    <updated>2011-08-03T21:18:00+10:00</updated>
    <id>http://buffered.io/posts/corrugatediron-update-v0-1-1</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://facility9.com/" title="Jeremiah Peschka">JP</a> and I released our first Open Source project, <a href="http://corrugatediron.org/" title="CorrugatedIron">CorrugatedIron</a>. The release seemed to be fairly well received by those people who gave it a spin. We've had some good feedback along the way which we'll be evaluating, and no doubt those suggestions and comments will be influencing the future of the library.</p>

<p>In the interim, we wanted to get another version out which sorts out two main issues and that changes the <em>perceived</em> "norm" when building applications with CorrugatedIron. Those issues are listed below. We've also go the first pass of our <a href="http://corrugatediron.org/documentation/MapReduce.html" title="Map/Reduce">Map/Reduce</a> documentation ready.</p>

<p>If you're not interested in the detail, head on over to the <a href="http://corrugatediron.org/downloads.html" title="Downloads page">download page</a> to find out the many ways in which you can get access to the release. Otherwise, please read on!</p>

<!--more-->


<h2>Removal of IoC</h2>

<p>When we first put together the sample applications we thought that it'd be a good idea to show how these things can be done using what the mainstream .NET developers would use. That is, we decided to wire everything in with IoC. This wasn't because we felt that this is how it <strong>had</strong> to be done, but more to try and give people a level of familiarity. The library that we chose to use for the samples was Unity, for no other reason that "it was there".</p>

<p>This small mistake seemed to give off the impression that we felt that Unity was the best choice of all the IoC containers out there.</p>

<p>This is most definitely <strong>not the case</strong>. We are in no way advocating the use of one IoC container over the other. We honestly don't care which one you want to use. You should use whichever works for you.</p>

<p>To avoid this perception we decided that it would be best to remove references to any IoC container in all samples except for the <a href="https://github.com/DistributedNonsense/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample" title="IoC Sample Project">one sample</a> which shows how to use <em>lots</em> of different containers to do the same thing. Hence you should see a <em>lack</em> of IoC containers in our examples from now on. Sorry for any confusion.</p>

<h2>Handling of Client IDs</h2>

<p>Our first implementation of Client ID generation in CorrugatedIron wasn't a great implementation. We made the decision early on to generate IDs based on some details of the machine that the client was running on (ie. The MAC address of the first functioning NIC on the machine). Our thinking was that we wanted to uniquely identify a client while still allowing the ID to be reused across instances of the application. This might make sense for rich-client applications, but certainly doesn't work well in the web world. In a web environment, each request could come from a different user.</p>

<p>Almost immediately after releasing v0.1.0, <a href="http://facility9.com/" title="Jeremiah Peschka">JP</a> and I read an email on the [Riak mailing list][mailinglist] which made us rethink our approach. After a bit of discussion, we decided to go with an idea of Jeremiah's which involves the generation of the Client ID when the RiakClient instance is created. This generation can be controlled by the user of the library by specifying a <code>seed</code> value.</p>

<p>This gives the user the flexibility of not being concerned about the Client ID if they don't want to be, but can have some control if they do.</p>

<h2>Ease of Configuration</h2>

<p>The only bit of "constructive criticism" that we received on-masse was via <a href="http://news.ycombinator.com/item?id=2799823" title="CI on Hacker News">Hacker News</a> and revolved around configuration. The general feeling was that the effort required to configure the library was higher than expected, especially when compared to other libraries. I'd suggest reading the full discussion over on the <a href="http://news.ycombinator.com/item?id=2799823" title="CI on Hacker News">Hacker News</a> site to read some of the reasons behind the design decisions. But, if you're too lazy (I don't blame you if you are), the short version is this: CorrugatedIron is a .NET library connecting to a clustered, distributed key-value store. A library that does this, while attempting to manage load-balancing across all nodes in the cluster, is going to require some configuration.</p>

<p>One concern in particular resonated with me, and that was the difficulty in getting CorrugatedIron running inside a REPL, such as <a href="http://www.fsharphelp.com/Interactive.aspx" title="F# interactive">FSI</a>. The two issues with getting a REPL to work from configuration are:</p>

<ul>
<li>The ability to specify the location of the configuration file.</li>
<li>The number of lines of code it takes to wire things in.</li>
</ul>


<p>The XML that's required is not going to be changing in the short term. The values that are specified in that configuration are required to make the most of Riak and that's not something we're prepared to compromise on. However, the .NET code required to access it has changed, though the old way of wiring things in still exists for those people who want that level of flexibility.</p>

<p>In short, you can wire-in CorrugatedIron's XML configuration as simply as:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">var</span> <span class="n">cluster</span> <span class="p">=</span> <span class="n">RiakCluster</span><span class="p">.</span><span class="n">FromConfig</span><span class="p">(</span><span class="s">&quot;riakConfig&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">client</span> <span class="p">=</span> <span class="n">cluster</span><span class="p">.</span><span class="n">CreateClient</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>That's it!</h2>

<p>Hopefully this will make your life a little easier while getting CorrugatedIron up and running. We're always keen to hear your feedback, so please <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="CorrugatedIron @ Github">drop us a line</a> if you have any thoughts, suggestions or issues.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing CorrugatedIron]]></title>
    <link href="http://buffered.io/posts/introducing-corrugatediron/"/>
    <updated>2011-07-25T09:00:00+10:00</updated>
    <id>http://buffered.io/posts/introducing-corrugatediron</id>
    <content type="html"><![CDATA[<h2>It's Alive!</h2>

<p>It is with great pride that I introduce my first ever Open Source product release: <a href="http://corrugatediron.org/" title="CorrugatedIron">CorrugatedIron</a>! A feature-rich .NET client for the <a href="http://riak.basho.com/" title="Riak">Riak</a> Key-Value store. Together with my partner-in-crime <a href="http://facility9.com/" title="Jeremiah Peschka">Jeremiah</a>, we've put together a driver which exposes a great deal of Riak's functionality. CorrugatedIron is at <a href="https://github.com/DistributedNonsense/CorrugatedIron/tree/v0.1.0">v0.1.0</a>, and while it doesn't support every feature the Riak has to offer, it covers most, if not all, of the most common features that are required to effectively communicate with the system.</p>

<!--more-->


<h2>Features</h2>

<p>I would love to cover off all of the features here, but we've already done it on the <a href="http://corrugatediron.org/" title="CorrugatedIron">official site</a>, so head over there to take a look at the feature list, documentation and sample projects.</p>

<h2>The What, Where, Why and How</h2>

<h3>How it all began</h3>

<p>I don't remember the exact date that I was first exposed to <a href="http://riak.basho.com/" title="Riak">Riak</a>, <a href="http://basho.com/" title="Basho">Basho</a>'s bomb-proof database, but I do remember being very impressed. It was around the time I really started to get an interest in <a href="http://www.erlang.org/" title="Erlang">Erlang</a> programming, so it probably isn't a surprise, given that Riak is written in Erlang, that it piqued my interest. I have a bit of a fascination with systems that don't stop, and Riak fits firmly in that category.</p>

<p>So after playing with it for a while and marvelling at the sturdiness, the ease of set-up (even with clustering), the clever architecture and the make-up of the system, I realised that Riak was actually pretty special. Almost in a class of it's own. Its properties really appealed to me, and I felt the need to do something with.</p>

<p>Back then, I wasn't even working with Erlang professionally. The clients that I had at the time were pure .NET shops and didn't feel the need to consider anything other than the "tried and true" <a href="http://en.wikipedia.org/wiki/Relational_database_management_system" title="Relational Databases">RDBMS</a> (which in Brisbane seems to be mainly MS SQL, particularly in the .NET circles). Given that the likelihood of my working with Riak in a professional sense in the short term was fairly slim, I wanted to look to other areas where I could work with it and contribute to it at the same time. Needless to say, my Erlang-fu wasn't (and still isn't) up to scratch, so contributing to Riak itself wasn't yet something I thought I could take on. I needed something else.</p>

<p>Late last year, I was starting to look for projects that I could build and release as <a href="http://www.opensource.org/" title="Open Source">Open Source</a>. I have, on my occasions, contributed to other Open Source projects but I hadn't worked on one of my own and released it into the wild. This is something that I really wanted to do and so was looking for something to build.</p>

<p>During my travels in the Riak circles I had noticed that there were quite a few clients available which allowed people to talk to Riak from various languages. Basho themselves <a href="http://wiki.basho.com/Client-Libraries.html" title="Client libraries">support</a> ones for Erlang, Java, PHP, Python and Ruby, and there are many more listed on the <a href="http://wiki.basho.com/Community-Developed-Libraries-and-Projects.html#Client-Libraries-and-Frameworks" title="Client libraries">Riak community clients page</a> which cover languages like C, Clojure, Go, Node.js, Perl, Scala and more.</p>

<p>Amongst this libraries there were two listed for .NET. Both of them seemed to have a small set of functionality, they both weren't finished and at the time they both had not been touched for quite a while. In short, for .NET people, there really wasn't a viable option for Riak connectivity. What a travesty!</p>

<p>I remember sending an email to <a href="http://twitter.com/pharkmillups" title="Mark Phillips">Mark</a> telling him that I was pondering the thought of building this library to make sure that there wasn't already someone else out there making a go of it. He was aware of the two existing solutions but didn't know what the plans were with them, and he wasn't aware of any others at the time. This was all the validation that I needed.</p>

<p>So, in late 2010, I decided that the first project I wanted to build and release to the world as an Open Source application was a .NET client for Riak, one that worked on both the <a href="http://en.wikipedia.org/wiki/Common_Language_Runtime" title="Microsoft CLR">CLR</a> and on <a href="http://www.mono-project.com/" title="Mono">Mono</a>. This is where CorrugatedIron was conceived.</p>

<h3>So why the long wait?</h3>

<p>If you look at the <a href="https://github.com/DistributedNonsense/CorrugatedIron/graph">history</a> of the code-base you'll see that I had an initial flurry of activity in early 2011, but didn't really do anything else for quite some time. There's a reason for that!</p>

<p>When I first decided on the project, I spent a bit of time thinking about the design. I wanted the interface to be more "functional" in many ways. I wanted to remove the idea of resource management away from the caller. I didn't want to give them rope (such as <code>IDisposable</code> instances) with which to hang themselves (such as forgetting to <code>Dispose()</code>). I wanted the interface to be clean, simple, intuitive and safe.</p>

<p>This little in-memory design session went on for quite some time, but I didn't really put anything down on paper. Nor did I write any code. Instead, I though that I would put something together which wasn't really related or as important as the API. Something that was lower level which the user of the library would not (and should not) see.</p>

<p>A Riak node has two interfaces which clients can connect to. One of them is a <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" title="REST">REST</a> API, and the other is a binary API which utilises <a href="http://code.google.com/p/protobuf/" title="Protocol Buffers">Protocol Buffers</a>. I thought that it would be fun to start working on the Protocol Buffer handling while the idea of the API formed slowly in the back of my mind.</p>

<h3>Then along came JP</h3>

<p>Then, just before Christmas (23rd December to be exact) I received an email out of the blue from a chap in America. Here's how it started:</p>

<blockquote><p>Greetings from America!</p>

<p>Hope your summer is going well. Mark Phillips told me that you were interested in working on a good .net driver for Riak. Have you made any progress or is it still a general idea in your head?</p></blockquote>

<p>There was much more to the email than that, but it certainly started off well! The email was from <a href="http://facility9.com/" title="Jeremiah Peschka">Jeremiah Peschka</a>, a chap who's name I had seen floating around the Riak <a href="http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com" title="Riak mailing list">mailing list</a>. In fact, I remember his name catching my eye on more than one occasion because his email signature contained the following:</p>

<blockquote><p>Microsoft SQL Server MVP<br/>
MCITP: Database Developer, DBA</p></blockquote>

<p>This resonated with me because he was obviously into RDBMSs, but hadn't been a complete asshat on a list full of people working with <a href="http://en.wikipedia.org/wiki/NoSQL" title="NoSQL">NoSQL</a>. This was a rare and surprising thing.</p>

<p>Moving on. After a few email exchanges, Jeremiah indicated that he was interested in helping to build CorrugatedIron (despite the whacky name) and we decided to team up. I knew that he'd definitely add value to the whole process and would also keep me motivated. Plus, his obvious skills in the SQL realm would no doubt be useful too!</p>

<p>We continued to talk into January and I thought that it was past time that I shared the code that I had hacked together so that we had a starting/talking point. On the 7th January, I committed my first <a href="https://github.com/DistributedNonsense/CorrugatedIron/--SOMETHING-GOES-HERE--">batch of code</a> to the repository which contained a stack of very untested code. I don't even know if it worked! The result: we had a lot to talk about.</p>

<h3>Another intermission</h3>

<p>Though JP and I continued to talk a great deal via email, we were both quite under the pump with our respective places of employment. We shared ideas along the way, but neither of us were really into the project as a result of the intense work we had on elsewhere. Though I'm fairly certain that the thought of the project wasn't far from our minds the whole time.</p>

<p>Then on the 12th April, out of the blue again, another email came. I'm not going to divulge all the detail, but the crux of it indicated that there was a growing interest in seeing a .NET client for Riak from people in other areas of the world. It also asked what the story was with the client that we were building, and wondered if we had a timeline down with a potential release date.</p>

<p>This was scary, exciting and a slap in the face at the same time. Scary and exciting because there was a possibility that someone out there might want to use what we were building. A slap in the face because we hadn't really done much at all other than the initial commit and a great deal of talking. It was just the wake up call that we needed.</p>

<p>I spoke to JP about the email and we both decided that it was well past time to get our heads down and start working on this thing for real. We needed to lock in a set of features, a time-frame for development and, most importantly, a release date.</p>

<p>So, we did!</p>

<h3>All ahead flank</h3>

<p>In early May, JP and I managed to start freeing up time that we could then contribute to our project. Development ramped up and kicked off in mid-May, and on the 18th, we committed our first changeset to the repository since the very first commit in January. From there, we went nuts!</p>

<p>We consistently worked on things and pushed our code back and forth for the latter half of May and well in to June. At this point, things really started to get exciting.</p>

<p>We had managed to get quite a few features out in a small period of time, and were generally very happy with our progress. JP was making the most of his superior Riak knowledge and was banging out API features like there was no tomorrow. Meanwhile, I had my head down in the guts of the underlying bits, trying to keep things sane.</p>

<p>It was at this point we were told of <em>more</em> people who were keen to get their hands on a quality .NET client, and that if we could get the client ready in time, various individuals would be happy to talk about it during <a href="http://oscon.com/" title="OSCON">OSCON</a>, the biggest Open Source convention I know of. Awesome! This was an opportunity too good to miss.</p>

<p>We finalised our feature-set for v0.1.0, wrote down our final time-line and informed various parties of what we were planning to do. It was locked in. We were heads down, bums-up trying to get things into shape. It was all very exciting.</p>

<h3>Even more interest</h3>

<p>By early July, we had somehow managed to attract the attention of two more individuals who were looking for this functionality. Both of which put their hands up to the opportunity to look at our Alpha software, take it for a spin and give us some feedback. This was awesome. Having other people look over the code and critique it while, in some ways, evaluating it for their own needs is a great thing.</p>

<p>After a short period of time, we received very constructive (and, just quietly, rather gratifying) comments from both guys. It made us feel like we couldn't be doing too badly!</p>

<p>We opened up the repository to them so that they could get the latest code whenever they wanted, and also opened it up to some of the Basho guys so that they could also cast their eyes over it. The cat was slowly coming out of the bad.</p>

<p>On the 20th July, we locked in the feature-set for v0.1.0 and froze the codebase for all but minor changes, bug fixes and tweaks. It was time to do what everyone <em>loves</em> to do: <strong>documentation</strong>.</p>

<p>Given that I tend to hate documentation, straight away I was looking for something else to fill the time with. Thankfully, alongside documentation, we also needed a few sample applications (let's face it, as devs we learn much faster from working code compared to reams of documentation). So I leapt on the opportunity to crank out <a href="https://github.com/DistributedNonsense/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample.YakRiak" title="YakRiak.NET">YakRiak.NET</a>, a .NET client for <a href="https://github.com/seancribbs" title="Sean Cribbs">Sean Cribbs</a>' <a href="https://github.com/seancribbs/yakriak" title="The original YakRiak">YakRiak</a> chat application. It was incredibly simple to do and didn't take very long at all. When building the app, and finally <em>using</em> my own software, I have to admit I felt pretty good. It was nice to use my own software for something fun!</p>

<p>After that, JP put together a new <a href="https://github.com/peschkaj/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample.SessionStateProvider">Session State Provider</a> which used Riak as the back-end store. How good is that! Riak-backed session state in .NET. Awesome sauce.</p>

<p>I also finalised a small sample application which utilised some of the most common IoC frameworks to wire in the configuration, and began working on the 'real' documentation again.</p>

<h3>"Going live"</h3>

<p>Finally, on the 25th July, after a couple of months of intense development, sample app creation, documentation and blog posts, CorrugatedIron was released to the world -- just in time for OSCON (phew!).</p>

<p>While the documentation isn't as thorough as we would like, and our unit test coverage isn't as high as we'd like, we're very happy with what we've managed to achieve. This first release is by no means the last, and JP and I are both excited about what we're going to add to it in the future.</p>

<h3>A small side note</h3>

<p>When people first start working on projects like this there is always a risk that personalities will clash and the software will suffer. JP and I knew nothing of each other when we started this thing, yet over time have got to know each other and had a great deal of fun learning from each other. I think I've been really fortunate in having JP involve himself in this project. He has been open to different ideas and opinions, has never come across as an ass and has been a real pleasure to work with the whole time.</p>

<p>So, JP, thanks mate! I'm really glad you got involved. CorrugatedIron wouldn't be what it is now if you hadn't.</p>

<h3>The End</h3>

<p>Thanks for reading this far! If you're a .NET mofo and you're keen to get your Riak on, <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="Source code">grab the source</a>, <a href="https://github.com/DistributedNonsense/CorrugatedIron/downloads" title="Binary downloads">download the binaries</a> or <a href="http://www.nuget.org/List/Packages/CorrugatedIron" title="Nuget package">install the Nuget package</a> and get cracking! Feedback is always welcome, as are patches. So if you've got something to add, take away or refine, fork our <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="Source code">repository</a> and get those pulls requests happening!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quirk in List.Find()]]></title>
    <link href="http://buffered.io/posts/a-quirk-in-listfind/"/>
    <updated>2009-03-25T05:31:00+10:00</updated>
    <id>http://buffered.io/posts/a-quirk-in-listfind</id>
    <content type="html"><![CDATA[<p>Earlier today I was having a chat with a <a href="http://doomkeeper.com/" title="Jimmy's Blog">friend of mine</a>, who lives in Vancouver, about finding items that are stored in <a href="http://msdn.microsoft.com/en-us/library/6sh2ey19.aspx" title="List(T)">generic Lists</a>. He flicked me a code snippet that looked something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">foo</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">foo</span><span class="p">&gt;();</span>
</span><span class='line'><span class="c1">// .. do some stuff</span>
</span><span class='line'><span class="n">Foo</span> <span class="n">f</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="k">delegate</span><span class="p">(</span><span class="n">Foo</span> <span class="n">f</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">foo</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;Bar&quot;</span><span class="p">;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Straight away I fired back with an update to the code which used <a href="http://msdn.microsoft.com/en-us/library/bb397687.aspx" title="Lambda Expressions (C# Programming Guide)">lambda expressions</a> instead, as I'm a fan of how concise they are ;)</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">foo</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">foo</span><span class="p">&gt;();</span>
</span><span class='line'><span class="c1">// .. do some stuff</span>
</span><span class='line'><span class="n">Foo</span> <span class="n">f</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">foo</span> <span class="p">=&gt;</span> <span class="n">foo</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">&quot;Bar&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>My friend ran this code against a data set that he had constructed and found that when the call to <a href="http://msdn.microsoft.com/en-us/library/x0b5b5bc.aspx" title="List(T).Find">Find()</a> was made, a <a href="http://msdn.microsoft.com/en-us/library/system.nullreferenceexception.aspx" title="System.NullReferenceException">NullReferenceException</a> was being thrown. I found this odd as I hadn't seen that before. <em>list</em> was definitely a valid reference and the lambda expression was well-formed as well. So what was wrong?</p>

<p>It turns out that even though <em>list</em> was a valid reference, it <strong>didn't contain any elements</strong>.</p>

<p>How odd! Why would the generic List object throw an exception when the user calls Find() when no elements are present? After a little bit of thinking I thought that I had the answer. I thought to myself:</p>

<blockquote><p>What if the List was a container for a <a href="http://msdn.microsoft.com/en-us/library/34yytbws(VS.71).aspx" title="Value Types">value type</a>, such as <em>int</em>? If you attempt to find a value in an empty list, then the function cannot return <em>null</em> because that isn't valid for value-types! Throwing an exception <em>does</em> make sense!</p></blockquote>

<p>Isn't it amazing how easy it is to convince yourself of your own greatness? I thought I'd nailed it first go. So I proposed my argument to my friend, who initially was semi-sold on the idea.</p>

<p>Then I thought about it again and managed to convince myself that my apparent "brilliance" was, in fact, a failure. The perfect counter-argument to the above point is:</p>

<blockquote><p>What happens when you have a List of ints which <em>does</em> contain elements and you attempt to search for a value that <strong>is not in the list</strong>?</p></blockquote>

<p>It wasn't immediately obvious. So I tried something to see what would happen:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">});</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;</span> <span class="m">3</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ....</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So what do you think the value of <em>i</em> is after those first two lines? Yes, you guessed it: <strong>Zero</strong>. Why? Well, duh, it's because <a href="http://msdn.microsoft.com/en-us/library/xwth0h0d.aspx" title="default keyword">default(T)</a> for integers is Zero!</p>

<p>This is where little alarm bells started to ring in my head. I immediately whipped up an example where this would be considered bad:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">});</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;</span> <span class="m">3</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ....</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Again, <em>i</em> is Zero when this code is executed, but the result is very misleading. Zero is contained in the collection but doesn't match the predicate, yet Zero is returned because that's the default value for this value-type.</p>

<p>I thought this was a bit of a glaring hole in the design. So I went straight to the <a href="http://msdn.microsoft.com/en-us/library/x0b5b5bc.aspx" title="List(T).Find">documentation</a> and found this:</p>

<blockquote><p><strong>Important Note:</strong></p>

<p>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <a href="http://msdn.microsoft.com/en-us/library/0k601hd9.aspx" title="FindIndex">FindIndex</a> method instead.</p></blockquote>

<p>This was concerning for a couple of reasons. First of all, the designers have left it up to you to determine that this is the default behaviour. Yes I should be able to come to that conclusion myself, but I didn't until I got bitten :) So shut up! Secondly, you have to check your result value against your predicate <em>again</em> to be sure that it's not dodgey. For example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">});</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;</span> <span class="m">3</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="p">&gt;</span> <span class="m">3</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. valid value, do stuff ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. no item found</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Do <em>you</em> want to do that? I certainly don't. After a bit of back-and-forth with Jimbo, I thought that the best option for a generic List Find() function would be one that is akin to the good old C++ days. It would look something like this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">bool</span> <span class="n">Find</span><span class="p">&lt;</span><span class="n">t</span><span class="p">&gt;(</span><span class="n">Predicate</span><span class="p">&lt;</span><span class="n">t</span><span class="p">&gt;</span> <span class="n">predicate</span><span class="p">,</span> <span class="k">ref</span> <span class="n">T</span> <span class="n">output</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This would mean that you could change your code to something like the following:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">});</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="p">&gt;</span> <span class="m">3</span><span class="p">,</span> <span class="k">ref</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. valid value, do stuff ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. no item found, or empty list!</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note how with this option you could easily support the case for empty lists at the same time. It would be helpful and meaningful. Only when the function returns true can you rely on the output parameter. It's very clear and caters for value-types and reference-types. It'd be easy to implement in an [extension method][] as well. I'd prefer this solution over using FindIndex().</p>

<p>In case it's not obvious, this problem would no doubt exist in all functions on generic objects that attempt to return a single instance of <em>T</em> based on some form of predicate. <a href="%22http://msdn.microsoft.com/en-us/library/5kthb929.aspx%22">FindLast()</a> would be another example.</p>

<p>I'm very keen to know the reasons behind the original design decision. I'm sure that minds far greater than mine parsed that problem and came up with that solution, probably for a very good reason.</p>

<p>What do you guys think?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Always Question the Source (aka "Don't Lock on Type Objects")]]></title>
    <link href="http://buffered.io/posts/always-question-the-source-aka-dont-lock-on-type-objects/"/>
    <updated>2009-02-10T21:22:00+10:00</updated>
    <id>http://buffered.io/posts/always-question-the-source-aka-dont-lock-on-type-objects</id>
    <content type="html"><![CDATA[<p>For one reason or another, I recently found myself perusing some code based on the <a href="http://www.lhotka.net/cslanet/" title="CSLA">CSLA</a> framework. While nosing around I came upon a snippet of code that I found rather disturbing. An example can be found <a href="http://www.lhotka.net/cslacvs/viewvc.cgi/trunk/cslacs/Csla/Core/BusinessBase.cs?revision=3690&amp;view=markup" title="BusinessBase.cs">here</a> in the function called InitializeAuthorizationRules.</p>

<p>For those who are lazy, here is the particular snippet of code that caught my eye:</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">lock</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">GetType</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// .. stuff ..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you want to see more, head over there and read up. There are quite a few instances of the code listed above.</p>

<p>So why is this disturbing? If you're not sure of the answer, take a bit of time to go and read up on C#'s <a href="http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx" title="lock Statement (C# reference)">lock</a> keyword. When you're done, ask yourself "what kind of object should I be using alongside the lock keyword?".</p>

<p>If the answer escapes you, then toodle over to <a href="http://www.mail-archive.com/bdotnet@groups.msn.com/msg06816.html" title="Why lock(typeof(ClassName)) or SyncLock GetType(ClassName) is Bad">this little doozy</a> for a blow by blow account. I'll quote a rather gifted developer friend of mine (who for now shall remain anonymous) who summed up nicely one of the issues that could occur if the above code makes it into your code base:</p>

<blockquote><p>This is terrible, terrible, terrible.</p>

<p>Good luck with the cross-appdomain deadlock which brings down prod and can't be diagnosed without 2 weeks behind windbg.</p></blockquote>

<p>So true.</p>

<p>Now that you know it's bad you might be wondering how a framework like CSLA managed to get polluted by it. Time to speculate!</p>

<p>You may have noticed that the article I linked above mentions that the practice of locking type objects was actually demonstrated/advocated on MSDN:</p>

<blockquote><p>This is even done in MSDN sample, makuing it the holy grail.
.
.
Rico Mariani, performance architect for the Microsoft .NET runtime and longtime Microsoft developer, mentioned to Dr. GUI in an e-mail conversation recently that a fairly common practice (and one that's, unfortunately, described in some of our documentation right now, although we'll be fixing that) is actually quite problematic.</p></blockquote>

<p><em>Note: Spelling mistakes and awful grammar in the quote above are, for once, not my fault.</em></p>

<p>I'm guessing that the author(s) of CSLA were reading up on some multithreading documentation on MSDN and came across a sample which demonstrated locking type objects as shown above. Since they were reading MSDN, the apparent Bible for all things .NET, they may have assumed that whatever they saw could be taken as Gospel.</p>

<p>Unfortunately, no resource is perfect. Not even MSDN.</p>

<p>This is where I have my gripe. The authors of <strong>any</strong> software should <strong>always</strong> critique <strong>all</strong> of the code they come across during the course of development. Whether they wrote it themselves, got it from MSDN, read it on a blog site while researching or saw it in a book written by the author of the language. <em>NEVER EVER</em> assume that the code you are reading is 100% sound.</p>

<p>If the authors had thought about the <em>meaning</em> of the lock statement and had an understanding of exactly what <a href="http://msdn.microsoft.com/en-us/library/system.object.gettype.aspx" title="Object.GetType Method">GetType()</a> does (ie. always returns the <em>same</em> reference when called on the same type), then perhaps they might have figured out that using a lock on something that's accessible from <strong>any object in the process</strong> is a bad idea. It is opening the door for potential deadlocks if somebody else decides to do the same.</p>

<p>So I say again: <em>do not assume that the code you get off the Internet is safe!</em> Scrutinise it. Pull it to pieces. Understand it. Then, if all is safe and you're still comfortable with it, consider using it in your software. Don't assume that the author of the code knows what they're doing...</p>

<p>... unless it's me of course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WPF Shader FX on Codeplex]]></title>
    <link href="http://buffered.io/posts/wpf-shader-fx-on-codeplex/"/>
    <updated>2008-09-09T20:22:00+10:00</updated>
    <id>http://buffered.io/posts/wpf-shader-fx-on-codeplex</id>
    <content type="html"><![CDATA[<p>This is just a quick post to point out a new project that has fired up on <a href="http://www.codeplex.com/" title="Codeplex">Codeplex</a> which may be of interest to a few of you graphics and rich client fans.</p>

<p><a href="http://jcooney.net/" title="JCooney.NET">Joseph Cooney</a> of <a href="http://learnwpf.com/" title="Learn WPF">LearnWPF.com</a> (and <a href="http://en.wikipedia.org/wiki/Windows_Presentation_Foundation" title="WPF">WPF</a> <a href="http://mvp.support.microsoft.com/" title="MVP">MVP</a> to the stars) has kicked off a <a href="http://www.codeplex.com/fx" title="FX project @ Codeplex">Codeplex project</a> targetting funky shaders for use with the new features of WPF that were included in <a href="http://www.microsoft.com/downloads/details.aspx?familyid=ab99342f-5d1a-413d-8319-81da479ab0d7" title=".NET 3.5 SP1">SP1</a>. Specifically, it's intended to be a collection of open source/free shaders that can be easily plugged into your WPF apps to make them look schmick (for more info, <a href="http://learnwpf.com/Posts/Post.aspx?postId=398ed9d5-c56a-4ad5-830d-02e2d8d3bf26" title="WPF Shader Effects Community Project Launched">check this out</a>).</p>

<p>It's an open source/community thing where everyone is encouraged to contribute. I'll be aiming to add as much as I can given the time constraints of work and family life. JC has already added 5 effects, and I've added my first, which was a simple Radial Blur shader.</p>

<p>This stuff really is fun, so check it out!</p>
]]></content>
  </entry>
  
</feed>
