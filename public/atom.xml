<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OJ's rants]]></title>
  <link href="http://buffered.io/atom.xml" rel="self"/>
  <link href="http://buffered.io/"/>
  <updated>2012-02-14T10:41:10+10:00</updated>
  <id>http://buffered.io/</id>
  <author>
    <name><![CDATA[OJ Reeves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Tools List - 2012]]></title>
    <link href="http://buffered.io/posts/my-tools-list-2012/"/>
    <updated>2012-01-31T20:13:00+10:00</updated>
    <id>http://buffered.io/posts/my-tools-list-2012</id>
    <content type="html"><![CDATA[<p>The topic of tools is often a hot one amongst developers and every year
we see an influx of blog posts where people rant and rave about which
ones they love the most, and why.</p>

<p>Far be it from me to stay out of such a discussion!</p>

<p>Here is a list of the tools that I use as of the end of January 2012. Some are simply noteworthy.
Others are very handy and while I would get by without them they would
be missed. Some of these <strong>I simply cannot live without</strong>. I&#8217;m not going
to bother with ratings. I won&#8217;t go into frameworks or the like which
make their way into my code, instead I am focussing on those tools which
help me do the coding and which aid me in my general computer usage.</p>

<p>Some of these tools are platform-specific, but many can be used across
different platforms.</p>

<!--more-->


<h2>VIM</h2>

<p>Author: <a href="http://www.moolenaar.net/">Bram Moolenaar</a> &#8211;
Homepage: <a href="http://www.vim.org/">http://www.vim.org/</a></p>

<p>Yes I&#8217;m getting the religious war out of the way immediately.</p>

<p>Without a doubt, your editor is the most important tool in your toolbox.
If you haven&#8217;t yet mastered your own editor you are seriously doing
yourself a disservice. For me, VIM is by far the best editor I have ever
used. Why? Well&#8230;</p>

<p>When it comes to coding I spend most of my <em>editing</em> code rather than
writing it. That could be because I&#8217;m a terrible code, it could be
that coding is mostly editing with a bit of straight, rawhide
development along the way. As a result I find that the most common
things that I do when coding are:</p>

<ul>
<li>Moving around the source files.</li>
<li>Searching for text.</li>
<li>Repeating edits that are the same or similar.</li>
<li>As much as I hate to say it, cutting and pasting (think &#8220;moving code
around&#8221; rather than &#8220;duplicating code&#8221;).</li>
<li>Performing edits of a very specific coding nature. Examples are
replacing a function&#8217;s argument list, deleting the content of
a function, renaming, refactoring, etc.</li>
</ul>


<p>I think that many other developers will have similar experiences.</p>

<p>The first question I get when I start to explain my position is:
<em>&#8220;So why is it that you prefer to use VIM for this when there are so
many tools out there that can help you do all of the above?&#8221;</em> More often
that not this comes from the .NET developers I know. These guys know
that I spend most of my time (at least at the moment) writing .NET
applications. As a result, I spend a lot of time in <a href="http://www.microsoft.com/visualstudio/">Visual Studio</a>.</p>

<p>So if I have Visual Studio handy I also have a plethora of plug-ins, such
as <a href="http://www.jetbrains.com/rsharper">ReSharper</a>, which can help with refactoring, moving code around,
etc. Why not use them? The answer is pretty simple: I don&#8217;t want to tie
myself to a tool (or set of tools) that is tied to one language or
platform.</p>

<p>I love to code in other languages such as <a href="http://www.erlang.org/">Erlang</a>, <a href="http://www.haskell.org/">Haskell</a> and <a href="http://research.microsoft.com/fsharp">F#</a>. I have
no choice but to write <a href="http://en.wikipedia.org/wiki/JavaScript">Javascript</a> but I also use <a href="http://coffeescript.org/">Coffeescript</a>
and have played with the likes of <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> and <a href="http://clojure.org/">Clojure</a>. I use these
languages on <a href="http://windows.microsoft.com/">three</a> <a href="http://kernel.org/">different</a> <a href="http://www.apple.com/macosx/">platforms</a>.</p>

<p>I want the same editing experience, the same shortcuts, the same layout
and the same colour scheme regardless of language or platform. Visual
Studio can not give me that (nor will it down the track).</p>

<p>As well as this, the likes of Visual Studio and ReSharper tend to cost
a fair bit of cash. VIM does not, it&#8217;s free.</p>

<p>I could have chosen one of a number of editors &#8211; including <a href="http://www.gnu.org/s/emacs">Emacs</a>,
<a href="http://notepad-plus-plus.org/">Notepad++</a>, <a href="http://macromates.com/">TextMate</a>, <a href="http://www.sublimetext.com/">SublimeText</a> and more &#8211; but after
experimenting with each and every one, VIM was a standout performer
thanks to&#8230;</p>

<p><strong>Command mode</strong> - having the ability to <em>remain in command mode</em> without
the need to hold a modifier key (such as CTRL) is brilliant. It feels
much friendlier on the hands and does a great job of reducing strain and
the likelihood of RSI. You can do way more with fewer keystrokes and
often you don&#8217;t even have to move your fingers from the home row.</p>

<p>A common argument against VIM is the learning curve. Yes, it might
initially feel very odd and you will no doubt feel <em>less</em> productive
when you first start using it. After a surprisingly short period of
time, you will start to see the benefits and you&#8217;ll wonder why you
haven&#8217;t invested the time to learn this earlier.</p>

<p>VIM is also incredibly extensible. There are a ridiculous number of
[plug-ins and scripts][VimPlugins] available which do all kinds of crazy
things. There are syntax-highlighters for almost any language you can
think of, way too many to list here in full. I would like to mention
a few stand-outs. They are <a href="https://github.com/tpope/pathogen">Pathogen</a>, <a href="https://github.com/Lokaltog/vim-easymotion">EasyMotion</a>, <a href="https://github.com/scrooloose/nerdtree">NERDTree</a>,
<a href="https://wincent.com/products/command-t">CommandT</a>, <a href="http://www.vim.org/scripts/script.php?script_id=3619">BufferGator</a>, <a href="https://github.com/tpope/vim-fugitive">Fugitive</a>, <a href="https://github.com/ervandew/supertab">SuperTab</a>, <a href="https://github.com/tpope/vim-surround">Surround</a>,
<a href="https://github.com/msanders/snipmate.vim">SnipMate</a>, <a href="http://www.vim.org/scripts/script.php?script_id=1234">Yankring</a> and <a href="https://github.com/tpope/vim-repeat">Repeat</a>.</p>

<p>I&#8217;ve also recently found out about the <a href="https://github.com/carlhuda/janus">Janus</a> setup (thanks <a href="http://www.shiftperception.com/">Dan</a>) which provides
many of these plug-ins out of the box in a handy-to-use script. It
doesn&#8217;t work too well on windows, and there&#8217;s a bit of effort to get it
to work, but it&#8217;s worth it. It even brings to the table many of the
plug-ins that I have listed above without the need to go and install them
separately.</p>

<p>To be frank, anyone who is serious about writing code should be using an
editor like this. If not VIM, then look at <a href="http://www.gnu.org/s/emacs">Emacs</a>, <a href="http://macromates.com/">TextMate</a> or
<a href="http://www.sublimetext.com/">SublimeText</a> as they are great contenders. But if you can stick at it
long enough, I think you&#8217;ll find the rewards of using VIM are much
better than you would otherwise believe.</p>

<p>There, I&#8217;ve said my piece. Time to move on!</p>

<h2>ViEmu</h2>

<p>Author: <a href="http://jonbho.net/">Jon Beltran de Heredia</a> &#8211;
Homepage: <a href="http://www.viemu.com/">http://www.viemu.com/</a></p>

<p>Wait a minute, didn&#8217;t we just finish the VIM section? Yes we did, but
this tool, while related, is worth a mention by itself. ViEmu is
a plug-in for Visual Studio that makes the editor behave <em>like</em> VIM.
Unfortunately, due to a few reasons including the constraints put in
place by Visual Studio, it isn&#8217;t a complete implementation of VIM.
Despite this, it&#8217;s well worth paying for. I couldn&#8217;t possibly go back to
using Visual Studio without it.</p>

<p>There is an alternative, <a href="http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329">VsVim</a>, which is free but it doesn&#8217;t have
the command coverage that ViEmu does, nor does it perform as well in
many cases. It&#8217;s enough to get you going, but if you&#8217;re serious about
your VIMming in Visual Studio then get yourself a copy of ViEmu.</p>

<h2>UnxUtils</h2>

<p>Author: Not sure! &#8211;
Homepage: <a href="http://sourceforge.net/projects/unxutils/">http://sourceforge.net/projects/unxutils/</a></p>

<p>UnxUtils is just a set of Win32 ports of the GNU tools. I can&#8217;t do
without
the likes of <a href="http://en.wikipedia.org/wiki/Sed">sed</a>, <a href="http://en.wikipedia.org/wiki/Grep">grep</a>, <a href="http://en.wikipedia.org/wiki/AWK">awk</a>, <a href="http://en.wikipedia.org/wiki/Which_(Unix)">which</a> etc from the command
line, nor can I bear using the likes of <code>dir</code> instead of <code>ls</code>. While
Windows does come with a subset of these (often with different names)
they aren&#8217;t as easy to use nor do they have the coverage that you get
with the tools that come with *nix distributions.</p>

<p>On a new system I always download these and put them in my <code>%PATH%</code>.
Very handy!</p>

<h2>Mercurial</h2>

<p>Author: <a href="http://mercurial.selenic.com/wiki/mpm">Matt Mackall</a> and others &#8211;
Homepage: <a href="http://hg-scm.org/">http://hg-scm.org/</a></p>

<p>This was the first <a href="http://en.wikipedia.org/wiki/Distributed_revision_control">DVCS</a> that I was exposed to and I still love it.
It&#8217;s a fantastic version control system and one that I often use for my
own projects. Mercurial is one of those tools that many people use,
particularly in the Open Source community.</p>

<p>I&#8217;d recommend downloading and install the command-line client and
nothing more. The GUI tools are &#8220;nice&#8221;, but they&#8217;re slow, and nowhere
near as easy to use as the CLI. Get used to the CLI and you&#8217;ll be amazed
and how fast you can get things done.</p>

<p>If you use Open Source tools, you&#8217;ll find that this is an absolute must
along with &#8230;</p>

<h2>Git</h2>

<p>Author: <a href="http://torvalds-family.blogspot.com">Linus Torvalds</a> and others &#8211;
Homepage: <a href="http://git-scm.org/">http://git-scm.org/</a></p>

<p>As a long-term Mercurial user I found myself wondering why I would
bother using Git. Over time it became clear to me that learning it was
important. It has fast become the de-facto DVCS and I think this is
largely because of <a href="https://github.com/">Github</a>.</p>

<p>Git&#8217;s command-line is a bit esoteric but incredibly powerful.
Mercurial&#8217;s is probably a bit more intuitive to use and easier to
digest, particularly if you&#8217;re used to using <a href="http://subversion.tigris.org/">Subversion</a>. To show
a crass example of how one can perceive the difference between the two,
here&#8217;s an example (made up) of how you may make a cappuccino:</p>

<pre><code># with git
git drink --hot --infusion=coffee-beans --with-grind --milk=frothed --no-sugar

# with hg
hg cappuccino
</code></pre>

<p>I hope you get the point. Git is really powerful and super-configurable.
Mercurial is intuitive and easily covers most common use-cases with
commands that make sense.</p>

<p>Git&#8217;s branching model is a bit different to that of Mercurial, and I have to
admit that I prefer it. Git is now my DVCS of choice, though this
wouldn&#8217;t have been the case in the early days thanks to the woeful
Windows support.</p>

<p>Git, like Mercurial, is so common amongst Open Source enthusiasts that
you really don&#8217;t have a choice but to install it. It&#8217;s certainly worth
having and using. If you&#8217;re building any application, even if it&#8217;s
a small home project, you should be using a DVCS like Git.</p>

<h2>Rebar</h2>

<p>Author: <a href="http://twitter.com/dizzyco">Dave Smith</a> from <a href="http://www.basho.com/">Basho</a> &#8211;
Homepage: <a href="https://github.com/basho/rebar">https://github.com/basho/rebar</a></p>

<p>This is by far the best tool in my <a href="http://www.erlang.org/">Erlang</a> box. It&#8217;s a fast Erlang
build tool with some great options, such as file generation from
templates, running of unit tests and management of dependencies. It&#8217;s
Open Source too!</p>

<p>Get it. Use it.</p>

<h2>Dropbox</h2>

<p>Homepage: <a href="http://www.dropbox.com/">http://www.dropbox.com/</a></p>

<p>I think this is another really common developer tool, but can easily be
used by people who aren&#8217;t developers. For me, this tool has its worth in
the ease in which files just magically appear on all the machines which
you use. I don&#8217;t think I&#8217;m too different from other developers in that
I have quite a few machines around the house that I use frequently. I am
also on-site with clients and often want access to certain things that
I don&#8217;t want to share out on the open web with the rest of the world.
Dropbox is awesome for this.</p>

<p>I recently discovered another contender called <a href="https://www.insynchq.com/">InSync</a> which uses
<a href="http://docs.google.com/">Google Docs</a> as a backing store, but for me it doesn&#8217;t quite have the
appeal of Dropbox.</p>

<p>Cross platform. Quick. Easy. Free for 2GB of space. Very cool.</p>

<h2>WinRAR</h2>

<p>Homepage: <a href="http://www.rarlab.com/">http://www.rarlab.com/</a></p>

<p>Yes, that&#8217;s right, I paid for WinRAR and I love it. It&#8217;s still my
archiver of choice after many years of use. It&#8217;s easy, has great
integration with the Windows shell, and RAR compression is really quite
good.</p>

<p>Yes, there are other options out there now that are free and handle all
kinds of compression algorithms &#8211; <a href="http://www.7-zip.org/">7zip</a> is the first that comes to
mind &#8211; but I find that I like the way I can interact with WinRAR both
graphically and via the command-line. I have no reason nor desire to
move away from WinRAR. I highly recommend it.</p>

<h2>Diffmerge</h2>

<p>Author: <a href="http://www.sourcegear.com/">Sourcegear</a> &#8211;
Homepage: <a href="http://www.sourcegear.com/diffmerge/index.html">http://www.sourcegear.com/diffmerge/index.html</a></p>

<p>This is a free-to-use diff and merge tool. It works on Windows, Mac and
Linux and does a fantastic job of understanding the differences in
files. It&#8217;s hard to believe that a tool this good can be free.</p>

<p>Many people continue to pay for and use <a href="http://www.scootersoftware.com/">BeyondCompare</a> but I can&#8217;t
see any reason to move away from Diffmerge. If you&#8217;re looking for
a great tool to help understand the changes in your code-base, look no
further!</p>

<h2>Alfred</h2>

<p>Homepage: <a href="http://www.alfredapp.com/">http://www.alfredapp.com/</a></p>

<p>Alfred is a simple productivity tool for Mac OSX. It&#8217;s a combined
application launcher, file finder, application automation tool and web
integrator. Think <a href="http://www.launchy.net/">Launchy</a> on steroids and add a nicer UI.</p>

<p>It&#8217;s free and it&#8217;s really good. You can also pay for a <a href="http://www.alfredapp.com/powerpack/">Powerpack</a> that
gives you even more functionality for the tidy sub of just &pound;15.</p>

<h2>ttytter</h2>

<p>Author: <a href="http://www.floodgap.com/">Cameron Kaiser</a> &#8211;
Homepage: <a href="http://www.floodgap.com/software/ttytter/">http://www.floodgap.com/software/ttytter/</a></p>

<p>No it&#8217;s not a development tool, but my life of coding is influenced by
those who I speak to on Twitter, and hence the tools that I use to
interact with it are worth a mention.</p>

<p>This is another great tool for the command-line monkeys. ttytter is a fully
functional Twitter client that runs in the console. It supports hashtag
searches, @mentions, direct messages with full colour-coding. It&#8217;s
really easy to use and a greatly way to keep the noise down in your
Twitter feed. You can even filter out crap that you don&#8217;t want to see.</p>

<p>It&#8217;s a great tool (written in <a href="http://www.perl.org/">Perl</a>!), but doesn&#8217;t work in Windows.</p>

<h2>KeePassX</h2>

<p>Author: <a href="http://sourceforge.net/project/memberlist.php?group_id=166631">KeePassX team</a> &#8211;
Homepage: <a href="http://www.keepassx.org/">http://www.keepassx.org/</a></p>

<p>Hands up if you have thousands of accounts across the Internet. Keep you
hands up if you often (or always) use the same password for all of those
things.</p>

<p>If you still have you hand up, you need a slap. Password management is
actually quite a serious issue. Using the same password on many accounts
can open to you up to all kinds of attacks from the naughty people. All
it takes it for one of your accounts to be compromised and your password
extracted. The rest of your accounts are now owned.</p>

<p>There is no guarantee that the site you&#8217;re signing up for uses the likes
of <a href="http://en.wikipedia.org/wiki/Secure_Sockets_Layer">SSL</a> or behind the scenes is doing a good job of managing your
password. To protect yourself you should instead generate large
passwords, ones that you don&#8217;t have a hope of remembering, ones that
attackers will need quantum computers to crack. Also, having different
passwords to each of your accounts means that if one is compromised the
rest of them are still safe.</p>

<p>I use KeePassX to generate and manage these passwords. I secure my
password file with a brutally long password that I have no problems remembering.
This file is synced across my machines using
Dropbox so that I have access to my passwords wherever and whenever I need it.</p>

<p>It&#8217;s a great utility and serves me really well. Get serious about your
password management and use something like KeePassX to help you do it.</p>

<h2>Octopress</h2>

<p>Author: <a href="http://brandonmathis.com/">Brandon Mathis</a> &#8211;
Homepage: <a href="http://octopress.org/">http://octopress.org/</a></p>

<p>This is what I use to write and publish my <a href="http://buffered.io/">blog</a>.
Previous I had used <a href="http://www.wordpress.com/">Wordpress</a> and had moved on to <a href="http://www.blogofile.com/">Blogofile</a> at
some point last year.</p>

<p>What I had realised was that my workflow for blogging wasn&#8217;t really one
that fit with the likes of the mainstream tools like Wordpress. The
editing experience was painful, amongst other things. I came to realise
that a blog is in fact a static site with a few comments. Thanks to
<a href="http://www.disqus.com/">Disqus</a> the comment problem has been outsourced, so really the only
content I had was static. This is a good thing as handling static sites
is not only easier, but it means the server does less work and is less
likely to be attackable.</p>

<p>I moved over to Octopress over the holiday period of 2011/2012 and so
far I love it. I write all my posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, I push changes to
a <a href="https://github.com/">Github</a> repository and I publish a new version of my site with
a single command. It&#8217;s a joy.</p>

<p>Octopress makes this all really easy and has built-in support for
themes, Github Pages and has a bunch of plug-ins that give you a great
looking and highly functional site out of the box.</p>

<p>I highly recommend it.</p>

<h1>That&#8217;s all!</h1>

<p>Look at this list it&#8217;s clear that I don&#8217;t really rely on much. That
which I do rely on is often free or relatively low-cost. These tools are
what make me feel really productive and comfortable in front of the
machine. I hope that this has in some way inspired you to try a few new
things out, or at least write your own mini-list to praise that which
makes you the developer you are.</p>

<p>Bring on the comments, suggestions and flames.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Expert at 23]]></title>
    <link href="http://buffered.io/posts/an-expert-at-23/"/>
    <updated>2012-01-27T20:59:00+10:00</updated>
    <id>http://buffered.io/posts/an-expert-at-23</id>
    <content type="html"><![CDATA[<p>I was about to head to bed when I stumbled across a poorly-titled <a href="http://www.news.com.au/business/the-best-places-to-look-for-work-in-2012/story-e6frfm1i-1226255099978" title="The best places to look for work in 2012">article on news.com.au</a>. At first I thought it was going to cover off the best locations around Australia, or perhaps the world, for finding work in a variety of industries. It turned out to be a failed attempt at highlighting the key growth industry areas for jobs in Australia.</p>

<p>It began like this:</p>

<blockquote><p>JOBS demanded across several booming sectors will be the best place to find work this year.</p></blockquote>

<p>Despite the appalling structure and lack of coherence of the opening paragraph I pushed on through the rest of the article, hoping to find some interesting or useful information. Most of content would be fairly obvious to almost every Australian. The bits that could be considered interesting were old news, and nothing in the article made me feel that reading it was a good use of time.</p>

<!--more-->


<p>Then I got to the end and found this:</p>

<blockquote><p>For IT expert <em>Joe Public</em>, 23, right, the telecommunications and digital industry holds the promise of future growth. <em>Joe</em> studied IT at the University of Technology before completing a one-year placement at Macquarie Telecom.</p>

<p>&#8220;The industry is enormous and there&#8217;s plenty of variations and specialisations that you can pursue,&#8221; he says.</p>

<p><em>Joe</em> now sets up servers and IT networks for various clients&#8217; business applications.</p>

<p>Asked where he would like to be in five years&#8217; time, he says: &#8220;What I like is that I can go into a lot of different directions from where I am.&#8221;</p></blockquote>

<p>I tried to completely ignore the blatant mistakes but couldn&#8217;t. Despite the use of the word &#8220;right&#8221; in the first sentence there was no picture of the interviewee to be found. There&#8217;s a mention of &#8220;the University of Technology&#8221; but a failure to mention which one. If this person finished a degree, taking a minimum of 3 years to complete, that would mean that his one year placement finished at the ripe old age of 22 if we assume he started university at 18. This is best case. Working for another year, bringing him to 23 years old, caps his experience at 2 years maximum &#8211; not much for someone considered to be an <em>I.T. expert</em>, in the &#8220;digital industry&#8221; no less!</p>

<p><span class='pullquote-right' data-pullquote='At 23 years old I barely knew my object-oriented earhole from my procedural arsehole'>
I&#8217;ve been working professionally as a software developer/engineer/whatever since 1999. During this time I&#8217;ve spent a great deal of time learning, growing, failing, constantly trying to improve, and earning scars along the way. I&#8217;ve been fortunate enough to experience a huge number of different domains within software and have managed to land jobs in other countries than the one that I live in. Now that I am starting my 14th year in the industry I think I might be able to say that I&#8217;m no longer a junior. At 23 years old I barely knew my object-oriented earhole from my procedural arsehole, let alone have the gall to call myself an expert or allow someone else to refer to me as one. Doing otherwise would be a lie. To grossly over-generalise: <em>nobody at the age of 23 can be called an I.T. expert</em>. Add at least ten years before you&#8217;re no longer wet behind the ears.
</span></p>

<p><a href="http://buffered.io/uploads/2012/01/senior-lead-expert.jpg" rel="lightbox"><img title="Senior Lead Expert" src="http://buffered.io/uploads/2012/01/senior-lead-expert.jpg" width="200" style="float:right;margin-left:5px;margin-bottom:5px" /></a>Even the people that I know and respect, who I consider to be amongst the best, would not think of themselves as experts in their field by that age. To think that is to be overly arrogant. To allow a newspaper to state it on your behalf is stupid and I would consider it more damaging to your reputation than anything else. Don&#8217;t attempt to make yourself sound like more than you are, as more often than not you tend to come off looking like a fool (see the &#8220;Senior Lead Expert&#8221; to the right for another example).</p>

<p>Another issue I have with this article, and others that have this focus, is that they imply that these industry sectors are the ones to go for if you&#8217;re looking for a job <em>regardless of whether you&#8217;re interested in the field or not</em>.</p>

<p>I love what I do. I enjoy most of the work that I am asked to undertake, and more often than not enjoy working with the people in the teams I get to work in. I don&#8217;t dread getting out of bed and going to work. I look forward to the challenges, and I aim to produce quality stuff where possible while bettering myself in the process. To me, this is way more than a job. It&#8217;s part of me and I love it.</p>

<p>If you don&#8217;t love it, don&#8217;t do it. Don&#8217;t do it for the money. It&#8217;s not worth it, for you or for the people you&#8217;ll work with. If you love it, and you&#8217;re interested, then the industry will welcome you with open arms. If all you&#8217;ve ever wanted to be is a puppeteer, then go do that instead.</p>

<p><strong>News.com.au</strong> have done themselves, and Joe Public, a disservice with this article. It&#8217;s poorly written, lacks anything newsworthy, implies that the subject is claiming to be something he is not, and guides people to a number of industries for the wrong reasons.</p>

<p>If you want to read news which is meaningful, well-written, edited and at least researched to a semi-decent level, then try the <a href="http://www.abc.net.au/news/" title="ABC News">ABC</a> instead.</p>

<h3>NOTE</h3>

<p>This article is not targeting <em>Joe Public</em>, it is instead attacking the way that the newspaper has portrayed him.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reviews - They're all You need]]></title>
    <link href="http://buffered.io/posts/reviews-theyre-all-you-need/"/>
    <updated>2012-01-18T07:11:00+10:00</updated>
    <id>http://buffered.io/posts/reviews-theyre-all-you-need</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2012/01/pair-programming.jpg" rel="lightbox"><img src="http://buffered.io/uploads/2012/01/pair-programming.jpg" style="float:left;margin-right:5px;margin-bottom:5px;" width="200" /></a>I can clearly remember the first time I got involved in an Agile project &#8211; it was back in 2004, it was in London and in the finance industry (insurance to be exact). When I joined the project the team was small though over time it become much bigger.</p>

<p>While on that gig I met and worked with a few of the nicest and best devs that I&#8217;ve worked with (<a href="https://twitter.com/#!/robertthegrey" title="Robert @ Twitter">RobG</a>, <a href="https://twitter.com/#!/thenapoleon" title="Yoann @ Twitter">Yoann</a> and <a href="https://twitter.com/#!/RockThunderUK" title="Paul @ Twitter">The Chief</a>).</p>

<p>It was an exciting project. We were using <a href="http://www.extremeprogramming.org/" title="Extreme Programming">XP</a> in very much its purest sense, right from the beginning. We always paired up to do our programming, we created stories, we estimated our points using a point system that wasn&#8217;t tied to hours but instead was relative. We had mini-retrospectives, continuous integration, unit tests and more. For 2004, that was pretty good.</p>

<p>Since then I&#8217;ve worked on quite a few other Agile projects and over time, I have come to believe a few of the absolute purest views on Agile aren&#8217;t necessarily the best.</p>

<!--more-->


<p>Any Agile practitioner will say &#8220;You should use the process that works well for your team&#8221; and while that&#8217;s true they tend not to mean things like pair programming and unit testing which are considered an absolute must. The topic I&#8217;m interested in for the purpose of this post is <strong>pair programming</strong>.</p>

<h2>Does Pair Programming Work?</h2>

<p>Well does it? It&#8217;s a hard question to answer given its generalised nature. It sounds clichéd, and I guess to a point it is, but the answer is both yes and no. I don&#8217;t mean that in the same way that most people will mean it. I don&#8217;t mean that it might work in some teams but not in others. What I mean is that it works when approaching a particular kind of problem but not for others.</p>

<p>To add another generalisation, it works well in cases where the problem is quite difficult, or requires one or more difficult and hand-coded algorithms to solve. The type of problem where the possibility of getting it <em>drastically</em> wrong is a perfect candidate.</p>

<p>Drastically wrong is subjective, but I think we all know what I mean by it.</p>

<p>Some might argue that pair programming isn&#8217;t required even in this case, and perhaps they are right, but I don&#8217;t think so. Yes, you can have a design session where you get people together and talk about the options for implementation, nut out of a few of the details, etc. You can take the value from the discussion and, as the developer, dive into your dark little world of editing and bash out what you think was the design that everyone else had discussed. The result is usually vastly different to what the rest of the collective thought was going to be implemented.</p>

<p>Pair programming here helps. It helps make sure that one person isn&#8217;t skewed or biased, keeps discussion going around the problem and forces the developers to think more while they&#8217;re writing the code. Each key design decision is shared across two brains and (in theory) a better design will result.</p>

<p>That&#8217;s where pair programming fits. Anything <em>less</em> than that and I can&#8217;t help but feel that it&#8217;s overhead. It&#8217;s a burden. It doesn&#8217;t add enough value to justify its cost.</p>

<p>To be direct, yes I am saying that <em>pair programming is a waste of time and resources for anything less than the mind-boggling problems</em>. This assertion does come with a few assumptions:</p>

<ol>
<li>There are no junior members who may need mentoring.</li>
<li>All members of the development team are competent.</li>
<li>There is enough trust between the team members that each developer will not only <em>not</em> produce a pile of rubbish, but will also put their hands up if they feel they&#8217;re getting into something which requires input from the other minds in the room.</li>
</ol>


<p>If any of those assumptions is false then pair programming may have to come into play, or not! Point #2 interests me a little more than the others. If someone isn&#8217;t competent then it doesn&#8217;t matter if you do pair programming with them. What tends to happen is the competent person ends up doing everything while the numpty sits there playing a rather passive role, checking Facebook on their phone.</p>

<h2>If PP doesn&#8217;t work, what should we do?</h2>

<p>I found the answer to this question in 2008 when I joined a team of people working on a system here in Brisbane. This project, like the one I mentioned before, had people who really knew what they were doing &#8230; I think! (in no particular order: <a href="https://twitter.com/#!/josephcooney" title="Joseph @ Twitter">JoCo</a>, <a href="https://twitter.com/#!/secretGeek" title="Leon @ Twitter">Mr B</a>, <a href="https://twitter.com/#!/joelpob" title="Joel @ Twitter">Joel</a>, <a href="https://twitter.com/#!/rhysparry" title="Rhys @ Twitter">Rhys</a>). I worked with these guys for nearly a year without really doing any pair programming at all.</p>

<p>Fast forward to now. I am again working with Leon, Rhys and Joel. I am again using the process that was used back then in 2008. I am again amazed at the quality of the output compared to so many other projects where pair programming was used to a very large extent. Not only that, the speed at which things are getting done is also pretty amazing. I am sure this is partly down to the developers themselves, but I think the lack of pair programming allows the team to be really productive.</p>

<p>So what are we doing instead?</p>

<p>Simply: Test Reviews and Code Reviews.</p>

<p>A developer works on a story by himself. During the course of development, the developer often shouts out to the rest of the team for advice on a given issue. They talk to the business owner to get clarification on the issues inside the requirements, the conversation is positive and constant. If the problem is really difficult, two of the guys will pair up and bash it out, but this proving to be a rarity.</p>

<p>At the end of development, prior to pushing any changes to the server, the developer must have one of the testers perform a test review of the work that has been done. When that has passed, a developer must do a full code review of what has been produced for that story.</p>

<h2>It doesn&#8217;t sound any different!</h2>

<p>It might not appear to be different, but it is <em>very</em> different.</p>

<p><a href="https://twitter.com/#!/rhysparry" title="Rhys @ Twitter">Rhys</a> is our resident technical tester. In fact, he&#8217;s a developer dressed up in tester&#8217;s clothing. He has an incredibly sharp mind and an uncanny ability to find issues and break stuff. The number of times I have had my ass saved by Rhys prior to pushing my <del>shit</del> code to the central source repository is astounding. In all my time doing development, this one thing by itself has proved to catch more issues than anything else (including unit testing, automated testing, smoke testing and regression testing).</p>

<p>Testers have intimate knowledge of the requirements. They have experience with the system. They are aware of dependencies in business process that you are not. These factors, along with many others, are what make testers a great point of call prior to your commits.</p>

<p>It might be unfair to assume that every team has a technical testing resource that is the calibre of Rhys, but to put it bluntly <strong>your team should have one</strong>. Before passing your code on to the rest of the team it&#8217;s your duty to make sure it is as unbroken as possible. Test reviews have proved to be the most effective thing in accomplishing this.</p>

<h2>Back it up with a proper code review</h2>

<p>That&#8217;s right, not just any code review, but a <em>proper</em> one. One that requires you to go through your own code in quite a bit of detail. One that forces you to justify your design decisions. One that makes you critically analyse the legacy that you&#8217;ve just created.</p>

<p>Anyone who has gone through this process with a colleague of any reasonable quality will know that:</p>

<ul>
<li>&#8230; any time you cover off a bit of code that isn&#8217;t that nice you get nervous before you even talk about it.</li>
<li>&#8230; the code you wrote that you knew was sub-par is going to be picked up.</li>
<li>&#8230; any stupidity that you failed to see will be thrown back in your face (in a positive way of course).</li>
<li>&#8230; even the most subtle things can prove to be important and a good code review will often demonstrate why.</li>
</ul>


<p>In short, you know that you&#8217;ll get owned if you try to get away with something that you knew, deep down, wasn&#8217;t good enough in the first place.</p>

<p>As someone who conducts code reviews for other people in the team, you&#8217;ll not only learn about other people&#8217;s styles, flaws and strong points, you&#8217;ll also cover off areas of the system that you would otherwise <em>have absolutley no idea about</em>. This is the kind of knowledge sharing that you would get doing pair programming, but I think it&#8217;s more effective because you&#8217;re not dragged through the whole design and development process from the start, and you tend to be more interested when the discussion of the detail is condensed.</p>

<p>And let&#8217;s face it, being critical of someone else&#8217;s code is something we all enjoy, and we&#8217;re much more likely to pay attention during a code review than we are being a <a href="http://effectif.com/agile/pair-programming/be-a-better-navigator" title="Pair Programming Navigator">navigator</a> during a pair programming session.</p>

<h2>Bring it on</h2>

<p>Disagree? Feel free to let me know in the comments.
Think I&#8217;m full of shit? Feel free to let me know in the comments.
Anything else? Feel free to let me know in the comments.</p>

<p>I&#8217;m keen to hear what you all do, how you do it, and why you think it&#8217;s better or worse. In particular, do those of you who do pair programming at least <em>most</em> of the time believe that it is adding enough value to justify the cost? Do you feel better for it?</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I use Twitter]]></title>
    <link href="http://buffered.io/posts/why-i-use-twitter/"/>
    <updated>2012-01-16T07:04:00+10:00</updated>
    <id>http://buffered.io/posts/why-i-use-twitter</id>
    <content type="html"><![CDATA[<p>When I first signed up for <a href="http://www.twitter.com/" title="Twitter">Twitter</a> back in mid-2008 I didn&#8217;t really take it seriously. My view was that it was a toy and one that I intended to have a bit of fun with. I didn&#8217;t really think that it would turn into what it did. I certainly didn&#8217;t think it would be such an amazing source of information, nor did I expect it to give me contact with so many smart and interesting people.</p>

<!--more-->


<p>The idea of investing so much time in a stream of text-bites that are no more than 140 characters long seems a bit absurd. That&#8217;s certainly what I felt when I first signed up. How could a meaningful discussion be had? Why is it any better than the likes of <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat" title="IRC">IRC</a>? Why would I use it for anything than fire-and-forget with a goal of having a laugh?</p>

<p>When I first started, I felt like I was just doing a Facebook-style status update. I can guarantee that my first Tweets were uninteresting noise; the kind you can find in most people&#8217;s Twitter feeds even now. I did make a point of avoiding the kind of updates that <a href="http://www.penny-arcade.com/comic/2008/4/23/" title="Twitter Shitter">Penny Arcade</a> were having fun with at the time.</p>

<p>After an initial flurry where I played with the site and a few different clients I started to settle down and focus on a few topics that I was interested in. After following those topics for a while I slowly but surely found networks of people &#8211; <em>smart</em> people &#8211; who posted really interesting content. The content would often come in the form of a link with a tiny opinion alongside it which added to my ability to filter out the stuff I would and wouldn&#8217;t want to read.</p>

<p>It didn&#8217;t take long for Twitter to start making my RSS subscriptions a little cumbersome. The links and news were so fresh that the idea of using something that didn&#8217;t feel as &#8220;soft real-time&#8221; seemed like a waste of time. I felt that I had somehow landed on a more reliable source of information that was being filtered by people that I respected.</p>

<p>Being a sometimes vocal person in the technology world I thought I&#8217;d best do my bit to contribute to this new form of information sharing. While I kept up the fun side of using Twitter I put more time and effort into sharing the content I had found, passing on other people&#8217;s Tweets, adding my own short summation of the information being shared.</p>

<p>It took about 6 months for me to really realise the power that Twitter was giving me. I had, on many occasions, managed to get access to very influential people who work in or on the technology platforms that I was working with. I received personalised help, if not directly on Twitter then via email after a brief Twitter conversation. I was able to reach <em>many</em> people, varying from beginners through to experts, who were actively engaged in learning about languages and technologies, and having contact with those people helped me learn even more about what I was working with.</p>

<p>Twitter was a gold mine of information, and not just technical.</p>

<p>So is Twitter a muck-around tool? Perhaps for some is it, but for me it is way more. Should you use it? I think so, particularly if you&#8217;re a geek.</p>

<p>If you do decide to get stuck in and sign up for Twitter, or if you&#8217;ve got an account already but don&#8217;t feel you&#8217;re getting the most out of it, here are a few things that I highly recommend you do:</p>

<ol>
<li>Fill out your bio and add a link to a meaningful website.</li>
<li>Make use of the <a href="http://www.searchenginejournal.com/twitter-hashtags/9419/" title="What is a hashtag?">hashtag searches</a>. This facility will make it really easy for you to connect with people who are interested in the same topics as you.</li>
<li>Use hashtags yourself in you Tweets to make them visible to that same group of people.</li>
<li>Listen in on other people&#8217;s conversations. Browse through the threads as they&#8217;re often littered with interesting an valuable information.</li>
<li>Don&#8217;t but into discussions or make noise unless you really do have something valuable to say. In other words, add signal and not noise (yes, I should practise what I&#8217;m preaching here).</li>
<li>Don&#8217;t be scared to be yourself, you&#8217;ll find that it&#8217;ll be easier for others to garner respect for you.</li>
<li>Don&#8217;t be afraid to have an opinion and be honest.</li>
<li>Don&#8217;t worry about offending or being offended.</li>
<li>Don&#8217;t feel obliged to follow people back just because they&#8217;ve followed you, and vice versa. Twitter isn&#8217;t Facebook or Linked In.</li>
<li>Make sure you spend time once a week going through your followers and removing any spammers. When people first discover you on Twitter they&#8217;ll look at your bio, your site and your followers. The last thing you want others to think is that you&#8217;re a spammer yourself, or are closely associated with spammers.</li>
</ol>


<p>Oh, and enjoy yourself! Have fun with it. You&#8217;ll learn way more and engage more people if you do.</p>

<p>You can <a href="http://twitter.com/TheColonial" title="OJ on Twitter">add me too</a> if you like (no pressure).</p>

<p>PS. This post is, at least in part, a response to a question that <a href="http://twitter.com/Lisa_Cumes" title="Lisa on Twitter">Lisa</a> <a href="http://www.empowerexecutives.com.au/EmpowerExecutives/Blog/Entries/2012/1/13_Twitter_-_for_me_or_you.html" title="Twitter - for me or you?">posted just a few days ago</a>. Feel free to share your own story with her if you feel like it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CorrugatedIron Update - v0.1.1]]></title>
    <link href="http://buffered.io/posts/corrugatediron-update-v0-1-1/"/>
    <updated>2011-08-03T21:18:00+10:00</updated>
    <id>http://buffered.io/posts/corrugatediron-update-v0-1-1</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://facility9.com/" title="Jeremiah Peschka">JP</a> and I released our first Open Source project, <a href="http://corrugatediron.org/" title="CorrugatedIron">CorrugatedIron</a>. The release seemed to be fairly well received by those people who gave it a spin. We&#8217;ve had some good feedback along the way which we&#8217;ll be evaluating, and no doubt those suggestions and comments will be influencing the future of the library.</p>

<p>In the interim, we wanted to get another version out which sorts out two main issues and that changes the <em>perceived</em> &#8220;norm&#8221; when building applications with CorrugatedIron. Those issues are listed below. We&#8217;ve also go the first pass of our <a href="http://corrugatediron.org/documentation/MapReduce.html" title="Map/Reduce">Map/Reduce</a> documentation ready.</p>

<p>If you&#8217;re not interested in the detail, head on over to the <a href="http://corrugatediron.org/downloads.html" title="Downloads page">download page</a> to find out the many ways in which you can get access to the release. Otherwise, please read on!</p>

<!--more-->


<h2>Removal of IoC</h2>

<p>When we first put together the sample applications we thought that it&#8217;d be a good idea to show how these things can be done using what the mainstream .NET developers would use. That is, we decided to wire everything in with IoC. This wasn&#8217;t because we felt that this is how it <strong>had</strong> to be done, but more to try and give people a level of familiarity. The library that we chose to use for the samples was Unity, for no other reason that &#8220;it was there&#8221;.</p>

<p>This small mistake seemed to give off the impression that we felt that Unity was the best choice of all the IoC containers out there.</p>

<p>This is most definitely <strong>not the case</strong>. We are in no way advocating the use of one IoC container over the other. We honestly don&#8217;t care which one you want to use. You should use whichever works for you.</p>

<p>To avoid this perception we decided that it would be best to remove references to any IoC container in all samples except for the <a href="https://github.com/DistributedNonsense/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample" title="IoC Sample Project">one sample</a> which shows how to use <em>lots</em> of different containers to do the same thing. Hence you should see a <em>lack</em> of IoC containers in our examples from now on. Sorry for any confusion.</p>

<h2>Handling of Client IDs</h2>

<p>Our first implementation of Client ID generation in CorrugatedIron wasn&#8217;t a great implementation. We made the decision early on to generate IDs based on some details of the machine that the client was running on (ie. The MAC address of the first functioning NIC on the machine). Our thinking was that we wanted to uniquely identify a client while still allowing the ID to be reused across instances of the application. This might make sense for rich-client applications, but certainly doesn&#8217;t work well in the web world. In a web environment, each request could come from a different user.</p>

<p>Almost immediately after releasing v0.1.0, <a href="http://facility9.com/" title="Jeremiah Peschka">JP</a> and I read an email on the [Riak mailing list][mailinglist] which made us rethink our approach. After a bit of discussion, we decided to go with an idea of Jeremiah&#8217;s which involves the generation of the Client ID when the RiakClient instance is created. This generation can be controlled by the user of the library by specifying a <code>seed</code> value.</p>

<p>This gives the user the flexibility of not being concerned about the Client ID if they don&#8217;t want to be, but can have some control if they do.</p>

<h2>Ease of Configuration</h2>

<p>The only bit of &#8220;constructive criticism&#8221; that we received on-masse was via <a href="http://news.ycombinator.com/item?id=2799823" title="CI on Hacker News">Hacker News</a> and revolved around configuration. The general feeling was that the effort required to configure the library was higher than expected, especially when compared to other libraries. I&#8217;d suggest reading the full discussion over on the <a href="http://news.ycombinator.com/item?id=2799823" title="CI on Hacker News">Hacker News</a> site to read some of the reasons behind the design decisions. But, if you&#8217;re too lazy (I don&#8217;t blame you if you are), the short version is this: CorrugatedIron is a .NET library connecting to a clustered, distributed key-value store. A library that does this, while attempting to manage load-balancing across all nodes in the cluster, is going to require some configuration.</p>

<p>One concern in particular resonated with me, and that was the difficulty in getting CorrugatedIron running inside a REPL, such as <a href="http://www.fsharphelp.com/Interactive.aspx" title="F# interactive">FSI</a>. The two issues with getting a REPL to work from configuration are:</p>

<ul>
<li>The ability to specify the location of the configuration file.</li>
<li>The number of lines of code it takes to wire things in.</li>
</ul>


<p>The XML that&#8217;s required is not going to be changing in the short term. The values that are specified in that configuration are required to make the most of Riak and that&#8217;s not something we&#8217;re prepared to compromise on. However, the .NET code required to access it has changed, though the old way of wiring things in still exists for those people who want that level of flexibility.</p>

<p>In short, you can wire-in CorrugatedIron&#8217;s XML configuration as simply as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">var</span> <span class="n">cluster</span> <span class="p">=</span> <span class="n">RiakCluster</span><span class="p">.</span><span class="n">FromConfig</span><span class="p">(</span><span class="s">&quot;riakConfig&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">client</span> <span class="p">=</span> <span class="n">cluster</span><span class="p">.</span><span class="n">CreateClient</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>That&#8217;s it!</h2>

<p>Hopefully this will make your life a little easier while getting CorrugatedIron up and running. We&#8217;re always keen to hear your feedback, so please <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="CorrugatedIron @ Github">drop us a line</a> if you have any thoughts, suggestions or issues.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing CorrugatedIron]]></title>
    <link href="http://buffered.io/posts/introducing-corrugatediron/"/>
    <updated>2011-07-25T09:00:00+10:00</updated>
    <id>http://buffered.io/posts/introducing-corrugatediron</id>
    <content type="html"><![CDATA[<h2>It&#8217;s Alive!</h2>

<p>It is with great pride that I introduce my first ever Open Source product release: <a href="http://corrugatediron.org/" title="CorrugatedIron">CorrugatedIron</a>! A feature-rich .NET client for the <a href="http://riak.basho.com/" title="Riak">Riak</a> Key-Value store. Together with my partner-in-crime <a href="http://facility9.com/" title="Jeremiah Peschka">Jeremiah</a>, we&#8217;ve put together a driver which exposes a great deal of Riak&#8217;s functionality. CorrugatedIron is at <a href="https://github.com/DistributedNonsense/CorrugatedIron/tree/v0.1.0">v0.1.0</a>, and while it doesn&#8217;t support every feature the Riak has to offer, it covers most, if not all, of the most common features that are required to effectively communicate with the system.</p>

<!--more-->


<h2>Features</h2>

<p>I would love to cover off all of the features here, but we&#8217;ve already done it on the <a href="http://corrugatediron.org/" title="CorrugatedIron">official site</a>, so head over there to take a look at the feature list, documentation and sample projects.</p>

<h2>The What, Where, Why and How</h2>

<h3>How it all began</h3>

<p>I don&#8217;t remember the exact date that I was first exposed to <a href="http://riak.basho.com/" title="Riak">Riak</a>, <a href="http://basho.com/" title="Basho">Basho</a>&#8217;s bomb-proof database, but I do remember being very impressed. It was around the time I really started to get an interest in <a href="http://www.erlang.org/" title="Erlang">Erlang</a> programming, so it probably isn&#8217;t a surprise, given that Riak is written in Erlang, that it piqued my interest. I have a bit of a fascination with systems that don&#8217;t stop, and Riak fits firmly in that category.</p>

<p>So after playing with it for a while and marvelling at the sturdiness, the ease of set-up (even with clustering), the clever architecture and the make-up of the system, I realised that Riak was actually pretty special. Almost in a class of it&#8217;s own. Its properties really appealed to me, and I felt the need to do something with.</p>

<p>Back then, I wasn&#8217;t even working with Erlang professionally. The clients that I had at the time were pure .NET shops and didn&#8217;t feel the need to consider anything other than the &#8220;tried and true&#8221; <a href="http://en.wikipedia.org/wiki/Relational_database_management_system" title="Relational Databases">RDBMS</a> (which in Brisbane seems to be mainly MS SQL, particularly in the .NET circles). Given that the likelihood of my working with Riak in a professional sense in the short term was fairly slim, I wanted to look to other areas where I could work with it and contribute to it at the same time. Needless to say, my Erlang-fu wasn&#8217;t (and still isn&#8217;t) up to scratch, so contributing to Riak itself wasn&#8217;t yet something I thought I could take on. I needed something else.</p>

<p>Late last year, I was starting to look for projects that I could build and release as <a href="http://www.opensource.org/" title="Open Source">Open Source</a>. I have, on my occasions, contributed to other Open Source projects but I hadn&#8217;t worked on one of my own and released it into the wild. This is something that I really wanted to do and so was looking for something to build.</p>

<p>During my travels in the Riak circles I had noticed that there were quite a few clients available which allowed people to talk to Riak from various languages. Basho themselves <a href="http://wiki.basho.com/Client-Libraries.html" title="Client libraries">support</a> ones for Erlang, Java, PHP, Python and Ruby, and there are many more listed on the <a href="http://wiki.basho.com/Community-Developed-Libraries-and-Projects.html#Client-Libraries-and-Frameworks" title="Client libraries">Riak community clients page</a> which cover languages like C, Clojure, Go, Node.js, Perl, Scala and more.</p>

<p>Amongst this libraries there were two listed for .NET. Both of them seemed to have a small set of functionality, they both weren&#8217;t finished and at the time they both had not been touched for quite a while. In short, for .NET people, there really wasn&#8217;t a viable option for Riak connectivity. What a travesty!</p>

<p>I remember sending an email to <a href="http://twitter.com/pharkmillups" title="Mark Phillips">Mark</a> telling him that I was pondering the thought of building this library to make sure that there wasn&#8217;t already someone else out there making a go of it. He was aware of the two existing solutions but didn&#8217;t know what the plans were with them, and he wasn&#8217;t aware of any others at the time. This was all the validation that I needed.</p>

<p>So, in late 2010, I decided that the first project I wanted to build and release to the world as an Open Source application was a .NET client for Riak, one that worked on both the <a href="http://en.wikipedia.org/wiki/Common_Language_Runtime" title="Microsoft CLR">CLR</a> and on <a href="http://www.mono-project.com/" title="Mono">Mono</a>. This is where CorrugatedIron was conceived.</p>

<h3>So why the long wait?</h3>

<p>If you look at the <a href="https://github.com/DistributedNonsense/CorrugatedIron/graph">history</a> of the code-base you&#8217;ll see that I had an initial flurry of activity in early 2011, but didn&#8217;t really do anything else for quite some time. There&#8217;s a reason for that!</p>

<p>When I first decided on the project, I spent a bit of time thinking about the design. I wanted the interface to be more &#8220;functional&#8221; in many ways. I wanted to remove the idea of resource management away from the caller. I didn&#8217;t want to give them rope (such as <code>IDisposable</code> instances) with which to hang themselves (such as forgetting to <code>Dispose()</code>). I wanted the interface to be clean, simple, intuitive and safe.</p>

<p>This little in-memory design session went on for quite some time, but I didn&#8217;t really put anything down on paper. Nor did I write any code. Instead, I though that I would put something together which wasn&#8217;t really related or as important as the API. Something that was lower level which the user of the library would not (and should not) see.</p>

<p>A Riak node has two interfaces which clients can connect to. One of them is a <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" title="REST">REST</a> API, and the other is a binary API which utilises <a href="http://code.google.com/p/protobuf/" title="Protocol Buffers">Protocol Buffers</a>. I thought that it would be fun to start working on the Protocol Buffer handling while the idea of the API formed slowly in the back of my mind.</p>

<h3>Then along came JP</h3>

<p>Then, just before Christmas (23rd December to be exact) I received an email out of the blue from a chap in America. Here&#8217;s how it started:</p>

<blockquote><p>Greetings from America!</p>

<p>Hope your summer is going well. Mark Phillips told me that you were interested in working on a good .net driver for Riak. Have you made any progress or is it still a general idea in your head?</p></blockquote>

<p>There was much more to the email than that, but it certainly started off well! The email was from <a href="http://facility9.com/" title="Jeremiah Peschka">Jeremiah Peschka</a>, a chap who&#8217;s name I had seen floating around the Riak <a href="http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com" title="Riak mailing list">mailing list</a>. In fact, I remember his name catching my eye on more than one occasion because his email signature contained the following:</p>

<blockquote><p>Microsoft SQL Server MVP<br/>
MCITP: Database Developer, DBA</p></blockquote>

<p>This resonated with me because he was obviously into RDBMSs, but hadn&#8217;t been a complete asshat on a list full of people working with <a href="http://en.wikipedia.org/wiki/NoSQL" title="NoSQL">NoSQL</a>. This was a rare and surprising thing.</p>

<p>Moving on. After a few email exchanges, Jeremiah indicated that he was interested in helping to build CorrugatedIron (despite the whacky name) and we decided to team up. I knew that he&#8217;d definitely add value to the whole process and would also keep me motivated. Plus, his obvious skills in the SQL realm would no doubt be useful too!</p>

<p>We continued to talk into January and I thought that it was past time that I shared the code that I had hacked together so that we had a starting/talking point. On the 7th January, I committed my first <a href="https://github.com/DistributedNonsense/CorrugatedIron/--SOMETHING-GOES-HERE--">batch of code</a> to the repository which contained a stack of very untested code. I don&#8217;t even know if it worked! The result: we had a lot to talk about.</p>

<h3>Another intermission</h3>

<p>Though JP and I continued to talk a great deal via email, we were both quite under the pump with our respective places of employment. We shared ideas along the way, but neither of us were really into the project as a result of the intense work we had on elsewhere. Though I&#8217;m fairly certain that the thought of the project wasn&#8217;t far from our minds the whole time.</p>

<p>Then on the 12th April, out of the blue again, another email came. I&#8217;m not going to divulge all the detail, but the crux of it indicated that there was a growing interest in seeing a .NET client for Riak from people in other areas of the world. It also asked what the story was with the client that we were building, and wondered if we had a timeline down with a potential release date.</p>

<p>This was scary, exciting and a slap in the face at the same time. Scary and exciting because there was a possibility that someone out there might want to use what we were building. A slap in the face because we hadn&#8217;t really done much at all other than the initial commit and a great deal of talking. It was just the wake up call that we needed.</p>

<p>I spoke to JP about the email and we both decided that it was well past time to get our heads down and start working on this thing for real. We needed to lock in a set of features, a time-frame for development and, most importantly, a release date.</p>

<p>So, we did!</p>

<h3>All ahead flank</h3>

<p>In early May, JP and I managed to start freeing up time that we could then contribute to our project. Development ramped up and kicked off in mid-May, and on the 18th, we committed our first changeset to the repository since the very first commit in January. From there, we went nuts!</p>

<p>We consistently worked on things and pushed our code back and forth for the latter half of May and well in to June. At this point, things really started to get exciting.</p>

<p>We had managed to get quite a few features out in a small period of time, and were generally very happy with our progress. JP was making the most of his superior Riak knowledge and was banging out API features like there was no tomorrow. Meanwhile, I had my head down in the guts of the underlying bits, trying to keep things sane.</p>

<p>It was at this point we were told of <em>more</em> people who were keen to get their hands on a quality .NET client, and that if we could get the client ready in time, various individuals would be happy to talk about it during <a href="http://oscon.com/" title="OSCON">OSCON</a>, the biggest Open Source convention I know of. Awesome! This was an opportunity too good to miss.</p>

<p>We finalised our feature-set for v0.1.0, wrote down our final time-line and informed various parties of what we were planning to do. It was locked in. We were heads down, bums-up trying to get things into shape. It was all very exciting.</p>

<h3>Even more interest</h3>

<p>By early July, we had somehow managed to attract the attention of two more individuals who were looking for this functionality. Both of which put their hands up to the opportunity to look at our Alpha software, take it for a spin and give us some feedback. This was awesome. Having other people look over the code and critique it while, in some ways, evaluating it for their own needs is a great thing.</p>

<p>After a short period of time, we received very constructive (and, just quietly, rather gratifying) comments from both guys. It made us feel like we couldn&#8217;t be doing too badly!</p>

<p>We opened up the repository to them so that they could get the latest code whenever they wanted, and also opened it up to some of the Basho guys so that they could also cast their eyes over it. The cat was slowly coming out of the bad.</p>

<p>On the 20th July, we locked in the feature-set for v0.1.0 and froze the codebase for all but minor changes, bug fixes and tweaks. It was time to do what everyone <em>loves</em> to do: <strong>documentation</strong>.</p>

<p>Given that I tend to hate documentation, straight away I was looking for something else to fill the time with. Thankfully, alongside documentation, we also needed a few sample applications (let&#8217;s face it, as devs we learn much faster from working code compared to reams of documentation). So I leapt on the opportunity to crank out <a href="https://github.com/DistributedNonsense/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample.YakRiak" title="YakRiak.NET">YakRiak.NET</a>, a .NET client for <a href="https://github.com/seancribbs" title="Sean Cribbs">Sean Cribbs</a>&#8217; <a href="https://github.com/seancribbs/yakriak" title="The original YakRiak">YakRiak</a> chat application. It was incredibly simple to do and didn&#8217;t take very long at all. When building the app, and finally <em>using</em> my own software, I have to admit I felt pretty good. It was nice to use my own software for something fun!</p>

<p>After that, JP put together a new <a href="https://github.com/peschkaj/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample.SessionStateProvider">Session State Provider</a> which used Riak as the back-end store. How good is that! Riak-backed session state in .NET. Awesome sauce.</p>

<p>I also finalised a small sample application which utilised some of the most common IoC frameworks to wire in the configuration, and began working on the &#8216;real&#8217; documentation again.</p>

<h3>&#8220;Going live&#8221;</h3>

<p>Finally, on the 25th July, after a couple of months of intense development, sample app creation, documentation and blog posts, CorrugatedIron was released to the world &#8211; just in time for OSCON (phew!).</p>

<p>While the documentation isn&#8217;t as thorough as we would like, and our unit test coverage isn&#8217;t as high as we&#8217;d like, we&#8217;re very happy with what we&#8217;ve managed to achieve. This first release is by no means the last, and JP and I are both excited about what we&#8217;re going to add to it in the future.</p>

<h3>A small side note</h3>

<p>When people first start working on projects like this there is always a risk that personalities will clash and the software will suffer. JP and I knew nothing of each other when we started this thing, yet over time have got to know each other and had a great deal of fun learning from each other. I think I&#8217;ve been really fortunate in having JP involve himself in this project. He has been open to different ideas and opinions, has never come across as an ass and has been a real pleasure to work with the whole time.</p>

<p>So, JP, thanks mate! I&#8217;m really glad you got involved. CorrugatedIron wouldn&#8217;t be what it is now if you hadn&#8217;t.</p>

<h3>The End</h3>

<p>Thanks for reading this far! If you&#8217;re a .NET mofo and you&#8217;re keen to get your Riak on, <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="Source code">grab the source</a>, <a href="https://github.com/DistributedNonsense/CorrugatedIron/downloads" title="Binary downloads">download the binaries</a> or <a href="http://www.nuget.org/List/Packages/CorrugatedIron" title="Nuget package">install the Nuget package</a> and get cracking! Feedback is always welcome, as are patches. So if you&#8217;ve got something to add, take away or refine, fork our <a href="https://github.com/DistributedNonsense/CorrugatedIron" title="Source code">repository</a> and get those pulls requests happening!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go With Your Instinct]]></title>
    <link href="http://buffered.io/posts/go-with-your-instinct/"/>
    <updated>2011-02-25T16:31:00+10:00</updated>
    <id>http://buffered.io/posts/go-with-your-instinct</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2011/02/double-facepalm.jpg" rel="lightbox"><img src="http://buffered.io/uploads/2011/02/double-facepalm.jpg" width="150" style="float:left;margin-right:5px;margin-bottom:5px;" /></a>At an early age I realised that it&#8217;s not always a bad thing to go with your first instinct. I won&#8217;t go into the reasons here, nor the way I came to that conclusion. What I will say is that I wish I&#8217;d listened to my inner-8-year-old-self when I started down the thread of emails and Tweets you&#8217;re about to read.</p>

<p>Suffice is to say that I have learned my lesson!</p>

<p>The thread speaks for itself. Enjoy :)</p>

<!--more-->






<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.15 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Program has crashing on random times. Everything tried is not fix it.<br />
PLEASE THIS IS URGENT ONE NOW. <br />
All detail attached.<br />
I ahve manager breathing down neck have two customer angry.<br />
I look everywhere your blog is kindest help please thank.<br />
Reward in heaven.<br />
Al Soong<br />
<img src="http://buffered.io/uploads/2011/02/attachment.png"/><br/>
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40295102056239104">TheColonial</a></h2>
<p>Third email like this in as many days. Perhaps if &#8220;reward in heaven&#8221; wasn&#8217;t written I may have helped. <a href="http://twitpic.com/42t2sj">http://twitpic.com/42t2sj</a></p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40296042956066816">TheColonial</a></h2>
<p>Shame. All that was in the doc was a very blurry and hard to read image with a stack trace that I can&#8217;t read.</p>
</div>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.24 PM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> fix my viewstate<br />
<br /> 
Sorry to hear of your issues. The image that you have sent me is extremely poor quality and I&#8217;m unable to read it. <br />
Please send a screenshot as a PNG/JPG or just copy and paste the text into an email. Don&#8217;t use word.<br />
<br />
OJ<br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.17 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
happen AGAIN!<br />
<br />

> Program has crashing on random times. Everything tried is not fix it.<br />
> PLEASE THIS IS URGENT ONE NOW. <br />
> All detail attached.<br />
> I ahve manager breathing down neck have two customer angry.<br />
> I look everywhere your blog is kindest help please thank.<br />
> Reward in heaven.<br />
> Al Soong <br />

<br />
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40297392909582336">TheColonial</a></h2>
<p>*sigh* some people have no idea how to get help <a href="http://twitpic.com/42t54u">http://twitpic.com/42t54u</a></p>
</div>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.30 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Uninstalling word now. what next?<br />
<br />
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40299003639758848">TheColonial</a></h2>
<p>Christ on a Bike, this guy is writing code?! #fail <a href="http://twitpic.com/42t6s1">http://twitpic.com/42t6s1</a></p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1060266034/twitter_avatar_normal.jpg"/><h2><a href="http://twitter.com/#!/rbanks54/status/40304384470425600">rbanks54</a></h2>
<p>ROFLMAO!!! That&#8217;s priceless. The next step is to tell him to pack his pc in a box because he&#8217;s not qualified to use it</p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40347229483040768">TheColonial</a></h2>
<p>@rbanks54 and this dude is apparently a developer! Fark :-)</p>
</div>


<div class="tweet"><img src="http://a0.twimg.com/profile_images/1187162790/profilepic-2010-12-10_normal.jpg"/><h2><a href="http://twitter.com/#!/DamonOehlman/status/40303061285076992">DamonOehlman</a></h2>
<p>@TheColonial OK, that is awesomely funny. Admittedly you did tell him not to use word :)</p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40304430628868096">TheColonial</a></h2>
<p>@DamonOehlman if someone told you to not use your oven to make ice cream would your rip the oven out of the wall? :-D</p>
</div>


<div class="tweet"><img src="http://a1.twimg.com/profile_images/82675101/n710576649_899427_1819_normal.jpg"/><h2><a href="http://twitter.com/#!/DamianM/status/40300422925254657">DamianM</a></h2>
<p>@TheColonial HAHAHA That&#8217;s awesome! Maybe you tell him he needs to close his windows, his screen will go blank and he&#8217;ll stop bothering you</p>
</div>


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40304606894489600">TheColonial</a></h2>
<p>@DamianM yeah :-) should have gone with my first impulse and ignored him.</p>
</div>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 4.34 PM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Don&#8217;t uninstall word. I&#8217;m asking you to send me the stack trace in a form that I can read!<br />
<br />
Just paste the text of the error into an email directly<br />
<br />
OJ<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 9.30 PM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Thank you. You are right! Even uninstall word cannot fix of the site.<br />
My normal word is the linux. I cannot find to send you the stack trace in a form. What form is it? <br />
<br />
The citrix not allow cuts and paste. Do you FAX or SKYPE? I read you message.<br />
<br />
This to:<br />
<pre>
Program Location:
   at Microsoft.SqlServer.Management.DataTools.Interop.IDTDocTool.Save(Object dsRef, String path, Boolean okToOverwrite)
   at Microsoft.SqlServer.Management.UI.VSIntegration.Editors.VsDataDesignerNode.Save(VSSAVEFLAGS dwSave, String strSilentSaveAsName, IVsUIShell pIVsUIShell, IntPtr punkDocDataIntPtr, String& strMkDocumentNew, Int32& pfCanceled)
</pre>
<br />
HURRY PLEASE<br />
<br />
Reward in heaven.<br />
Al Soong<br />
<br />
***************************************************************************************************<br />
***Blessed be the Lord who has given rest to his people Israel, according to all that he***<br/>
***promised. Not one word has failed of all his good promise, which he spoke by Moses his***<br />
***servant.                                                                                 ***<br />
***************************************************************************************************<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Wednesday 23 Feb 2011 10.56 PM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Alwyn,<br />
<br />
Make sure you read what I am saying, and read it properly. I never once told you to uninstall Word, I just told you not to use it to send me the details of your issue.<br />
<br />
Citrix shouldn&#8217;t stop you from copying and pasting, but if it does, take a screenshot like you did before and open &#8220;Paint&#8221;. you should find it in the &#8220;accessories menu&#8221;. when you&#8217;ve opened paint, paste the screenshot in there, and save the image as a jpg, png or bmp. Then attach that to an email and send it to me.<br />
<br />
Sorry, but I am not giving out fax or skype details. Trust me, you&#8217;re getting way more out of this than you deserve.<br />
<br />
OJ<br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 7.30 AM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
HURRY PLEASE. WE GO LIVE IN 20 MINUTES.<br />
Maybe you look at site yourself and see error please. it is here <a href='http://127.0.0.1:8081/mailout/'>http://127.0.0.1:8081/mailout/</a><br />
Click the MAILOUT button then CHURCH NEWS. Wait for OUTLOOK LOADING stop the blink. Type the MESSAGE for the people and click the GO SEND.<br />
<br />
you to can getting more out of this than you deserve. My company is biggest oil 2nd company in singapore. please to send CV and we keep you remember if new opening. I have email of you will KEEP.<br />
<br />
In heaven please the angels felate you.<br />
Al Soong<br />
<br />
12:1 Therefore, since we are surrounded by so great a cloud of witnesses, let us also lay aside every weight, and sin which clings so closely, and let us run with endurance the race that is set before us, 2 looking to Jesus, the founder and perfecter of our faith, who for the joy that was set before him endured the cross, despising the shame, and is seated at the right hand of the throne of God.<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 8.29 AM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> fix my viewstate<br />
<br />
Is a windows 32 64
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 10.15 AM<br />
<strong>To:</strong> Lingli Farhat<br />
<strong>Cc:</strong> OJ<br />
<strong>Subject:</strong> Re: UPDATE PLEASE<br />
<br />
10 MORE MINUTES and ALL fixed then good friend OJ fixing. Say HI! boardroom.<br />
<br />

> subject: UPDATE PLEASE<br />
> Thursday, 24 February, 2011 12:11 AM<br />
> From: Lingli Farhat<br />
> To: alwyn soong<br />
> AN UPDATE PLEASE ALWYN.<br />
><br />
> WE ARE WAITING FOR YOUR GRACIOUS PRESENCE IN THE BOARD ROOM AND WISH TO HEAR ONLY HAPPY NEWS.<br />
><br />
> OUR PATIENCE IS CERTAINLY TESTED THIS HOUR.<br />
><hr/>
> No one has ever seen God; if we love one another, God abides in us and his love is perfected in us.<br />
><hr/>
> Free POP3 Email from www.gawab.com<br />
> Sign up NOW and get your account @gawab.com!!<br />

</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Lingli Farhat<br />
<strong>Date:</strong> Thursday 24 Feb 2011 10.49 AM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Cc:</strong> OJ<br />
<strong>Subject:</strong> RE: re: UPDATE PLEASE<br />
 <br />
TIME IS MOST CERTAINLY &#8220;UP&#8221; ALWYN.<br />
<br />
I HAVE LOOKED AGAIN AND THE EXPLORER IS STILL EMPTY  <a href='http://127.0.0.1:8081/mailout/'>http://127.0.0.1:8081/mailout/</a><br />
<br />
I WILL SEE YOU AND YOUR &#8220;OJ&#8221; FRIEND IN MY OFFICE BEFORE TODAY IS &#8220;UP&#8221; <br />
<br />
FATHER LINGLI FARHAT<br />
<br />
OFFICE OF THE MINISTER<br />
<hr/>
The thoughts of the wicked are an abomination to the Lord, but gracious words are pure.<br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 11.01 AM<br />
<strong>To:</strong> OJ<br />
<strong>Cc:</strong> Lingli Farhat<br />
<strong>Subject:</strong> RE: re: UPDATE PLEASE<br />
 <br />
OJ good frien please in dark hour. I HAVE THE VIEWSTATE! I HAVE IT! THIS IS HERE<br />
 <br />
Took all day to copy out<br />
 <br />
QSBqb2tlJ3Mgbm90IGEgam9rZSB1bnRpbCBpdCBnb2VzICp0b28qIGZhci4NCkxvdHMgb2YgbG92<br />
ZQ0KTGVvbg0Kd2l0aCBoZWxwIGZyb20gUmh5cyBhbmQgSm9lbC4NCkFsc28gQkNDJ2QgLS0gSm9z<br />
ZXBoLg==<br />
<br />
If you read it for me I get OUT from hair. Expertschange sayt BASE64????? <br />
 <br />
Reward in heaven<br />
Al Soong<br />
CHIEF ENGINEER<br />
 <br />
************************************************************************************************************<br />
***22 But the fruit of the Spirit is love, joy, peace, patience, kindness, goodness, faithfulness,   ***<br/>
***23 gentleness, self-control; against such things there is no law.                                    ***<br />
<br />
************************************************************************************************************<br />
<br />
</blockquote>


<hr />


<p>The garbled text above, when <a href="http://www.motobit.com/util/base64-decoder-encoder.asp">base 64 decoded</a> reads:</p>

<blockquote>
<pre>
A joke's not a joke until it goes *too* far.
Lots of love
Leon
with help from Rhys and Joel.
Also BCC'd -- Joseph.
</pre>
</blockquote>


<hr />


<div class="tweet"><img src="http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg"/><h2><a href="http://twitter.com/#!/TheColonial/status/40577362336677889">TheColonial</a></h2>
<p>I&#8217;ve just been absolutely owned by some soon to be ex-friends :) Great prank.. you utter, utter bastards :)</p>
</div>


<hr />


<blockquote>
<strong>From:</strong> Alwyn Soong<br />
<strong>Date:</strong> Thursday 24 Feb 2011 11.11 AM<br />
<strong>To:</strong> OJ<br />
<strong>Subject:</strong> ERLANG<br />
<br />
Now i learn erlang.<br />
 <br />
You teach me please.<br />
 <br />
What first? <br />
<br />
</blockquote>


<hr />


<blockquote>
<strong>From:</strong> OJ<br />
<strong>Date:</strong> Thursday 24 Feb 2011 11.56 AM<br />
<strong>To:</strong> Alwyn Soong<br />
<strong>Subject:</strong> RE: ERLANG<br />
<br />
sure.. start with this:<br />

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">bullet</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


</blockquote>


<hr />


<p><a href="http://secretgeek.net/">Leon</a>, <a href="http://i-think22.net/">Rhys</a>, <a href="http://callvirt.net/">Joel</a> and to a point <a href="http://jcooney.net/">Joseph</a>: you&#8217;ve started a war!</p>

<p>Well played :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now Powered by Blogofile]]></title>
    <link href="http://buffered.io/posts/now-powered-by-blogofile/"/>
    <updated>2011-02-15T20:44:00+10:00</updated>
    <id>http://buffered.io/posts/now-powered-by-blogofile</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2011/02/V8SFIEngine2001.jpg" title="Time for a new engine" rel="lightbox"><img src="http://buffered.io/uploads/2011/02/V8SFIEngine2001.jpg" width="150" style="float:right;margin-left:5px;margin-bottom:5px;" alt="Time for a new engine"/></a>When I <a href="http://buffered.io/posts/office-registration-and-activation/">first started blogging</a> back in 2006 the platform of choice at the time was <a href="http://wordpress.org/">Wordpress</a>, a feature-rich blogging platform build with <a href="http://www.php.net/">PHP</a>. Since then the platform has improved substantially and the number of community-driven contributions and plug-ins has increased to a massive number. I&#8217;ve thoroughly enjoyed using Wordpress for the past 5 years and would recommend it to anyone (I already have!) who is looking for a quality blogging platform.</p>

<p>For me, however, Wordpress was becoming less and less appealing. This isn&#8217;t due to a failing in the platform itself, but more because my needs/desires for my blogging engine were changing.</p>

<!--more-->


<p>One of the curses of maintaining a technical blog is that the posts very quickly &#8220;expire&#8221;. Their use-by date can be very short, and hence it becomes a burden to keep them up to date. So far, I&#8217;ve not done a great job of updating my posts, partly due to laziness, and partly because doing it using Wordpress is a little painful. I was looking for a solution to this problem, and nothing that I could see coming out of the Wordpress community was helping. What I really wanted was to have instant access to posts on my file system, not via a web front-end. Ideally, I would be able to store all of my posts in a <a href="http://hg-scm.org/">Mercurial</a> repository.</p>

<p>I was also tired of having to write posts using straight HTML. I am not a fan of using online editors. Browsers are unpredictable and a stray keystroke can move you from your page to another page, resulting in you losing anything that hasn&#8217;t been saved along the way. Also, the editors are terrible, relatively featureless and often buggy. Wordpress&#8217;s editor, while very good, is not my cup of tea. It was getting to the point where I really wanted to write my posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> instead. I am aware of some plug-ins which allow this kind of functionality, but my experiences with them weren&#8217;t that great. I wanted to write things in VIM and easily save/publish to the site without having to leave VIM.</p>

<p>Recently I have received offers of help in updating content from other people in the technical community. They have been interested in getting access to the content so they can contribute in keeping it up to date. Providing access to these people would be painful using Wordpress as a tool. Not because it doesn&#8217;t do access control, but because the workflow is just unpleasant. Ultimately the ideal scenario is to store my Mercurial repository, with all the posts in it, on <a href="http://bitbucket.org/">Bitbucket</a> so that other people can fork the repository, make changes and submit <a href="http://confluence.atlassian.com/display/BITBUCKET/Forking+a+Bitbucket+Repository">pull requests</a> when they have modified the content. I could easily merge the changes and republish my site.</p>

<p>Apart from the workflow and technical reasons, I was very interested in changing the way the site was served. The blog content is totally static except for two cases, both of which can be handled externally:</p>

<ul>
<li>Comments - for a while I&#8217;ve been using <a href="http://disqus.com/">Disqus</a> to handle my comments. The platform is awesome. No spam, no need to get people to sign in to comment, no overhead. Can&#8217;t recommend it enough.</li>
<li>Post updates - posts are updated by me and only me. All I needed was a way of converting my posts to a static HTML website and then copying that to my webserver.</li>
</ul>


<p>Since I had no need for a <em>dynamic</em> site, I could easily move away from PHP and database-driven content. All I needed was a bit of help.</p>

<h2>Enter Blogofile</h2>

<blockquote><p>Blogofile is a static website compiler, primarily (though not exclusively) designed to be a simple blogging engine. It requires no database and no special hosting environment. You customize a set of templates with Mako, create posts in a markup language of your choice (see Post Content) and Blogofile renders your entire website as static HTML and Atom/RSS feeds which you can then upload to any old web server you like.</p></blockquote>

<p>Exactly what I need! I&#8217;m no <a href="http://www.python.org/">Python</a> guru, but I knew I had enough coding chops to pick up the essentials to hack together a template which would suit my needs. I decided to dive in. My plan was:</p>

<ul>
<li>Port my current WP theme to Blogofile (which uses <a href="http://www.makotemplates.org/">Mako</a> behind the scenes).</li>
<li>Hack the engine a little to include:

<ul>
<li>OpenID delegation support</li>
<li>Feedburner support</li>
<li>Google Analytics integration</li>
<li>Series support</li>
</ul>
</li>
<li>Get a <a href="http://aws.amazon.com/free/">free Micro instance</a> running on <a href="http://aws.amazon.com/ec2/">EC2</a> with <a href="http://www.python.org/">Python</a> and <a href="http://hg-scm.org/">Mercurial</a> installed.</li>
<li>Set up a Mercurial hook which regenerates the site and makes it available to the public when content is pushed to the repository.</li>
<li>Migrate the content from the WP site to a set of Markdown posts.</li>
<li>Fix links/images/etc from the previous posts and include them in the new site content.</li>
<li>Hack a few other things to make sure the content looks relatively similar, including the support for the <code>&lt;!--more--&gt;</code> tag (which splits posts in WP).</li>
</ul>


<p>It will come as no surprise that I had to learn a little bit along the way :) I&#8217;m now exposed to how Python hangs together, and I have a (relatively) solid grasp of Mako templates.</p>

<p>The net result is the site that you&#8217;re now looking at! From my side of the planet the speed different is noticable, and the experience of publishing to it is as simple as <code>hg commit -m "message" &amp;&amp; hg push web</code> - I don&#8217;t have to leave VIM at all to do that. All of my goals have been met, and I&#8217;m happy :)</p>

<p>Now this task is out of the way, I&#8217;ll be continuing work on my <a href="http://buffered.io/series/web-development-with-erlang/">Erlang blog series</a>. I&#8217;m looking forward to having the next post done and ready for your critique.</p>

<p>For those of you considering other blogging platforms which suit different workflows better than the mainstream options, be sure to check <a href="http://blogofile.com/">Blogofile</a> out. It&#8217;s a great system, and worth the effort of diving into. I&#8217;m happy to answer questions if you have any.</p>

<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issue with Google Reader]]></title>
    <link href="http://buffered.io/posts/issue-with-google-reader/"/>
    <updated>2010-11-26T09:58:00+10:00</updated>
    <id>http://buffered.io/posts/issue-with-google-reader</id>
    <content type="html"><![CDATA[<p>For some reason Google Reader has failed to update and include my latest <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/">Web Development in Erlang</a> post. This is rather odd as every other RSS reader I have tested (including the one built-in to MS Outlook) has managed to parse and handle the post just fine. I have attempted to get in touch with the GReader team but I haven&#8217;t had any luck so far in getting them to respond.</p>

<p>Those of you who are using Google Reader and are interested in this post, please point your browser in <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/">this direction</a>.</p>

<p>Apologies for the issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 3]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3/"/>
    <updated>2010-10-13T06:31:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-3</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/09/riak-logo.png" alt="Riak Logo" style="float:left;padding-right:5px;padding-bottom:5px;"/>For those of you who are new to the series, you may want to check out <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> and <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/" title="Wembachine, ErlyDTL and Riak - Part 2">Part 2</a> before reading this post. It will help give you some context as well as introduce you to some of the jargon and technology that I&#8217;m using. If you&#8217;ve already read then, or don&#8217;t want to, then please read on!</p>

<p>This post builds on the previous two, but not without a few little modifications. If you&#8217;re interested in following along step by step with your own version of the code running, then get yourself a copy of <a href="https://bitbucket.org/OJ/csd/changeset/df62880d12a8" title="Source code for Part 2">this changeset</a> before doing so.</p>

<p>In this post we&#8217;re going to cover:</p>

<ol>
<li>A slight refactor of code structure to support the &#8220;standard&#8221; approach to building applications in Erlang using OTP.</li>
<li>Building a small set of modules to talk to <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a>.</li>
<li>Creation of some <a href="http://json.org/" title="JavaScript Object Notation">JSON</a> helper functions for reading and writing data.</li>
<li>Calling all the way from the <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a> front-end to Riak to extract data and display it in a browser using <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a> templates.</li>
</ol>


<p>There are quite a few code snippets in this post as well as output from script executions and <code>bash</code> sessions. To avoid confusion, all file listings reference the path to the file that is being modified relative to the root of the project folder.</p>

<p>Be warned, this is a <em>long</em> post :) Get yourself a <em>shmoke und a pancake</em>, a glass of your favourite beverage and put some relaxing music on (instrumental is best).</p>

<p>Are you ready? OK, here we go &#8230;</p>

<!--more-->


<h2>A Slight Refactor</h2>

<p>I was ready to embark on this third post a while back but then I sat back and thought about how I might structure things if I were using another set of technologies. Usually I would put another layer between the web tier and the back-end database cluster as opposed to having the web tier talk to the database directly. It didn&#8217;t make sense to me that this approach would be any different in Erlang.</p>

<p>I had a chat to <a href="http://twitter.com/sj_mackenzie" title="Stewart Mackenzie on Twitter">two</a> <a href="http://twitter.com/MatthewErbs" title="Matt Erbs on Twitter">blokes</a> that I really respect to get their views, and then I fired off a question to the Basho guys (via the <a href="irc://irc.freenode.com/riak" title="Riak IRC on Freenode">#riak IRC channel</a>). The Basho lads even made the effort to respond to me via the <a href="http://lists.basho.com/pipermail/riak-users_lists.basho.com/2010-September/001984.html" title="Riak Recap">Riak Recap</a> as they weren&#8217;t available at the time to answer me via IRC (thanks again <a href="http://twitter.com/pharkmillups" title="Mark Phillips on Twitter">Mark</a>). All three of them confirmed my thoughts. Here&#8217;s what appeared in the recap which captures the question and response nicely:</p>

<blockquote><p>Q &#8212; I have a Webmachine application which will be talking to Riak. I was going to put application and controller logic in that application and I am wondering if [I] should instead be creating a &#8220;core&#8221; OTP application with the business style logic in it and have the Webmachine app talk to that app which, in turn, talks to Riak? Is that the general approach that is taken [in Erlang applications]? (from TheColonial via #riak)</p>

<p>A &#8212; We recommend going with the latter approach. You&#8217;re better off to create a core app that talks to Webmachine and Riak separately.</p></blockquote>

<p>Perfect, that makes total sense. Therefore the following describes what I did to modify the code base that I had in order to support this set up. <strong>Any failure</strong> in implementation, structure or understanding is totally my own and in no way reflects on the abilities and advice of those mentioned above who took the time to offer assistance.</p>

<p>Moving on. What we want to end up with is three applications:</p>

<table cellspacing="0">
  <thead>
    <tr>
      <th style="text-align:center;">Application</th>
      <th style="text-align:center;">Structure/Responsibility</th>
      <th style="text-align:center;">Talks to</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Riak</td>
      <td>Bomb-proof data storage and replication.</td>
      <td style="text-align:center">-</td>
    </tr>
    <tr>
      <td>csd_core</td>
      <td>An OTP application that provides an API to a set of logic that deals with the transformation of data from a client through to the database. It should keep the clients ignorant of the data storage medium. It should provide business logic that would be required for any client application to be able to talk to a `csd`/Riak back-end.</td>
      <td style="text-align:center">Riak</td>
    </tr>
    <tr>
      <td>csd_web</td>
      <td>Provide a nice, web-based interface for the user to experience the goal of the Code Smackdown application.</td>
      <td style="text-align:center">csd_core</td>
    </tr>
  </tbody>
</table>


<p>Given that we&#8217;re going to be using this structure, the &#8220;root&#8221; folder should actually be fairly clean without any source. Instead, each <code>csd</code>-related application should live in its own sub-folder under an <code>apps</code> folder and the root should just contain the means to build it and start it. In essence what we&#8217;d like to see in the root folder is something like this:</p>

<pre><code>oj@spawn-link ~/blog/csd $ ls -F
apps/  dev.haproxy.conf  Makefile  proxy.sh*  rebar*  rebar.config  start.sh*
</code></pre>

<p>With that in mind, let&#8217;s start the surgery.</p>

<h3>Moving csd to csd_web</h3>

<p>There are two ways to approach this problem. The first is to do a <strong>find and replace</strong>, making sure you cover off file names as well as module names, etc. The second is to simply <strong>recreate the web site from scratch</strong>, copy over any missing files and make any other adjustments manually that may be required.</p>

<p>I preferred the second approach, so that&#8217;s what I did. First I recreated the web application, which is now called <code>csd_web</code> in the <code>apps</code> folder:</p>

<pre><code>oj@spawn-link ~/blog/csd $ mkdir apps &amp;&amp; cd apps
oj@spawn-link ~/blog/csd/apps $ ~/blog/webmachine/scripts/new_webmachine.sh csd_web .
==&gt; priv (create)
Writing /home/oj/blog/csd/apps/csd_web/README
Writing /home/oj/blog/csd/apps/csd_web/Makefile
Writing /home/oj/blog/csd/apps/csd_web/rebar.config
Writing /home/oj/blog/csd/apps/csd_web/rebar
Writing /home/oj/blog/csd/apps/csd_web/start.sh
Writing /home/oj/blog/csd/apps/csd_web/ebin/csd_web.app
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_app.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_sup.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_resource.erl
Writing /home/oj/blog/csd/apps/csd_web/priv/dispatch.conf
oj@spawn-link ~/blog/csd/apps $ ls -F
csd_web/
</code></pre>

<p>Next I removed a few files which weren&#8217;t going to be needed any more. I then copied over <code>rebar.config</code>, the ErlyDTL templates and the <code>csd.app.src</code> file (which we need to modify):</p>

<pre><code>oj@spawn-link ~/blog/csd/apps $ cd csd_web
oj@spawn-link ~/blog/csd/apps/csd_web $ rm README rebar start.sh
oj@spawn-link ~/blog/csd/apps/csd_web $ cp ../../rebar.config .
oj@spawn-link ~/blog/csd/apps/csd_web $ cp -R ../../templates .
oj@spawn-link ~/blog/csd/apps/csd_web $ cp ../../src/csd.app.src ./src/csd_web.app.src
</code></pre>

<p>I then edited the <code>csd_web.app.src</code> file so that the names were updated (I tidied it up a little and added a version number too):</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web.app.src  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="n">csd_web</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">description</span><span class="p">,</span> <span class="s">&quot;The Webmachine component of the Code Smackdown application.&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">vsn</span><span class="p">,</span> <span class="s">&quot;0.0.1&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">modules</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">registered</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">applications</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>        <span class="n">kernel</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stdlib</span><span class="p">,</span>
</span><span class='line'>        <span class="n">crypto</span><span class="p">,</span>
</span><span class='line'>        <span class="n">mochiweb</span><span class="p">,</span>
</span><span class='line'>        <span class="n">webmachine</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">mod</span><span class="p">,</span> <span class="p">{</span><span class="n">csd_web_app</span><span class="p">,</span> <span class="p">[]}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">env</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then opened up <code>csd_web_resource.erl</code> and made it look like the original <code>csd_resource.erl</code> so that it called the ErlyDTL template:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_resource.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web_resource</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_html</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;webmachine/include/webmachine.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">sample_dtl</span><span class="p">:</span><span class="n">render</span><span class="p">([{</span><span class="n">param</span><span class="p">,</span> <span class="s">&quot;Slartibartfast&quot;</span><span class="p">}]),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>csd_web</code> is now ready to go. To build it, we need to go back up to the root <code>csd</code> folder and adjust the <code>rebar.config</code> so that it knows to look in the <code>apps</code> sub-folder (thanks to <a href="http://twitter.com/andrewtj" title="AndrewTJ on Twitter">Andrew</a> for <a href="http://lists.basho.com/pipermail/rebar_lists.basho.com/2010-October/000246.html" title="Configuring the Rebar apps folder on Basho list">pointing this out</a>). We can also remove all the dependencies because that will be taken care of by <code>csd_web</code>:</p>

<figure class='code'><figcaption><span>rebar.config  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;apps/csd_web&quot;</span><span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I removed all the other left-over stuff in the root folder that wasn&#8217;t required any more (including the startup script):</p>

<pre><code>oj@spawn-link ~/blog/csd $ rm -rf README priv src templates start.sh
</code></pre>

<p>I then modify the <code>Makefile</code> so that it does a couple of other things:</p>

<ol>
<li>Includes a target which builds just the current applications <em>without</em> building the dependencies (this will make builds much quicker most of the time).</li>
<li>Includes a target which can start the web application, essentially replacing the original startup script. This target will be dependent on the previous target so that it is always up to date when running the application.</li>
<li>Includes targets which can start/stop <code>HAproxy</code>.</li>
</ol>


<figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ERL ?= erl
</span><span class='line'>APP = csd
</span><span class='line'>
</span><span class='line'>.PHONY: deps
</span><span class='line'>
</span><span class='line'>all: deps
</span><span class='line'>  @./rebar compile
</span><span class='line'>
</span><span class='line'>app:
</span><span class='line'>  @./rebar compile skip_deps=true
</span><span class='line'>
</span><span class='line'>deps:
</span><span class='line'>  @./rebar get-deps
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>  @./rebar clean
</span><span class='line'>
</span><span class='line'>distclean: clean
</span><span class='line'>  @./rebar delete-deps
</span><span class='line'>
</span><span class='line'>webstart: app
</span><span class='line'>  exec erl -pa $(PWD)/apps/\*/ebin -pa $(PWD)/deps/\*/ebin -boot start_sasl -s reloader -s csd_web
</span><span class='line'>
</span><span class='line'>proxystart:
</span><span class='line'>  @haproxy -f dev.haproxy.conf</span></code></pre></td></tr></table></div></figure>


<p>All that is left to do is start <code>haproxy</code> and launch the application (make sure <code>Riak</code> is running first). These commands need to be done in two different terminal windows. First, start the proxy (note the use of <code>sudo</code> so that we can listen on port 80):</p>

<pre><code>oj@spawn-link ~/blog/csd $ sudo make proxystart
[2] 1935
Available polling systems :
     sepoll : pref=400,  test result OK
      epoll : pref=300,  test result OK
       poll : pref=200,  test result OK
     select : pref=150,  test result OK
Total: 4 (4 usable), will use sepoll.
Using sepoll() as the polling mechanism.
</code></pre>

<p>Then make and start the web application. We have to do a full <code>make</code> first time around so that all the dependencies are resolved:</p>

<pre><code>oj@spawn-link ~/blog/csd $ make &amp;&amp; make webstart

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::21:04:18 ===
         application: csd_web
          started_at: nonode@nohost
</code></pre>

<p>Now we should be able to hit <a href="http://localhost/" title="localhost web app">localhost</a> and see the ErlyDTL template rendered in all its awesome, black-and-white glory:</p>

<p><img src="http://buffered.io/uploads/2010/10/localhost-slartibartfast.png" /></p>

<p>Refactor complete. Now let&#8217;s start work on our new OTP application which will be responsible for talking to Riak.</p>

<p>If you need a break, now is the time to take it! Go freshen up, take a leak and refill your glass.</p>

<p>Ready to go again? Here we go &#8230;</p>

<h3>Creating the csd_core OTP Application</h3>

<p>Creation of an OTP-compliant application is another job for <a href="http://www.basho.com/developers.html#Rebar" title="Rebar">Rebar</a> as it comes with a set of templates built-in. Unfortunately those template aren&#8217;t 100% and hence don&#8217;t do everything we need to do out of the box. But we shall use them as a starting point:</p>

<pre><code>oj@spawn-link ~/blog/csd $ mkdir apps/csd_core &amp;&amp; cd apps/csd_core
oj@spawn-link ~/blog/csd/apps/csd_core $ ../../rebar create-app appid=csd_core
==&gt; csd_core (create-app)
Writing src/csd_core.app.src
Writing src/csd_core_app.erl
Writing src/csd_core_sup.erl
</code></pre>

<p>We have a very simple application shell set up, but we need to do a bit more work to get it ready. First, let&#8217;s create our base <code>csd_core.erl</code> module which is used to fire up our application. For this we will use <code>csd_web.erl</code> (the one which is part of our Webmachine application) as a template. Note that I&#8217;ve shuffled things around and removed some things that are not relevant:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_core.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2011 OJ Reeves</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc csd_core startup code</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">ensure_started</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">application</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="nv">App</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="n">ok</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="nv">App</span><span class="p">}}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec start_link() -&gt; {ok,Pid::pid()}</span>
</span><span class='line'><span class="c">%% @doc Starts the app for inclusion in a supervisor tree</span>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">csd_core_sup</span><span class="p">:</span><span class="n">start_link</span><span class="p">().</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec start() -&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Start the csd_core server.</span>
</span><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ensure_started</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">application</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="n">csd_core</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec stop() -&gt; ok</span>
</span><span class='line'><span class="c">%% @doc Stop the csd_core server.</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Res</span> <span class="o">=</span> <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">csd_core</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">application</span><span class="p">:</span><span class="n">stop</span><span class="p">(</span><span class="n">crypto</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">Res</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up, edit <code>csd_core.app.src</code> and add some application-specific information:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_core.app.src  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="n">csd_core</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">description</span><span class="p">,</span> <span class="s">&quot;Core functionality for the Code Smackdown application.&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">vsn</span><span class="p">,</span> <span class="s">&quot;0.0.1&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">registered</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">applications</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>        <span class="n">kernel</span><span class="p">,</span>
</span><span class='line'>        <span class="n">stdlib</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">mod</span><span class="p">,</span> <span class="p">{</span><span class="n">csd_core_app</span><span class="p">,</span> <span class="p">[]}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">env</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that we&#8217;ll be talking to Riak, so we need to make sure we&#8217;ve included the <code>riakc</code> (Riak client) dependency. Though I haven&#8217;t yet talked about it, we&#8217;ll also be using Mochiweb&#8217;s <a href="https://github.com/mochi/mochiweb/blob/master/src/mochijson2.erl" title="Mochiweb's json module">mochijson2</a> module to help with handling JSON data, so we shall add this as a dependency to the application. Bear in mind this is already a dependency for the web component of the application, so we&#8217;re not actually adding a <em>new</em> dependency to the overall application.</p>

<p>We can do this by creating a <code>rebar.config</code> in <code>apps/csd_core</code> and editing it to contain the following:</p>

<figure class='code'><figcaption><span>apps/csd_core/rebar.config  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">mochiweb</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/mochi/mochiweb&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">tag</span><span class="p">,</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">}}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">riakc</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/riak-erlang-client&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we need to tell <code>rebar</code> to build this new application by adjusting the <code>rebar.config</code> in the <code>csd</code> root folder:</p>

<figure class='code'><figcaption><span>rebar.config  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;apps/csd_core&quot;</span><span class="p">,</span> <span class="s">&quot;apps/csd_web&quot;</span><span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have enough to get the <code>csd_core</code> application started, even though it doesn&#8217;t do anything. We just need to adjust our <code>Makefile</code> target so that it launches the <code>csd_core</code> application as well:</p>

<figure class='code'><figcaption><span>Makefile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ERL ?= erl
</span><span class='line'>APP = csd
</span><span class='line'>
</span><span class='line'>.PHONY: deps
</span><span class='line'>
</span><span class='line'>all: deps
</span><span class='line'>  @./rebar compile
</span><span class='line'>
</span><span class='line'>app:
</span><span class='line'>  @./rebar compile skip_deps=true
</span><span class='line'>
</span><span class='line'>deps:
</span><span class='line'>  @./rebar get-deps
</span><span class='line'>
</span><span class='line'>clean:
</span><span class='line'>  @./rebar clean
</span><span class='line'>
</span><span class='line'>distclean: clean
</span><span class='line'>  @./rebar delete-deps
</span><span class='line'>
</span><span class='line'>webstart: app
</span><span class='line'>  exec erl -pa $(PWD)/apps/\*/ebin -pa $(PWD)/deps/\*/ebin -boot start_sasl -s reloader -s csd_core -s csd_web
</span><span class='line'>
</span><span class='line'>proxystart:
</span><span class='line'>  @haproxy -f dev.haproxy.conf</span></code></pre></td></tr></table></div></figure>


<p>Then off we go:</p>

<pre><code>oj@spawn-link ~/blog/csd $ make webstart
==&gt; csd_core (compile)
Compiled src/csd_core_app.erl
Compiled src/csd_core_sup.erl
Compiled src/csd_core.erl

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::21:49:27 ===
         application: csd_core
          started_at: nonode@nohost

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::21:49:27 ===
         application: csd_web
          started_at: nonode@nohost
</code></pre>

<p>As you can see we now have a system which contains both <code>csd_core</code> and <code>csd_web</code>. This is great, but <code>csd_core</code> needs a lot more work. The intent for this application is to be an <a href="http://en.wikipedia.org/wiki/Open_Telecom_Platform" title="Open Telecom Platform">OTP</a> application which provides an API to the <code>csd</code> logic and back-end database. This means we&#8217;re going to need to get ourselves a <a href="http://www.erlang.org/doc/design_principles/gen_server_concepts.html" title="gen_server behaviour">gen_server</a> set up which can handle requests from various clients. Let&#8217;s do that next.</p>

<p>Thankfully <code>rebar</code> comes with a simple template that we can use for creating the <code>gen_server</code> behaviour, so we can invoke that from the command line and have it generate the shell for us:</p>

<pre><code>oj@spawn-link ~/blog/csd/apps/csd_core $ ../../rebar create template=simplesrv srvid=csd_core_server
==&gt; csd_core (create)
Writing src/csd_core_server.erl
</code></pre>

<p>We now have a very dumb server ready to go, to make it start with the rest of the application we have to modify <code>csd_core_sup</code>, the <a href="http://www.erlang.org/doc/design_principles/sup_princ.html" title="supervisor behaviour">supervisor</a> and tell it to fire up the server for us:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_core_sup.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_core_sup</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">supervisor</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% API</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Supervisor callbacks</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Helper macro for declaring children of supervisor</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">CHILD</span><span class="p">(</span><span class="nv">I</span><span class="p">,</span> <span class="nv">Type</span><span class="p">),</span> <span class="p">{</span><span class="nv">I</span><span class="p">,</span> <span class="p">{</span><span class="nv">I</span><span class="p">,</span> <span class="n">start_link</span><span class="p">,</span> <span class="p">[]},</span> <span class="n">permanent</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="nv">Type</span><span class="p">,</span> <span class="p">[</span><span class="nv">I</span><span class="p">]}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ===================================================================</span>
</span><span class='line'><span class="c">%% API functions</span>
</span><span class='line'><span class="c">%% ===================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">supervisor</span><span class="p">:</span><span class="n">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="no">?MODULE</span><span class="p">},</span> <span class="no">?MODULE</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ===================================================================</span>
</span><span class='line'><span class="c">%% Supervisor callbacks</span>
</span><span class='line'><span class="c">%% ===================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Server</span> <span class="o">=</span> <span class="no">?CHILD</span><span class="p">(</span><span class="n">csd_core_server</span><span class="p">,</span> <span class="n">worker</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Processes</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Server</span><span class="p">],</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">one_for_one</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="nv">Processes</span><span class="p">}</span> <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this in place we can now start our application again and we should see the new <code>csd_core_server</code> appear in the start-up sequence:</p>

<pre><code>oj@spawn-link ~/blog/csd $ make webstart

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::22:04:04 ===
          supervisor: {local,csd_core_sup}
             started: [{pid,&lt;0.54.0&gt;},
                       {name,csd_core_server},
                       {mfargs,{csd_core_server,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,5000},
                       {child_type,worker}]

=PROGRESS REPORT==== 4-Apr-2011::22:04:04 ===
         application: csd_core
          started_at: nonode@nohost

   ... snip ...
</code></pre>

<p>The shell and structure of our application is now in place. We are finally ready to start talking to Riak!</p>

<p>Again, now is the time to have a mini-break if you need one. Grab a <em>Shigar und a waffle</em> and a cup of English Breakfast tea.</p>

<h2>Preparing csd_core for Riak connectivity</h2>

<p>Given that this is the first look at connecting to Riak, we&#8217;re going to have to set up a little infrastructure to support our needs. As a result, the data itself won&#8217;t be discussed much for fear of turning this post into something way more epic than originally intended.</p>

<p>So in short, we&#8217;re interested in storing the idea of a <em>code snippet</em>. That is an entity which contains two opposing blobs of code which are being compared. That snippet will have a title. Down the track, more information will be associated with this snippet, such as the author, along with links to a set of comments and votes. For now we&#8217;ll just focus on storing the bare essentials of the snippet.</p>

<h3>The Snippet</h3>

<p>As far as our Erlang code is concerned, our snippet is going to be a simple list of properties that we can interact with via the <a href="http://www.erlang.org/doc/man/proplists.html" title="proplists">proplists</a> module. This keeps things really simple. To demonstrate what our snippet will look like in code, here is the function that takes a Title, and the two code blobs (called Left and Right) and returns a <code>snippet</code> instance. This code goes in a module called <code>csd_snippet</code> defined in <code>src/csd_snippet.erl</code>:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">to_snippet</span><span class="p">(</span><span class="nv">Title</span><span class="p">,</span> <span class="nv">Left</span><span class="p">,</span> <span class="nv">Right</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span><span class="n">title</span><span class="p">,</span> <span class="nv">Title</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">left</span><span class="p">,</span> <span class="nv">Left</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="n">right</span><span class="p">,</span> <span class="nv">Right</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the first part of the tuple is the atom <code>snippet</code> which I am using to identify the layout of the contents in the second part of the tuple. Down the track we&#8217;ll have more collections of data in the system than just snippets, and we may want to make sure that the caller doesn&#8217;t accidentally pass in a <code>user</code>, for example, to a function expecting a <code>snippet</code>.</p>

<p>It is important at this point to note that, down the track, I will include a <code>key</code> property in all of the data objects that are pushed to Riak. This property serves as the identifier for the object in Riak and is stored alongside the rest of the data so that it is easy to relate the in-memory instance back to the stored instance. This value, if not specified, will be inserted automatically when an item is saved via the API functions in <code>csd_core</code>. More on this later.</p>

<h3>Formatting Data for Storage in Riak</h3>

<p>Riak is very flexible in that it will store whatever kind of information you give it. This is good because it means we can cater our data format to whatever needs we have.</p>

<p>In our case, the <em>easiest</em> option would be to store our Erlang terms as binary using <a href="http://www.erlang.org/doc/man/erlang.html#term_to_binary-1" title="term_to_binary">term_to_binary</a> as we wouldn&#8217;t have to think about <em>anything</em> else. We could easily read the data using <a href="http://www.erlang.org/doc/man/erlang.html#binary_to_term-1" title="binary_to_term">binary_to_term</a>. Done.</p>

<p>This comes with a set of problems though. For example, if we wanted to <a href="http://en.wikipedia.org/wiki/MapReduce" title="map/reduce">map/reduce</a> using JavaScript we wouldn&#8217;t find it easy to get the data into a format that we could use. Another example would be that the RESTful interface to Riak would be close to useless because <strong>any</strong> non-Erlang client would have to somehow get the data into a meaningful format to work with.</p>

<p>Instead of using binary and throwing Erlang terms straight into Riak, we&#8217;re going to use <a href="http://json.org/" title="JavaScript Object Notation">JSON</a>. It&#8217;s very easy to convert to and from JSON in many different languages, and it&#8217;s very easy to read. We can also easily verify that the data is being stored correctly by querying Riak&#8217;s RESTful interface directly using <a href="http://curl.haxx.se/" title="cURL homepage">cURL</a> or a browser.</p>

<p>In order to store data in JSON format, we&#8217;re going to enlist the help of <a href="https://github.com/mochi/mochiweb/blob/master/src/mochijson2.erl" title="Mochiweb's json module">mochijson2</a>, a library that comes with <a href="https://github.com/mochi/mochiweb" title="Mochiweb">Mochiweb</a> that makes it a <em>lot</em> easier to deal with JSON than doing everything manually. Given that we&#8217;re using Webmachine for the front-end (which itself relies on Mochiweb) we already have the dependency available.</p>

<p>Unfortunately we can&#8217;t just throw our data straight at this module and have it do everything for us. <code>mochijson2</code> requires data to be in a certain format before it can encode it to JSON. When decoding <em>from</em> JSON, it converts the data into the same format. Hence, we need the ability to convert our own data format to and from this intermediate data format so that <code>mochijson2</code> can deal with it.</p>

<p>We need two functions: <code>to_json()</code> and <code>from_json()</code>, and we shall define these in a helper module called <code>csd_json</code>. This module will live in <code>csd_core</code>:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_json.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_json</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">from_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">from_json</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">to_json</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_json</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nv">PropList</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">to_json</span><span class="p">(</span><span class="nv">PropList</span><span class="p">,</span> <span class="k">fun</span><span class="p">(_)</span> <span class="o">-&gt;</span> <span class="n">true</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_json</span><span class="p">(</span><span class="nv">PropList</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">list_to_binary</span><span class="p">(</span><span class="nn">mochijson2</span><span class="p">:</span><span class="n">encode</span><span class="p">(</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">PropList</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">))).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="k">fun</span><span class="p">(_)</span> <span class="o">-&gt;</span> <span class="n">true</span> <span class="k">end</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json</span><span class="p">(</span><span class="nv">Json</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">to_proplist</span><span class="p">(</span><span class="nn">mochijson2</span><span class="p">:</span><span class="n">decode</span><span class="p">(</span><span class="nv">Json</span><span class="p">),</span> <span class="nv">IsStrFun</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;re probably wondering why each of these functions requires the <code>IsStrFun</code> parameter (if you&#8217;re not, you&#8217;re obviously an experienced Erlanger!). For those who don&#8217;t know, strings in Erlang are actually lists of integers. This is fantastic as it makes it easy to manipulate strings as if they were lists, but it comes at a small price: it&#8217;s not possible to determine the difference between a list of integers and a string.</p>

<p>Why is this important? <code>mochijson2</code> needs strings to be encoded as binaries, so we need a way to differentiate between integer lists and real strings. My original implementations of both the <code>to_json()</code> and <code>from_json()</code> functions attempted to figure out if certain fields were strings or not by looking at the content of the list. Not only was the code messy, but it wasn&#8217;t foolproof. Instead, I made the decision to force the user to provide a callback function which will tell the JSON serialiser if the given property is a string or not. This callback takes a single parameter which is the name (in atom form) of the property and returns a boolean &#8211; <code>true</code> indicates that the value is a string, <code>false</code> otherwise.</p>

<p>In some cases we might just be happy to encode/decode every single value as a string. Hence, there is an overload to both <code>to_json()</code> and <code>from_json()</code> which caters for this case. The rest of the code which implments the conversion is listed below. Don&#8217;t feel that you need to understand the code below, as it&#8217;s really not the goal of this post. The full source to this module is included in the source link specified at the end of this post.</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_json.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">from_proplist</span><span class="p">(</span><span class="nv">List</span><span class="o">=</span><span class="p">[</span><span class="nv">H</span><span class="p">|_],</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_tuple</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">struct</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">from_proplist</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">List</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nf">from_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">ComplexProp</span><span class="o">=</span><span class="p">[</span><span class="nv">H</span><span class="p">|_]},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_tuple</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span> <span class="n">from_proplist</span><span class="p">(</span><span class="nv">ComplexProp</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nf">from_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span> <span class="n">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_proplist</span><span class="p">({</span><span class="n">struct</span><span class="p">,</span> <span class="nv">PropList</span><span class="p">},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">PropList</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">to_proplist</span><span class="p">(</span><span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">PropList</span><span class="p">);</span>
</span><span class='line'><span class="nf">to_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">ComplexProp</span><span class="o">=</span><span class="p">{</span><span class="n">struct</span><span class="p">,</span> <span class="p">_}},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="nb">list_to_atom</span><span class="p">(</span><span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span> <span class="n">to_proplist</span><span class="p">(</span><span class="nv">ComplexProp</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="nf">to_proplist</span><span class="p">({</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">},</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">PropAtom</span> <span class="o">=</span> <span class="nb">list_to_atom</span><span class="p">(</span><span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">{</span> <span class="nv">PropAtom</span><span class="p">,</span> <span class="n">from_value</span><span class="p">(</span><span class="nv">PropAtom</span><span class="p">,</span> <span class="nv">PropVal</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">L</span><span class="o">=</span><span class="p">[</span><span class="nv">H</span><span class="p">|_],</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">H</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">);</span>
</span><span class='line'><span class="nf">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">IsStrFun</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-&gt;</span> <span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">L</span><span class="p">);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span> <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">V</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">to_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">V</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">to_value</span><span class="p">(_,</span> <span class="nv">V</span><span class="p">,</span> <span class="p">_)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">L</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_list</span><span class="p">(</span><span class="nv">L</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">P</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">from_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">P</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">L</span><span class="p">);</span>
</span><span class='line'><span class="nf">from_value</span><span class="p">(</span><span class="nv">PropName</span><span class="p">,</span> <span class="nv">B</span><span class="p">,</span> <span class="nv">IsStrFun</span><span class="p">)</span> <span class="k">when</span> <span class="nb">is_binary</span><span class="p">(</span><span class="nv">B</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nv">IsStrFun</span><span class="p">(</span><span class="nv">PropName</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-&gt;</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">B</span><span class="p">);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-&gt;</span> <span class="nv">B</span>
</span><span class='line'>  <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">from_value</span><span class="p">(_,</span> <span class="nv">V</span><span class="p">,</span> <span class="p">_)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">V</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are now able to read and write data to and from JSON format. Now we need to use the Riak client to push that into our Riak cluster.</p>

<h3>Setting up the Riak client</h3>

<p>Basho have done a great job of creating a protocol buffer-based client for use with Riak. The interface is really simple to use. Despite that, we shall create a module which will deal with this for us. This gives us a single point of abstraction of Riak and a place where we can add extra support for our own needs without spreading Riak-specific code all over the source base.</p>

<p>The first problem we need to resolve is: <em>what do we do with configuration?</em></p>

<p>This was a question I initially didn&#8217;t know how to answer. After a bit of deliberation and a chat with a <a href="http://twitter.com/mononcqc" title="Ferd T-H on Twitter">respected Erlang sifu</a> (who has a <a href="http://learnyousomeerlang.com/" title="Learng you some erlang">fantastic Erlang tutorial site</a>) I decided to go with a module-based option.</p>

<p>We have our Riak cluster hidden behind the <code>haproxy</code> load balancer, and hence we have a single entry-point to connect to. If this entry-point changes, it changes for all of the clients, not just a single client. Therefore, I want the ability to manage a single set of connection information, but I want the ability to update it on the fly without having to restart the <code>csd_core</code> application. This is Erlang, after all, and modifying code and configuration on-the-fly is extremely easy. We shall abuse that.</p>

<p>We create a single module, <code>csd_riak_config.erl</code>, to contain our configuration which is referenced at start-up. It looks like this:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_riak_config.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_riak_config</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">connection_info</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">connection_info</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span> <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple stuff. Let&#8217;s use this functionality in our <code>gen_server</code>, and carry the configuration through from initialisation to all of the calls that will be made to the Riak server. This requires two simple modifications to the <code>csd_core_server</code> module:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_core_server.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">ConnInfo</span> <span class="o">=</span> <span class="nn">csd_riak_config</span><span class="p">:</span><span class="n">connection_info</span><span class="p">(),</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="no">?SERVER</span><span class="p">},</span> <span class="no">?MODULE</span><span class="p">,</span> <span class="p">[</span><span class="nv">ConnInfo</span><span class="p">],</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([</span><span class="nv">ConnInfo</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Confiuration is now loaded and is being passed to all of our <code>gen_server</code> callbacks. Let&#8217;s make use of it. <code>csd_snippet</code> is the entry point for all snippet-related information, and one of the things that we are going to want to be able to do is write a snippet to Riak. So let&#8217;s create a code-path that can do that.</p>

<h4>Writing Data to Riak</h4>

<p>The first point of call for a client is the OTP interface. Let&#8217;s create an API call and a call handler to support saving snippets in <code>csd_core_server</code>:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_core_server.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% This is a simple function which invokes a call via the gen_sever</span>
</span><span class='line'><span class="c">%% behaviour.</span>
</span><span class='line'><span class="nf">save_snippet</span><span class="p">(</span><span class="nv">Snippet</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="no">?SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Handle the case where a caller wants to save a snippet to Riak. We</span>
</span><span class='line'><span class="c">%% create a connection to Riak and pass that into the snippet handler</span>
</span><span class='line'><span class="c">%% along with the snippet that needs to be saved. We return the newly</span>
</span><span class='line'><span class="c">%% saved snippet.</span>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">save_snippet</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">RiakPid</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">connect</span><span class="p">(</span><span class="nv">ConnInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SavedSnippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">SavedSnippet</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we will need to export the <code>save_snippet()</code> function if we want to be able to call it.</p>

<p>You&#8217;ll notice that we&#8217;re getting the connection information passed in as the state for the OTP call, and that we&#8217;re using that to create a connection to Riak via the <code>csd_riak</code> module. We shall cover this module in just a minute, but hopefully the interface to this function should make it relatively self-explanatory.</p>

<p>You might be wondering &#8220;Why are you creating the Riak client connection here instead of letting the <code>csd_snippet:save()</code> function do it by itself. It&#8217;s a good question. The reason I decided to create the connection as part of OTP call rather than in the data/helper modules is because down the track there will probably be a need to do multiple interactions with Riak in a single call. If we force each of the called modules, such as <code>csd_snippet</code>, to establish their own connections then we&#8217;d probably have <em>multiple connections to Riak being created during a single client request</em>. This isn&#8217;t what I would like to see happen, so it made sense (in my view) to create the client connection once and reuse it across all modules that are invoked during the request.</p>

<p>With that out of the way, we need to implement the <code>save()</code> function in the <code>csd_snippet</code> module. Brace yourself:</p>

<p><span class="filename"></span></p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Snippet</span><span class="o">=</span><span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nn">proplists</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">,</span> <span class="n">undefined</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">undefined</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">Key</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">new_key</span><span class="p">(),</span>
</span><span class='line'>      <span class="nv">NewSnippetData</span> <span class="o">=</span> <span class="p">[{</span><span class="n">key</span><span class="p">,</span> <span class="nv">Key</span><span class="p">}</span> <span class="p">|</span> <span class="nv">SnippetData</span><span class="p">],</span>
</span><span class='line'>      <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">create</span><span class="p">(</span><span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="n">to_json_internal</span><span class="p">(</span><span class="nv">NewSnippetData</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>      <span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">NewSnippetData</span><span class="p">};</span>
</span><span class='line'>    <span class="nv">ExistingKey</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">ExistingKey</span><span class="p">),</span>
</span><span class='line'>      <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">update</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="n">to_json_internal</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">)),</span>
</span><span class='line'>      <span class="n">ok</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">NewRiakObj</span><span class="p">),</span>
</span><span class='line'>      <span class="nv">Snippet</span>
</span><span class='line'>  <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the surface this looks a little complicated, but it&#8217;s actually very simple. As mentioned earlier in the post, we use a <code>key</code> property to store the identifier of the object in Riak. This code supports this notion. It works as follows:</p>

<ol>
<li><strong>Try to get the value of the <code>key</code> from the given list of properties.</strong></li>
<li><strong>If <em>not</em> found &#8230;</strong>

<ol>
<li>create a new key using the <code>new_key()</code> function in the <code>csd_riak</code> module (this will be covered shortly).</li>
<li>Add the <code>key</code> to the list of properties for the snippet.</li>
<li>Create a new instance of a Riak object (more on this later) which contains the details of the snippet data to be written, along with the target bucket name and the key of the snippet.</li>
<li>Save the Riak object to the Riak cluster using the specified Riak client connection (Pid), and for now assume that it succeeds.</li>
<li>Return the new set of snippet data with the snippet&#8217;s key included.</li>
</ol>
</li>
<li><strong>If found &#8230;</strong>

<ol>
<li>Load the existing data from the Riak cluster into a Riak object.</li>
<li>Update the Riak object with the new data values passed into the function.</li>
<li>Save the Riak object <em>back</em> to the Riak cluster using the specified Riak client connection (Pid), and for now assume that it succeeds.</li>
<li>Return the snippet back to the caller as is.</li>
</ol>
</li>
</ol>


<p>It&#8217;s fairly basic functionality which does enough to cater for our needs at this point. Through this one function, we can write new snippet instances to Riak, and we can update them too.</p>

<p>You&#8217;ll also notice that another function is being called that hasn&#8217;t been discussed: <code>to_snippet_internal()</code>. Rather than try to explain this, let&#8217;s see the code as it&#8217;s quite easy to follow:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% exported functions</span>
</span><span class='line'><span class="nf">to_json</span><span class="p">({</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">to_json_internal</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">from_json_internal</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% helper functions used internally.</span>
</span><span class='line'><span class="nf">to_json_internal</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">csd_json</span><span class="p">:</span><span class="n">to_json</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json_internal</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nn">csd_json</span><span class="p">:</span><span class="n">from_json</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">,</span> <span class="k">fun</span> <span class="n">is_string</span><span class="o">/</span><span class="mi">1</span><span class="p">)}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(</span><span class="n">right</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">true</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_string</span><span class="p">(_)</span> <span class="o">-&gt;</span> <span class="n">false</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, these are helper functions which call the <code>csd_json</code> functions to serialise/deserialise to/from JSON format. The <code>is_string()</code> function is the one that is used to tell the JSON functionality which properties are strings and which are not. At the moment, all properties defined on the snippet are string properties. Bear in mind that the <code>key</code> property, which is added automatically, is <em>not</em> a string.</p>

<p>All that is left is to see how <code>csd_riak</code> deals with the underlying Riak connectivity. Prepare to be underwhelmed!</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_riak.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @spec connect(connection_info()) -&gt; pid()</span>
</span><span class='line'><span class="c">%% @doc Create a connection to the specified Riak cluster and</span>
</span><span class='line'><span class="c">%%      return the Pid associated with the new connection.</span>
</span><span class='line'><span class="nf">connect</span><span class="p">({</span><span class="nv">IP</span><span class="p">,</span> <span class="nv">Port</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakPid</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="nv">IP</span><span class="p">,</span> <span class="nv">Port</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RiakPid</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec create(binary, binary, json) -&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Create a new instance of a riak object using the</span>
</span><span class='line'><span class="c">%%      parameters given. The riak object can then be</span>
</span><span class='line'><span class="c">%%      persisted to a Riak node/cluster. This overload</span>
</span><span class='line'><span class="c">%%      assumes that the data passed in is JSON and sets</span>
</span><span class='line'><span class="c">%%      the MIME type to &quot;application/json&quot; for you.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">JsonData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">create</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">JsonData</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec create(binary, binary, term(), string) -&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Create a new instance of a riak object using the</span>
</span><span class='line'><span class="c">%%      parameters given. The riak object can then be</span>
</span><span class='line'><span class="c">%%      persisted to a Riak node/cluster. This overload</span>
</span><span class='line'><span class="c">%%      takes arbitrary data and requires the user to</span>
</span><span class='line'><span class="c">%%      specify the mime type of the data that is being</span>
</span><span class='line'><span class="c">%%      stored.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">Item</span><span class="p">,</span> <span class="nv">MimeType</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">,</span> <span class="nv">Item</span><span class="p">,</span> <span class="nv">MimeType</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RiakObj</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec fetch(pid(), binary, binary) -&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Fetches a riakc object from a Riak node/cluster</span>
</span><span class='line'><span class="c">%%      using the connection given.</span>
</span><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">RiakObj</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Bucket</span><span class="p">,</span> <span class="nv">Key</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">RiakObj</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec update(riakc_obj(), term()) -&gt; riakc_obj()</span>
</span><span class='line'><span class="c">%% @doc Updates the stored value for a riakc object with</span>
</span><span class='line'><span class="c">%%      the new one specified.</span>
</span><span class='line'><span class="nf">update</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">NewValue</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">NewRiakObj</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">update_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">,</span> <span class="nv">NewValue</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">NewRiakObj</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec get_value(riakc_obj()) -&gt; term()</span>
</span><span class='line'><span class="c">%% @doc Retrieves the stored value from within the riakc</span>
</span><span class='line'><span class="c">%%      object.</span>
</span><span class='line'><span class="nf">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Value</span> <span class="o">=</span> <span class="nn">riakc_obj</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Value</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec save(pid(), riakc_obj()) -&gt; {ok, riakc_obj()} | {error | Reason}</span>
</span><span class='line'><span class="c">%% @doc Saves the given riak object to the specified Riak node/cluster.</span>
</span><span class='line'><span class="nf">save</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Result</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="nb">put</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Result</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec new_key() -&gt; key()</span>
</span><span class='line'><span class="c">%% @doc Generate an close-to-unique key that can be used to identify</span>
</span><span class='line'><span class="c">%%      an object in riak. This implementation is blatantly borrowed</span>
</span><span class='line'><span class="c">%%      (purloined) from the wriaki source (thanks basho!)</span>
</span><span class='line'><span class="nf">new_key</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">{</span><span class="nv">Yr</span><span class="p">,</span> <span class="nv">Mo</span><span class="p">,</span> <span class="nv">Dy</span><span class="p">},</span> <span class="p">{</span><span class="nv">Hr</span><span class="p">,</span> <span class="nv">Mn</span><span class="p">,</span> <span class="nv">Sc</span><span class="p">}</span> <span class="p">}</span> <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">universaltime</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">{_,</span> <span class="p">_,</span> <span class="nv">Now</span><span class="p">}</span> <span class="o">=</span> <span class="n">now</span><span class="p">(),</span>
</span><span class='line'>  <span class="n">new_key</span><span class="p">([</span><span class="nv">Yr</span><span class="p">,</span> <span class="nv">Mo</span><span class="p">,</span> <span class="nv">Dy</span><span class="p">,</span> <span class="nv">Hr</span><span class="p">,</span> <span class="nv">Mn</span><span class="p">,</span> <span class="nv">Sc</span><span class="p">,</span> <span class="nb">node</span><span class="p">(),</span> <span class="nv">Now</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @spec new_key(list()) -&gt; key()</span>
</span><span class='line'><span class="c">%% @doc Generate an close-to-unique key that can be used to identify</span>
</span><span class='line'><span class="c">%%      an object in riak using the given list parameter as the stuff</span>
</span><span class='line'><span class="c">%%      to hash.</span>
</span><span class='line'><span class="nf">new_key</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Hash</span> <span class="o">=</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">phash2</span><span class="p">(</span><span class="nv">List</span><span class="p">),</span>
</span><span class='line'>  <span class="nn">base64</span><span class="p">:</span><span class="n">encode</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="nv">Hash</span><span class="p">:</span><span class="mi">32</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully the code in this module is fairly self-explanatory. It&#8217;s a very simple API to follow which made it very easy to build. So with this in place, let&#8217;s fire up the application, create a new snippet and see if it lands in the Riak store:</p>

<pre><code>oj@spawn-link  ~/blog/csd $ make webstart

   ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::22:54:55 ===
         application: csd_web
          started_at: nonode@nohost

1&gt; Snippet = csd_snippet:to_snippet(
1&gt; "Super composition!",
1&gt; "(.^) = (.) . (.)",
1&gt; "(.^) = fmap `fmap` fmap").
{snippet,[{title,"Super composition!"},
          {left,"(.^) = (.) . (.)"},
          {right,"(.^) = fmap `fmap` fmap"}]}
2&gt; SavedSnippet = csd_core_server:save_snippet(Snippet).

PROGRESS REPORT==== 4-Apr-2011::22:57:13 ===
          supervisor: {local,inet_gethost_native_sup}
             started: [{pid,&lt;0.103.0&gt;},{mfa,{inet_gethost_native,init,[[]]}}]

=PROGRESS REPORT==== 4-Apr-2011::22:57:13 ===
          supervisor: {local,kernel_safe_sup}
             started: [{pid,&lt;0.102.0&gt;},
                       {name,inet_gethost_native_sup},
                       {mfargs,{inet_gethost_native,start_link,[]}},
                       {restart_type,temporary},
                       {shutdown,1000},
                       {child_type,worker}]
{snippet,[{key,&lt;&lt;"B41kUQ=="&gt;&gt;},
          {title,"Super composition!"},
          {left,"(.^) = (.) . (.)"},
          {right,"(.^) = fmap `fmap` fmap"}]}
</code></pre>

<p>As you can see from the above script dump, a new <code>key</code> was generated for us and stored alongside the snippet (it&#8217;s highlighted in bold). Verifying that the data has persisted is simple. We can hit any of the Riak nodes via its web interface. Let&#8217;s take a look at <strong>http://localhost:8091/riak/snippet/B41kUQ==</strong> (your URL will have a different key):</p>

<p><img src="http://buffered.io/uploads/2010/10/localhost-verify-write.png" /></p>

<p>Great stuff! For more detail, let&#8217;s see what cURL has to say:</p>

<pre><code>oj@spawn-link ~/blog/csd/ $ curl http://localhost:8091/riak/snippet/B41kUQ== -v
* About to connect() to localhost port 8091 (#0)
*   Trying ::1... Connection refused
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8091 (#0)
&gt; GET /riak/snippet/B41kUQ== HTTP/1.1
&gt; User-Agent: curl/7.21.0 (x86_64-pc-linux-gnu) libcurl/7.21.0 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18
&gt; Host: localhost:8091
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; X-Riak-Vclock: a85hYGBgzGDKBVIsjOy7jmcwJTLmsTJ8tuc7zpcFAA==
&lt; Vary: Accept-Encoding
&lt; Server: MochiWeb/1.1 WebMachine/1.7.3 (participate in the frantic)
&lt; Link: &lt;/riak/snippet&gt;; rel="up"
&lt; Last-Modified: Mon, 04 Apr 2011 13:13:23 GMT
&lt; ETag: "6fw7c5v4IPAsf4B5hMHybc"
&lt; Date: Mon, 04 Apr 2011 13:13:36 GMT
&lt; Content-Type: application/json
&lt; Content-Length: 107
&lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
{"key":"B41kUQ==","title":"Super composition!","left":"(.^) = (.) . (.)","right":"(.^) = fmap `fmap` fmap"}
</code></pre>

<p>As you can see, it has not only serialised to JSON properly, but the MIME type has been set correctly as well.</p>

<p>This is all well and good, but we need our code to be able to read from Riak as well. That&#8217;s up next.</p>

<h4>Reading Data from Riak</h4>

<p>We&#8217;ve already covered off what happens at the bottom level when reading data from Riak (see the above code snippet for more info). To enable this functionality at the top level, we simply need to create a <code>gen_server</code> call, handle it appropriately and expose a function in the <code>csd_snippet</code> module. Let&#8217;s start at the top level:</p>

<figure class='code'><figcaption><span>- apps/csd_core/src/csd_core_server.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% OTP API function to get a snippet based on the key</span>
</span><span class='line'><span class="nf">get_snippet</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="no">?SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="n">infinity</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% handle the call and call the functionality from csd_snippet</span>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">get_snippet</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">RiakPid</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">connect</span><span class="p">(</span><span class="nv">ConnInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Snippet</span> <span class="o">=</span> <span class="nn">csd_snippet</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Snippet</span><span class="p">,</span> <span class="nv">ConnInfo</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is a bit of a no-brainer. It&#8217;s very similar to the writing code, but just a bit simpler. Let&#8217;s see what the <code>csd_snippet:fetch()</code> function looks like:</p>

<figure class='code'><figcaption><span>apps/csd_core/src/csd_snippet.erl (part)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="nv">Key</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">RiakObj</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">fetch</span><span class="p">(</span><span class="nv">RiakPid</span><span class="p">,</span> <span class="no">?BUCKET</span><span class="p">,</span> <span class="nv">Key</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">SnippetJson</span> <span class="o">=</span> <span class="nn">csd_riak</span><span class="p">:</span><span class="n">get_value</span><span class="p">(</span><span class="nv">RiakObj</span><span class="p">),</span>
</span><span class='line'>  <span class="n">from_json_internal</span><span class="p">(</span><span class="nv">SnippetJson</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code just pulls a Riak object out of the back-end, extracts is value and deserialises it from JSON to our Erlang <code>proplist</code>. Very simple stuff.</p>

<p>We should be able to build this and, via the Erlang console, verify that it functions:</p>

<pre><code>3&gt; Reloading csd_core_server ... ok.
3&gt; csd_core_server:get_snippet(&lt;&lt;"B41kUQ=="&gt;&gt;).
{snippet,[{key,&lt;&lt;"B41kUQ=="&gt;&gt;},
          {title,"Super composition!"},
          {left,"(.^) = (.) . (.)"},
          {right,"(.^) = fmap `fmap` fmap"}]}
</code></pre>

<p>Works like a charm. Now, for the icing on the cake, let&#8217;s get this rendering in a very simple template in our browser.</p>

<h3>End to End</h3>

<p>In order to gain access to our data in Riak from the web we need to create a new resource. This resource will respond to any URI of the form <code>/snippet/&lt;key&gt;</code>. We shall call this resource <code>csd_web_snippet_resource</code> and we&#8217;ll be putting this in our web application. It looks like this:</p>

<figure class='code'><figcaption><span>apps/csd_web/src/csd_web_snippet_resource.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author OJ Reeves &lt;oj@buffered.io&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2010 OJ Reeves</span>
</span><span class='line'><span class="c">%% @doc Webmachine resource that handles snippet-related actions</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">csd_web_snippet_resource</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;OJ Reeves &lt;oj@buffered.io&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_html</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;webmachine/include/webmachine.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">PathInfo</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="n">path_info</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">SnippetKey</span><span class="p">}</span> <span class="o">=</span> <span class="nn">dict</span><span class="p">:</span><span class="n">find</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nv">PathInfo</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">snippet</span><span class="p">,</span> <span class="nv">SnippetData</span><span class="p">}</span> <span class="o">=</span> <span class="nn">csd_core_server</span><span class="p">:</span><span class="n">get_snippet</span><span class="p">(</span><span class="nb">list_to_binary</span><span class="p">(</span><span class="nv">SnippetKey</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">snippet_dtl</span><span class="p">:</span><span class="n">render</span><span class="p">(</span><span class="nv">SnippetData</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this code calls through to the <code>csd_core_server</code> to extract the data from the back-end. The value that is used as a key for the snippet is one that is pulled from the URI via Webmachine&#8217;s <code>wrq:path_info()</code> function. This function extracts values from the URI based on the rules in <code>dispatch.conf</code> and provides a <a href="http://www.erlang.org/doc/man/dict.html" title="Erlang dict">dict</a> which can be used to lookup the values.</p>

<p>The code also uses a new ErlyDTL template called <code>snippet</code>. We&#8217;d best add that to the <code>templates</code> folder:</p>

<figure class='code'><figcaption><span>apps/csd_web/templates/snippet.dtl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- TODO : get the templating engine to stop ripping out the inline template code --&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Snippet View<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>{{ title  }}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Left: {{ left  }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Right: {{ right  }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we just need to adjust <code>dispatch.conf</code> to include the new route handler so that our code gets called:</p>

<figure class='code'><figcaption><span>apps/csd_web/priv/dispatch.conf  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{[],</span> <span class="n">csd_web_resource</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'><span class="p">{[</span><span class="s">&quot;snippet&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">],</span> <span class="n">csd_web_snippet_resource</span><span class="p">,</span> <span class="p">[]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how <code>key</code> is specified alongside <code>"snippet"</code>. This means that the path following <code>snippet/</code> in the URI will be associated with the <code>key</code> atom in the <code>dict</code> generated by <code>wrq:path_info()</code>.</p>

<p>We&#8217;re ready to rock. Rebuild, then hit the right URL, <strong>http://localhost/snippet/B41kUQ==</strong> (again, your key will be different), and you should get the following:</p>

<p><img src="http://buffered.io/uploads/2010/10/webmachine-to-riak.png" /></p>

<h2>Wrapping up</h2>

<p>Thanks for sticking with me! As you can see there is a little bit of ground-work required if you&#8217;re interested in producing some form of structure that you can reuse all over your application, but the effort is definitely worth it. Now we have something in place which we can use to store arbitrarily complex <code>proplists</code> into Riak in JSON format, we have the ability to talk to Riak (read and write), and we have a proper application structure in place which we can build on.</p>

<p>Please note that the mechanism implemented in this post is quite simple and doesn&#8217;t cover all cases that will be required before the application is complete. In future posts, this implementation will change to support more of those cases, such as dealing with concurrent updates, handling versions, etc.</p>

<p>Many thanks to those people who took the time out of their busy schedules to review my post before I shared it with the world. Those people shall remain nameless to protect them from any mistakes made in this post (which are solely my own).</p>

<p>As always, comments and feedback is welcomed and greatly appreciated. As are suggestions on improvements, pitfalls and blatant mistakes :)</p>

<p><strong>Note:</strong> The code for Part 3 (this post) can be found on <a href="https://bitbucket.org/OJ/csd/src/55fec468488c" title="Source code for Part 3">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC 2, Random Sign-offs and TempData Loss]]></title>
    <link href="http://buffered.io/posts/asp-net-mvc-2-random-sign-offs-and-tempdata-loss/"/>
    <updated>2010-10-06T08:39:00+10:00</updated>
    <id>http://buffered.io/posts/asp-net-mvc-2-random-sign-offs-and-tempdata-loss</id>
    <content type="html"><![CDATA[<p><a title="MVC" href="http://buffered.io/uploads/2010/10/mvc.png" rel="lightbox[contentadvisor]"><img style="margin-left: 5px; margin-bottom: 5px; float: right;" src="http://buffered.io/uploads/2010/10/mvc.png" alt="MVC" width="150" /></a>In the last few days I&#8217;ve been working on resolving issues in a production system which runs on <a title="What is ASP.NET MVC" href="http://www.asp.net/mvc/whatisaspmvc">ASP.NET MVC 2</a>. Most of the issues were actually really easy to resolve and the team of developers were able to fix them and deploy to production without too many problems.</p>

<p>Unfortunately, as always, there was one problem in particular that had us scratching our heads and was causing some of us to lose sleep. All over the Internet there were posts of people describing similar symptoms yet none of them revealed a solid answer.</p>

<p>The purpose of this post is to document the issue and the resolution in it&#8217;s entirety. It&#8217;s in story form rather than reference form because that&#8217;s how I felt like writing it :)</p>

<!--more-->


<h2>The Issue</h2>

<p>First of all, the percentage of users that were experiencing this problem was relatively low, less than 1 in every 400. This is low enough to indicate that we were going to have one hell of a time finding the issue.</p>

<p>So what was the issue?</p>

<p>The <strong>entry-point</strong> to the site was the <strong>sign-in</strong> page. This is the first page that the user sees. In short, users would sign in to the site and be presented with the landing page in the authenticated area of the site. As soon as they attempted to click on <em>any</em> link inside the authenticated area they were <strong>immediately sent back to the sign-in page</strong>.</p>

<h2>The Investigation</h2>

<p>After adding some more logging functionality to the application and talking to one of our users, we were able to see some really odd behaviour. The user would sign-in, again they were presented with their landing page. Before the user clicked on anything else, we could see that the system had recorded that the browser had <strong>already invoked the sign-off functionality</strong>.</p>

<p>Not good. Thankfully our logging was able to point the finger at a particular action on the site which was causing the user to be signed off. For business and security reasons, the sign-in page had some code that detected if the user was already signed in and, if so, would immediately sign them off. The main driver was to prevent users from <em>thinking</em> that they had signed off from the application and then walk away without realising that their session was still available.</p>

<p>This didn&#8217;t make sense. The user was clearly not returning to the sign-in page, but for some reason the system thought they were and hence was signing them off.</p>

<p>Emulating this at the office was proving to be impossible. We weren&#8217;t able to reproduce it in <em>any</em> of our environments, and according to our help desk, none of the users claimed to be using any tools, plug-ins or add-ins which may be interfering with their sessions.</p>

<p>We searched the <a href="http://google.com/">usual</a> <a href="http://stackoverflow.com/">haunts</a> for answers, but none came up. A post here and there would get our hopes up, but we would eventually have them dashed after realising that the resolution mentioned was something that was already place. Some of the common suggestions are:</p>

<ul>
<li>Make sure that the <a title="Machine Key Explained" href="http://msdn.microsoft.com/en-us/library/ff649308.aspx#paght000007_machinekeyexplained">machine key</a> is the same across all sites in the web farm.</li>
<li>Make sure that the <a title="ASP.NET &amp; IIS Website Load Balancing" href="http://knol.google.com/k/kishore-gorjala/asp-net-iis-website-load-balancing/3jdbfde3g5y2c/3#">IIS site identifier</a> is the same across all sites in the web farm.</li>
<li>Make sure that the cookie path was set to <code>/</code> instead of having a sub-path like <code>/mysite</code>.</li>
<li>Make sure that the user&#8217;s browser was accepting cookies.</li>
</ul>


<p>While point 4 was indeed a problem for some users, it wasn&#8217;t the golden bullet we were looking for.</p>

<p>We spun the wheels for a few days trying to come up with potential reasons why this could be the case. One of the developers suggested that it could be an issue with applications that operate as download accelerators. This application might scrape the screen when the user has signed in, and in an effort to pre-cache the next potential click it <a title="HTTP Request Methods" href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">GET</a>s each link that it finds on screen. It turns out that this wasn&#8217;t, nor couldn&#8217;t, be the issue: we were not including any links to the sign-on page anywhere in the authenticated area of the site.</p>

<h2>The First Shot</h2>

<p>We decided to take a shot in the dark and remove the functionality from the sign-in page which logs the users off. Instead, we present them with a notice which tells them that they are already signed-in. After deploying to production, our users were able to sign in! We were leaping for joy, though frustrated because we didn&#8217;t know why this was a problem in the first place.</p>

<p>Our joy was short-lived. The application itself provides a series of wizards that the user can utilise to perform certain tasks. <em>All</em> of the users who had problems signing in were having unexpected errors shown when using the wizards. Something was still amiss.</p>

<p>We were at a loss. So we decided to call in the cavalry: our poor users.</p>

<h2>The Site Visit</h2>

<p>We got in contact with one user, a lady who had been completely unable to interact with the site since its release, and she graciously accepted our request to pay her a visit and allow us to witness the failure in action. This proved to be a <strong>very</strong> good move as you&#8217;ll soon see.</p>

<p>After the initial meet and greet, I was given access to our client&#8217;s network. At first, I wanted to plug my own personal laptop in to the network to see if I could reproduce the problem without having to touch the client&#8217;s machine. It wasn&#8217;t to be, as  everything worked perfectly for me.</p>

<p>I requested access to the client&#8217;s machine and fired up her browser of choice (<a title="Internet Explorer" href="http://www.microsoft.com/windows/internet-explorer/default.aspx">yuck</a>). As soon as I hit the site, I was presented with a dialog asking for a password. Here is what it looked like:</p>

<p><a title="The Content Advisor Prompt" href="http://buffered.io/uploads/2010/10/content-advisor-prompt.png" rel="lightbox[contentadvisor]"><img style="margin-right: 5px; margin-bottom: 5px; float: left;" src="http://buffered.io/uploads/2010/10/content-advisor-prompt.png" alt="The Content Advisor Prompt" width="250" /></a>I had never seen this before, so I asked the client what it was. Her response:</p>

<blockquote><p>Oh, that&#8217;s the content advisor that my husband set up. We have that enabled on all our computers so that only me and my husband can get to certain websites.</blockquote></p></blockquote>

<p><a title="Microsoft Content Advisor" href="http://www.microsoft.com/windows/ie/using/howto/security/contentadv/config.mspx">Content Advisor</a>? Why had I never heard of this before? After literally <em>years</em> of building production websites, I had never once encountered this beast. Yet here it was in front of me on screen, like a smart-arse teenager giving me the bird, and according to the dates on some of the articles on the web it has been around for quite a few years.</p>

<p>I proceeded to sign in to the site and attempt to perform an action using the wizard. As expected, it failed miserably. I then asked the client to disable the Content Advisor to see if it made any difference.</p>

<p>It did. The site performed <em>flawlessly</em>.</p>

<h2>The Resolution</h2>

<p>So the Content Advisor was causing problems. But how? What was it doing behind the scenes that was preventing our users from getting the quality experience that we&#8217;d worked so hard to deliver?</p>

<p>Now that we had knowledge of the content advisor our queries to the Interwebs resulting in more revealing posts, such as one posted on <a title="IE's Content Advisor, PICS Ratings and the ASP.NET Flakey of the Day" href="http://www.hanselman.com/blog/IEsContentAdvisorPICSRatingsAndTheASPNETFlakeyOfTheDay.aspx">Scott Hanselman&#8217;s blog</a>. Here are some key bits of information from that post:</p>

<blockquote><p>&#8230; when Content Advisor is OFF, the interaction looks like this:<br/></p>

<p>HTTP GET /somefile.aspx<br/>
RESPONSE 200<br/>
HTTP GET /somethingelse.aspx (we did a javascript.open)<br/>
RESPONSE 302 getthisfile.aspx<br/>
HTTP GET getthisfile.aspx<br/>
RESPONSE 200<br/></p>

<p>But when <strong>Content Advisor is ON</strong>, we see this:<br/></p>

<p>HTTP GET /somefile.aspx<br/>
RESPONSE 200<br/>
HTTP GET /somethingelse.aspx (we did a javascript.open)<br/>
<strong>HTTP GET /<br/>
RESPONSE 200</strong><br/>
RESPONSE 302 getthisfile.aspx<br/>
HTTP GET getthisfile.aspx<br/>
RESPONSE 200<br/></p>

<p>&#8230;<br/></p>

<p>When the Content Advisor is ON, Internet Explorer will request &#8216;/&#8217; from a site anytime a new window is opened.</p></blockquote>

<p>As we can see from the above quote, the Content Advisor hits the root of the site on the user&#8217;s behalf in an effort to scrape <a title="Platform for Internet Content Selection" href="http://en.wikipedia.org/wiki/Platform_for_Internet_Content_Selection">PICS</a> information about the website.</p>

<p>According to the last point in the above quote, this will happen any time a new window is opened. Unfortunately for us, it goes deeper than that: <strong>the Content Advisor makes the browser request <code>/</code> every single time an action is invoked if it can&#8217;t find sufficient PICS information for the current URL</strong>.</p>

<p>Yes, it&#8217;s shit, but that&#8217;s the way it works.</p>

<p>So any users which have the Content Advisor turned on will actually be hitting the site twice for every GET action they perform. This explains why the users were being signed off! Our sign-off code was being executed behind the scenes without the users being aware of it.</p>

<p>But why was it causing unexpected errors when clients were using the wizard? To answer that, we need to know about a little feature of MVC called <a title="TempData @ you've been HAACKED" href="http://haacked.com/tags/TempData/default.aspx">TempData</a>.</p>

<p>For those who don&#8217;t want to click the above link, TempData is a feature of ASP.NET MVC which allows information to be persisted across post-backs to the server. A classic example is when URI <code>/Foo</code> gets invoked, and the action results in a redirect to <code>/Bar</code>. But <code>/Bar</code> requires some data that got sent to <code>/Foo</code>, so the <code>/Foo</code> action stores that data in the TempData dictionary which allows <code>/Bar</code> to get access to it during processing. It&#8217;s a nifty feature, and one that we use extensively.</p>

<p>The key piece of information to remember about TempData is that it <em>only persists data across a single post-back</em>. That means that if you post back to the server once, TempData is lost unless the target action <strong>explicitly requests for it to stick around</strong>.</p>

<p>This is the deal-breaker. If <code>/Bar</code> assumes that TempData contains information from <code>/Foo</code> when it fires up then <code>/Bar</code> is going to break if the information is <em>not</em> there. Why would it not be there if a redirect happened? That&#8217;s right, the f$%#ing Content Advisor!</p>

<p>It turns out that every time the Content Advisor hits the root of the site, TempData is cleared. This is obvious in hindsight because the root URI is an <a title="ASP.NET MVC Controller Overview" href="http://www.asp.net/mvc/tutorials/asp-net-mvc-controller-overview-cs">action</a> just like any other anywhere in the whole site. That action gets invoked through the same means and comes with the same caveats &#8230; including that of TempData getting cleared unless we ask it not to. So the chain of events looked like this:</p>

<ul>
<li>User invokes a wizard via a simple click.</li>
<li>Request is set to the server for<code>/Foo</code></li>
<li><code>/Foo</code> gets executed and stores information, <code>Baz</code>, in TempData so that the next step in the wizard, <code>/Bar</code>, can get access to it.</li>
<li><code>/Foo</code> returns page content to the user.</li>
<li>The browser receives the page content from the <code>/Foo</code> action and the Content Advisor notices a lack of PICS information in the HTTP headers and META tags.</li>
<li>The Content Advisor forces the browser to make a request to <code>/</code> in an attempt to find the missing PICS information.</li>
<li>The root site action is hit and it renders the sign-on page content.</li>
<li>At the end of page content generation, the TempData dictionary notices that no requests have been made to retain any of the information across another call, and hence <strong>all of the TempData information is lost</strong>, including <code>Baz</code>.</li>
<li>The user click&#8217;s &#8220;Next&#8221; in the wizard, which causes the browser to invoke the <code>/Bar</code> action on the server.</li>
<li>The server invokes <code>/Bar</code> and the first thing it does is attempt to pull <code>Baz</code> out of TempData. <code>Baz</code> ends up being null.</li>
<li>Game over, Red Rover.</li>
</ul>


<p>There are quite a few issues that were highlighted as a result, but the key one is this: <em>you can&#8217;t assume that your users aren&#8217;t using some form of Content Advisor which is hitting your server with unexpected requests</em>. In our case, the resolution was simple. We just had to add a couple of lines to our root action:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">SignOn</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Request</span><span class="p">.</span><span class="n">IsAuthenticated</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// force the TempData dicionary to keep hold</span>
</span><span class='line'>    <span class="c1">// of the information it has in case this</span>
</span><span class='line'>    <span class="c1">// action is being hit by a Content Advisor.</span>
</span><span class='line'>    <span class="n">TempData</span><span class="p">.</span><span class="n">Keep</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// rest of the action code</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">(...);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>The first question you might ask is: why didn&#8217;t you just add PICS data to your site to prevent the Content Advisors from behaving that way? The short answer is that you can&#8217;t guarantee that the Content Advisors will adhere to the &#8220;rules&#8221;, especially given that there don&#8217;t appear to be any.</p>

<p><a title="Platform for Internet Content Selection" href="http://en.wikipedia.org/wiki/Platform_for_Internet_Content_Selection">PICS</a> has already been replaced with <a title="Protocol for Web Description Resources" href="http://en.wikipedia.org/wiki/POWDER">POWDER</a>. But POWDER doesn&#8217;t appear to be used anywhere, and there&#8217;s very little information around on it. Attempting to support all possible half-baked standards would result in serving up a great deal more content for the sake of a very small subset of users who actually use Content Advisors. It made much more sense to just persist TempData across one more call.</p>

<p>Bear in mind that while the Content Advisor is built-in to the Internet Options area in Windows, it&#8217;s not specific to Internet Explorer. Both Chrome and Safari are affected by the Content Advisor if it is enabled!</p>

<p>So for anyone out there who is building, or has built, a public-facing website using ASP.NET MVC please bear this in mind. Keep an eye on your TempData usage, make sure that your root action persists your TempData if required, and avoid having that same action sign off your users.</p>

<p>I hope this helps someone :) Comments and feedback greatly appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 2]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/"/>
    <updated>2010-09-12T22:15:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/09/riak-logo.png" alt="Riak Logo" style="float:left;padding-right:5px;padding-bottom:5px;"/>In <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> of the series we covered the basics of getting the development environment up and running. We also looked at how to get a really simple ErlyDTL template rendering. If you haven&#8217;t yet gone through Part 1, I suggest you do that now. If you have, read on!</p>

<p>There are a few reasons this series is targeting this technology stack. One of them is <strong>uptime</strong>. We&#8217;re aiming to build a site that stays up as much as possible. Given that, one of the things that I missed in the previous post was setting up a <a href="http://en.wikipedia.org/wiki/Load_balancing_(computing)" title="Load balancing">load balancer</a>. Hence this post will attempt to fill that gap.</p>

<!--more-->


<p>Any serious web-based application will have load-balancing in play somewhere. While not essential during development, it&#8217;s handy to have a similar set up in the hope that it exposes you to some potential issues you might face when the application reaches production.</p>

<p>There are many high-quality load-balancing solutions out there to choose from. For this series, we shall be using <a href="http://haproxy.1wt.eu/" title="HAProxy">HAProxy</a>, which is a common choice amongst developers building scalable web applications. The rest of this post will cover how to set up HAProxy, verifying that the configuration is correct and confirming that it behaves appropriately when nodes in our cluster go down.</p>

<p>Please note the goal is to demonstrate how HAProxy <em>can</em> be configured. When deploying to your production environments please make sure the configuration matches your needs.</p>

<h3>HAProxy installation</h3>

<p>Let&#8217;s start by pulling down the latest stable version of HAProxy&#8217;s source, extracting it and building it. Here&#8217;s a sample log of what you should expect:</p>

<pre><code>oj@nix ~/blog $ wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.14.tar.gz

  ... snip ...

oj@nix ~/blog $ tar -xzf haproxy-1.4.14.tar.gz 

  ... snip ...
</code></pre>

<p>At this point we&#8217;ve got the source and we&#8217;re ready to make. HAProxy requires a parameter in order to build, and this parameter varies depending on your target system:</p>

<pre><code>oj@nix ~/blog $ cd haproxy-1.4.14
oj@nix ~/blog/haproxy-1.4.14 $ make

Due to too many reports of suboptimized setups, building without
specifying the target is no longer supported. Please specify the
target OS in the TARGET variable, in the following form:

   make TARGET=xxx

Please choose the target among the following supported list :

   linux26, linux24, linux24e, linux22, solaris
   freebsd, openbsd, cygwin, custom, generic

Use "generic" if you don't want any optimization, "custom" if you
want to precisely tweak every option, or choose the target which
matches your OS the most in order to gain the maximum performance
out of it. Please check the Makefile in case of doubts.
make: *** [all] Error 1
</code></pre>

<p>According to <a href="http://en.wikipedia.org/wiki/Uname" title="uname">uname</a>, I&#8217;m running Linux Kernel 2.6:</p>

<pre><code>oj@nix ~/blog/haproxy-1.4.14 $ uname -r
2.6.31-21-generic
</code></pre>

<p>As a result, I&#8217;ll be passing in <strong>linux26</strong>. Make sure you specify the correct option depending on which system you are running. We&#8217;ll be building it <em>and</em> installing it so that it can be called from anywhere:</p>

<pre><code>oj@nix ~/blog/haproxy-1.4.14 $ make TARGET=linux26

    ... snip ...

oj@nix ~/blog/haproxy-1.4.14 $ sudo make install

   ... snip ...
</code></pre>

<p>Simple! We now need to create a configuration for HAProxy which we can use during development. Not surprisingly, HAProxy can be run as a daemon, but it can also be invoked from the command line with a configuration passed as a parameter. For our development, we&#8217;ll be executing from the command line as this will give us feedback/output on what&#8217;s going on.</p>

<p>Let&#8217;s create a file called <code>dev.haproxy.conf</code> inside our application directory so that it can be included in our source:</p>

<figure class='code'><figcaption><span>dev.haproxy.conf  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># start with the global settings which will</span>
</span><span class='line'><span class="c"># apply to all sections in the configuration.</span>
</span><span class='line'>global
</span><span class='line'>  <span class="c"># specify the maximum connections across the board</span>
</span><span class='line'>  maxconn 2048
</span><span class='line'>  <span class="c"># enable debug output</span>
</span><span class='line'>  debug
</span><span class='line'>
</span><span class='line'><span class="c"># now set the default settings for each sub-section</span>
</span><span class='line'>defaults
</span><span class='line'>  <span class="c"># stick with http traffic</span>
</span><span class='line'>  mode http
</span><span class='line'>  <span class="c"># set the number of times HAProxy should attempt to</span>
</span><span class='line'>  <span class="c"># connect to the target</span>
</span><span class='line'>  retries 3
</span><span class='line'>  <span class="c"># specify the number of connections per front and</span>
</span><span class='line'>  <span class="c"># back end</span>
</span><span class='line'>  maxconn 1024
</span><span class='line'>  <span class="c"># specify some timeouts (all in milliseconds)</span>
</span><span class='line'>  timeout connect 5000
</span><span class='line'>  timeout client 50000
</span><span class='line'>  timeout server 50000
</span><span class='line'>
</span><span class='line'><span class="c">########### Webmachine Configuration ###################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># here is the first of the front-end sections.</span>
</span><span class='line'><span class="c"># this is where we specify our webmachine instances.</span>
</span><span class='line'><span class="c"># in our case we start with just one instance, but</span>
</span><span class='line'><span class="c"># we can add more later</span>
</span><span class='line'>frontend webfarm
</span><span class='line'>  <span class="c"># listen on port 80 across all network interfaces</span>
</span><span class='line'>  <span class="nb">bind</span> *:80
</span><span class='line'>  <span class="c"># by default, point at our backend configuration</span>
</span><span class='line'>  <span class="c"># which lists our webmachine instances (this is</span>
</span><span class='line'>  <span class="c"># configured below in another section)</span>
</span><span class='line'>  default_backend webmachines
</span><span class='line'>
</span><span class='line'><span class="c"># this section indicates how the connectivity to</span>
</span><span class='line'><span class="c"># all the instances of webmachine should work.</span>
</span><span class='line'><span class="c"># Again, for dev there is only one instance, but</span>
</span><span class='line'><span class="c"># in production there would be more.</span>
</span><span class='line'>backend webmachines
</span><span class='line'>  <span class="c"># we&#39;ll specify a round-robin configuration in</span>
</span><span class='line'>  <span class="c"># case we add nodes down the track.</span>
</span><span class='line'>  balance roundrobin
</span><span class='line'>  <span class="c"># enable the &quot;X-Forware-For&quot; header so that</span>
</span><span class='line'>  <span class="c"># we can see the client&#39;s IP in Webmachine,</span>
</span><span class='line'>  <span class="c"># not just the proxy&#39;s address</span>
</span><span class='line'>  option forwardfor
</span><span class='line'>  <span class="c"># later down the track we&#39;ll be making the use</span>
</span><span class='line'>  <span class="c"># of cookies for various reasons. So we&#39;ll</span>
</span><span class='line'>  <span class="c"># enable support for this while we&#39;re here.</span>
</span><span class='line'>  cookie SERVERID insert nocache indirect
</span><span class='line'>  <span class="c"># list the servers who are to be balanced</span>
</span><span class='line'>  <span class="c"># (just the one in the case of dev)</span>
</span><span class='line'>  server Webmachine1 127.0.0.1:8000
</span><span class='line'>
</span><span class='line'><span class="c">########### Riak Configuration ###################</span>
</span><span class='line'>
</span><span class='line'><span class="c"># We are yet to touch Riak so far, but given that</span>
</span><span class='line'><span class="c"># this post is going to cover the basics of</span>
</span><span class='line'><span class="c"># connectivity, we&#39;ll cover off the configuration</span>
</span><span class='line'><span class="c"># now so we don&#39;t have to do it later.</span>
</span><span class='line'>frontend dbcluster
</span><span class='line'>  <span class="c"># We&#39;ll be using protocol buffers to talk to</span>
</span><span class='line'>  <span class="c"># Riak, so we will change from the default mode</span>
</span><span class='line'>  <span class="c"># and use tcp instead</span>
</span><span class='line'>  mode tcp
</span><span class='line'>  <span class="c"># we&#39;re only interested in allowing connections</span>
</span><span class='line'>  <span class="c"># from internal sources (so that we don&#39;t expose</span>
</span><span class='line'>  <span class="c"># ourselves to the web. so we shall only listen</span>
</span><span class='line'>  <span class="c"># on an internal interface on port 8080</span>
</span><span class='line'>  <span class="nb">bind </span>127.0.0.1:8080
</span><span class='line'>  <span class="c"># Default to the riak cluster configuration</span>
</span><span class='line'>  default_backend riaks
</span><span class='line'>
</span><span class='line'><span class="c"># Here is the magic bit which load balances across</span>
</span><span class='line'><span class="c"># our three instances of riak which are clustered</span>
</span><span class='line'><span class="c"># together</span>
</span><span class='line'>backend riaks
</span><span class='line'>  <span class="c"># again, make sure we specify tcp instead of</span>
</span><span class='line'>  <span class="c"># the default http mode</span>
</span><span class='line'>  mode tcp
</span><span class='line'>  <span class="c"># use a standard round robin approach for load</span>
</span><span class='line'>  <span class="c"># balancing</span>
</span><span class='line'>  balance roundrobin
</span><span class='line'>  <span class="c"># list the three servers as optional targets</span>
</span><span class='line'>  <span class="c"># for load balancing - these are what we set</span>
</span><span class='line'>  <span class="c"># up during Part 1. Add health-checking as</span>
</span><span class='line'>  <span class="c"># well so that when nodes go down, HAProxy</span>
</span><span class='line'>  <span class="c"># can remove them from the cluster</span>
</span><span class='line'>  server Riak1 127.0.0.1:8081 check
</span><span class='line'>  server Riak2 127.0.0.1:8082 check
</span><span class='line'>  server Riak3 127.0.0.1:8083 check
</span></code></pre></td></tr></table></div></figure>


<p>In the configuration above the <code>backend riaks</code> section has three server nodes. Each one of them has the <code>check</code> option specified. This enables health-checking on the same address and port that the server instance is bound to. If you decided that you didn&#8217;t want to do health-checking in this manner you easily enable health-checking over HTTP, as Riak has a built-in URI which can be used to validate the state of the node. Change the <code>backend riaks</code> section in the configuration to look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Here is the magic bit which load balances across</span>
</span><span class='line'><span class="c"># our three instances of riak which are clustered</span>
</span><span class='line'><span class="c"># together</span>
</span><span class='line'>backend riaks
</span><span class='line'>  <span class="c"># again, make sure we specify tcp instead of</span>
</span><span class='line'>  <span class="c"># the default http mode</span>
</span><span class='line'>  mode tcp
</span><span class='line'>  <span class="c"># use a standard round robin approach for load</span>
</span><span class='line'>  <span class="c"># balancing</span>
</span><span class='line'>  balance roundrobin
</span><span class='line'>  <span class="c"># enable HTTP health checking using the GET method</span>
</span><span class='line'>  <span class="c"># on the URI &quot;/ping&quot;. This URI is part of Riak and</span>
</span><span class='line'>  <span class="c"># can be used to determine if the node is up.</span>
</span><span class='line'>  <span class="c"># We specify that we want to use the GET action, and</span>
</span><span class='line'>  <span class="c"># use the URI &quot;/ping&quot; - this is the RESTful health</span>
</span><span class='line'>  <span class="c"># check URI that comes as part of Riak.</span>
</span><span class='line'>  option httpchk GET /ping
</span><span class='line'>  <span class="c"># list the three servers as optional targets</span>
</span><span class='line'>  <span class="c"># for load balancing - these are what we set</span>
</span><span class='line'>  <span class="c"># up during Part 1. Add health-checking as</span>
</span><span class='line'>  <span class="c"># well so that when nodes go down, HAProxy</span>
</span><span class='line'>  <span class="c"># can remove them from the cluster.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># change the health-check address of the node to 127.0.0.0:8091</span>
</span><span class='line'>  <span class="c"># which is the REST interface for the first Riak node</span>
</span><span class='line'>  server Riak1 127.0.0.1:8081 check addr 127.0.0.1 port 8091
</span><span class='line'>
</span><span class='line'>  <span class="c"># change the health-check address of the node to 127.0.0.0:8092</span>
</span><span class='line'>  <span class="c"># which is the REST interface for the second Riak node</span>
</span><span class='line'>  server Riak2 127.0.0.1:8082 check addr 127.0.0.1 port 8092
</span><span class='line'>
</span><span class='line'>  <span class="c"># change the health-check address of the node to 127.0.0.0:8093</span>
</span><span class='line'>  <span class="c"># which is the REST interface for the third Riak node</span>
</span><span class='line'>  server Riak3 127.0.0.1:8083 check addr 127.0.0.1 port 8093
</span></code></pre></td></tr></table></div></figure>


<p>To make sure this is functioning correctly, we need to open two consoles and change our working directory to our <code>csd</code> application (for those who have forgotten, <code>csd</code> is the application we&#8217;re building - it was mentioned in <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>). In console 1:</p>

<pre><code>oj@nix ~/blog/csd $ sudo haproxy -f dev.haproxy.conf -d
Available polling systems :
     sepoll : pref=400,  test result OK
      epoll : pref=300,  test result OK
       poll : pref=200,  test result OK
     select : pref=150,  test result OK
Total: 4 (4 usable), will use sepoll.
Using sepoll() as the polling mechanism.
</code></pre>

<p>This indicates that HAProxy is up and running and waiting for connections. Let&#8217;s get Webmachine fired up in console 2:</p>

<pre><code>oj@nix ~/blog/csd $ ./start.sh

    ... snip ...

=PROGRESS REPORT==== 4-Apr-2011::23:39:27 ===
         application: csd
          started_at: nonode@nohost
</code></pre>

<p>Now Webmachine is fired up with our application running. We should be able to hit our page, this time at <a href="http://localhost/" title="localhost">localhost</a>, and see exactly what we saw at the end of <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a>.</p>

<p><img src="http://buffered.io/uploads/2010/09/haproxy-validation.png" /></p>

<h3>Verification of HAProxy configuration</h3>

<p>On the surface it appears that we haven&#8217;t broken anything. We also need to make sure that any communication with Riak that we have down the track is also functioning. So let&#8217;s validate that now.</p>

<p>First, we have to make sure that Riak is running. If you have followed <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> already and your Riak cluster is running then you&#8217;re good to go. If not, please read <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/" title="Wembachine, ErlyDTL and Riak - Part 1">Part 1</a> for information on how to install Riak and configure it to run as a cluster of 3 nodes.</p>

<p>Next, let&#8217;s create 3 new connections and use the <a href="https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L181" title="riakc_pb_socket:get_server_info/1">get_server_info/1</a> function to find out which node we are connected to. To do this, we&#8217;ll need to use an Erlang console which has all the Riak dependencies ready to go. It just so happens that when we fired up our Webmachine instance, we got an Erlang console for free. Simply hit the <code>enter</code> key and you&#8217;ll be given a prompt. Notice that when we connect to Riak using the <a href="https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L97" title="riakc_pb_socket:start_link/2">start_link/2</a> function, we are passing in the IP address and port of the load-balanced cluster instead of one of the running Riak nodes:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="nv">PROGRESS</span> <span class="nv">REPORT</span><span class="o">====</span> <span class="mi">4</span><span class="o">-</span><span class="nv">Apr</span><span class="o">-</span><span class="mi">2011</span><span class="p">::</span><span class="mi">23</span><span class="p">:</span><span class="mi">41</span><span class="p">:</span><span class="mi">18</span> <span class="o">===</span>
</span><span class='line'>          <span class="nn">supervisor</span><span class="p">:</span> <span class="p">{</span><span class="n">local</span><span class="p">,</span><span class="n">inet_gethost_native_sup</span><span class="p">}</span>
</span><span class='line'>             <span class="nn">started</span><span class="p">:</span> <span class="p">[{</span><span class="n">pid</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">148</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">},{</span><span class="n">mfa</span><span class="p">,{</span><span class="n">inet_gethost_native</span><span class="p">,</span><span class="n">init</span><span class="p">,[[]]}}]</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span><span class="nv">PROGRESS</span> <span class="nv">REPORT</span><span class="o">====</span> <span class="mi">4</span><span class="o">-</span><span class="nv">Apr</span><span class="o">-</span><span class="mi">2011</span><span class="p">::</span><span class="mi">23</span><span class="p">:</span><span class="mi">41</span><span class="p">:</span><span class="mi">18</span> <span class="o">===</span>
</span><span class='line'>          <span class="nn">supervisor</span><span class="p">:</span> <span class="p">{</span><span class="n">local</span><span class="p">,</span><span class="n">kernel_safe_sup</span><span class="p">}</span>
</span><span class='line'>             <span class="nn">started</span><span class="p">:</span> <span class="p">[{</span><span class="n">pid</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">147</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">},</span>
</span><span class='line'>                       <span class="p">{</span><span class="n">name</span><span class="p">,</span><span class="n">inet_gethost_native_sup</span><span class="p">},</span>
</span><span class='line'>                       <span class="p">{</span><span class="n">mfargs</span><span class="p">,{</span><span class="n">inet_gethost_native</span><span class="p">,</span><span class="n">start_link</span><span class="p">,[]}},</span>
</span><span class='line'>                       <span class="p">{</span><span class="n">restart_type</span><span class="p">,</span><span class="n">temporary</span><span class="p">},</span>
</span><span class='line'>                       <span class="p">{</span><span class="n">shutdown</span><span class="p">,</span><span class="mi">1000</span><span class="p">},</span>
</span><span class='line'>                       <span class="p">{</span><span class="n">child_type</span><span class="p">,</span><span class="n">worker</span><span class="p">}]</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">146</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C1</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev1@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">151</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C2</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev2@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">154</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C3</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev3@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can see that the load balancer has allocated three different connections, each to a different node in the cluster. This is a good sign. So let&#8217;s kill off one of the nodes:</p>

<pre><code>oj@nix ~/blog/riak/dev $ dev2/bin/riak stop
ok
</code></pre>

<p>In a very short period of time, you should see output in the HAProxy console which looks something like this:</p>

<pre><code>[WARNING] 253/235636 (11824) : Server riaks/Riak2 is DOWN, reason: Layer4 connection problem, info: "Connection refused", check duration: 0ms.
</code></pre>

<p>The load balancer noticed that the node has died. Let&#8217;s make sure it no longer attempts to allocate connections to <code>dev2</code>. Note that we call <a href="http://www.erlang.org/documentation/doc-5.2/doc/getting_started/getting_started.html" title="Getting started">f()</a> in our console before running the same script again, as this forces the shell to forget about any existing variable bindings:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">().</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">8</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">1951</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">9</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C1</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev1@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span><span class='line'><span class="mi">10</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">1954</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">11</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C2</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev3@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span><span class='line'><span class="mi">12</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">1957</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">13</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C3</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev1@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we hoped, <code>dev2</code> is nowhere to be seen. Let&#8217;s fire it up again:</p>

<pre><code>oj@nix ~/blog/riak/dev $ dev2/bin/riak start
</code></pre>

<p><strong>Note:</strong> It isn&#8217;t necessary to tell the node to rejoin the cluster. This happens automatically. Thanks to Siculars (see comment thread) for pointing that out.</p>

<p>HAProxy&#8217;s console will show you that it has re-established a connection to <code>dev2</code></p>

<pre><code>[WARNING] 253/235852 (11824) : Server riaks/Riak2 is UP, reason: Layer7 check passed, code: 200, info: "OK", check duration: 1ms.
</code></pre>

<p>As a final test, let&#8217;s make sure we see that node get connections when we attempt to connect:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">14</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">().</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">15</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">4203</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">16</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C1</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev3@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span><span class='line'><span class="mi">17</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">4206</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">18</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C2</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev1@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span><span class='line'><span class="mi">19</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">4209</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">20</span><span class="o">&gt;</span> <span class="nn">riakc_pb_socket</span><span class="p">:</span><span class="n">get_server_info</span><span class="p">(</span><span class="nv">C3</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,[{</span><span class="nb">node</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;dev2@127.0.0.1&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">server_version</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;0.12.0&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wrapping up</h3>

<p>Excellent. Now that we&#8217;ve got our load-balancer set up in development, we&#8217;re ready to dive into connecting to Riak from our <code>csd</code> application. That will be the topic for the next post in this series.</p>

<p>As always, comments and feedback are welcome and greatly appreciated. Suggestions on improvements and pointers on mistakes would be awesome. To anyone out there who has put HAProxy into production, we would love to hear your comments on your configuration!</p>

<p><strong>Note:</strong> The code for Part 2 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part2-20110403" title="Source Code for Part 2">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webmachine, ErlyDTL and Riak - Part 1]]></title>
    <link href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1/"/>
    <updated>2010-09-01T23:29:00+10:00</updated>
    <id>http://buffered.io/posts/webmachine-erlydtl-and-riak-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/09/riak-logo.png" alt="Riak Logo" style="float:left;padding-right:5px;padding-bottom:5px;"/>It has been a long time coming, but the first post is finally here! This is the first in a series of post, as <a href="http://buffered.io/posts/the-future-is-erlang/" title="The Future is Erlang">promised a while ago</a>, covering off web development using <a href="http://erlang.org/" title="Erlang">Erlang</a>. This post is the ubiquitous &#8220;get up and running&#8221; post, which aims to get your environment set up so that you can dive in to development. The next post will detail how to handle a basic end-to-end web request.</p>

<p><img src="http://buffered.io/uploads/2010/09/Erlang_logo.png" width="150" style="float:right;margin-left:5px;margin-bottom:5px;"/>First up, a few things we need to be aware of before we begin:</p>

<ol>
<li>The information in this post has only been verified on Linux (<a href="http://linuxmint.com/" title="Linux Mint">Mint</a> to be exact). It <em>should</em> work just fine on Mac OSX. I&#8217;m almost certain that it <em>won&#8217;t</em> work on a Windows machine. So if you&#8217;re a Windows developer, you&#8217;ll have to wait for another post down the track which covers off how to get your environment ready to rock.</li>
<li>We&#8217;ll be downloading, building and installing <a href="http://erlang.org/" title="Erlang">Erlang</a>, <a href="http://github.com/evanmiller/erlydtl" title="ErlyDTL">ErlyDTL</a>, <a href="http://www.basho.com/developers.html#Riak" title="Riak">Riak</a> and <a href="http://www.basho.com/developers.html#Webmachine" title="Webmachine">Webmachine</a>.</li>
<li><a href="http://www.basho.com/developers.html#Rebar" title="Rebar">Rebar</a> is the tool we&#8217;ll be using to handle builds, but I won&#8217;t be covering it in any depth.</li>
<li>You will need the latest versions of both <a href="http://hg-scm.com/" title="Mercurial">Mercurial</a> and <a href="http://git-scm.com/" title="Git">Git</a> so make sure they&#8217;re downloaded and installed before you follow this article.</li>
<li>We&#8217;ll be doing <em>some</em> interaction with Riak via <a href="http://curl.haxx.se/" title="cURL and libcurl">curl</a>, so make sure you have it downloaded and installed as well.</li>
<li>This is intended to be a step-by-step guide targeted at those who are very new to web development in Erlang. This may not be the most ideal set up, nor the best way of doing certain things. I am hoping that those people who are more experienced than I will be able to provide feedback and guidance in areas where I am lacking.</li>
<li>Over the course of this series I&#8217;ll be attempting to build an Erlang version of the <a href="http://bitbucket.org/OJ/codesmackdown" title="Code Smackdown">Code Smackdown</a> site that I&#8217;ve been working on here and there with a <a href="http://secretgeek.net/" title="secretGeek">mate of mine</a>. You&#8217;ll see that the sample application we&#8217;re working on is called &#8220;csd&#8221; for obvious reasons.</li>
</ol>


<p>OK, let&#8217;s get into it. First up, Erlang.</p>

<!--more-->


<h3>Installing Erlang R14B02</h3>

<p>Download and installation is fairly simple. Right now we&#8217;re not worried about enabling all of the features of Erlang, such as interfacing with Java and providing support for GTK. So the boilerplate functionality is enough. Here are the steps to follow:</p>

<pre><code>oj@nix ~/blog $ wget http://erlang.org/download/otp_src_R14B02.tar.gz

  ... snip ...

oj@nix ~/blog $ tar -xzf otp_src_R14B02.tar.gz 
oj@nix ~/blog $ cd otp_src_R14B02/
oj@nix ~/blog/otp_src_R14B02 $ ./configure 

  ... snip ...

oj@nix ~/blog/otp_src_R14B02 $ make

  ... snip ...

oj@nix ~/blog/otp_src_R14B02 $ sudo make install

  ... snip ...
</code></pre>

<p>Done! Let&#8217;s confirm that it has been set up correctly:</p>

<pre><code>oj@nix ~/blog $ erl
Erlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.8.3  (abort with ^G)
1&gt; q().
ok
</code></pre>

<p>Excellent. Next let&#8217;s get Riak going.</p>

<h3>Installing Riak 0.14</h3>

<p>Considering the power of the software you are about to set up, it is absolutely insane how easy it is to get it running. If any of you have tried to get <a href="http://couchdb.apache.org/" title="CouchDB">CouchDB</a> running you&#8217;ll no doubt have experienced a few quirks and a bit of pain getting it rolling. Not so with Riak. As mentioned at the start of the article, make sure you have a recent version of <a href="http://hg-scm.com/" title="Mercurial">Mercurial</a> and <a href="http://git-scm.com/" title="Git">Git</a> installed.</p>

<pre><code>oj@nix ~/blog$ hg --version
Mercurial Distributed SCM (version 1.7.3)
(see http://mercurial.selenic.com for more information)

Copyright (C) 2005-2010 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

oj@nix ~/blog$ git --version
git version 1.7.3.5

oj@nix ~/blog $ git clone git://github.com/basho/riak
Cloning into riak...
remote: Counting objects: 10812, done.
remote: Compressing objects: 100% (3468/3468), done.
remote: Total 10812 (delta 7217), reused 10469 (delta 7020)
Receiving objects: 100% (10812/10812), 8.83 MiB | 729 KiB/s, done.
Resolving deltas: 100% (7217/7217), done.

oj@nix ~/blog $ cd riak
oj@nix ~/blog/riak $ make
./rebar get-deps
==&gt; rel (get-deps)
==&gt; riak (get-deps)
Pulling cluster_info from {git,"git://github.com/basho/cluster_info",
                               {branch,"master"}}
Cloning into cluster_info...
Pulling luwak from {git,"git://github.com/basho/luwak",{branch,"master"}}
Cloning into luwak...
Pulling riak_kv from {git,"git://github.com/basho/riak_kv",{branch,"master"}}
Cloning into riak_kv...
Pulling riak_err from {git,"git://github.com/basho/riak_err",
                           {branch,"master"}}
Cloning into riak_err...
==&gt; cluster_info (get-deps)
==&gt; riak_kv (get-deps)
Pulling riak_core from {git,"git://github.com/basho/riak_core",
                            {branch,"master"}}
Cloning into riak_core...
Pulling riakc from {git,"git://github.com/basho/riak-erlang-client",
                        {tag,"riakc-1.0.2"}}
Cloning into riakc...
Pulling luke from {git,"git://github.com/basho/luke",{tag,"luke-0.2.3"}}
Cloning into luke...
Pulling erlang_js from {git,"git://github.com/basho/erlang_js",
                            {tag,"erlang_js-0.5.0"}}
Cloning into erlang_js...
Pulling bitcask from {git,"git://github.com/basho/bitcask",{branch,"master"}}
Cloning into bitcask...
Pulling ebloom from {git,"git://github.com/basho/ebloom",{branch,"master"}}
Cloning into ebloom...
Pulling eper from {git,"git://github.com/dizzyd/eper.git",{branch,"master"}}
Cloning into eper...
==&gt; riak_core (get-deps)
Pulling protobuffs from {git,"git://github.com/basho/erlang_protobuffs",
                             {tag,"protobuffs-0.5.1"}}
Cloning into protobuffs...
Pulling basho_stats from {git,"git://github.com/basho/basho_stats","HEAD"}
Cloning into basho_stats...
Pulling riak_sysmon from {git,"git://github.com/basho/riak_sysmon",
                              {branch,"master"}}
Cloning into riak_sysmon...
Pulling webmachine from {git,"git://github.com/basho/webmachine",
                             {tag,"webmachine-1.8.0"}}
Cloning into webmachine...
==&gt; protobuffs (get-deps)
==&gt; basho_stats (get-deps)
==&gt; riak_sysmon (get-deps)
==&gt; webmachine (get-deps)
Pulling mochiweb from {git,"git://github.com/basho/mochiweb",
                           {tag,"mochiweb-1.7.1"}}
Cloning into mochiweb...
==&gt; mochiweb (get-deps)
==&gt; riakc (get-deps)
==&gt; luke (get-deps)
==&gt; erlang_js (get-deps)
==&gt; ebloom (get-deps)
==&gt; bitcask (get-deps)
==&gt; eper (get-deps)
==&gt; luwak (get-deps)
Pulling skerl from {git,"git://github.com/basho/skerl",{tag,"skerl-1.0.1"}}
Cloning into skerl...
==&gt; skerl (get-deps)
==&gt; riak_err (get-deps)
./rebar compile
==&gt; cluster_info (compile)
Compiled src/cluster_info_ex.erl


  ... snip ...
</code></pre>

<p>I snipped a lot of the make output for obvious reasons. Let&#8217;s build a few development nodes of Riak and cluster them together as indicated in the <a href="https://wiki.basho.com/display/RIAK/The+Riak+Fast+Track" title="Riak Fast Track">Riak Fast Track</a>:</p>

<pre><code>oj@nix ~/blog/riak $ make devrel
mkdir -p dev
(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev1 overlay_vars=vars/dev1_vars.config)
==&gt; rel (generate)
mkdir -p dev
(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev2 overlay_vars=vars/dev2_vars.config)
==&gt; rel (generate)
mkdir -p dev
(cd rel &amp;&amp; ../rebar generate target_dir=../dev/dev3 overlay_vars=vars/dev3_vars.config)
==&gt; rel (generate)

oj@nix ~/blog/riak $ cd dev
oj@nix ~/blog/riak/dev $ dev1/bin/riak start
oj@nix ~/blog/riak/dev $ dev2/bin/riak start
oj@nix ~/blog/riak/dev $ dev3/bin/riak start
oj@nix ~/blog/riak/dev $ dev2/bin/riak-admin join dev1
Sent join request to dev1

oj@nix ~/blog/riak/dev $ dev3/bin/riak-admin join dev1
Sent join request to dev1

oj@nix ~/blog/riak/dev $ curl -H "Accept: text/plain" http://127.0.0.1:8091/stats
{
  ... snip ...

  "nodename": "dev1@127.0.0.1",
    "connected_nodes": [
    "dev2@127.0.0.1",
    "dev3@127.0.0.1"
  ],

  ... snip ...

  "ring_members": [
    "dev1@127.0.0.1",
    "dev2@127.0.0.1",
    "dev3@127.0.0.1"
  ],
  "ring_num_partitions": 64,
  "ring_ownership": "[{'dev3@127.0.0.1',21},{'dev2@127.0.0.1',21},{'dev1@127.0.0.1',22}]",

  ... snip ...
}
</code></pre>

<p>As we can see from the curl output, we now have a 3-node Riak cluster up and running. Those three nodes have the following traits:</p>

<table border="1">
  <thead>
    <tr>
      <th>Name</th>
      <th>Protobuf Port</th>
      <th>HTTP Port</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dev1@127.0.0.1</td>
      <td>8081</td>
      <td>8091</td>
    </tr>
    <tr>
      <td>dev2@127.0.0.1</td>
      <td>8082</td>
      <td>8092</td>
    </tr>
    <tr>
      <td>dev3@127.0.0.1</td>
      <td>8083</td>
      <td>8093</td>
    </tr>
  </tbody>
</table>


<p>We can talk to any of these nodes and they will replicate their data to the other nodes. Nifty! Now that we have a Riak cluster running for development, let&#8217;s get Webmachine ready.</p>

<h3>Installing Webmachine 0.8</h3>

<p>Again, the process is very simple:</p>

<pre><code>oj@nix ~/blog $ git clone git://github.com/basho/webmachine
loning into webmachine...
remote: Counting objects: 1183, done.
remote: Compressing objects: 100% (484/484), done.
remote: Total 1183 (delta 735), reused 1063 (delta 668)
Receiving objects: 100% (1183/1183), 1.17 MiB | 294 KiB/s, done.
Resolving deltas: 100% (735/735), done.

oj@nix ~/blog $ cd webmachine/
oj@nix ~/blog/webmachine $ make
==&gt; webmachine (get-deps)
Pulling mochiweb from {git,"git://github.com/mochi/mochiweb",{tag,"1.5.1"}}
Cloning into mochiweb...
==&gt; mochiweb (get-deps)
==&gt; mochiweb (compile)
Compiled src/mochiglobal.erl
Compiled src/mochiweb_sup.erl

  ... snip ...
</code></pre>

<p>As you can see, Webmachine sits on top of the <a href="http://github.com/mochi/mochiweb" title="Mochiweb">Mochiweb</a> web server.</p>

<p>To create our own application which sits on top of Webmachine, we can utilise the <code>new_webmachine.sh</code> script. So let&#8217;s do that to create our Code Smackdown (csd) site:</p>

<pre><code>oj@nix ~/blog/webmachine $ scripts/new_webmachine.sh
usage: new_webmachine.sh name [destdir]
oj@nix ~/blog/webmachine $ scripts/new_webmachine.sh csd ..
==&gt; priv (create)
Writing /home/oj/blog/csd/README
Writing /home/oj/blog/csd/Makefile
Writing /home/oj/blog/csd/rebar.config
Writing /home/oj/blog/csd/rebar
Writing /home/oj/blog/csd/start.sh
Writing /home/oj/blog/csd/src/csd.app.src
Writing /home/oj/blog/csd/src/csd.erl
Writing /home/oj/blog/csd/src/csd_app.erl
Writing /home/oj/blog/csd/src/csd_sup.erl
Writing /home/oj/blog/csd/src/csd_resource.erl
Writing /home/oj/blog/csd/priv/dispatch.conf
</code></pre>

<p>Webmachine generates a fully functional website out of the box. So we should be able to build it, fire it up and see it in action:</p>

<pre><code>oj@nix ~/blog/webmachine $ cd ../csd
oj@nix ~/blog/csd $ make
==&gt; csd (get-deps)
Pulling webmachine from {git,"git://github.com/basho/webmachine","HEAD"}
Cloning into webmachine...
==&gt; webmachine (get-deps)
Pulling mochiweb from {git,"git://github.com/mochi/mochiweb",{tag,"1.5.1"}}
Cloning into mochiweb...
==&gt; mochiweb (get-deps)
==&gt; mochiweb (compile)
Compiled src/mochiglobal.erl

  ... snip ...

oj@nix ~/blog/csd $ ./start.sh
Erlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]

  ... snip ...

PROGRESS REPORT==== 3-Apr-2011::22:38:36 ===
          supervisor: {local,csd_sup}
             started: [{pid,&lt;0.76.0&gt;},
                       {name,webmachine_mochiweb},
                       {mfargs,
                           {webmachine_mochiweb,start,
                               [[{ip,"0.0.0.0"},
                                 {port,8000},
                                 {log_dir,"priv/log"},
                                 {dispatch,[{[],csd_resource,[]}]}]]}},
                       {restart_type,permanent},
                       {shutdown,5000},
                       {child_type,worker}]

=PROGRESS REPORT==== 3-Apr-2011::22:38:36 ===
         application: csd
          started_at: nonode@nohost
</code></pre>

<p>The application is now up and running. As you can see from the output, our csd application has been fired up and is listening on port 8000. Let&#8217;s fire it up in a web browser to see if it works.</p>

<p><img src="http://buffered.io/uploads/2010/09/wm_default.png"/></p>

<p>It&#8217;s alive! We&#8217;re almost done. Before we finish up, let&#8217;s get set up our build to include some dependencies.</p>

<h3>Adding ErlyDTL and Riak Client Dependencies</h3>

<p>Rebar makes this bit a walk in the park (thanks <a href="http://dizzyd.com/" title="Gradual Epiphany">Dave</a>, you rock!). Just make sure you stop your Webmachine node before continuing by typing <code>q().</code> into your Erlang console.</p>

<p>The <code>rebar.config</code> file is what drives rebar&#8217;s dependency mechanism. We need to open this file and add the entries we need to include in our application. Webmachine&#8217;s <code>start.sh</code> script by default includes all of the dependencies on start up, so after modifying the configuration, we don&#8217;t have to do anything else (other than use the library of course).</p>

<p>Open up <code>rebar.config</code> in your <a href="http://www.vim.org/" title="VIM">favourite editor</a>, it should look something like this:</p>

<figure class='code'><figcaption><span>rebar.config  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[{</span><span class="n">webmachine</span><span class="p">,</span> <span class="s">&quot;1.8.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/webmachine&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Edit the file so that it includes both ErlyDTL and the Riak Client:</p>

<figure class='code'><figcaption><span>rebar.config  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%-*- mode: erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">webmachine</span><span class="p">,</span> <span class="s">&quot;1.8.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/webmachine&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">riakc</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/riak-erlang-client&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">erlydtl</span><span class="p">,</span> <span class="s">&quot;0.6.1&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/OJ/erlydtl.git&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll notice that the <code>erlydtl</code> reference points at my own fork of the ErlyDTL project. This is because I have made it compile cleanly with rebar so that any dependent projects are also able to be build with rebar. Feel free to use your own fork if you like, but mine is there if you can&#8217;t be bothered :)</p>

<p>Save the file and build!</p>

<pre><code>oj@nix ~/blog/csd $ make
==&gt; mochiweb (get-deps)
==&gt; webmachine (get-deps)
==&gt; csd (get-deps)
Pulling riakc from {git,"git://github.com/basho/riak-erlang-client","HEAD"}
Cloning into riakc...
Pulling erlydtl from {git,"git://github.com/OJ/erlydtl.git","HEAD"}
Cloning into erlydtl...
==&gt; riakc (get-deps)
Pulling protobuffs from {git,"git://github.com/basho/erlang_protobuffs",
                             {tag,"protobuffs-0.5.1"}}
Cloning into protobuffs...
==&gt; protobuffs (get-deps)
==&gt; erlydtl (get-deps)
==&gt; mochiweb (compile)
==&gt; webmachine (compile)
==&gt; protobuffs (compile)
Compiled src/pokemon_pb.erl
Compiled src/protobuffs_parser.erl

  ... snip ...
</code></pre>

<p>Dependencies sorted. For the final part of this blog post, we&#8217;ll include a basic ErlyDTL template and use it to render the page so we can see how it works.</p>

<h3>Rendering an ErlyDTL Template</h3>

<p>Rebar has built-in support for the compilation of ErlyDTL templates. It can be configured to behave how you want it to, but out of the box it&#8230;</p>

<ul>
<li>&#8230; looks for <code>*.dtl</code> files in the <code>./templates</code> folder</li>
<li>&#8230; compiles each of the found templates into a module called <code>filename_dtl</code> (eg. <code>base.dtl</code> becomes the module base_dtl)</li>
<li>&#8230; puts the module beam files into the <code>ebin</code> directory</li>
</ul>


<p>Very handy. Let&#8217;s create a very simple template by creating a <code>templates</code> folder, and editing a new file in that folder called <code>sample.dtl</code></p>

<figure class='code'><figcaption><span>templates/sample.dtl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;&lt;body&gt;</span>Hello from inside ErlyDTL. You passed in .<span class="nt">&lt;/body&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then open up <code>src/csd_resource.erl</code> and search for the <code>to_html()</code> function. It should look like this:</p>

<figure class='code'><figcaption><span>src/csd_resource.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&quot;&lt;html&gt;&lt;body&gt;Hello, new world&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Modify it to look like this:</p>

<figure class='code'><figcaption><span>src/csd_resource.erl  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Content</span><span class="p">}</span> <span class="o">=</span> <span class="nn">sample_dtl</span><span class="p">:</span><span class="n">render</span><span class="p">([{</span><span class="n">param</span><span class="p">,</span> <span class="s">&quot;Slartibartfast&quot;</span><span class="p">}]),</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>For now, don&#8217;t worry about the content of this file. I will cover this off in a future post.</p>

<p>In the past, we had to manually modify <code>ebin/csd.app</code> to include the template that we&#8217;ve just created. Thankfully, <code>rebar</code> has been updated so that it generates the <code>ebin/csd.app</code> file from the <code>src/csd.app.src</code> file automatically when the application is built. <code>rebar</code> adds the required modules from the <code>src</code> folder <em>and</em> includes the templates from the <code>templates</code> folder. Therefore, with our template and module ready to go, all we need to do is build and run:</p>

<pre><code>oj@nix ~/blog/csd $ make
==&gt; mochiweb (get-deps)
==&gt; webmachine (get-deps)
==&gt; protobuffs (get-deps)
==&gt; riakc (get-deps)
==&gt; erlydtl (get-deps)
==&gt; csd (get-deps)
==&gt; mochiweb (compile)
==&gt; webmachine (compile)
==&gt; protobuffs (compile)
==&gt; riakc (compile)
==&gt; erlydtl (compile)
==&gt; csd (compile)
Compiled src/csd_resource.erl
Compiled templates/sample.dtl

oj@nix ~/blog/csd $ ./start.sh 
Erlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]

  ... snip ...

** Found 0 name clashes in code paths 

  ... snip ...

=PROGRESS REPORT==== 3-Apr-2011::22:54:50 ===
         application: csd
          started_at: nonode@nohost
</code></pre>

<p>Notice how ErlyDTL outputs some information to indicate that no template names have clashed with any other modules.</p>

<p>The application is now running, let&#8217;s see what it looks like:</p>

<p><img src="http://buffered.io/uploads/2010/09/wm_erlydtl.png"/></p>

<h3>The End</h3>

<p>We now have a working environment in which to do our development. In the next post, I&#8217;ll cover some of the basics required to get Webmachine talking to Riak via <a href="http://en.wikipedia.org/wiki/Protocol_Buffers" title="Protocol Buffers">Protocol Buffers</a>.</p>

<p>Feedback and criticism welcome!</p>

<p><strong>Note:</strong> The code for Part 1 (this post) can be found on <a href="https://github.com/OJ/csd/tree/Part1-20110403" title="Source Code for Part 1">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BFPG June Meetup]]></title>
    <link href="http://buffered.io/posts/bfpg-june-meetup/"/>
    <updated>2010-06-25T20:05:00+10:00</updated>
    <id>http://buffered.io/posts/bfpg-june-meetup</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/06/Home.png" alt="Erlang Logo" style="float:right; margin-left:5px; margin-bottom: 5px;"/>The time has come for another meeting of the Functional Programming minds! This months <a href="http://www.meetup.com/Brisbane-Functional-Programming-Group-BFG/calendar/12636552/" title="June BFPG Meetup">BFPG Meetup</a>, starting 6pm Monday 28th, is the first one at our new venue: Microsoft HQ, Waterfront Place, Brisbane. For details on the location, take a look at the <a href="http://bfpg.org/about/" title="About BFPG">BFPG about page</a>.</p>

<p><img src="http://buffered.io/uploads/2010/06/ruby.png" alt="Erlang Logo" style="float:left; margin-right:5px; margin-bottom: 5px;"/>This month we have three speakers, and I am one of them! In my talk, &#8220;Erlang - Why should you care?&#8221;, I will be giving a fairly non-technical introduction to <a href="http://erlang.org/" title="Erlang">Erlang</a>. I&#8217;ll be covering off the features of the language, some of its design goals and its history. I aiming to show that this language is not one that was spawned out of academia and that it has been applied in the real-world ever since its conception. If I have time, I&#8217;ll also be giving a small demonstration of one of the neatest features of the technology.</p>

<p><img src="http://buffered.io/uploads/2010/06/haskell-logo-variation.png" alt="Erlang Logo" style="float:right; margin-left:5px; margin-bottom: 5px;"/>
I&#8217;ll be posting the slides and demonstration code here on this blog as well as <a href="http://bfpg.org/" title="BFPG">BFPG&#8217;s home</a> after the meetup has taken place.</p>

<p>Myself and my comrades, <a href="http://adams.id.au/blog/" title="Nosewheelie">Tom</a> and <a href="http://blog.tmorris.net/" title="Tony's blog">Tony</a>, will aim to provide a fun and interesting evening at our new venue. Based on the RSVPs so far, it looks like we are going to have one of the biggest turn-outs to date. This is probably due to the exposure we got during last month&#8217;s <a href="http://buffered.io/posts/dave-thomas-at-yow-nights-brisbane/" title="Dave Thomas at YOW! Nights Brisbane">talk by Dave Thomas</a>. There are still plenty of spots left, so if you&#8217;re keen to come along, <a href="http://www.meetup.com/Brisbane-Functional-Programming-Group-BFG/calendar/12636552/" title="Sign up for BFPG June 10">go and sign up</a>. Bring your friends, your friend&#8217;s friends and your mum.</p>

<p>I hope to see you there!</p>

<hr/>


<p><strong>Update (6th July 2010):</strong> We had a fantastic turn-out of just short of 50 people (a record breaker for the group so far!). My talk seemed to be fairly well-received. No rotten tomatoes were thrown and the crowd seemed engaged through most of the talk. It felt good! I think many people wanted to see more code, but since that wasn&#8217;t the focus of the talk they were a little disappointed. If people are keen for more Erlang goodness at future meetups, then I&#8217;ll be happy to dive a little deeper.</p>

<p>Here&#8217;s a video of my talk:</p>

<iframe src="http://player.vimeo.com/video/13566071?byline=0&amp;portrait=0&amp;color=F79942" width="512" height="384" frameborder="0"></iframe>


<p><a href="http://vimeo.com/13566071">OJ Reeves - Erlang - Why Should You Care</a>.</p>


<p>As promised, here are the slides:</p>

<ol><li><a href="https://docs.google.com/leaf?id=0B4v3XvOkiwsCZjNhZTk3OTYtZTgxNy00MjBmLWJiZmYtMzZjMzU3N2E3MDgz&hl=en&authkey=CIaRg_sF">PPTX</a></li>
<li><a href="https://docs.google.com/a/buffered.io/fileview?id=0B4v3XvOkiwsCMjlhMWRjNGItYmZkOC00ODRlLTkzYTUtOTI3ZWZhY2MxOGYx&hl=en&authkey=CM7rtpEO">PDF (Google Docs)</a></li>
<li><a href="https://docs.google.com/a/buffered.io/present/edit?id=0AYv3XvOkiwsCZGdmamd0eGNfN2dnaDh3emhw&hl=en&authkey=CJKBg-MB">PPT (Google Docs)</a></li></ol>


<p>If you have issues reading the slide deck, or would like it in another format, then please <a href="http://buffered.io/contact-me">drop me a line</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dave Thomas at YOW! Nights Brisbane]]></title>
    <link href="http://buffered.io/posts/dave-thomas-at-yow-nights-brisbane/"/>
    <updated>2010-05-22T23:30:00+10:00</updated>
    <id>http://buffered.io/posts/dave-thomas-at-yow-nights-brisbane</id>
    <content type="html"><![CDATA[<p><img src="http://buffered.io/uploads/2010/05/haskell-logo-variation.png" alt="Haskell Logo" title="Haskell Logo" width="128" height="128" style="float:right;margin-left:5px;margin-bottom:5px" />Two nights ago I was fortunate enough to attend a <a href="http://yownightbrisbanemay.eventbrite.com/" title="YOW! Nights Brisbane - May 20th">YOW! Nights</a> conference held at the local Microsoft Office here in Brisbane. The speaker for the session was none other than <a href="http://www.davethomas.net/" title="Dave Thomas">Dave Thomas</a>, the man behind the likes of <a href="http://objectmentor.com/" title="Object Mentor">ObjectMentor</a>. Not only is this guy incredibly switched on, he is thought-provoking and very entertaining to boot. I&#8217;ve been to a few of these sessions in the past but I&#8217;ve never seen one as packed out as this one. It was great to see such a turn-out, which no doubt was boosted by the presence of both the <a href="http://www.qmsdnug.org/" title="QMSDNUG">Queensland MSDN Users Group</a> and the <a href="http://bfpg.org/" title="BFPG">Brisbane Functional Programming Group</a>.</p>

<!--more-->


<p>The talk was covering <a href="http://en.wikipedia.org/wiki/Functional_programming" title="Functional Programming">Functional Programming</a> and the <a href="http://en.wikipedia.org/wiki/NoSQL" title="NoSQL">NoSQL</a> movement (which, as Dave himself puts it, should be called <em>NoRDB</em>). These are two areas of computing that are currently key interests of mine, so it won&#8217;t come as a surprise to find that I thoroughly enjoyed the talk. I certainly wasn&#8217;t the only one. Dave did such a great job of covering the positives of these two movements that we&#8217;re already seeing more and more people signing up for membership to <a href="http://bfpg.org/" title="BFPG">BFPG</a>.</p>

<p>I&#8217;m not going to go into the gory details about what Dave covered in his talk as I don&#8217;t want to spoil it for other people if he plans on doing it again elsewhere. There are a few things I would like to mention though:</p>

<ul>
  <li>Functional Programming is here to stay. If you&#8217;re not familiar with it, or haven&#8217;t yet taken a look at it, I suggest you get started!</li>
  <li>If you&#8217;re looking to get involved with FP and you&#8217;re in or around the Brisbane area, be sure to come to one of our <a href="http://bfpg.org/" title="BFPG">BFPG</a> meetups.</li>
  <li>Don&#8217;t fall into the trap of assuming that if your system needs a back-end data store that an <a href="http://en.wikipedia.org/wiki/Relational_database_management_system" title="Relational Database Management System">RDBMS</a> is the only option, because it&#8217;s not!</li>
</ul>


<p>This talk has inspired me to not only continue checking out the likes of <a href="http://haskell.org/" title="Haskell">Haskell</a>, <a href="http://erlang.org/" title="Erlang">Erlang</a> and <a href="http://riak.basho.com/" title="Riak">Riak</a>, it&#8217;s pointed me at some languages that I never knew existed. Languages which are insanely powerful, very dense, yet still extremely useful. Some examples are <a href="http://en.wikipedia.org/wiki/J_(programming_language)" title="J">J</a>, <a href="http://en.wikipedia.org/wiki/K_(programming_language)" title="K">K</a> and <a href="http://en.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems)" title="Q">Q</a>. <a href="http://www.kx.com/products/database.php" title="KDB+">KDB+</a> in particular is very interesting as it ties in with the use of another type of technology that I was aware of but knew nothing about: <a href="http://en.wikipedia.org/wiki/Column-oriented_DBMS" title="Column Database">Column Databases</a>. Crazy stuff.</p>

<p>After seeing so many people excited by the prospect of Functional Programming after Dave&#8217;s talk had concluded, I decided to set up a new website for <a href="http://bfpg.org/" title="BFPG">BFPG</a> so that we had a proper home rather than just a spot on <a href="http://www.meetup.com/Brisbane-Functional-Programming-Group-BFG/" title="BFPG @ Meetup.com">Meetup.com</a>. Check it out and feel free to send through some feedback if you have any, or <a href="http://bfpg.org/contact/" title="Contact BFPG">drop us a line</a> if you have any ideas for talks or would like to present something yourself.</p>

<p>That&#8217;s it for today&#8217;s brain-fart :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Issue of Perception]]></title>
    <link href="http://buffered.io/posts/the-issue-of-perception/"/>
    <updated>2010-03-14T22:12:00+10:00</updated>
    <id>http://buffered.io/posts/the-issue-of-perception</id>
    <content type="html"><![CDATA[<h2>What is Perception?</h2>

<p>As cheesy as it sounds, I&#8217;m going to start off with a definition ripped straight off <a href="http://dictionary.reference.com/browse/perception" title="Perception | Define Perception at Dictionary.com">Dictionary.com</a>:</p>

<blockquote><h3>perception</h3>

<p><strong><em>noun</em></strong></p>

<ol>
<li>the act or faculty of apprehending by means of the senses or of the mind; cognition; understanding.</li>
<li>immediate or intuitive recognition or appreciation, as of moral, psychological, or aesthetic qualities; insight; intuition; discernment: <em>an artist of rare perception</em>.</li>
<li>the result or product of perceiving, as distinguished from the act of perceiving; percept.</li>
<li><em>Psychology</em>. a single unified awareness derived from sensory processes while a stimulus is present.</li>
<li>Law. the taking into possession of rents, crops, profits, etc.</li>
</ol>
</blockquote>

<p><a href="http://buffered.io/uploads/2010/03/escher.jpg" rel="lightbox" title="A classic Escher"><img src="http://buffered.io/uploads/2010/03/escher.jpg" alt="A classic Escher" title="A classic Escher" width="250" style="float: right; margin-left: 5px; margin-bottom: 5px;" /></a>Take a moment to digest the meaning of the word. Can you see how subjective it is? One&#8217;s perception varies greatly depending on the observer. The motivation of the observation is also going to skew how one is perceived. The relationship one has with the observer is also going to impact how that observer perceives you.</p>

<p>Finally, it&#8217;s important to note that what was <em>perceived</em> and any point in time is not necessarily the same as what <strong>actually occurred</strong>.</p>

<!--more-->


<h2>Motivation for Writing</h2>

<p>So why am I talking about this? Earlier this week, the team I am currently working with had its fortnightly iteration <a href="http://agilesoftwaredevelopment.com/blog/peterstev/start-trust-start-retrospective" title="Start with Trust, Start with a Retrospective">retrospective</a>. Quite a few issues were raised. A few <a href="http://www.answers.com/topic/home-truths" title="Home Truths">home truths</a> were revealed. A few of the team members implied that there was a perception issue, in that what appeared to have happened in some cases is not actually what happened.</p>

<p>This whole issue of perception has come up on almost every job I have worked on. This time round it has motivated me to write about it as I feel that for some reason people don&#8217;t really understand the core of the issue. Not only that, they fail to see that there is actually a great deal of value in learning how to manage it and use it as valuable feedback to improve yourself as a professional.</p>

<h2>How are you Perceived?</h2>

<p>The answer to this question will vary greatly depending on the situation, your relationship with those who are observing you and what lengths you go to in order to portray the right image.</p>

<p>People will look at you differently if you&#8217;re a <a href="http://buffered.io/posts/im-so-impressed-i-want-to-pay-you-less/" title="I'm so impressed I want to pay you less">contractor compared to a permanent employee</a>. Their expectations will be higher, and hence when you&#8217;re being obvserved people will be a little more critical. The expectation is that you&#8217;re there as a domain expert that is adding value directly proportional to the cost of the service that you provide. As a permanent, the expectation is that you&#8217;ll do the job to a &#8220;sufficient&#8221; level, work &#8220;enough&#8221; hours and &#8220;care&#8221; enough to get things done&#8230; eventually.</p>

<p>There are many shades of grey within these two categories as well as between them. I won&#8217;t be covering all of them, but I believe there are a few points which apply to all of them when it comes to have they are observed from the perspective of the man who is paying the bills (for example, the Project Manager).</p>

<p>How much time do you spend&#8230;</p>

<ul>
<li>&#8230; reading and writing emails?</li>
<li>&#8230; on the phone?</li>
<li>&#8230; reading and writing blogs?</li>
<li>&#8230; talking about non-work related stuff?</li>
<li>&#8230; messing around with personal gadgets or laptops at work?</li>
<li>&#8230; going out for coffee?</li>
<li>&#8230; using some sort of instant messaging client and/or social network tools?</li>
<li>&#8230; actually at work, at your desk? (ie. do you get in late or leave early)?</li>
</ul>


<p>Don&#8217;t get me wrong here, everyone does a few of these things when at work, regardless of there position. The question is where to draw the line, to make sure you don&#8217;t go too far.</p>

<p>Now compare these to how much time you spend&#8230;</p>

<ul>
<li>&#8230; starting and/or participating in design discussions.</li>
<li>&#8230; at your desk actually doing the work you&#8217;re there to do.</li>
<li>&#8230; helping others do the work they do.</li>
<li>&#8230; helper others improve the level of quality of their work.</li>
<li>&#8230; attempting to add value in areas you&#8217;re not directly involved with.</li>
<li>&#8230; going above and beyond to highlight and rectify problem areas.</li>
</ul>


<p>These are all time-based issues. There are others which relate to attitude as well. How about..?</p>

<ul>
<li>When participating in team discussions, stand-ups or retrospectives, how much do you get involved?</li>
<li>What does your body language say about how you feel or what you&#8217;re thinking about at any given time?</li>
<li>Do you get involved in discussions that have nothing to do with you?</li>
<li>When dealing with people who you consider to be bad at their job, or people who you either don&#8217;t like or respect, does your tone of voice give away you feelings?</li>
<li>Do you find yourself getting personal for any reason when discussing issues with other members of your team?</li>
<li>Do you attempt to discuss things that you don&#8217;t understand while attempting to make it sound like you&#8217;re an <a href="http://buffered.io/posts/its-ok-to-fail/" title="It's OK to Fail">expert in the matter</a>?</li>
<li>Do you attempt to abuse your position of power (if you have one) even if it&#8217;s to the detriment of the project you&#8217;re working on?</li>
<li>Do you wear appropriate clothing to work?</li>
</ul>


<p>There are so many more, but I won&#8217;t list them all as it&#8217;d make this post even <em>more</em> boring ;)</p>

<p>Don&#8217;t underestimate how each of these things can make you look bad if you don&#8217;t manage your percetpion properly. A few small things can have just as big an impact on how you are perceived as one big thing. This can be bad enough even when the observer is a friend, but it&#8217;s substantially worse if the person isn&#8217;t!</p>

<h2>Skewed Perceptions</h2>

<p><a href="http://buffered.io/uploads/2010/03/beer-goggles.jpg" title="How perception can vary!  -- Image Courtesy of sofakingdrunk.com" rel="lightbox"><img src="http://buffered.io/uploads/2010/03/beer-goggles.jpg" alt="How perception can vary!  -- Image Courtesy of sofakingdrunk.com" title="How perception can vary!  -- Image Courtesy of sofakingdrunk.com" width="220" style="float:left; margin-bottom: 5px; margin-right: 5px;" /></a>This is where it gets nasty. Skewed perceptions can have a drastic effect on the employer&#8217;s view. Most of the time, the employer&#8217;s view is made up of those from a selection of people including some which will work alongside you in the trenches every day. If one or more of those people have a reason to dislike you then you have to make extra effort to manage how you are viewed. The smallest things can be blown out of proportion in this situation.</p>

<p>People who have a reason to dislike you will make every little thing you do look worse than it actually is. A slightly delayed email response will &#8220;put them back a few hours&#8221;. A broken build will cause &#8220;huge issues with the work they&#8217;re doing&#8221;. A controversial email thread will be considered &#8220;extremely offensive&#8221; and having a laugh with some co-workers will be seen as &#8220;highly distracting and obnoxious&#8221;.</p>

<p>Bear this in mind while going about your daily work.</p>

<h2>Managing Perception</h2>

<p>Ultimately, the best way to manage perception is the most simplest way: <strong>do your job, and do it well!</strong> That&#8217;s really what it boils down to. If you do your job while you&#8217;re at work then by definition you&#8217;re not wasting time. You&#8217;re not on the phone, you&#8217;re not reading blogs, and you&#8217;re not wasting time at all because you&#8217;re doing what you&#8217;re paid to do. The only grey area here is email. There are always going to be a plethora of work-related emails, and it&#8217;s important to manage those and respond to them in a timely manner. Just make sure you don&#8217;t spend your day in front of <em><em>insert email client of choice</em></em>.</p>

<p>But let&#8217;s say that for some reason you aren&#8217;t doing your job for the full eight hours per day. This isn&#8217;t an unrealistic scenario, because everyone has something else going on in their lives which can have an effect on them during working hours. What do you do then? How do you make sure that you&#8217;re not unfairly perceived? Again, it&#8217;s very simple. Here are some examples.</p>

<ul>
<li><strong>Phone calls</strong>: Don&#8217;t take personal calls during the day. If you have a wife/partner that you want to speak to then call them during lunch. Make sure that <em>they only call you</em> during lunch or when it&#8217;s an absolute emergency. If you have some other high-priority thing going on (eg. you&#8217;re buying a house and you have to make sure the solicitors are doing their job) then make sure that you inform your manager/workmates. Tell them that you&#8217;re expecting to deal with this issue during the day and that you&#8217;ll be making an effort to keep it to a minimum. This means that if you&#8217;re on the phone, people won&#8217;t be asking questions as to why. Also, when taking calls, do yourself a favour and move away from your desk. Your colleagues don&#8217;t want to hear the conversation (especially if it involves sentences like &#8221;<em>I love you baby. Kissy-wissy! Love you!</em>&#8221;). Give your colleages the space they deserve and go outside or to a private room. But make sure you keep it <strong>short</strong>.</li>
<li><strong>Coffee</strong>: I can be bad for this one sometimes. In short, get your coffee before you go to work. Don&#8217;t take trips out after arriving. This can apply to other things such as late breakfasts.</li>
<li><strong>Care-factor</strong>: So you&#8217;re in a meeting and you&#8217;re either pissed off because of something someone said, or you&#8217;re just not interested. We&#8217;ve all been there right? Er&#8230; have we? Anyway, let&#8217;s say we have. Sitting there looking very disinterested isn&#8217;t going to do you any favours. Don&#8217;t constantly look at your watch. Don&#8217;t glare at people like a sourpuss. Don&#8217;t check your phone every 60 seconds to see if something more interested has landed in your inbox or Twitter stream. Pay attention! Sit up. Contribute something. At least do your colleagues the justice of listening to them and see if you can add value somewhere.</li>
<li><strong>Passive-aggressive behaviour</strong>: This comes in so many forms. Via emails, via jokes, via general conversation. It&#8217;s a bad thing to do. It can be as subtle as a comment like &#8220;You&#8217;re the Lead now, it&#8217;s your problem&#8221;. Avoid the jibes. Deal with the situation in a professional manner instead of behaving like a petulant child.</li>
<li><strong>Personality clashes</strong>: Someone at work has an issue with you, or you have an issue with them. Rather than let things turn bad, nip it in the bud. Take the person to one side and have a constructive discussion with them. Find out what it is that pisses them off, and try to deal with it. Attempting to work alongside someone when the air not clear not only causes issues for the two of you but can also be very distracting for the rest of the team.</li>
<li><strong>Caring too much</strong>: The work means more to you than the other people you&#8217;re working with. You care about quality, standards, managing costs and expectations and you make an effort to stay in touch with the world you work in. The fact that your colleagues aren&#8217;t like you infuriates you. This becomes evident in everything you do purely because of the anger and/or dismissiveness that you display whenever you interact with them. This fits into the professionalism category. Deal with it like a professional. I&#8217;m not asking you to <em>like</em> them any more, nor to lower your standards in any way. I&#8217;m asking you to learn to work around them. There will always be people that you work with that will make you feel like this (especially if you work in the government or in enterprise software). Learn to manage it and deal with your anger.</li>
<li><strong>Proactivity</strong>: This is something that isn&#8217;t only going to improve your perception but will ultimately make you a better professional. Demonstrate some forethought for the area you work in. Read up on things in your own time and share them with your colleagues when you get to work. Constantly review your work methods and see how <strong>you</strong> can improve. If you find a way of improving yourself, you can again share that with people, but make sure you emphasise that <strong>you</strong> got a lot of value of it first. Make an effort to preempt some issues and deal with them up front rather than putting them off. Try to look past today&#8217;s work and see what&#8217;s coming down the track. Don&#8217;t just look at the current line of code, be aware of the bigger picture. Don&#8217;t be constrained to your field. If you&#8217;re a tester you can improve the life of a developer (and vice versa).</li>
<li><strong>Do your hours</strong>: While a bigger issue for contractors, this definitely applies to permies as well. It&#8217;s simple: do your hours! You get paid to do around eight hours of work per day. Less if you&#8217;re a government employee. Eight hours is not that difficult. Whether you like it or not, your hours will in some way be monitored, and the perception of you will change if you don&#8217;t do what is expected. Getting to work earlier than other doesn&#8217;t mean you have the right to do less hours. If you rock up earlier, yes you can leave earlier, but if you&#8217;re taking a lot of time out for personal stuff or lunches, then you should make the effort to stay back longer and make up for the time you have lost.</li>
<li><strong>Punctuality</strong>: Get to work on time, especially if you&#8217;re a contractor. Rocking up after 9am most days doesn&#8217;t look good, especially if you leave before 5pm and take a full hour for lunch. Get to meetings on time. There&#8217;s no excuse for tardiness and it makes you look very unprofessional while wasting other people&#8217;s time.</li>
<li><strong>Deal with criticism/feedback</strong>: When people have the nerve to come to you and talk openly about issues, be open to them and don&#8217;t get angry. Don&#8217;t try and justify your position by pointing out the flaws in other people. Don&#8217;t attempt to make it sound like you&#8217;re no different to anybody else. Listen to what people are saying. Use that information to better yourself as a person and as a professional. The best thing to do is separate yourself from the rest by learning from what you hear.</li>
</ul>


<h2>Trying Too Hard</h2>

<p>When the issue of perception raises its ugly head, most people attempt to solve the problem instantly. This cannot be done. Changing people&#8217;s perception of you is something that takes a long time. It&#8217;s not something that will happen within a day, a week, or even a month. Expect it to take quite a while.</p>

<p>Here are some sure signs that you&#8217;re trying too hard:</p>

<ul>
<li>You email everyone every time you do something related to your job. You&#8217;re attempting to demonstrate that you&#8217;re doing your work, but all you achieve by doing this is annoying everyone. You don&#8217;t need to email everyone all the time. Only when it&#8217;s relevant should you make the effort. Don&#8217;t add noise, just try to add signal.</li>
<li>You get involved in discussions that are outside of your area of expertise. I don&#8217;t think I need to elaborate here. (this post is a classic example ;) ).</li>
<li>You make a point of highlighting other people&#8217;s faults.</li>
<li>You take the time to add value to anything and everything you can, splattering your workplace with &#8220;look how good I am&#8221; propoganda.</li>
<li>Including lots of people in email threads when they don&#8217;t need to be.</li>
</ul>


<p>Instead of putting effort into directly changing how people perceive you, the best thing to do is change the way you work. Focus on doing your job better.</p>

<p>By the way, please let me know if you know of any more signs!</p>

<h2>Conclusion</h2>

<p>Perception tends to be directly related to your quality of work, though it can sometimes be skewed by interpersonal issues. Managing how you&#8217;re perceived is actually very simple. If you care about your job and you want to do well you&#8217;ll find that the whole perception issue fades into the background.</p>

<p>If you&#8217;re floating along in a job you don&#8217;t like or with people you don&#8217;t like, and you&#8217;re not really giving it 100%, then chances are you going to face this problem sooner rather than later.</p>

<p>Step up. Improve yourself for your own benefit, and you&#8217;ll find that the rest of the perception issues will go away.</p>

<p>Thoughts, feedback, abuse and cheap-shots are, as always, very welcome :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm so impressed I want to pay you less]]></title>
    <link href="http://buffered.io/posts/im-so-impressed-i-want-to-pay-you-less/"/>
    <updated>2010-03-02T12:27:00+10:00</updated>
    <id>http://buffered.io/posts/im-so-impressed-i-want-to-pay-you-less</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2010/03/statue-of-liberty_whip_ny-times.jpg" title="Slave driver" rel="lightbox[slave]"><img src="http://buffered.io/uploads/2010/03/statue-of-liberty_whip_ny-times.jpg" alt="Slave driver" title="Slave driver" width="150" style="float: left; margin-bottom: 5px; margin-right: 5px;"/></a>The title of this post is a statement that I&#8217;ve heard a few times in the past while at work. The people who said it might not have used those exact words, but the intent is the same. Usually I hear it in the following form:</p>

<p><em>&#8220;We&#8217;re very happy with the work you&#8217;ve done for us as a contractor. We want to keep you on, but would like you to take a job as a permanent employee and continue to work on the project.&#8221;</em></p>

<p>Once they&#8217;ve made this point, they then feel the need to harp on about the good points of becoming a permanent employee. Things such as job security, sick/annual leave and better hours tend to get mentioned. All of them are complete bullshit of course.</p>

<p>There is <strong>no such thing as job security</strong>. Sick and/or annual leave isn&#8217;t enough to make up for the difference in pay. Hours tend to always be worse when you&#8217;re working for the man, because you&#8217;re expected to do whatever needs to be done regardless of the hours. This is worse if you&#8217;re working on mission-critical stuff.</p>

<!--more-->


<p>Now I have no aversion to doing my fair share of extra work and mission-critical stuff is way more interesting. I often enjoy it. What I don&#8217;t enjoy is the expectation for me to give away my free time to my employer for no reward. I don&#8217;t get extra time off in lieu. I don&#8217;t get overtime pay. I don&#8217;t get ownership of the software. I don&#8217;t get to see the result of the extra effort I put in. I&#8217;m just expected to do it. In other situations I&#8217;d be happy to do it, but 999 times out of 1000, the situation isn&#8217;t right.</p>

<p>I&#8217;ve even worked for companies in the past who expect you to give up a lot of your personal time even if there isn&#8217;t anything critical that needs to be done. I was expected to write small applications and create other assets that the company could use in future projects. At first this seemed like it could be fun. But the cold hard reality was that all of the effort was totally wasted, because none of the things that were created ever got used.</p>

<p>As a contractor, the view from the perspective of the client is different, especially if you&#8217;re on an hourly rate. Everything boils down to a financial cost. You&#8217;re more likely to get a fair deal as a contractor than you are as a permy (at least here in the Brisbane market) because you&#8217;re entitled to make them pay for the time and effort you put in.</p>

<p><a href="http://buffered.io/uploads/2010/03/cartoon_farcus.gif" title="Slave of the month" rel="lightbox[slave]"><img src="http://buffered.io/uploads/2010/03/cartoon_farcus.gif" alt="Slave of the month" title="Slave of the month" width="150" style="float: right; margin-bottom: 5px; margin-left: 5px;"/></a>I realise that this makes me sound rather mercenary. In all honesty, I&#8217;m not mercenary. I love technology. I love building software. I don&#8217;t go to work just so that I can get paid. In many ways I would work for less pay if the conditions were right. Unfortunately, I am yet to come across a job where those conditions are right. I&#8217;ve certainly given it a shot in the past. I took a substantial pay-cut to work for Electronic Arts back in 2005 so that I could work on something that I really wanted to work on. I thoroughly enjoyed it. As far as the technology and the challenges are concerned, it&#8217;s the most fun I&#8217;ve ever had at work. Unfortunately, the experience I had there led me to believe that the lifestyle isn&#8217;t sustainable (at least not for me and my family).</p>

<p>Would I do the same again for another job? Definitely. But the only company I would do it for would be <a href="http://basho.com/" title="Basho">Basho</a> and my <a href="http://erlang.org/" title="Erlang">Erlang-fu</a> is not yet up to scratch so I wouldn&#8217;t be considered. Outside of Basho I&#8217;m not aware of any other company or work that excites me as much. So for now I will probably remain a contractor, and try to move around and add as much value as I can on a variety of projects, keeping up to speed on many different types of technology.</p>

<p>So if you&#8217;re reading this, give me a few good reasons as to why permanent work is better than contract work. Why should I consider it? Would you consider it? If you&#8217;re a permy, are you looking to go contracting, and why?</p>

<p>Feedback and comments are appreciated :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Truncated Pages]]></title>
    <link href="http://buffered.io/posts/truncated-pages/"/>
    <updated>2010-02-05T21:42:00+10:00</updated>
    <id>http://buffered.io/posts/truncated-pages</id>
    <content type="html"><![CDATA[<p>Not too long ago I mentioned that I&#8217;d <a href="http://buffered.io/posts/now-running-nginx/" title="Now Running Nginx">setup and installed Nginx</a> on this server. All seemed well to start off with, then on certain occasions I started to notice that some pages were being served truncated while I was at work. I thought that the issue was work-related, as they have a fairly draconian security policy in place and I thought that it had something to do with severing the connection.</p>

<p>This assumption was proved false a few days ago when I received an email about my <a href="http://buffered.io/posts/setting-up-trac-mercurial-and-ssh-on-windows/">Trac/Mercurial/SSH</a> post not rendering properly in someone else&#8217;s browser. Dammit!</p>

<p>So this time I actually did a bit of research by delving into the log files (yes, I know.. genius isn&#8217;t it!) and determined that there was indeed a problem. Thankfully it was fairly simple to resolve. For some reason the <em>fastcgi</em> instances were failing to function periodically when attempting to access a folder on disk. In short, some of the temp folders were owned by the right user, and some of them weren&#8217;t. After modifying the ownership of the appropriate folders, everything seems to be running nicely.</p>

<p>Yet more proof that <a href="http://buffered.io/posts/the-admin-is-an-idiot/" title="The Admin is an Idiot">the admin is an idiot</a>.</p>

<p>If after I post this you notice any truncation at all across the site, please let me know! Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Wrong Decision by the Wrong Person]]></title>
    <link href="http://buffered.io/posts/the-wrong-decision-by-the-wrong-person/"/>
    <updated>2010-01-28T22:35:00+10:00</updated>
    <id>http://buffered.io/posts/the-wrong-decision-by-the-wrong-person</id>
    <content type="html"><![CDATA[<p><a href="http://buffered.io/uploads/2010/01/pizza.jpg" title="The wrong tool." rel="lightbox"><img src="http://buffered.io/uploads/2010/01/pizza.jpg" alt="The wrong tool." title="The wrong tool." style="float:right; margin-left:5px; margin-bottom:5px;"  width="150"/></a>There is one thing about my industry that I still find truly amazing (and not in a good way). This is despite the fact that it has happened to me so many times that you think I&#8217;d be used to it! I&#8217;m talking about non-technical people making technical decisions.</p>

<p>For some reason, it&#8217;s a very common practice for those people who don&#8217;t have expertise in a certain field to make decisions for people working in that field. The best example I can think of off the top of my head is the answer to the question: <em>&#8220;Which technology should we use?&#8221;</em></p>

<p>Let me take a step back in time for a moment.</p>

<!--more-->


<p>I applied for a job with a certain company (which shall remain nameless) that was looking for a number of C#/.NET developers of a certain level of experience. After confirming an interview date and time, I turned up to find myself facing a panel of 3 interviewers. One of those people held a technical position, though I found out later that the position he held was self-appointed and certainly not an indication of the person&#8217;s level of technical knowledge or expertise. The other two were in non-technical positions.</p>

<p>During the interview we had the usual discussions and questions around technial knowledge, depth of understanding of certain areas of the .NET framework, views and approaches to dealing with people in teams, agile experience, etc. It all went very well. At the end of the interview I was given my chance to ask a few questions. The main one I wanted to ask was <em>&#8220;Why did you decide to use .NET for this project?&#8221;</em></p>

<p>For the record, the <em>previous</em> version of the system was written using an older Microsoft technology stack. The decision had been made to go with .NET for this new version. Can you see the correlation?</p>

<p>The answer was quite stunning. The only reason the project was using .NET was because the previous version was a Microsoft-based solution.</p>

<p>The first thing I thought was &#8220;surely that can&#8217;t be it?&#8221;. As a matter of fact, that wasn&#8217;t the <em>only</em> reason for it, but it was the <em>main</em> reason. The decision wasn&#8217;t made by a technical person, it was made by someone in upper management.</p>

<p>Scary huh!?</p>

<p>In my personal opinion, there is one particular technology that I think would have done a much better job of solving this particular problem, and it&#8217;s not a Microsoft solution. It&#8217;s not a Sun solution, or any other mainstream option for that matter. In my view, <strong>Erlang</strong> would have been perfect.</p>

<p>I don&#8217;t think that a company like that would have ever even considered Erlang as a viable option. Mainly for two reasons. The first is that the amount of skilled Erlang developers available on the East Coast of Australia is extremely small. The second is fear of the unknown/non-mainstream tech. That is, companies like to go with what other companies are going with.</p>

<p>The crazy thing about this scenario is that management go to market to hire people who are domain experts, and then proceed to tell them which technologies to use. Surely you would be better off hiring people to know how to solve problem X really well, and then listen to what they have to say about the technology stack that should be put in place? No, not in this industry. Probably not in my lifetime either!</p>

<p>So if you&#8217;re a non-tech person leading a team of techies, please PLEASE listen to what they have to say. Ask them what they think is the right approach and the right toolset. Don&#8217;t take control of the technical decisions. Let them do what you hired them to do: Solve the problem, and use the right tool for the job. If they don&#8217;t know the answer, or the answer is always the same, then you&#8217;ve got the wrong developers.</p>

<p>Thanks for listening :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Katacast: Shopping Checkout in Erlang]]></title>
    <link href="http://buffered.io/posts/katacast-shopping-checkout-in-erlang/"/>
    <updated>2010-01-04T17:47:00+10:00</updated>
    <id>http://buffered.io/posts/katacast-shopping-checkout-in-erlang</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently discovered the joys of <a href="http://codekata.pragprog.com/" title="CodeKata">CodeKatas</a>. If you&#8217;re a geek looking for a way to <a href="http://en.wikipedia.org/wiki/The_Seven_Habits_of_Highly_Effective_People" title="The Seven Habits of Highly Effective People">sharpen the saw</a> then I highly recommend taking a look at these and trying a few out. They&#8217;re great fun and they&#8217;re a good way of getting your feet wet with new languages (especially if you&#8217;re tired of <a href="http://projecteuler.net/" title="Project Euler">Project Euler</a>).</p>

<!--more-->


<p>I can thank <a href="http://twitter.com/gabriellelana" title="Gabrielle Lana on Twitter">Gabrielle Lana</a> for this discovery, as it was <a href="http://www.vimeo.com/8206748" title="String Calculator in Erlang">his attempt at one of the katas</a> that got me into it. He&#8217;s also the reason I looked into <a href="http://www.katacasts.com/" title="Katacasts">Katacasts</a>, which are simply screencasted recordings of people attempting to solve Code Katas.</p>

<p>This post is about my first Katacast, capturing my attempt at <a href="http://codekata.pragprog.com/2007/01/kata_nine_back_.html" title="Checkout">Code Kata #9</a> using <a href="http://erlang.org/" title="Erlang">Erlang</a> and <a href="http://www.vim.org/" title="VIM">VIM</a> with <a href="http://rake.rubyforge.org/" title="Ruby Make">Rake</a> as my build system. I&#8217;ve put the video up on <a href="http://vimeo.com/8513414" title="Katacast for Codekata #9 by OJ Reeves">Vimeo</a> for the world to see/share. It&#8217;s also embedded below for your convenience.</p>

<p>Before watching, I&#8217;d like to point out a few things about the video, and things that I have learned from the experience:</p>

<ul>
<li>I captured the video on my Linux Mint install. For some reason, capturing quality video in Linux is proving to be a bit of a pain for me. As a result, the video quality isn&#8217;t that great. This partly due to the compression of the video, and partly due to the software failing to pick up some screen updates.</li>
<li>I tried really hard to add a backing sound-track but all of my efforts failed in one way or another. If I did manage to get one to work it was either WAY too big (ie. > 1GB in size) or the quality was absolutely terrible.</li>
<li>There were points during the process where I had to alt-tab out to a browser to do a bit of research on something that I didn&#8217;t know (such as an Erlang syntax quirk). This resulted in a few points where I don&#8217;t appear to be doing anything. In future, I&#8217;ll remember to hit pause on the recording when this happens.</li>
<li>I captured it in a non-standard resolution. I&#8217;m not sure if that&#8217;s going to make it look bad or not. Feedback here is appreciated. I think in future I&#8217;ll capture at a 800x600 resolution.</li>
<li>This video is best viewed in full-screen mode.</li>
</ul>


<p>So please excuse the lack of quality in this first Katacast. I&#8217;ll be sure to improve when I next create one. That being said, on with the show!</p>

<div style="text-align: center"><iframe src="http://player.vimeo.com/video/8513414" width="400" height="335" frameborder="0"></iframe><p><a href="http://vimeo.com/8513414">Katacast for Codekata #9</a> from <a href="http://vimeo.com/thecolonial">OJ Reeves</a> on <a href="http://vimeo.com">Vimeo</a>.</p></div>


<p>As always, feedback/criticism/etc is greatly appreciated. I&#8217;d love to hear what you guys do and use to capture and edit your screencasts, particularly in Linux.</p>
]]></content>
  </entry>
  
</feed>
